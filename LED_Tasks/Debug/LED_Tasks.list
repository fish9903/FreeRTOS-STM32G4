
LED_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050c4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  080052a4  080052a4  000152a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005420  08005420  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08005420  08005420  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005420  08005420  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005420  08005420  00015420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005424  08005424  00015424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005428  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014410  20000014  0800543c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20014424  0800543c  00024424  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012f5b  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002bed  00000000  00000000  00032fe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001348  00000000  00000000  00035bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ed1  00000000  00000000  00036f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027cfe  00000000  00000000  00037de9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015011  00000000  00000000  0005fae7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001022cb  00000000  00000000  00074af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000050a0  00000000  00000000  00176dc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a1  00000000  00000000  0017be64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000014 	.word	0x20000014
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800528c 	.word	0x0800528c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000018 	.word	0x20000018
 800021c:	0800528c 	.word	0x0800528c

08000220 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000220:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000222:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000226:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002b0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800022a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800022e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000232:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000234:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000236:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000238:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800023a:	d332      	bcc.n	80002a2 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800023c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800023e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000240:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000242:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000244:	d314      	bcc.n	8000270 <_CheckCase2>

08000246 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000246:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000248:	19d0      	adds	r0, r2, r7
 800024a:	bf00      	nop

0800024c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800024c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000250:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000254:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000256:	d005      	beq.n	8000264 <_CSDone>
        LDRB     R3,[R1], #+1
 8000258:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000260:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000262:	d1f3      	bne.n	800024c <_LoopCopyStraight>

08000264 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000264:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000268:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800026a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800026e:	4770      	bx	lr

08000270 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000270:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000272:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000274:	d319      	bcc.n	80002aa <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000276:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000278:	1b12      	subs	r2, r2, r4

0800027a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800027e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000282:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000286:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000288:	d005      	beq.n	8000296 <_No2ChunkNeeded>

0800028a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800028a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800028e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000292:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000294:	d1f9      	bne.n	800028a <_LoopCopyAfterWrapAround>

08000296 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000296:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800029a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800029c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800029e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80002a0:	4770      	bx	lr

080002a2 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80002a2:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80002a4:	3801      	subs	r0, #1
        CMP      R0,R2
 80002a6:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80002a8:	d2cd      	bcs.n	8000246 <_Case4>

080002aa <_Case3>:
_Case3:
        MOVS     R0,#+0
 80002aa:	2000      	movs	r0, #0
        POP      {R4-R7}
 80002ac:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80002ae:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002b0:	20012e50 	.word	0x20012e50

080002b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b08a      	sub	sp, #40	; 0x28
 80002b8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002ba:	f000 fa8e 	bl	80007da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002be:	f000 f86b 	bl	8000398 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002c2:	f000 f8b5 	bl	8000430 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  // Enable the cycle counter
  DWT_CTRL |= ( 1 << 0 );
 80002c6:	4b2d      	ldr	r3, [pc, #180]	; (800037c <main+0xc8>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	4a2c      	ldr	r2, [pc, #176]	; (800037c <main+0xc8>)
 80002cc:	f043 0301 	orr.w	r3, r3, #1
 80002d0:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 80002d2:	f003 f85f 	bl	8003394 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 80002d6:	f004 fa1f 	bl	8004718 <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(led_green_handler, "LED_green_task", 200, NULL, 2, &task1_handle);
 80002da:	f107 030c 	add.w	r3, r7, #12
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	2302      	movs	r3, #2
 80002e2:	9300      	str	r3, [sp, #0]
 80002e4:	2300      	movs	r3, #0
 80002e6:	22c8      	movs	r2, #200	; 0xc8
 80002e8:	4925      	ldr	r1, [pc, #148]	; (8000380 <main+0xcc>)
 80002ea:	4826      	ldr	r0, [pc, #152]	; (8000384 <main+0xd0>)
 80002ec:	f001 ff5b 	bl	80021a6 <xTaskCreate>
 80002f0:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 80002f2:	69fb      	ldr	r3, [r7, #28]
 80002f4:	2b01      	cmp	r3, #1
 80002f6:	d00a      	beq.n	800030e <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80002f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80002fc:	f383 8811 	msr	BASEPRI, r3
 8000300:	f3bf 8f6f 	isb	sy
 8000304:	f3bf 8f4f 	dsb	sy
 8000308:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800030a:	bf00      	nop
 800030c:	e7fe      	b.n	800030c <main+0x58>

  status = xTaskCreate(led_red_handler, "LED_red_task", 200, NULL, 2, &task2_handle);
 800030e:	f107 0308 	add.w	r3, r7, #8
 8000312:	9301      	str	r3, [sp, #4]
 8000314:	2302      	movs	r3, #2
 8000316:	9300      	str	r3, [sp, #0]
 8000318:	2300      	movs	r3, #0
 800031a:	22c8      	movs	r2, #200	; 0xc8
 800031c:	491a      	ldr	r1, [pc, #104]	; (8000388 <main+0xd4>)
 800031e:	481b      	ldr	r0, [pc, #108]	; (800038c <main+0xd8>)
 8000320:	f001 ff41 	bl	80021a6 <xTaskCreate>
 8000324:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 8000326:	69fb      	ldr	r3, [r7, #28]
 8000328:	2b01      	cmp	r3, #1
 800032a:	d00a      	beq.n	8000342 <main+0x8e>
        __asm volatile
 800032c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000330:	f383 8811 	msr	BASEPRI, r3
 8000334:	f3bf 8f6f 	isb	sy
 8000338:	f3bf 8f4f 	dsb	sy
 800033c:	617b      	str	r3, [r7, #20]
    }
 800033e:	bf00      	nop
 8000340:	e7fe      	b.n	8000340 <main+0x8c>

  status = xTaskCreate(led_orange_handler, "LED_orange_task", 200, NULL, 2, &task3_handle);
 8000342:	1d3b      	adds	r3, r7, #4
 8000344:	9301      	str	r3, [sp, #4]
 8000346:	2302      	movs	r3, #2
 8000348:	9300      	str	r3, [sp, #0]
 800034a:	2300      	movs	r3, #0
 800034c:	22c8      	movs	r2, #200	; 0xc8
 800034e:	4910      	ldr	r1, [pc, #64]	; (8000390 <main+0xdc>)
 8000350:	4810      	ldr	r0, [pc, #64]	; (8000394 <main+0xe0>)
 8000352:	f001 ff28 	bl	80021a6 <xTaskCreate>
 8000356:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 8000358:	69fb      	ldr	r3, [r7, #28]
 800035a:	2b01      	cmp	r3, #1
 800035c:	d00a      	beq.n	8000374 <main+0xc0>
        __asm volatile
 800035e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000362:	f383 8811 	msr	BASEPRI, r3
 8000366:	f3bf 8f6f 	isb	sy
 800036a:	f3bf 8f4f 	dsb	sy
 800036e:	613b      	str	r3, [r7, #16]
    }
 8000370:	bf00      	nop
 8000372:	e7fe      	b.n	8000372 <main+0xbe>

  // start the freeRTOS scheduler
  vTaskStartScheduler();
 8000374:	f002 f86c 	bl	8002450 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000378:	e7fe      	b.n	8000378 <main+0xc4>
 800037a:	bf00      	nop
 800037c:	e0001000 	.word	0xe0001000
 8000380:	080052a4 	.word	0x080052a4
 8000384:	08000531 	.word	0x08000531
 8000388:	080052b4 	.word	0x080052b4
 800038c:	08000561 	.word	0x08000561
 8000390:	080052c4 	.word	0x080052c4
 8000394:	08000591 	.word	0x08000591

08000398 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b094      	sub	sp, #80	; 0x50
 800039c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800039e:	f107 0318 	add.w	r3, r7, #24
 80003a2:	2238      	movs	r2, #56	; 0x38
 80003a4:	2100      	movs	r1, #0
 80003a6:	4618      	mov	r0, r3
 80003a8:	f004 ff36 	bl	8005218 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003ac:	1d3b      	adds	r3, r7, #4
 80003ae:	2200      	movs	r2, #0
 80003b0:	601a      	str	r2, [r3, #0]
 80003b2:	605a      	str	r2, [r3, #4]
 80003b4:	609a      	str	r2, [r3, #8]
 80003b6:	60da      	str	r2, [r3, #12]
 80003b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80003ba:	2000      	movs	r0, #0
 80003bc:	f000 fd04 	bl	8000dc8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003c0:	2302      	movs	r3, #2
 80003c2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003ca:	2340      	movs	r3, #64	; 0x40
 80003cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003ce:	2302      	movs	r3, #2
 80003d0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003d2:	2302      	movs	r3, #2
 80003d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80003d6:	2304      	movs	r3, #4
 80003d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80003da:	2355      	movs	r3, #85	; 0x55
 80003dc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80003de:	2302      	movs	r3, #2
 80003e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80003e2:	2302      	movs	r3, #2
 80003e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80003e6:	2302      	movs	r3, #2
 80003e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ea:	f107 0318 	add.w	r3, r7, #24
 80003ee:	4618      	mov	r0, r3
 80003f0:	f000 fd9e 	bl	8000f30 <HAL_RCC_OscConfig>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <SystemClock_Config+0x66>
  {
    Error_Handler();
 80003fa:	f000 f8f3 	bl	80005e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003fe:	230f      	movs	r3, #15
 8000400:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000402:	2303      	movs	r3, #3
 8000404:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000406:	2300      	movs	r3, #0
 8000408:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800040a:	2300      	movs	r3, #0
 800040c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800040e:	2300      	movs	r3, #0
 8000410:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000412:	1d3b      	adds	r3, r7, #4
 8000414:	2104      	movs	r1, #4
 8000416:	4618      	mov	r0, r3
 8000418:	f001 f8a2 	bl	8001560 <HAL_RCC_ClockConfig>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000422:	f000 f8df 	bl	80005e4 <Error_Handler>
  }
}
 8000426:	bf00      	nop
 8000428:	3750      	adds	r7, #80	; 0x50
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
	...

08000430 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b08a      	sub	sp, #40	; 0x28
 8000434:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000436:	f107 0314 	add.w	r3, r7, #20
 800043a:	2200      	movs	r2, #0
 800043c:	601a      	str	r2, [r3, #0]
 800043e:	605a      	str	r2, [r3, #4]
 8000440:	609a      	str	r2, [r3, #8]
 8000442:	60da      	str	r2, [r3, #12]
 8000444:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000446:	4b38      	ldr	r3, [pc, #224]	; (8000528 <MX_GPIO_Init+0xf8>)
 8000448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800044a:	4a37      	ldr	r2, [pc, #220]	; (8000528 <MX_GPIO_Init+0xf8>)
 800044c:	f043 0304 	orr.w	r3, r3, #4
 8000450:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000452:	4b35      	ldr	r3, [pc, #212]	; (8000528 <MX_GPIO_Init+0xf8>)
 8000454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000456:	f003 0304 	and.w	r3, r3, #4
 800045a:	613b      	str	r3, [r7, #16]
 800045c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800045e:	4b32      	ldr	r3, [pc, #200]	; (8000528 <MX_GPIO_Init+0xf8>)
 8000460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000462:	4a31      	ldr	r2, [pc, #196]	; (8000528 <MX_GPIO_Init+0xf8>)
 8000464:	f043 0320 	orr.w	r3, r3, #32
 8000468:	64d3      	str	r3, [r2, #76]	; 0x4c
 800046a:	4b2f      	ldr	r3, [pc, #188]	; (8000528 <MX_GPIO_Init+0xf8>)
 800046c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800046e:	f003 0320 	and.w	r3, r3, #32
 8000472:	60fb      	str	r3, [r7, #12]
 8000474:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000476:	4b2c      	ldr	r3, [pc, #176]	; (8000528 <MX_GPIO_Init+0xf8>)
 8000478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800047a:	4a2b      	ldr	r2, [pc, #172]	; (8000528 <MX_GPIO_Init+0xf8>)
 800047c:	f043 0301 	orr.w	r3, r3, #1
 8000480:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000482:	4b29      	ldr	r3, [pc, #164]	; (8000528 <MX_GPIO_Init+0xf8>)
 8000484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000486:	f003 0301 	and.w	r3, r3, #1
 800048a:	60bb      	str	r3, [r7, #8]
 800048c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800048e:	4b26      	ldr	r3, [pc, #152]	; (8000528 <MX_GPIO_Init+0xf8>)
 8000490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000492:	4a25      	ldr	r2, [pc, #148]	; (8000528 <MX_GPIO_Init+0xf8>)
 8000494:	f043 0302 	orr.w	r3, r3, #2
 8000498:	64d3      	str	r3, [r2, #76]	; 0x4c
 800049a:	4b23      	ldr	r3, [pc, #140]	; (8000528 <MX_GPIO_Init+0xf8>)
 800049c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800049e:	f003 0302 	and.w	r3, r3, #2
 80004a2:	607b      	str	r3, [r7, #4]
 80004a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80004a6:	2200      	movs	r2, #0
 80004a8:	2120      	movs	r1, #32
 80004aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004ae:	f000 fc4f 	bl	8000d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004b8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80004bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004be:	2300      	movs	r3, #0
 80004c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004c2:	f107 0314 	add.w	r3, r7, #20
 80004c6:	4619      	mov	r1, r3
 80004c8:	4818      	ldr	r0, [pc, #96]	; (800052c <MX_GPIO_Init+0xfc>)
 80004ca:	f000 fabf 	bl	8000a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : LPUART1_TX_Pin LPUART1_RX_Pin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80004ce:	230c      	movs	r3, #12
 80004d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004d2:	2302      	movs	r3, #2
 80004d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d6:	2300      	movs	r3, #0
 80004d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004da:	2300      	movs	r3, #0
 80004dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80004de:	230c      	movs	r3, #12
 80004e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e2:	f107 0314 	add.w	r3, r7, #20
 80004e6:	4619      	mov	r1, r3
 80004e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004ec:	f000 faae 	bl	8000a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80004f0:	2320      	movs	r3, #32
 80004f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004f4:	2301      	movs	r3, #1
 80004f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f8:	2300      	movs	r3, #0
 80004fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004fc:	2300      	movs	r3, #0
 80004fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000500:	f107 0314 	add.w	r3, r7, #20
 8000504:	4619      	mov	r1, r3
 8000506:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800050a:	f000 fa9f 	bl	8000a4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800050e:	2200      	movs	r2, #0
 8000510:	2100      	movs	r1, #0
 8000512:	2028      	movs	r0, #40	; 0x28
 8000514:	f000 fa72 	bl	80009fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000518:	2028      	movs	r0, #40	; 0x28
 800051a:	f000 fa89 	bl	8000a30 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800051e:	bf00      	nop
 8000520:	3728      	adds	r7, #40	; 0x28
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	40021000 	.word	0x40021000
 800052c:	48000800 	.word	0x48000800

08000530 <led_green_handler>:

/* USER CODE BEGIN 4 */
static void led_green_handler(void* parameters)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000538:	4807      	ldr	r0, [pc, #28]	; (8000558 <led_green_handler+0x28>)
 800053a:	f004 fded 	bl	8005118 <SEGGER_SYSVIEW_PrintfTarget>
		//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
		HAL_Delay(1); // consumes the CPU --> continuous task <--> periodic task, Aperidoic task
 800053e:	2001      	movs	r0, #1
 8000540:	f000 f982 	bl	8000848 <HAL_Delay>
		taskYIELD();
 8000544:	4b05      	ldr	r3, [pc, #20]	; (800055c <led_green_handler+0x2c>)
 8000546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	f3bf 8f4f 	dsb	sy
 8000550:	f3bf 8f6f 	isb	sy
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000554:	e7f0      	b.n	8000538 <led_green_handler+0x8>
 8000556:	bf00      	nop
 8000558:	080052d4 	.word	0x080052d4
 800055c:	e000ed04 	.word	0xe000ed04

08000560 <led_red_handler>:
	}
}

static void led_red_handler(void* parameters)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000568:	4807      	ldr	r0, [pc, #28]	; (8000588 <led_red_handler+0x28>)
 800056a:	f004 fdd5 	bl	8005118 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_Delay(1);
 800056e:	2001      	movs	r0, #1
 8000570:	f000 f96a 	bl	8000848 <HAL_Delay>
		taskYIELD();
 8000574:	4b05      	ldr	r3, [pc, #20]	; (800058c <led_red_handler+0x2c>)
 8000576:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	f3bf 8f4f 	dsb	sy
 8000580:	f3bf 8f6f 	isb	sy
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000584:	e7f0      	b.n	8000568 <led_red_handler+0x8>
 8000586:	bf00      	nop
 8000588:	080052e8 	.word	0x080052e8
 800058c:	e000ed04 	.word	0xe000ed04

08000590 <led_orange_handler>:
	}
}

static void led_orange_handler(void* parameters)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000598:	4807      	ldr	r0, [pc, #28]	; (80005b8 <led_orange_handler+0x28>)
 800059a:	f004 fdbd 	bl	8005118 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_Delay(1);
 800059e:	2001      	movs	r0, #1
 80005a0:	f000 f952 	bl	8000848 <HAL_Delay>
		taskYIELD();
 80005a4:	4b05      	ldr	r3, [pc, #20]	; (80005bc <led_orange_handler+0x2c>)
 80005a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	f3bf 8f4f 	dsb	sy
 80005b0:	f3bf 8f6f 	isb	sy
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 80005b4:	e7f0      	b.n	8000598 <led_orange_handler+0x8>
 80005b6:	bf00      	nop
 80005b8:	080052fc 	.word	0x080052fc
 80005bc:	e000ed04 	.word	0xe000ed04

080005c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a04      	ldr	r2, [pc, #16]	; (80005e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005ce:	4293      	cmp	r3, r2
 80005d0:	d101      	bne.n	80005d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80005d2:	f000 f91b 	bl	800080c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40001000 	.word	0x40001000

080005e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005e8:	b672      	cpsid	i
}
 80005ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005ec:	e7fe      	b.n	80005ec <Error_Handler+0x8>
	...

080005f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005f6:	4b10      	ldr	r3, [pc, #64]	; (8000638 <HAL_MspInit+0x48>)
 80005f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005fa:	4a0f      	ldr	r2, [pc, #60]	; (8000638 <HAL_MspInit+0x48>)
 80005fc:	f043 0301 	orr.w	r3, r3, #1
 8000600:	6613      	str	r3, [r2, #96]	; 0x60
 8000602:	4b0d      	ldr	r3, [pc, #52]	; (8000638 <HAL_MspInit+0x48>)
 8000604:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000606:	f003 0301 	and.w	r3, r3, #1
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800060e:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <HAL_MspInit+0x48>)
 8000610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000612:	4a09      	ldr	r2, [pc, #36]	; (8000638 <HAL_MspInit+0x48>)
 8000614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000618:	6593      	str	r3, [r2, #88]	; 0x58
 800061a:	4b07      	ldr	r3, [pc, #28]	; (8000638 <HAL_MspInit+0x48>)
 800061c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800061e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000622:	603b      	str	r3, [r7, #0]
 8000624:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000626:	f000 fc73 	bl	8000f10 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 800062a:	f002 fafd 	bl	8002c28 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 800062e:	bf00      	nop
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40021000 	.word	0x40021000

0800063c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b08c      	sub	sp, #48	; 0x30
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000644:	2300      	movs	r3, #0
 8000646:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8000648:	2300      	movs	r3, #0
 800064a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800064c:	4b2c      	ldr	r3, [pc, #176]	; (8000700 <HAL_InitTick+0xc4>)
 800064e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000650:	4a2b      	ldr	r2, [pc, #172]	; (8000700 <HAL_InitTick+0xc4>)
 8000652:	f043 0310 	orr.w	r3, r3, #16
 8000656:	6593      	str	r3, [r2, #88]	; 0x58
 8000658:	4b29      	ldr	r3, [pc, #164]	; (8000700 <HAL_InitTick+0xc4>)
 800065a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800065c:	f003 0310 	and.w	r3, r3, #16
 8000660:	60bb      	str	r3, [r7, #8]
 8000662:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000664:	f107 020c 	add.w	r2, r7, #12
 8000668:	f107 0310 	add.w	r3, r7, #16
 800066c:	4611      	mov	r1, r2
 800066e:	4618      	mov	r0, r3
 8000670:	f001 f936 	bl	80018e0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000674:	f001 f91e 	bl	80018b4 <HAL_RCC_GetPCLK1Freq>
 8000678:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800067a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800067c:	4a21      	ldr	r2, [pc, #132]	; (8000704 <HAL_InitTick+0xc8>)
 800067e:	fba2 2303 	umull	r2, r3, r2, r3
 8000682:	0c9b      	lsrs	r3, r3, #18
 8000684:	3b01      	subs	r3, #1
 8000686:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000688:	4b1f      	ldr	r3, [pc, #124]	; (8000708 <HAL_InitTick+0xcc>)
 800068a:	4a20      	ldr	r2, [pc, #128]	; (800070c <HAL_InitTick+0xd0>)
 800068c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800068e:	4b1e      	ldr	r3, [pc, #120]	; (8000708 <HAL_InitTick+0xcc>)
 8000690:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000694:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000696:	4a1c      	ldr	r2, [pc, #112]	; (8000708 <HAL_InitTick+0xcc>)
 8000698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800069a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800069c:	4b1a      	ldr	r3, [pc, #104]	; (8000708 <HAL_InitTick+0xcc>)
 800069e:	2200      	movs	r2, #0
 80006a0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006a2:	4b19      	ldr	r3, [pc, #100]	; (8000708 <HAL_InitTick+0xcc>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80006a8:	4817      	ldr	r0, [pc, #92]	; (8000708 <HAL_InitTick+0xcc>)
 80006aa:	f001 f991 	bl	80019d0 <HAL_TIM_Base_Init>
 80006ae:	4603      	mov	r3, r0
 80006b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80006b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d11b      	bne.n	80006f4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80006bc:	4812      	ldr	r0, [pc, #72]	; (8000708 <HAL_InitTick+0xcc>)
 80006be:	f001 f9e9 	bl	8001a94 <HAL_TIM_Base_Start_IT>
 80006c2:	4603      	mov	r3, r0
 80006c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80006c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d111      	bne.n	80006f4 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80006d0:	2036      	movs	r0, #54	; 0x36
 80006d2:	f000 f9ad 	bl	8000a30 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2b0f      	cmp	r3, #15
 80006da:	d808      	bhi.n	80006ee <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80006dc:	2200      	movs	r2, #0
 80006de:	6879      	ldr	r1, [r7, #4]
 80006e0:	2036      	movs	r0, #54	; 0x36
 80006e2:	f000 f98b 	bl	80009fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006e6:	4a0a      	ldr	r2, [pc, #40]	; (8000710 <HAL_InitTick+0xd4>)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	6013      	str	r3, [r2, #0]
 80006ec:	e002      	b.n	80006f4 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80006ee:	2301      	movs	r3, #1
 80006f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80006f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	3730      	adds	r7, #48	; 0x30
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40021000 	.word	0x40021000
 8000704:	431bde83 	.word	0x431bde83
 8000708:	20000030 	.word	0x20000030
 800070c:	40001000 	.word	0x40001000
 8000710:	20000004 	.word	0x20000004

08000714 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000718:	e7fe      	b.n	8000718 <NMI_Handler+0x4>

0800071a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800071a:	b480      	push	{r7}
 800071c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800071e:	e7fe      	b.n	800071e <HardFault_Handler+0x4>

08000720 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000724:	e7fe      	b.n	8000724 <MemManage_Handler+0x4>

08000726 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000726:	b480      	push	{r7}
 8000728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800072a:	e7fe      	b.n	800072a <BusFault_Handler+0x4>

0800072c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000730:	e7fe      	b.n	8000730 <UsageFault_Handler+0x4>

08000732 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000732:	b480      	push	{r7}
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000736:	bf00      	nop
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr

08000740 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000744:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000748:	f000 fb1a 	bl	8000d80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}

08000750 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000754:	4802      	ldr	r0, [pc, #8]	; (8000760 <TIM6_DAC_IRQHandler+0x10>)
 8000756:	f001 fa15 	bl	8001b84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20000030 	.word	0x20000030

08000764 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000768:	4b06      	ldr	r3, [pc, #24]	; (8000784 <SystemInit+0x20>)
 800076a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800076e:	4a05      	ldr	r2, [pc, #20]	; (8000784 <SystemInit+0x20>)
 8000770:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000774:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000778:	bf00      	nop
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	e000ed00 	.word	0xe000ed00

08000788 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000788:	480d      	ldr	r0, [pc, #52]	; (80007c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800078a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800078c:	480d      	ldr	r0, [pc, #52]	; (80007c4 <LoopForever+0x6>)
  ldr r1, =_edata
 800078e:	490e      	ldr	r1, [pc, #56]	; (80007c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000790:	4a0e      	ldr	r2, [pc, #56]	; (80007cc <LoopForever+0xe>)
  movs r3, #0
 8000792:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000794:	e002      	b.n	800079c <LoopCopyDataInit>

08000796 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000796:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000798:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800079a:	3304      	adds	r3, #4

0800079c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800079c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800079e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007a0:	d3f9      	bcc.n	8000796 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007a2:	4a0b      	ldr	r2, [pc, #44]	; (80007d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007a4:	4c0b      	ldr	r4, [pc, #44]	; (80007d4 <LoopForever+0x16>)
  movs r3, #0
 80007a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007a8:	e001      	b.n	80007ae <LoopFillZerobss>

080007aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007ac:	3204      	adds	r2, #4

080007ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007b0:	d3fb      	bcc.n	80007aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007b2:	f7ff ffd7 	bl	8000764 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007b6:	f004 fd37 	bl	8005228 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007ba:	f7ff fd7b 	bl	80002b4 <main>

080007be <LoopForever>:

LoopForever:
    b LoopForever
 80007be:	e7fe      	b.n	80007be <LoopForever>
  ldr   r0, =_estack
 80007c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007c8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80007cc:	08005428 	.word	0x08005428
  ldr r2, =_sbss
 80007d0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80007d4:	20014424 	.word	0x20014424

080007d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007d8:	e7fe      	b.n	80007d8 <ADC1_2_IRQHandler>

080007da <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007da:	b580      	push	{r7, lr}
 80007dc:	b082      	sub	sp, #8
 80007de:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007e0:	2300      	movs	r3, #0
 80007e2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007e4:	2003      	movs	r0, #3
 80007e6:	f000 f8fe 	bl	80009e6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007ea:	200f      	movs	r0, #15
 80007ec:	f7ff ff26 	bl	800063c <HAL_InitTick>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d002      	beq.n	80007fc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80007f6:	2301      	movs	r3, #1
 80007f8:	71fb      	strb	r3, [r7, #7]
 80007fa:	e001      	b.n	8000800 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80007fc:	f7ff fef8 	bl	80005f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000800:	79fb      	ldrb	r3, [r7, #7]

}
 8000802:	4618      	mov	r0, r3
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
	...

0800080c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000810:	4b05      	ldr	r3, [pc, #20]	; (8000828 <HAL_IncTick+0x1c>)
 8000812:	681a      	ldr	r2, [r3, #0]
 8000814:	4b05      	ldr	r3, [pc, #20]	; (800082c <HAL_IncTick+0x20>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4413      	add	r3, r2
 800081a:	4a03      	ldr	r2, [pc, #12]	; (8000828 <HAL_IncTick+0x1c>)
 800081c:	6013      	str	r3, [r2, #0]
}
 800081e:	bf00      	nop
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr
 8000828:	2000007c 	.word	0x2000007c
 800082c:	20000008 	.word	0x20000008

08000830 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  return uwTick;
 8000834:	4b03      	ldr	r3, [pc, #12]	; (8000844 <HAL_GetTick+0x14>)
 8000836:	681b      	ldr	r3, [r3, #0]
}
 8000838:	4618      	mov	r0, r3
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	2000007c 	.word	0x2000007c

08000848 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000850:	f7ff ffee 	bl	8000830 <HAL_GetTick>
 8000854:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000860:	d004      	beq.n	800086c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <HAL_Delay+0x40>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	68fa      	ldr	r2, [r7, #12]
 8000868:	4413      	add	r3, r2
 800086a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800086c:	bf00      	nop
 800086e:	f7ff ffdf 	bl	8000830 <HAL_GetTick>
 8000872:	4602      	mov	r2, r0
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	1ad3      	subs	r3, r2, r3
 8000878:	68fa      	ldr	r2, [r7, #12]
 800087a:	429a      	cmp	r2, r3
 800087c:	d8f7      	bhi.n	800086e <HAL_Delay+0x26>
  {
  }
}
 800087e:	bf00      	nop
 8000880:	bf00      	nop
 8000882:	3710      	adds	r7, #16
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000008 	.word	0x20000008

0800088c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800088c:	b480      	push	{r7}
 800088e:	b085      	sub	sp, #20
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	f003 0307 	and.w	r3, r3, #7
 800089a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800089c:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <__NVIC_SetPriorityGrouping+0x44>)
 800089e:	68db      	ldr	r3, [r3, #12]
 80008a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008a2:	68ba      	ldr	r2, [r7, #8]
 80008a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008a8:	4013      	ands	r3, r2
 80008aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008be:	4a04      	ldr	r2, [pc, #16]	; (80008d0 <__NVIC_SetPriorityGrouping+0x44>)
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	60d3      	str	r3, [r2, #12]
}
 80008c4:	bf00      	nop
 80008c6:	3714      	adds	r7, #20
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr
 80008d0:	e000ed00 	.word	0xe000ed00

080008d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008d8:	4b04      	ldr	r3, [pc, #16]	; (80008ec <__NVIC_GetPriorityGrouping+0x18>)
 80008da:	68db      	ldr	r3, [r3, #12]
 80008dc:	0a1b      	lsrs	r3, r3, #8
 80008de:	f003 0307 	and.w	r3, r3, #7
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	e000ed00 	.word	0xe000ed00

080008f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	4603      	mov	r3, r0
 80008f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	db0b      	blt.n	800091a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000902:	79fb      	ldrb	r3, [r7, #7]
 8000904:	f003 021f 	and.w	r2, r3, #31
 8000908:	4907      	ldr	r1, [pc, #28]	; (8000928 <__NVIC_EnableIRQ+0x38>)
 800090a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090e:	095b      	lsrs	r3, r3, #5
 8000910:	2001      	movs	r0, #1
 8000912:	fa00 f202 	lsl.w	r2, r0, r2
 8000916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800091a:	bf00      	nop
 800091c:	370c      	adds	r7, #12
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	e000e100 	.word	0xe000e100

0800092c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	6039      	str	r1, [r7, #0]
 8000936:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093c:	2b00      	cmp	r3, #0
 800093e:	db0a      	blt.n	8000956 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	b2da      	uxtb	r2, r3
 8000944:	490c      	ldr	r1, [pc, #48]	; (8000978 <__NVIC_SetPriority+0x4c>)
 8000946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094a:	0112      	lsls	r2, r2, #4
 800094c:	b2d2      	uxtb	r2, r2
 800094e:	440b      	add	r3, r1
 8000950:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000954:	e00a      	b.n	800096c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	b2da      	uxtb	r2, r3
 800095a:	4908      	ldr	r1, [pc, #32]	; (800097c <__NVIC_SetPriority+0x50>)
 800095c:	79fb      	ldrb	r3, [r7, #7]
 800095e:	f003 030f 	and.w	r3, r3, #15
 8000962:	3b04      	subs	r3, #4
 8000964:	0112      	lsls	r2, r2, #4
 8000966:	b2d2      	uxtb	r2, r2
 8000968:	440b      	add	r3, r1
 800096a:	761a      	strb	r2, [r3, #24]
}
 800096c:	bf00      	nop
 800096e:	370c      	adds	r7, #12
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr
 8000978:	e000e100 	.word	0xe000e100
 800097c:	e000ed00 	.word	0xe000ed00

08000980 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000980:	b480      	push	{r7}
 8000982:	b089      	sub	sp, #36	; 0x24
 8000984:	af00      	add	r7, sp, #0
 8000986:	60f8      	str	r0, [r7, #12]
 8000988:	60b9      	str	r1, [r7, #8]
 800098a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	f003 0307 	and.w	r3, r3, #7
 8000992:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000994:	69fb      	ldr	r3, [r7, #28]
 8000996:	f1c3 0307 	rsb	r3, r3, #7
 800099a:	2b04      	cmp	r3, #4
 800099c:	bf28      	it	cs
 800099e:	2304      	movcs	r3, #4
 80009a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009a2:	69fb      	ldr	r3, [r7, #28]
 80009a4:	3304      	adds	r3, #4
 80009a6:	2b06      	cmp	r3, #6
 80009a8:	d902      	bls.n	80009b0 <NVIC_EncodePriority+0x30>
 80009aa:	69fb      	ldr	r3, [r7, #28]
 80009ac:	3b03      	subs	r3, #3
 80009ae:	e000      	b.n	80009b2 <NVIC_EncodePriority+0x32>
 80009b0:	2300      	movs	r3, #0
 80009b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b4:	f04f 32ff 	mov.w	r2, #4294967295
 80009b8:	69bb      	ldr	r3, [r7, #24]
 80009ba:	fa02 f303 	lsl.w	r3, r2, r3
 80009be:	43da      	mvns	r2, r3
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	401a      	ands	r2, r3
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009c8:	f04f 31ff 	mov.w	r1, #4294967295
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	fa01 f303 	lsl.w	r3, r1, r3
 80009d2:	43d9      	mvns	r1, r3
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d8:	4313      	orrs	r3, r2
         );
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3724      	adds	r7, #36	; 0x24
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr

080009e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e6:	b580      	push	{r7, lr}
 80009e8:	b082      	sub	sp, #8
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009ee:	6878      	ldr	r0, [r7, #4]
 80009f0:	f7ff ff4c 	bl	800088c <__NVIC_SetPriorityGrouping>
}
 80009f4:	bf00      	nop
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}

080009fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b086      	sub	sp, #24
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	60b9      	str	r1, [r7, #8]
 8000a06:	607a      	str	r2, [r7, #4]
 8000a08:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a0a:	f7ff ff63 	bl	80008d4 <__NVIC_GetPriorityGrouping>
 8000a0e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a10:	687a      	ldr	r2, [r7, #4]
 8000a12:	68b9      	ldr	r1, [r7, #8]
 8000a14:	6978      	ldr	r0, [r7, #20]
 8000a16:	f7ff ffb3 	bl	8000980 <NVIC_EncodePriority>
 8000a1a:	4602      	mov	r2, r0
 8000a1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a20:	4611      	mov	r1, r2
 8000a22:	4618      	mov	r0, r3
 8000a24:	f7ff ff82 	bl	800092c <__NVIC_SetPriority>
}
 8000a28:	bf00      	nop
 8000a2a:	3718      	adds	r7, #24
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}

08000a30 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f7ff ff56 	bl	80008f0 <__NVIC_EnableIRQ>
}
 8000a44:	bf00      	nop
 8000a46:	3708      	adds	r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b087      	sub	sp, #28
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000a56:	2300      	movs	r3, #0
 8000a58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000a5a:	e15a      	b.n	8000d12 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	2101      	movs	r1, #1
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	fa01 f303 	lsl.w	r3, r1, r3
 8000a68:	4013      	ands	r3, r2
 8000a6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	f000 814c 	beq.w	8000d0c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	f003 0303 	and.w	r3, r3, #3
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d005      	beq.n	8000a8c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a88:	2b02      	cmp	r3, #2
 8000a8a:	d130      	bne.n	8000aee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	689b      	ldr	r3, [r3, #8]
 8000a90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	005b      	lsls	r3, r3, #1
 8000a96:	2203      	movs	r2, #3
 8000a98:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9c:	43db      	mvns	r3, r3
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	68da      	ldr	r2, [r3, #12]
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab0:	693a      	ldr	r2, [r7, #16]
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	693a      	ldr	r2, [r7, #16]
 8000aba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aca:	43db      	mvns	r3, r3
 8000acc:	693a      	ldr	r2, [r7, #16]
 8000ace:	4013      	ands	r3, r2
 8000ad0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	091b      	lsrs	r3, r3, #4
 8000ad8:	f003 0201 	and.w	r2, r3, #1
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	f003 0303 	and.w	r3, r3, #3
 8000af6:	2b03      	cmp	r3, #3
 8000af8:	d017      	beq.n	8000b2a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	68db      	ldr	r3, [r3, #12]
 8000afe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	005b      	lsls	r3, r3, #1
 8000b04:	2203      	movs	r2, #3
 8000b06:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0a:	43db      	mvns	r3, r3
 8000b0c:	693a      	ldr	r2, [r7, #16]
 8000b0e:	4013      	ands	r3, r2
 8000b10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	689a      	ldr	r2, [r3, #8]
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	005b      	lsls	r3, r3, #1
 8000b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	4313      	orrs	r3, r2
 8000b22:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	f003 0303 	and.w	r3, r3, #3
 8000b32:	2b02      	cmp	r3, #2
 8000b34:	d123      	bne.n	8000b7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	08da      	lsrs	r2, r3, #3
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	3208      	adds	r2, #8
 8000b3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	f003 0307 	and.w	r3, r3, #7
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	220f      	movs	r2, #15
 8000b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b52:	43db      	mvns	r3, r3
 8000b54:	693a      	ldr	r2, [r7, #16]
 8000b56:	4013      	ands	r3, r2
 8000b58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	691a      	ldr	r2, [r3, #16]
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	f003 0307 	and.w	r3, r3, #7
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	08da      	lsrs	r2, r3, #3
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	3208      	adds	r2, #8
 8000b78:	6939      	ldr	r1, [r7, #16]
 8000b7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	005b      	lsls	r3, r3, #1
 8000b88:	2203      	movs	r2, #3
 8000b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8e:	43db      	mvns	r3, r3
 8000b90:	693a      	ldr	r2, [r7, #16]
 8000b92:	4013      	ands	r3, r2
 8000b94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	f003 0203 	and.w	r2, r3, #3
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	005b      	lsls	r3, r3, #1
 8000ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	f000 80a6 	beq.w	8000d0c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc0:	4b5b      	ldr	r3, [pc, #364]	; (8000d30 <HAL_GPIO_Init+0x2e4>)
 8000bc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bc4:	4a5a      	ldr	r2, [pc, #360]	; (8000d30 <HAL_GPIO_Init+0x2e4>)
 8000bc6:	f043 0301 	orr.w	r3, r3, #1
 8000bca:	6613      	str	r3, [r2, #96]	; 0x60
 8000bcc:	4b58      	ldr	r3, [pc, #352]	; (8000d30 <HAL_GPIO_Init+0x2e4>)
 8000bce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bd0:	f003 0301 	and.w	r3, r3, #1
 8000bd4:	60bb      	str	r3, [r7, #8]
 8000bd6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000bd8:	4a56      	ldr	r2, [pc, #344]	; (8000d34 <HAL_GPIO_Init+0x2e8>)
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	089b      	lsrs	r3, r3, #2
 8000bde:	3302      	adds	r3, #2
 8000be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000be4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	f003 0303 	and.w	r3, r3, #3
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	220f      	movs	r2, #15
 8000bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf4:	43db      	mvns	r3, r3
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c02:	d01f      	beq.n	8000c44 <HAL_GPIO_Init+0x1f8>
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	4a4c      	ldr	r2, [pc, #304]	; (8000d38 <HAL_GPIO_Init+0x2ec>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d019      	beq.n	8000c40 <HAL_GPIO_Init+0x1f4>
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	4a4b      	ldr	r2, [pc, #300]	; (8000d3c <HAL_GPIO_Init+0x2f0>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d013      	beq.n	8000c3c <HAL_GPIO_Init+0x1f0>
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	4a4a      	ldr	r2, [pc, #296]	; (8000d40 <HAL_GPIO_Init+0x2f4>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d00d      	beq.n	8000c38 <HAL_GPIO_Init+0x1ec>
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4a49      	ldr	r2, [pc, #292]	; (8000d44 <HAL_GPIO_Init+0x2f8>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d007      	beq.n	8000c34 <HAL_GPIO_Init+0x1e8>
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4a48      	ldr	r2, [pc, #288]	; (8000d48 <HAL_GPIO_Init+0x2fc>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d101      	bne.n	8000c30 <HAL_GPIO_Init+0x1e4>
 8000c2c:	2305      	movs	r3, #5
 8000c2e:	e00a      	b.n	8000c46 <HAL_GPIO_Init+0x1fa>
 8000c30:	2306      	movs	r3, #6
 8000c32:	e008      	b.n	8000c46 <HAL_GPIO_Init+0x1fa>
 8000c34:	2304      	movs	r3, #4
 8000c36:	e006      	b.n	8000c46 <HAL_GPIO_Init+0x1fa>
 8000c38:	2303      	movs	r3, #3
 8000c3a:	e004      	b.n	8000c46 <HAL_GPIO_Init+0x1fa>
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	e002      	b.n	8000c46 <HAL_GPIO_Init+0x1fa>
 8000c40:	2301      	movs	r3, #1
 8000c42:	e000      	b.n	8000c46 <HAL_GPIO_Init+0x1fa>
 8000c44:	2300      	movs	r3, #0
 8000c46:	697a      	ldr	r2, [r7, #20]
 8000c48:	f002 0203 	and.w	r2, r2, #3
 8000c4c:	0092      	lsls	r2, r2, #2
 8000c4e:	4093      	lsls	r3, r2
 8000c50:	693a      	ldr	r2, [r7, #16]
 8000c52:	4313      	orrs	r3, r2
 8000c54:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000c56:	4937      	ldr	r1, [pc, #220]	; (8000d34 <HAL_GPIO_Init+0x2e8>)
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	089b      	lsrs	r3, r3, #2
 8000c5c:	3302      	adds	r3, #2
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c64:	4b39      	ldr	r3, [pc, #228]	; (8000d4c <HAL_GPIO_Init+0x300>)
 8000c66:	689b      	ldr	r3, [r3, #8]
 8000c68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	43db      	mvns	r3, r3
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	4013      	ands	r3, r2
 8000c72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d003      	beq.n	8000c88 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000c80:	693a      	ldr	r2, [r7, #16]
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	4313      	orrs	r3, r2
 8000c86:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c88:	4a30      	ldr	r2, [pc, #192]	; (8000d4c <HAL_GPIO_Init+0x300>)
 8000c8a:	693b      	ldr	r3, [r7, #16]
 8000c8c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000c8e:	4b2f      	ldr	r3, [pc, #188]	; (8000d4c <HAL_GPIO_Init+0x300>)
 8000c90:	68db      	ldr	r3, [r3, #12]
 8000c92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	43db      	mvns	r3, r3
 8000c98:	693a      	ldr	r2, [r7, #16]
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d003      	beq.n	8000cb2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000cb2:	4a26      	ldr	r2, [pc, #152]	; (8000d4c <HAL_GPIO_Init+0x300>)
 8000cb4:	693b      	ldr	r3, [r7, #16]
 8000cb6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000cb8:	4b24      	ldr	r3, [pc, #144]	; (8000d4c <HAL_GPIO_Init+0x300>)
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	43db      	mvns	r3, r3
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d003      	beq.n	8000cdc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000cd4:	693a      	ldr	r2, [r7, #16]
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000cdc:	4a1b      	ldr	r2, [pc, #108]	; (8000d4c <HAL_GPIO_Init+0x300>)
 8000cde:	693b      	ldr	r3, [r7, #16]
 8000ce0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000ce2:	4b1a      	ldr	r3, [pc, #104]	; (8000d4c <HAL_GPIO_Init+0x300>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	43db      	mvns	r3, r3
 8000cec:	693a      	ldr	r2, [r7, #16]
 8000cee:	4013      	ands	r3, r2
 8000cf0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d003      	beq.n	8000d06 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	4313      	orrs	r3, r2
 8000d04:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d06:	4a11      	ldr	r2, [pc, #68]	; (8000d4c <HAL_GPIO_Init+0x300>)
 8000d08:	693b      	ldr	r3, [r7, #16]
 8000d0a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	3301      	adds	r3, #1
 8000d10:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	fa22 f303 	lsr.w	r3, r2, r3
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	f47f ae9d 	bne.w	8000a5c <HAL_GPIO_Init+0x10>
  }
}
 8000d22:	bf00      	nop
 8000d24:	bf00      	nop
 8000d26:	371c      	adds	r7, #28
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	40021000 	.word	0x40021000
 8000d34:	40010000 	.word	0x40010000
 8000d38:	48000400 	.word	0x48000400
 8000d3c:	48000800 	.word	0x48000800
 8000d40:	48000c00 	.word	0x48000c00
 8000d44:	48001000 	.word	0x48001000
 8000d48:	48001400 	.word	0x48001400
 8000d4c:	40010400 	.word	0x40010400

08000d50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	460b      	mov	r3, r1
 8000d5a:	807b      	strh	r3, [r7, #2]
 8000d5c:	4613      	mov	r3, r2
 8000d5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d60:	787b      	ldrb	r3, [r7, #1]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d003      	beq.n	8000d6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d66:	887a      	ldrh	r2, [r7, #2]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d6c:	e002      	b.n	8000d74 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d6e:	887a      	ldrh	r2, [r7, #2]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d74:	bf00      	nop
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000d8a:	4b08      	ldr	r3, [pc, #32]	; (8000dac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d8c:	695a      	ldr	r2, [r3, #20]
 8000d8e:	88fb      	ldrh	r3, [r7, #6]
 8000d90:	4013      	ands	r3, r2
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d006      	beq.n	8000da4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000d96:	4a05      	ldr	r2, [pc, #20]	; (8000dac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d98:	88fb      	ldrh	r3, [r7, #6]
 8000d9a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000d9c:	88fb      	ldrh	r3, [r7, #6]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f000 f806 	bl	8000db0 <HAL_GPIO_EXTI_Callback>
  }
}
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	40010400 	.word	0x40010400

08000db0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000dba:	bf00      	nop
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
	...

08000dc8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b085      	sub	sp, #20
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d141      	bne.n	8000e5a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000dd6:	4b4b      	ldr	r3, [pc, #300]	; (8000f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000dde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000de2:	d131      	bne.n	8000e48 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000de4:	4b47      	ldr	r3, [pc, #284]	; (8000f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000de6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000dea:	4a46      	ldr	r2, [pc, #280]	; (8000f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000df0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000df4:	4b43      	ldr	r3, [pc, #268]	; (8000f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000dfc:	4a41      	ldr	r2, [pc, #260]	; (8000f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e02:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000e04:	4b40      	ldr	r3, [pc, #256]	; (8000f08 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2232      	movs	r2, #50	; 0x32
 8000e0a:	fb02 f303 	mul.w	r3, r2, r3
 8000e0e:	4a3f      	ldr	r2, [pc, #252]	; (8000f0c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000e10:	fba2 2303 	umull	r2, r3, r2, r3
 8000e14:	0c9b      	lsrs	r3, r3, #18
 8000e16:	3301      	adds	r3, #1
 8000e18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e1a:	e002      	b.n	8000e22 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	3b01      	subs	r3, #1
 8000e20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e22:	4b38      	ldr	r3, [pc, #224]	; (8000f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e24:	695b      	ldr	r3, [r3, #20]
 8000e26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e2e:	d102      	bne.n	8000e36 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d1f2      	bne.n	8000e1c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e36:	4b33      	ldr	r3, [pc, #204]	; (8000f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e38:	695b      	ldr	r3, [r3, #20]
 8000e3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e42:	d158      	bne.n	8000ef6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000e44:	2303      	movs	r3, #3
 8000e46:	e057      	b.n	8000ef8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000e48:	4b2e      	ldr	r3, [pc, #184]	; (8000f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e4e:	4a2d      	ldr	r2, [pc, #180]	; (8000f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e54:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000e58:	e04d      	b.n	8000ef6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e60:	d141      	bne.n	8000ee6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e62:	4b28      	ldr	r3, [pc, #160]	; (8000f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e6e:	d131      	bne.n	8000ed4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000e70:	4b24      	ldr	r3, [pc, #144]	; (8000f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e76:	4a23      	ldr	r2, [pc, #140]	; (8000f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e7c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e80:	4b20      	ldr	r3, [pc, #128]	; (8000f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e88:	4a1e      	ldr	r2, [pc, #120]	; (8000f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e8e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000e90:	4b1d      	ldr	r3, [pc, #116]	; (8000f08 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2232      	movs	r2, #50	; 0x32
 8000e96:	fb02 f303 	mul.w	r3, r2, r3
 8000e9a:	4a1c      	ldr	r2, [pc, #112]	; (8000f0c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea0:	0c9b      	lsrs	r3, r3, #18
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ea6:	e002      	b.n	8000eae <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	3b01      	subs	r3, #1
 8000eac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000eae:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000eb0:	695b      	ldr	r3, [r3, #20]
 8000eb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000eb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000eba:	d102      	bne.n	8000ec2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d1f2      	bne.n	8000ea8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000ec2:	4b10      	ldr	r3, [pc, #64]	; (8000f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ec4:	695b      	ldr	r3, [r3, #20]
 8000ec6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000eca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ece:	d112      	bne.n	8000ef6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	e011      	b.n	8000ef8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000ed4:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ed6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000eda:	4a0a      	ldr	r2, [pc, #40]	; (8000f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000edc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ee0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000ee4:	e007      	b.n	8000ef6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ee6:	4b07      	ldr	r3, [pc, #28]	; (8000f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000eee:	4a05      	ldr	r2, [pc, #20]	; (8000f04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ef0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ef4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8000ef6:	2300      	movs	r3, #0
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3714      	adds	r7, #20
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	40007000 	.word	0x40007000
 8000f08:	20000000 	.word	0x20000000
 8000f0c:	431bde83 	.word	0x431bde83

08000f10 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000f14:	4b05      	ldr	r3, [pc, #20]	; (8000f2c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	4a04      	ldr	r2, [pc, #16]	; (8000f2c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000f1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f1e:	6093      	str	r3, [r2, #8]
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	40007000 	.word	0x40007000

08000f30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b088      	sub	sp, #32
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d101      	bne.n	8000f42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e306      	b.n	8001550 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d075      	beq.n	800103a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f4e:	4b97      	ldr	r3, [pc, #604]	; (80011ac <HAL_RCC_OscConfig+0x27c>)
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	f003 030c 	and.w	r3, r3, #12
 8000f56:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f58:	4b94      	ldr	r3, [pc, #592]	; (80011ac <HAL_RCC_OscConfig+0x27c>)
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	f003 0303 	and.w	r3, r3, #3
 8000f60:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8000f62:	69bb      	ldr	r3, [r7, #24]
 8000f64:	2b0c      	cmp	r3, #12
 8000f66:	d102      	bne.n	8000f6e <HAL_RCC_OscConfig+0x3e>
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	2b03      	cmp	r3, #3
 8000f6c:	d002      	beq.n	8000f74 <HAL_RCC_OscConfig+0x44>
 8000f6e:	69bb      	ldr	r3, [r7, #24]
 8000f70:	2b08      	cmp	r3, #8
 8000f72:	d10b      	bne.n	8000f8c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f74:	4b8d      	ldr	r3, [pc, #564]	; (80011ac <HAL_RCC_OscConfig+0x27c>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d05b      	beq.n	8001038 <HAL_RCC_OscConfig+0x108>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d157      	bne.n	8001038 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	e2e1      	b.n	8001550 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f94:	d106      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x74>
 8000f96:	4b85      	ldr	r3, [pc, #532]	; (80011ac <HAL_RCC_OscConfig+0x27c>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a84      	ldr	r2, [pc, #528]	; (80011ac <HAL_RCC_OscConfig+0x27c>)
 8000f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fa0:	6013      	str	r3, [r2, #0]
 8000fa2:	e01d      	b.n	8000fe0 <HAL_RCC_OscConfig+0xb0>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fac:	d10c      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x98>
 8000fae:	4b7f      	ldr	r3, [pc, #508]	; (80011ac <HAL_RCC_OscConfig+0x27c>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a7e      	ldr	r2, [pc, #504]	; (80011ac <HAL_RCC_OscConfig+0x27c>)
 8000fb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fb8:	6013      	str	r3, [r2, #0]
 8000fba:	4b7c      	ldr	r3, [pc, #496]	; (80011ac <HAL_RCC_OscConfig+0x27c>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a7b      	ldr	r2, [pc, #492]	; (80011ac <HAL_RCC_OscConfig+0x27c>)
 8000fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fc4:	6013      	str	r3, [r2, #0]
 8000fc6:	e00b      	b.n	8000fe0 <HAL_RCC_OscConfig+0xb0>
 8000fc8:	4b78      	ldr	r3, [pc, #480]	; (80011ac <HAL_RCC_OscConfig+0x27c>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a77      	ldr	r2, [pc, #476]	; (80011ac <HAL_RCC_OscConfig+0x27c>)
 8000fce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fd2:	6013      	str	r3, [r2, #0]
 8000fd4:	4b75      	ldr	r3, [pc, #468]	; (80011ac <HAL_RCC_OscConfig+0x27c>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a74      	ldr	r2, [pc, #464]	; (80011ac <HAL_RCC_OscConfig+0x27c>)
 8000fda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d013      	beq.n	8001010 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fe8:	f7ff fc22 	bl	8000830 <HAL_GetTick>
 8000fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fee:	e008      	b.n	8001002 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ff0:	f7ff fc1e 	bl	8000830 <HAL_GetTick>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	2b64      	cmp	r3, #100	; 0x64
 8000ffc:	d901      	bls.n	8001002 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000ffe:	2303      	movs	r3, #3
 8001000:	e2a6      	b.n	8001550 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001002:	4b6a      	ldr	r3, [pc, #424]	; (80011ac <HAL_RCC_OscConfig+0x27c>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800100a:	2b00      	cmp	r3, #0
 800100c:	d0f0      	beq.n	8000ff0 <HAL_RCC_OscConfig+0xc0>
 800100e:	e014      	b.n	800103a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001010:	f7ff fc0e 	bl	8000830 <HAL_GetTick>
 8001014:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001016:	e008      	b.n	800102a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001018:	f7ff fc0a 	bl	8000830 <HAL_GetTick>
 800101c:	4602      	mov	r2, r0
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	2b64      	cmp	r3, #100	; 0x64
 8001024:	d901      	bls.n	800102a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001026:	2303      	movs	r3, #3
 8001028:	e292      	b.n	8001550 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800102a:	4b60      	ldr	r3, [pc, #384]	; (80011ac <HAL_RCC_OscConfig+0x27c>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001032:	2b00      	cmp	r3, #0
 8001034:	d1f0      	bne.n	8001018 <HAL_RCC_OscConfig+0xe8>
 8001036:	e000      	b.n	800103a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001038:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f003 0302 	and.w	r3, r3, #2
 8001042:	2b00      	cmp	r3, #0
 8001044:	d075      	beq.n	8001132 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001046:	4b59      	ldr	r3, [pc, #356]	; (80011ac <HAL_RCC_OscConfig+0x27c>)
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	f003 030c 	and.w	r3, r3, #12
 800104e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001050:	4b56      	ldr	r3, [pc, #344]	; (80011ac <HAL_RCC_OscConfig+0x27c>)
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	f003 0303 	and.w	r3, r3, #3
 8001058:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800105a:	69bb      	ldr	r3, [r7, #24]
 800105c:	2b0c      	cmp	r3, #12
 800105e:	d102      	bne.n	8001066 <HAL_RCC_OscConfig+0x136>
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	2b02      	cmp	r3, #2
 8001064:	d002      	beq.n	800106c <HAL_RCC_OscConfig+0x13c>
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	2b04      	cmp	r3, #4
 800106a:	d11f      	bne.n	80010ac <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800106c:	4b4f      	ldr	r3, [pc, #316]	; (80011ac <HAL_RCC_OscConfig+0x27c>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001074:	2b00      	cmp	r3, #0
 8001076:	d005      	beq.n	8001084 <HAL_RCC_OscConfig+0x154>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d101      	bne.n	8001084 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	e265      	b.n	8001550 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001084:	4b49      	ldr	r3, [pc, #292]	; (80011ac <HAL_RCC_OscConfig+0x27c>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	691b      	ldr	r3, [r3, #16]
 8001090:	061b      	lsls	r3, r3, #24
 8001092:	4946      	ldr	r1, [pc, #280]	; (80011ac <HAL_RCC_OscConfig+0x27c>)
 8001094:	4313      	orrs	r3, r2
 8001096:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001098:	4b45      	ldr	r3, [pc, #276]	; (80011b0 <HAL_RCC_OscConfig+0x280>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff facd 	bl	800063c <HAL_InitTick>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d043      	beq.n	8001130 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	e251      	b.n	8001550 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d023      	beq.n	80010fc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010b4:	4b3d      	ldr	r3, [pc, #244]	; (80011ac <HAL_RCC_OscConfig+0x27c>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a3c      	ldr	r2, [pc, #240]	; (80011ac <HAL_RCC_OscConfig+0x27c>)
 80010ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010c0:	f7ff fbb6 	bl	8000830 <HAL_GetTick>
 80010c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010c6:	e008      	b.n	80010da <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010c8:	f7ff fbb2 	bl	8000830 <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d901      	bls.n	80010da <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80010d6:	2303      	movs	r3, #3
 80010d8:	e23a      	b.n	8001550 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010da:	4b34      	ldr	r3, [pc, #208]	; (80011ac <HAL_RCC_OscConfig+0x27c>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d0f0      	beq.n	80010c8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010e6:	4b31      	ldr	r3, [pc, #196]	; (80011ac <HAL_RCC_OscConfig+0x27c>)
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	691b      	ldr	r3, [r3, #16]
 80010f2:	061b      	lsls	r3, r3, #24
 80010f4:	492d      	ldr	r1, [pc, #180]	; (80011ac <HAL_RCC_OscConfig+0x27c>)
 80010f6:	4313      	orrs	r3, r2
 80010f8:	604b      	str	r3, [r1, #4]
 80010fa:	e01a      	b.n	8001132 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010fc:	4b2b      	ldr	r3, [pc, #172]	; (80011ac <HAL_RCC_OscConfig+0x27c>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a2a      	ldr	r2, [pc, #168]	; (80011ac <HAL_RCC_OscConfig+0x27c>)
 8001102:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001106:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001108:	f7ff fb92 	bl	8000830 <HAL_GetTick>
 800110c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800110e:	e008      	b.n	8001122 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001110:	f7ff fb8e 	bl	8000830 <HAL_GetTick>
 8001114:	4602      	mov	r2, r0
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	2b02      	cmp	r3, #2
 800111c:	d901      	bls.n	8001122 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800111e:	2303      	movs	r3, #3
 8001120:	e216      	b.n	8001550 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001122:	4b22      	ldr	r3, [pc, #136]	; (80011ac <HAL_RCC_OscConfig+0x27c>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800112a:	2b00      	cmp	r3, #0
 800112c:	d1f0      	bne.n	8001110 <HAL_RCC_OscConfig+0x1e0>
 800112e:	e000      	b.n	8001132 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001130:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 0308 	and.w	r3, r3, #8
 800113a:	2b00      	cmp	r3, #0
 800113c:	d041      	beq.n	80011c2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	695b      	ldr	r3, [r3, #20]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d01c      	beq.n	8001180 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001146:	4b19      	ldr	r3, [pc, #100]	; (80011ac <HAL_RCC_OscConfig+0x27c>)
 8001148:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800114c:	4a17      	ldr	r2, [pc, #92]	; (80011ac <HAL_RCC_OscConfig+0x27c>)
 800114e:	f043 0301 	orr.w	r3, r3, #1
 8001152:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001156:	f7ff fb6b 	bl	8000830 <HAL_GetTick>
 800115a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800115c:	e008      	b.n	8001170 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800115e:	f7ff fb67 	bl	8000830 <HAL_GetTick>
 8001162:	4602      	mov	r2, r0
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	2b02      	cmp	r3, #2
 800116a:	d901      	bls.n	8001170 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800116c:	2303      	movs	r3, #3
 800116e:	e1ef      	b.n	8001550 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001170:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <HAL_RCC_OscConfig+0x27c>)
 8001172:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	2b00      	cmp	r3, #0
 800117c:	d0ef      	beq.n	800115e <HAL_RCC_OscConfig+0x22e>
 800117e:	e020      	b.n	80011c2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001180:	4b0a      	ldr	r3, [pc, #40]	; (80011ac <HAL_RCC_OscConfig+0x27c>)
 8001182:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001186:	4a09      	ldr	r2, [pc, #36]	; (80011ac <HAL_RCC_OscConfig+0x27c>)
 8001188:	f023 0301 	bic.w	r3, r3, #1
 800118c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001190:	f7ff fb4e 	bl	8000830 <HAL_GetTick>
 8001194:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001196:	e00d      	b.n	80011b4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001198:	f7ff fb4a 	bl	8000830 <HAL_GetTick>
 800119c:	4602      	mov	r2, r0
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d906      	bls.n	80011b4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80011a6:	2303      	movs	r3, #3
 80011a8:	e1d2      	b.n	8001550 <HAL_RCC_OscConfig+0x620>
 80011aa:	bf00      	nop
 80011ac:	40021000 	.word	0x40021000
 80011b0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011b4:	4b8c      	ldr	r3, [pc, #560]	; (80013e8 <HAL_RCC_OscConfig+0x4b8>)
 80011b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d1ea      	bne.n	8001198 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 0304 	and.w	r3, r3, #4
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	f000 80a6 	beq.w	800131c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011d0:	2300      	movs	r3, #0
 80011d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80011d4:	4b84      	ldr	r3, [pc, #528]	; (80013e8 <HAL_RCC_OscConfig+0x4b8>)
 80011d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d101      	bne.n	80011e4 <HAL_RCC_OscConfig+0x2b4>
 80011e0:	2301      	movs	r3, #1
 80011e2:	e000      	b.n	80011e6 <HAL_RCC_OscConfig+0x2b6>
 80011e4:	2300      	movs	r3, #0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d00d      	beq.n	8001206 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011ea:	4b7f      	ldr	r3, [pc, #508]	; (80013e8 <HAL_RCC_OscConfig+0x4b8>)
 80011ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ee:	4a7e      	ldr	r2, [pc, #504]	; (80013e8 <HAL_RCC_OscConfig+0x4b8>)
 80011f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f4:	6593      	str	r3, [r2, #88]	; 0x58
 80011f6:	4b7c      	ldr	r3, [pc, #496]	; (80013e8 <HAL_RCC_OscConfig+0x4b8>)
 80011f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001202:	2301      	movs	r3, #1
 8001204:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001206:	4b79      	ldr	r3, [pc, #484]	; (80013ec <HAL_RCC_OscConfig+0x4bc>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800120e:	2b00      	cmp	r3, #0
 8001210:	d118      	bne.n	8001244 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001212:	4b76      	ldr	r3, [pc, #472]	; (80013ec <HAL_RCC_OscConfig+0x4bc>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a75      	ldr	r2, [pc, #468]	; (80013ec <HAL_RCC_OscConfig+0x4bc>)
 8001218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800121c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800121e:	f7ff fb07 	bl	8000830 <HAL_GetTick>
 8001222:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001224:	e008      	b.n	8001238 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001226:	f7ff fb03 	bl	8000830 <HAL_GetTick>
 800122a:	4602      	mov	r2, r0
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	2b02      	cmp	r3, #2
 8001232:	d901      	bls.n	8001238 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001234:	2303      	movs	r3, #3
 8001236:	e18b      	b.n	8001550 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001238:	4b6c      	ldr	r3, [pc, #432]	; (80013ec <HAL_RCC_OscConfig+0x4bc>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001240:	2b00      	cmp	r3, #0
 8001242:	d0f0      	beq.n	8001226 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d108      	bne.n	800125e <HAL_RCC_OscConfig+0x32e>
 800124c:	4b66      	ldr	r3, [pc, #408]	; (80013e8 <HAL_RCC_OscConfig+0x4b8>)
 800124e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001252:	4a65      	ldr	r2, [pc, #404]	; (80013e8 <HAL_RCC_OscConfig+0x4b8>)
 8001254:	f043 0301 	orr.w	r3, r3, #1
 8001258:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800125c:	e024      	b.n	80012a8 <HAL_RCC_OscConfig+0x378>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	2b05      	cmp	r3, #5
 8001264:	d110      	bne.n	8001288 <HAL_RCC_OscConfig+0x358>
 8001266:	4b60      	ldr	r3, [pc, #384]	; (80013e8 <HAL_RCC_OscConfig+0x4b8>)
 8001268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800126c:	4a5e      	ldr	r2, [pc, #376]	; (80013e8 <HAL_RCC_OscConfig+0x4b8>)
 800126e:	f043 0304 	orr.w	r3, r3, #4
 8001272:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001276:	4b5c      	ldr	r3, [pc, #368]	; (80013e8 <HAL_RCC_OscConfig+0x4b8>)
 8001278:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800127c:	4a5a      	ldr	r2, [pc, #360]	; (80013e8 <HAL_RCC_OscConfig+0x4b8>)
 800127e:	f043 0301 	orr.w	r3, r3, #1
 8001282:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001286:	e00f      	b.n	80012a8 <HAL_RCC_OscConfig+0x378>
 8001288:	4b57      	ldr	r3, [pc, #348]	; (80013e8 <HAL_RCC_OscConfig+0x4b8>)
 800128a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800128e:	4a56      	ldr	r2, [pc, #344]	; (80013e8 <HAL_RCC_OscConfig+0x4b8>)
 8001290:	f023 0301 	bic.w	r3, r3, #1
 8001294:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001298:	4b53      	ldr	r3, [pc, #332]	; (80013e8 <HAL_RCC_OscConfig+0x4b8>)
 800129a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800129e:	4a52      	ldr	r2, [pc, #328]	; (80013e8 <HAL_RCC_OscConfig+0x4b8>)
 80012a0:	f023 0304 	bic.w	r3, r3, #4
 80012a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d016      	beq.n	80012de <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012b0:	f7ff fabe 	bl	8000830 <HAL_GetTick>
 80012b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012b6:	e00a      	b.n	80012ce <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012b8:	f7ff faba 	bl	8000830 <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d901      	bls.n	80012ce <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e140      	b.n	8001550 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012ce:	4b46      	ldr	r3, [pc, #280]	; (80013e8 <HAL_RCC_OscConfig+0x4b8>)
 80012d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012d4:	f003 0302 	and.w	r3, r3, #2
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d0ed      	beq.n	80012b8 <HAL_RCC_OscConfig+0x388>
 80012dc:	e015      	b.n	800130a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012de:	f7ff faa7 	bl	8000830 <HAL_GetTick>
 80012e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012e4:	e00a      	b.n	80012fc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012e6:	f7ff faa3 	bl	8000830 <HAL_GetTick>
 80012ea:	4602      	mov	r2, r0
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d901      	bls.n	80012fc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80012f8:	2303      	movs	r3, #3
 80012fa:	e129      	b.n	8001550 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012fc:	4b3a      	ldr	r3, [pc, #232]	; (80013e8 <HAL_RCC_OscConfig+0x4b8>)
 80012fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	2b00      	cmp	r3, #0
 8001308:	d1ed      	bne.n	80012e6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800130a:	7ffb      	ldrb	r3, [r7, #31]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d105      	bne.n	800131c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001310:	4b35      	ldr	r3, [pc, #212]	; (80013e8 <HAL_RCC_OscConfig+0x4b8>)
 8001312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001314:	4a34      	ldr	r2, [pc, #208]	; (80013e8 <HAL_RCC_OscConfig+0x4b8>)
 8001316:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800131a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0320 	and.w	r3, r3, #32
 8001324:	2b00      	cmp	r3, #0
 8001326:	d03c      	beq.n	80013a2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d01c      	beq.n	800136a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001330:	4b2d      	ldr	r3, [pc, #180]	; (80013e8 <HAL_RCC_OscConfig+0x4b8>)
 8001332:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001336:	4a2c      	ldr	r2, [pc, #176]	; (80013e8 <HAL_RCC_OscConfig+0x4b8>)
 8001338:	f043 0301 	orr.w	r3, r3, #1
 800133c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001340:	f7ff fa76 	bl	8000830 <HAL_GetTick>
 8001344:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001346:	e008      	b.n	800135a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001348:	f7ff fa72 	bl	8000830 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b02      	cmp	r3, #2
 8001354:	d901      	bls.n	800135a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e0fa      	b.n	8001550 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800135a:	4b23      	ldr	r3, [pc, #140]	; (80013e8 <HAL_RCC_OscConfig+0x4b8>)
 800135c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001360:	f003 0302 	and.w	r3, r3, #2
 8001364:	2b00      	cmp	r3, #0
 8001366:	d0ef      	beq.n	8001348 <HAL_RCC_OscConfig+0x418>
 8001368:	e01b      	b.n	80013a2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800136a:	4b1f      	ldr	r3, [pc, #124]	; (80013e8 <HAL_RCC_OscConfig+0x4b8>)
 800136c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001370:	4a1d      	ldr	r2, [pc, #116]	; (80013e8 <HAL_RCC_OscConfig+0x4b8>)
 8001372:	f023 0301 	bic.w	r3, r3, #1
 8001376:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800137a:	f7ff fa59 	bl	8000830 <HAL_GetTick>
 800137e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001380:	e008      	b.n	8001394 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001382:	f7ff fa55 	bl	8000830 <HAL_GetTick>
 8001386:	4602      	mov	r2, r0
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	2b02      	cmp	r3, #2
 800138e:	d901      	bls.n	8001394 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001390:	2303      	movs	r3, #3
 8001392:	e0dd      	b.n	8001550 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001394:	4b14      	ldr	r3, [pc, #80]	; (80013e8 <HAL_RCC_OscConfig+0x4b8>)
 8001396:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d1ef      	bne.n	8001382 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	69db      	ldr	r3, [r3, #28]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	f000 80d1 	beq.w	800154e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013ac:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <HAL_RCC_OscConfig+0x4b8>)
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	f003 030c 	and.w	r3, r3, #12
 80013b4:	2b0c      	cmp	r3, #12
 80013b6:	f000 808b 	beq.w	80014d0 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	69db      	ldr	r3, [r3, #28]
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d15e      	bne.n	8001480 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013c2:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <HAL_RCC_OscConfig+0x4b8>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a08      	ldr	r2, [pc, #32]	; (80013e8 <HAL_RCC_OscConfig+0x4b8>)
 80013c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ce:	f7ff fa2f 	bl	8000830 <HAL_GetTick>
 80013d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013d4:	e00c      	b.n	80013f0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013d6:	f7ff fa2b 	bl	8000830 <HAL_GetTick>
 80013da:	4602      	mov	r2, r0
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d905      	bls.n	80013f0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80013e4:	2303      	movs	r3, #3
 80013e6:	e0b3      	b.n	8001550 <HAL_RCC_OscConfig+0x620>
 80013e8:	40021000 	.word	0x40021000
 80013ec:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013f0:	4b59      	ldr	r3, [pc, #356]	; (8001558 <HAL_RCC_OscConfig+0x628>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d1ec      	bne.n	80013d6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013fc:	4b56      	ldr	r3, [pc, #344]	; (8001558 <HAL_RCC_OscConfig+0x628>)
 80013fe:	68da      	ldr	r2, [r3, #12]
 8001400:	4b56      	ldr	r3, [pc, #344]	; (800155c <HAL_RCC_OscConfig+0x62c>)
 8001402:	4013      	ands	r3, r2
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	6a11      	ldr	r1, [r2, #32]
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800140c:	3a01      	subs	r2, #1
 800140e:	0112      	lsls	r2, r2, #4
 8001410:	4311      	orrs	r1, r2
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001416:	0212      	lsls	r2, r2, #8
 8001418:	4311      	orrs	r1, r2
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800141e:	0852      	lsrs	r2, r2, #1
 8001420:	3a01      	subs	r2, #1
 8001422:	0552      	lsls	r2, r2, #21
 8001424:	4311      	orrs	r1, r2
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800142a:	0852      	lsrs	r2, r2, #1
 800142c:	3a01      	subs	r2, #1
 800142e:	0652      	lsls	r2, r2, #25
 8001430:	4311      	orrs	r1, r2
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001436:	06d2      	lsls	r2, r2, #27
 8001438:	430a      	orrs	r2, r1
 800143a:	4947      	ldr	r1, [pc, #284]	; (8001558 <HAL_RCC_OscConfig+0x628>)
 800143c:	4313      	orrs	r3, r2
 800143e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001440:	4b45      	ldr	r3, [pc, #276]	; (8001558 <HAL_RCC_OscConfig+0x628>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a44      	ldr	r2, [pc, #272]	; (8001558 <HAL_RCC_OscConfig+0x628>)
 8001446:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800144a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800144c:	4b42      	ldr	r3, [pc, #264]	; (8001558 <HAL_RCC_OscConfig+0x628>)
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	4a41      	ldr	r2, [pc, #260]	; (8001558 <HAL_RCC_OscConfig+0x628>)
 8001452:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001456:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001458:	f7ff f9ea 	bl	8000830 <HAL_GetTick>
 800145c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800145e:	e008      	b.n	8001472 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001460:	f7ff f9e6 	bl	8000830 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b02      	cmp	r3, #2
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e06e      	b.n	8001550 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001472:	4b39      	ldr	r3, [pc, #228]	; (8001558 <HAL_RCC_OscConfig+0x628>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d0f0      	beq.n	8001460 <HAL_RCC_OscConfig+0x530>
 800147e:	e066      	b.n	800154e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001480:	4b35      	ldr	r3, [pc, #212]	; (8001558 <HAL_RCC_OscConfig+0x628>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a34      	ldr	r2, [pc, #208]	; (8001558 <HAL_RCC_OscConfig+0x628>)
 8001486:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800148a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800148c:	4b32      	ldr	r3, [pc, #200]	; (8001558 <HAL_RCC_OscConfig+0x628>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	4a31      	ldr	r2, [pc, #196]	; (8001558 <HAL_RCC_OscConfig+0x628>)
 8001492:	f023 0303 	bic.w	r3, r3, #3
 8001496:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001498:	4b2f      	ldr	r3, [pc, #188]	; (8001558 <HAL_RCC_OscConfig+0x628>)
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	4a2e      	ldr	r2, [pc, #184]	; (8001558 <HAL_RCC_OscConfig+0x628>)
 800149e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80014a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014a6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a8:	f7ff f9c2 	bl	8000830 <HAL_GetTick>
 80014ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014ae:	e008      	b.n	80014c2 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014b0:	f7ff f9be 	bl	8000830 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e046      	b.n	8001550 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014c2:	4b25      	ldr	r3, [pc, #148]	; (8001558 <HAL_RCC_OscConfig+0x628>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d1f0      	bne.n	80014b0 <HAL_RCC_OscConfig+0x580>
 80014ce:	e03e      	b.n	800154e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	69db      	ldr	r3, [r3, #28]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d101      	bne.n	80014dc <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e039      	b.n	8001550 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80014dc:	4b1e      	ldr	r3, [pc, #120]	; (8001558 <HAL_RCC_OscConfig+0x628>)
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	f003 0203 	and.w	r2, r3, #3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6a1b      	ldr	r3, [r3, #32]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d12c      	bne.n	800154a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fa:	3b01      	subs	r3, #1
 80014fc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014fe:	429a      	cmp	r2, r3
 8001500:	d123      	bne.n	800154a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800150c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800150e:	429a      	cmp	r2, r3
 8001510:	d11b      	bne.n	800154a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800151c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800151e:	429a      	cmp	r2, r3
 8001520:	d113      	bne.n	800154a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152c:	085b      	lsrs	r3, r3, #1
 800152e:	3b01      	subs	r3, #1
 8001530:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001532:	429a      	cmp	r2, r3
 8001534:	d109      	bne.n	800154a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001540:	085b      	lsrs	r3, r3, #1
 8001542:	3b01      	subs	r3, #1
 8001544:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001546:	429a      	cmp	r2, r3
 8001548:	d001      	beq.n	800154e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e000      	b.n	8001550 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800154e:	2300      	movs	r3, #0
}
 8001550:	4618      	mov	r0, r3
 8001552:	3720      	adds	r7, #32
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40021000 	.word	0x40021000
 800155c:	019f800c 	.word	0x019f800c

08001560 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800156a:	2300      	movs	r3, #0
 800156c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d101      	bne.n	8001578 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e11e      	b.n	80017b6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001578:	4b91      	ldr	r3, [pc, #580]	; (80017c0 <HAL_RCC_ClockConfig+0x260>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 030f 	and.w	r3, r3, #15
 8001580:	683a      	ldr	r2, [r7, #0]
 8001582:	429a      	cmp	r2, r3
 8001584:	d910      	bls.n	80015a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001586:	4b8e      	ldr	r3, [pc, #568]	; (80017c0 <HAL_RCC_ClockConfig+0x260>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f023 020f 	bic.w	r2, r3, #15
 800158e:	498c      	ldr	r1, [pc, #560]	; (80017c0 <HAL_RCC_ClockConfig+0x260>)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	4313      	orrs	r3, r2
 8001594:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001596:	4b8a      	ldr	r3, [pc, #552]	; (80017c0 <HAL_RCC_ClockConfig+0x260>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 030f 	and.w	r3, r3, #15
 800159e:	683a      	ldr	r2, [r7, #0]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d001      	beq.n	80015a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e106      	b.n	80017b6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0301 	and.w	r3, r3, #1
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d073      	beq.n	800169c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	2b03      	cmp	r3, #3
 80015ba:	d129      	bne.n	8001610 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015bc:	4b81      	ldr	r3, [pc, #516]	; (80017c4 <HAL_RCC_ClockConfig+0x264>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d101      	bne.n	80015cc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e0f4      	b.n	80017b6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80015cc:	f000 f9ba 	bl	8001944 <RCC_GetSysClockFreqFromPLLSource>
 80015d0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	4a7c      	ldr	r2, [pc, #496]	; (80017c8 <HAL_RCC_ClockConfig+0x268>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d93f      	bls.n	800165a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80015da:	4b7a      	ldr	r3, [pc, #488]	; (80017c4 <HAL_RCC_ClockConfig+0x264>)
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d009      	beq.n	80015fa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d033      	beq.n	800165a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d12f      	bne.n	800165a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80015fa:	4b72      	ldr	r3, [pc, #456]	; (80017c4 <HAL_RCC_ClockConfig+0x264>)
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001602:	4a70      	ldr	r2, [pc, #448]	; (80017c4 <HAL_RCC_ClockConfig+0x264>)
 8001604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001608:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800160a:	2380      	movs	r3, #128	; 0x80
 800160c:	617b      	str	r3, [r7, #20]
 800160e:	e024      	b.n	800165a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	2b02      	cmp	r3, #2
 8001616:	d107      	bne.n	8001628 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001618:	4b6a      	ldr	r3, [pc, #424]	; (80017c4 <HAL_RCC_ClockConfig+0x264>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d109      	bne.n	8001638 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e0c6      	b.n	80017b6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001628:	4b66      	ldr	r3, [pc, #408]	; (80017c4 <HAL_RCC_ClockConfig+0x264>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001630:	2b00      	cmp	r3, #0
 8001632:	d101      	bne.n	8001638 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e0be      	b.n	80017b6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001638:	f000 f8ce 	bl	80017d8 <HAL_RCC_GetSysClockFreq>
 800163c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	4a61      	ldr	r2, [pc, #388]	; (80017c8 <HAL_RCC_ClockConfig+0x268>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d909      	bls.n	800165a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001646:	4b5f      	ldr	r3, [pc, #380]	; (80017c4 <HAL_RCC_ClockConfig+0x264>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800164e:	4a5d      	ldr	r2, [pc, #372]	; (80017c4 <HAL_RCC_ClockConfig+0x264>)
 8001650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001654:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001656:	2380      	movs	r3, #128	; 0x80
 8001658:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800165a:	4b5a      	ldr	r3, [pc, #360]	; (80017c4 <HAL_RCC_ClockConfig+0x264>)
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	f023 0203 	bic.w	r2, r3, #3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	4957      	ldr	r1, [pc, #348]	; (80017c4 <HAL_RCC_ClockConfig+0x264>)
 8001668:	4313      	orrs	r3, r2
 800166a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800166c:	f7ff f8e0 	bl	8000830 <HAL_GetTick>
 8001670:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001672:	e00a      	b.n	800168a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001674:	f7ff f8dc 	bl	8000830 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001682:	4293      	cmp	r3, r2
 8001684:	d901      	bls.n	800168a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e095      	b.n	80017b6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800168a:	4b4e      	ldr	r3, [pc, #312]	; (80017c4 <HAL_RCC_ClockConfig+0x264>)
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f003 020c 	and.w	r2, r3, #12
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	429a      	cmp	r2, r3
 800169a:	d1eb      	bne.n	8001674 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d023      	beq.n	80016f0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0304 	and.w	r3, r3, #4
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d005      	beq.n	80016c0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016b4:	4b43      	ldr	r3, [pc, #268]	; (80017c4 <HAL_RCC_ClockConfig+0x264>)
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	4a42      	ldr	r2, [pc, #264]	; (80017c4 <HAL_RCC_ClockConfig+0x264>)
 80016ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80016be:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0308 	and.w	r3, r3, #8
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d007      	beq.n	80016dc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80016cc:	4b3d      	ldr	r3, [pc, #244]	; (80017c4 <HAL_RCC_ClockConfig+0x264>)
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80016d4:	4a3b      	ldr	r2, [pc, #236]	; (80017c4 <HAL_RCC_ClockConfig+0x264>)
 80016d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80016da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016dc:	4b39      	ldr	r3, [pc, #228]	; (80017c4 <HAL_RCC_ClockConfig+0x264>)
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	4936      	ldr	r1, [pc, #216]	; (80017c4 <HAL_RCC_ClockConfig+0x264>)
 80016ea:	4313      	orrs	r3, r2
 80016ec:	608b      	str	r3, [r1, #8]
 80016ee:	e008      	b.n	8001702 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	2b80      	cmp	r3, #128	; 0x80
 80016f4:	d105      	bne.n	8001702 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80016f6:	4b33      	ldr	r3, [pc, #204]	; (80017c4 <HAL_RCC_ClockConfig+0x264>)
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	4a32      	ldr	r2, [pc, #200]	; (80017c4 <HAL_RCC_ClockConfig+0x264>)
 80016fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001700:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001702:	4b2f      	ldr	r3, [pc, #188]	; (80017c0 <HAL_RCC_ClockConfig+0x260>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 030f 	and.w	r3, r3, #15
 800170a:	683a      	ldr	r2, [r7, #0]
 800170c:	429a      	cmp	r2, r3
 800170e:	d21d      	bcs.n	800174c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001710:	4b2b      	ldr	r3, [pc, #172]	; (80017c0 <HAL_RCC_ClockConfig+0x260>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f023 020f 	bic.w	r2, r3, #15
 8001718:	4929      	ldr	r1, [pc, #164]	; (80017c0 <HAL_RCC_ClockConfig+0x260>)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	4313      	orrs	r3, r2
 800171e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001720:	f7ff f886 	bl	8000830 <HAL_GetTick>
 8001724:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001726:	e00a      	b.n	800173e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001728:	f7ff f882 	bl	8000830 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	f241 3288 	movw	r2, #5000	; 0x1388
 8001736:	4293      	cmp	r3, r2
 8001738:	d901      	bls.n	800173e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e03b      	b.n	80017b6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800173e:	4b20      	ldr	r3, [pc, #128]	; (80017c0 <HAL_RCC_ClockConfig+0x260>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 030f 	and.w	r3, r3, #15
 8001746:	683a      	ldr	r2, [r7, #0]
 8001748:	429a      	cmp	r2, r3
 800174a:	d1ed      	bne.n	8001728 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0304 	and.w	r3, r3, #4
 8001754:	2b00      	cmp	r3, #0
 8001756:	d008      	beq.n	800176a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001758:	4b1a      	ldr	r3, [pc, #104]	; (80017c4 <HAL_RCC_ClockConfig+0x264>)
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	4917      	ldr	r1, [pc, #92]	; (80017c4 <HAL_RCC_ClockConfig+0x264>)
 8001766:	4313      	orrs	r3, r2
 8001768:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0308 	and.w	r3, r3, #8
 8001772:	2b00      	cmp	r3, #0
 8001774:	d009      	beq.n	800178a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001776:	4b13      	ldr	r3, [pc, #76]	; (80017c4 <HAL_RCC_ClockConfig+0x264>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	691b      	ldr	r3, [r3, #16]
 8001782:	00db      	lsls	r3, r3, #3
 8001784:	490f      	ldr	r1, [pc, #60]	; (80017c4 <HAL_RCC_ClockConfig+0x264>)
 8001786:	4313      	orrs	r3, r2
 8001788:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800178a:	f000 f825 	bl	80017d8 <HAL_RCC_GetSysClockFreq>
 800178e:	4602      	mov	r2, r0
 8001790:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <HAL_RCC_ClockConfig+0x264>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	091b      	lsrs	r3, r3, #4
 8001796:	f003 030f 	and.w	r3, r3, #15
 800179a:	490c      	ldr	r1, [pc, #48]	; (80017cc <HAL_RCC_ClockConfig+0x26c>)
 800179c:	5ccb      	ldrb	r3, [r1, r3]
 800179e:	f003 031f 	and.w	r3, r3, #31
 80017a2:	fa22 f303 	lsr.w	r3, r2, r3
 80017a6:	4a0a      	ldr	r2, [pc, #40]	; (80017d0 <HAL_RCC_ClockConfig+0x270>)
 80017a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80017aa:	4b0a      	ldr	r3, [pc, #40]	; (80017d4 <HAL_RCC_ClockConfig+0x274>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7fe ff44 	bl	800063c <HAL_InitTick>
 80017b4:	4603      	mov	r3, r0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3718      	adds	r7, #24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40022000 	.word	0x40022000
 80017c4:	40021000 	.word	0x40021000
 80017c8:	04c4b400 	.word	0x04c4b400
 80017cc:	080053e4 	.word	0x080053e4
 80017d0:	20000000 	.word	0x20000000
 80017d4:	20000004 	.word	0x20000004

080017d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	b087      	sub	sp, #28
 80017dc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80017de:	4b2c      	ldr	r3, [pc, #176]	; (8001890 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f003 030c 	and.w	r3, r3, #12
 80017e6:	2b04      	cmp	r3, #4
 80017e8:	d102      	bne.n	80017f0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80017ea:	4b2a      	ldr	r3, [pc, #168]	; (8001894 <HAL_RCC_GetSysClockFreq+0xbc>)
 80017ec:	613b      	str	r3, [r7, #16]
 80017ee:	e047      	b.n	8001880 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80017f0:	4b27      	ldr	r3, [pc, #156]	; (8001890 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	f003 030c 	and.w	r3, r3, #12
 80017f8:	2b08      	cmp	r3, #8
 80017fa:	d102      	bne.n	8001802 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80017fc:	4b26      	ldr	r3, [pc, #152]	; (8001898 <HAL_RCC_GetSysClockFreq+0xc0>)
 80017fe:	613b      	str	r3, [r7, #16]
 8001800:	e03e      	b.n	8001880 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001802:	4b23      	ldr	r3, [pc, #140]	; (8001890 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f003 030c 	and.w	r3, r3, #12
 800180a:	2b0c      	cmp	r3, #12
 800180c:	d136      	bne.n	800187c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800180e:	4b20      	ldr	r3, [pc, #128]	; (8001890 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	f003 0303 	and.w	r3, r3, #3
 8001816:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001818:	4b1d      	ldr	r3, [pc, #116]	; (8001890 <HAL_RCC_GetSysClockFreq+0xb8>)
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	091b      	lsrs	r3, r3, #4
 800181e:	f003 030f 	and.w	r3, r3, #15
 8001822:	3301      	adds	r3, #1
 8001824:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2b03      	cmp	r3, #3
 800182a:	d10c      	bne.n	8001846 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800182c:	4a1a      	ldr	r2, [pc, #104]	; (8001898 <HAL_RCC_GetSysClockFreq+0xc0>)
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	fbb2 f3f3 	udiv	r3, r2, r3
 8001834:	4a16      	ldr	r2, [pc, #88]	; (8001890 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001836:	68d2      	ldr	r2, [r2, #12]
 8001838:	0a12      	lsrs	r2, r2, #8
 800183a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800183e:	fb02 f303 	mul.w	r3, r2, r3
 8001842:	617b      	str	r3, [r7, #20]
      break;
 8001844:	e00c      	b.n	8001860 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001846:	4a13      	ldr	r2, [pc, #76]	; (8001894 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	fbb2 f3f3 	udiv	r3, r2, r3
 800184e:	4a10      	ldr	r2, [pc, #64]	; (8001890 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001850:	68d2      	ldr	r2, [r2, #12]
 8001852:	0a12      	lsrs	r2, r2, #8
 8001854:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001858:	fb02 f303 	mul.w	r3, r2, r3
 800185c:	617b      	str	r3, [r7, #20]
      break;
 800185e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001860:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	0e5b      	lsrs	r3, r3, #25
 8001866:	f003 0303 	and.w	r3, r3, #3
 800186a:	3301      	adds	r3, #1
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001870:	697a      	ldr	r2, [r7, #20]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	fbb2 f3f3 	udiv	r3, r2, r3
 8001878:	613b      	str	r3, [r7, #16]
 800187a:	e001      	b.n	8001880 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800187c:	2300      	movs	r3, #0
 800187e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001880:	693b      	ldr	r3, [r7, #16]
}
 8001882:	4618      	mov	r0, r3
 8001884:	371c      	adds	r7, #28
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	40021000 	.word	0x40021000
 8001894:	00f42400 	.word	0x00f42400
 8001898:	016e3600 	.word	0x016e3600

0800189c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018a0:	4b03      	ldr	r3, [pc, #12]	; (80018b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80018a2:	681b      	ldr	r3, [r3, #0]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	20000000 	.word	0x20000000

080018b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80018b8:	f7ff fff0 	bl	800189c <HAL_RCC_GetHCLKFreq>
 80018bc:	4602      	mov	r2, r0
 80018be:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	0a1b      	lsrs	r3, r3, #8
 80018c4:	f003 0307 	and.w	r3, r3, #7
 80018c8:	4904      	ldr	r1, [pc, #16]	; (80018dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80018ca:	5ccb      	ldrb	r3, [r1, r3]
 80018cc:	f003 031f 	and.w	r3, r3, #31
 80018d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40021000 	.word	0x40021000
 80018dc:	080053f4 	.word	0x080053f4

080018e0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	220f      	movs	r2, #15
 80018ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80018f0:	4b12      	ldr	r3, [pc, #72]	; (800193c <HAL_RCC_GetClockConfig+0x5c>)
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f003 0203 	and.w	r2, r3, #3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80018fc:	4b0f      	ldr	r3, [pc, #60]	; (800193c <HAL_RCC_GetClockConfig+0x5c>)
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001908:	4b0c      	ldr	r3, [pc, #48]	; (800193c <HAL_RCC_GetClockConfig+0x5c>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001914:	4b09      	ldr	r3, [pc, #36]	; (800193c <HAL_RCC_GetClockConfig+0x5c>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	08db      	lsrs	r3, r3, #3
 800191a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001922:	4b07      	ldr	r3, [pc, #28]	; (8001940 <HAL_RCC_GetClockConfig+0x60>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 020f 	and.w	r2, r3, #15
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	601a      	str	r2, [r3, #0]
}
 800192e:	bf00      	nop
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	40021000 	.word	0x40021000
 8001940:	40022000 	.word	0x40022000

08001944 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001944:	b480      	push	{r7}
 8001946:	b087      	sub	sp, #28
 8001948:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800194a:	4b1e      	ldr	r3, [pc, #120]	; (80019c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800194c:	68db      	ldr	r3, [r3, #12]
 800194e:	f003 0303 	and.w	r3, r3, #3
 8001952:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001954:	4b1b      	ldr	r3, [pc, #108]	; (80019c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	091b      	lsrs	r3, r3, #4
 800195a:	f003 030f 	and.w	r3, r3, #15
 800195e:	3301      	adds	r3, #1
 8001960:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	2b03      	cmp	r3, #3
 8001966:	d10c      	bne.n	8001982 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001968:	4a17      	ldr	r2, [pc, #92]	; (80019c8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001970:	4a14      	ldr	r2, [pc, #80]	; (80019c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001972:	68d2      	ldr	r2, [r2, #12]
 8001974:	0a12      	lsrs	r2, r2, #8
 8001976:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800197a:	fb02 f303 	mul.w	r3, r2, r3
 800197e:	617b      	str	r3, [r7, #20]
    break;
 8001980:	e00c      	b.n	800199c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001982:	4a12      	ldr	r2, [pc, #72]	; (80019cc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	fbb2 f3f3 	udiv	r3, r2, r3
 800198a:	4a0e      	ldr	r2, [pc, #56]	; (80019c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800198c:	68d2      	ldr	r2, [r2, #12]
 800198e:	0a12      	lsrs	r2, r2, #8
 8001990:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001994:	fb02 f303 	mul.w	r3, r2, r3
 8001998:	617b      	str	r3, [r7, #20]
    break;
 800199a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800199c:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	0e5b      	lsrs	r3, r3, #25
 80019a2:	f003 0303 	and.w	r3, r3, #3
 80019a6:	3301      	adds	r3, #1
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80019ac:	697a      	ldr	r2, [r7, #20]
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80019b6:	687b      	ldr	r3, [r7, #4]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	371c      	adds	r7, #28
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	40021000 	.word	0x40021000
 80019c8:	016e3600 	.word	0x016e3600
 80019cc:	00f42400 	.word	0x00f42400

080019d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d101      	bne.n	80019e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e049      	b.n	8001a76 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d106      	bne.n	80019fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f000 f841 	bl	8001a7e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2202      	movs	r2, #2
 8001a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	3304      	adds	r3, #4
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4610      	mov	r0, r2
 8001a10:	f000 fa60 	bl	8001ed4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2201      	movs	r2, #1
 8001a18:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2201      	movs	r2, #1
 8001a28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2201      	movs	r2, #1
 8001a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2201      	movs	r2, #1
 8001a48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b083      	sub	sp, #12
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a86:	bf00      	nop
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
	...

08001a94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d001      	beq.n	8001aac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e054      	b.n	8001b56 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2202      	movs	r2, #2
 8001ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	68da      	ldr	r2, [r3, #12]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f042 0201 	orr.w	r2, r2, #1
 8001ac2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a26      	ldr	r2, [pc, #152]	; (8001b64 <HAL_TIM_Base_Start_IT+0xd0>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d022      	beq.n	8001b14 <HAL_TIM_Base_Start_IT+0x80>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ad6:	d01d      	beq.n	8001b14 <HAL_TIM_Base_Start_IT+0x80>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a22      	ldr	r2, [pc, #136]	; (8001b68 <HAL_TIM_Base_Start_IT+0xd4>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d018      	beq.n	8001b14 <HAL_TIM_Base_Start_IT+0x80>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a21      	ldr	r2, [pc, #132]	; (8001b6c <HAL_TIM_Base_Start_IT+0xd8>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d013      	beq.n	8001b14 <HAL_TIM_Base_Start_IT+0x80>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a1f      	ldr	r2, [pc, #124]	; (8001b70 <HAL_TIM_Base_Start_IT+0xdc>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d00e      	beq.n	8001b14 <HAL_TIM_Base_Start_IT+0x80>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a1e      	ldr	r2, [pc, #120]	; (8001b74 <HAL_TIM_Base_Start_IT+0xe0>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d009      	beq.n	8001b14 <HAL_TIM_Base_Start_IT+0x80>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a1c      	ldr	r2, [pc, #112]	; (8001b78 <HAL_TIM_Base_Start_IT+0xe4>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d004      	beq.n	8001b14 <HAL_TIM_Base_Start_IT+0x80>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a1b      	ldr	r2, [pc, #108]	; (8001b7c <HAL_TIM_Base_Start_IT+0xe8>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d115      	bne.n	8001b40 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	689a      	ldr	r2, [r3, #8]
 8001b1a:	4b19      	ldr	r3, [pc, #100]	; (8001b80 <HAL_TIM_Base_Start_IT+0xec>)
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2b06      	cmp	r3, #6
 8001b24:	d015      	beq.n	8001b52 <HAL_TIM_Base_Start_IT+0xbe>
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b2c:	d011      	beq.n	8001b52 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f042 0201 	orr.w	r2, r2, #1
 8001b3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b3e:	e008      	b.n	8001b52 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f042 0201 	orr.w	r2, r2, #1
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	e000      	b.n	8001b54 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b52:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3714      	adds	r7, #20
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	40012c00 	.word	0x40012c00
 8001b68:	40000400 	.word	0x40000400
 8001b6c:	40000800 	.word	0x40000800
 8001b70:	40000c00 	.word	0x40000c00
 8001b74:	40013400 	.word	0x40013400
 8001b78:	40014000 	.word	0x40014000
 8001b7c:	40015000 	.word	0x40015000
 8001b80:	00010007 	.word	0x00010007

08001b84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	691b      	ldr	r3, [r3, #16]
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d122      	bne.n	8001be0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	f003 0302 	and.w	r3, r3, #2
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d11b      	bne.n	8001be0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f06f 0202 	mvn.w	r2, #2
 8001bb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	f003 0303 	and.w	r3, r3, #3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d003      	beq.n	8001bce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f000 f965 	bl	8001e96 <HAL_TIM_IC_CaptureCallback>
 8001bcc:	e005      	b.n	8001bda <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f000 f957 	bl	8001e82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f000 f968 	bl	8001eaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	f003 0304 	and.w	r3, r3, #4
 8001bea:	2b04      	cmp	r3, #4
 8001bec:	d122      	bne.n	8001c34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	f003 0304 	and.w	r3, r3, #4
 8001bf8:	2b04      	cmp	r3, #4
 8001bfa:	d11b      	bne.n	8001c34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f06f 0204 	mvn.w	r2, #4
 8001c04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2202      	movs	r2, #2
 8001c0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d003      	beq.n	8001c22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f000 f93b 	bl	8001e96 <HAL_TIM_IC_CaptureCallback>
 8001c20:	e005      	b.n	8001c2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 f92d 	bl	8001e82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f000 f93e 	bl	8001eaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	f003 0308 	and.w	r3, r3, #8
 8001c3e:	2b08      	cmp	r3, #8
 8001c40:	d122      	bne.n	8001c88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	f003 0308 	and.w	r3, r3, #8
 8001c4c:	2b08      	cmp	r3, #8
 8001c4e:	d11b      	bne.n	8001c88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f06f 0208 	mvn.w	r2, #8
 8001c58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2204      	movs	r2, #4
 8001c5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	69db      	ldr	r3, [r3, #28]
 8001c66:	f003 0303 	and.w	r3, r3, #3
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d003      	beq.n	8001c76 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 f911 	bl	8001e96 <HAL_TIM_IC_CaptureCallback>
 8001c74:	e005      	b.n	8001c82 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 f903 	bl	8001e82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f000 f914 	bl	8001eaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	f003 0310 	and.w	r3, r3, #16
 8001c92:	2b10      	cmp	r3, #16
 8001c94:	d122      	bne.n	8001cdc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	f003 0310 	and.w	r3, r3, #16
 8001ca0:	2b10      	cmp	r3, #16
 8001ca2:	d11b      	bne.n	8001cdc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f06f 0210 	mvn.w	r2, #16
 8001cac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2208      	movs	r2, #8
 8001cb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d003      	beq.n	8001cca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f000 f8e7 	bl	8001e96 <HAL_TIM_IC_CaptureCallback>
 8001cc8:	e005      	b.n	8001cd6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f000 f8d9 	bl	8001e82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f000 f8ea 	bl	8001eaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d10e      	bne.n	8001d08 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	f003 0301 	and.w	r3, r3, #1
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d107      	bne.n	8001d08 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f06f 0201 	mvn.w	r2, #1
 8001d00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f7fe fc5c 	bl	80005c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d12:	2b80      	cmp	r3, #128	; 0x80
 8001d14:	d10e      	bne.n	8001d34 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d20:	2b80      	cmp	r3, #128	; 0x80
 8001d22:	d107      	bne.n	8001d34 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 f982 	bl	8002038 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	691b      	ldr	r3, [r3, #16]
 8001d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d42:	d10e      	bne.n	8001d62 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d4e:	2b80      	cmp	r3, #128	; 0x80
 8001d50:	d107      	bne.n	8001d62 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001d5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f000 f975 	bl	800204c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	691b      	ldr	r3, [r3, #16]
 8001d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d6c:	2b40      	cmp	r3, #64	; 0x40
 8001d6e:	d10e      	bne.n	8001d8e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d7a:	2b40      	cmp	r3, #64	; 0x40
 8001d7c:	d107      	bne.n	8001d8e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f000 f898 	bl	8001ebe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	691b      	ldr	r3, [r3, #16]
 8001d94:	f003 0320 	and.w	r3, r3, #32
 8001d98:	2b20      	cmp	r3, #32
 8001d9a:	d10e      	bne.n	8001dba <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	f003 0320 	and.w	r3, r3, #32
 8001da6:	2b20      	cmp	r3, #32
 8001da8:	d107      	bne.n	8001dba <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f06f 0220 	mvn.w	r2, #32
 8001db2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f000 f935 	bl	8002024 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001dc8:	d10f      	bne.n	8001dea <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001dd8:	d107      	bne.n	8001dea <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8001de2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f000 f93b 	bl	8002060 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001df4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001df8:	d10f      	bne.n	8001e1a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001e08:	d107      	bne.n	8001e1a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8001e12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 f92d 	bl	8002074 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	691b      	ldr	r3, [r3, #16]
 8001e20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e28:	d10f      	bne.n	8001e4a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e38:	d107      	bne.n	8001e4a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8001e42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f000 f91f 	bl	8002088 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	691b      	ldr	r3, [r3, #16]
 8001e50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e54:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001e58:	d10f      	bne.n	8001e7a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e64:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001e68:	d107      	bne.n	8001e7a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8001e72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f000 f911 	bl	800209c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e7a:	bf00      	nop
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e82:	b480      	push	{r7}
 8001e84:	b083      	sub	sp, #12
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e8a:	bf00      	nop
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr

08001e96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e96:	b480      	push	{r7}
 8001e98:	b083      	sub	sp, #12
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e9e:	bf00      	nop
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr

08001eaa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	b083      	sub	sp, #12
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001eb2:	bf00      	nop
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr

08001ebe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	b083      	sub	sp, #12
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ec6:	bf00      	nop
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
	...

08001ed4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4a46      	ldr	r2, [pc, #280]	; (8002000 <TIM_Base_SetConfig+0x12c>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d017      	beq.n	8001f1c <TIM_Base_SetConfig+0x48>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ef2:	d013      	beq.n	8001f1c <TIM_Base_SetConfig+0x48>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a43      	ldr	r2, [pc, #268]	; (8002004 <TIM_Base_SetConfig+0x130>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d00f      	beq.n	8001f1c <TIM_Base_SetConfig+0x48>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a42      	ldr	r2, [pc, #264]	; (8002008 <TIM_Base_SetConfig+0x134>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d00b      	beq.n	8001f1c <TIM_Base_SetConfig+0x48>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a41      	ldr	r2, [pc, #260]	; (800200c <TIM_Base_SetConfig+0x138>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d007      	beq.n	8001f1c <TIM_Base_SetConfig+0x48>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a40      	ldr	r2, [pc, #256]	; (8002010 <TIM_Base_SetConfig+0x13c>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d003      	beq.n	8001f1c <TIM_Base_SetConfig+0x48>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4a3f      	ldr	r2, [pc, #252]	; (8002014 <TIM_Base_SetConfig+0x140>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d108      	bne.n	8001f2e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	68fa      	ldr	r2, [r7, #12]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a33      	ldr	r2, [pc, #204]	; (8002000 <TIM_Base_SetConfig+0x12c>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d023      	beq.n	8001f7e <TIM_Base_SetConfig+0xaa>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f3c:	d01f      	beq.n	8001f7e <TIM_Base_SetConfig+0xaa>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a30      	ldr	r2, [pc, #192]	; (8002004 <TIM_Base_SetConfig+0x130>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d01b      	beq.n	8001f7e <TIM_Base_SetConfig+0xaa>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a2f      	ldr	r2, [pc, #188]	; (8002008 <TIM_Base_SetConfig+0x134>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d017      	beq.n	8001f7e <TIM_Base_SetConfig+0xaa>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a2e      	ldr	r2, [pc, #184]	; (800200c <TIM_Base_SetConfig+0x138>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d013      	beq.n	8001f7e <TIM_Base_SetConfig+0xaa>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a2d      	ldr	r2, [pc, #180]	; (8002010 <TIM_Base_SetConfig+0x13c>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d00f      	beq.n	8001f7e <TIM_Base_SetConfig+0xaa>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a2d      	ldr	r2, [pc, #180]	; (8002018 <TIM_Base_SetConfig+0x144>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d00b      	beq.n	8001f7e <TIM_Base_SetConfig+0xaa>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a2c      	ldr	r2, [pc, #176]	; (800201c <TIM_Base_SetConfig+0x148>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d007      	beq.n	8001f7e <TIM_Base_SetConfig+0xaa>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a2b      	ldr	r2, [pc, #172]	; (8002020 <TIM_Base_SetConfig+0x14c>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d003      	beq.n	8001f7e <TIM_Base_SetConfig+0xaa>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a26      	ldr	r2, [pc, #152]	; (8002014 <TIM_Base_SetConfig+0x140>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d108      	bne.n	8001f90 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	68fa      	ldr	r2, [r7, #12]
 8001fa2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	689a      	ldr	r2, [r3, #8]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a12      	ldr	r2, [pc, #72]	; (8002000 <TIM_Base_SetConfig+0x12c>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d013      	beq.n	8001fe4 <TIM_Base_SetConfig+0x110>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a14      	ldr	r2, [pc, #80]	; (8002010 <TIM_Base_SetConfig+0x13c>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d00f      	beq.n	8001fe4 <TIM_Base_SetConfig+0x110>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a14      	ldr	r2, [pc, #80]	; (8002018 <TIM_Base_SetConfig+0x144>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d00b      	beq.n	8001fe4 <TIM_Base_SetConfig+0x110>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a13      	ldr	r2, [pc, #76]	; (800201c <TIM_Base_SetConfig+0x148>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d007      	beq.n	8001fe4 <TIM_Base_SetConfig+0x110>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a12      	ldr	r2, [pc, #72]	; (8002020 <TIM_Base_SetConfig+0x14c>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d003      	beq.n	8001fe4 <TIM_Base_SetConfig+0x110>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a0d      	ldr	r2, [pc, #52]	; (8002014 <TIM_Base_SetConfig+0x140>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d103      	bne.n	8001fec <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	691a      	ldr	r2, [r3, #16]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	615a      	str	r2, [r3, #20]
}
 8001ff2:	bf00      	nop
 8001ff4:	3714      	adds	r7, #20
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	40012c00 	.word	0x40012c00
 8002004:	40000400 	.word	0x40000400
 8002008:	40000800 	.word	0x40000800
 800200c:	40000c00 	.word	0x40000c00
 8002010:	40013400 	.word	0x40013400
 8002014:	40015000 	.word	0x40015000
 8002018:	40014000 	.word	0x40014000
 800201c:	40014400 	.word	0x40014400
 8002020:	40014800 	.word	0x40014800

08002024 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002040:	bf00      	nop
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f103 0208 	add.w	r2, r3, #8
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f04f 32ff 	mov.w	r2, #4294967295
 80020c8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f103 0208 	add.w	r2, r3, #8
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f103 0208 	add.w	r2, r3, #8
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80020fe:	bf00      	nop
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr

0800210a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800210a:	b480      	push	{r7}
 800210c:	b085      	sub	sp, #20
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
 8002112:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	68fa      	ldr	r2, [r7, #12]
 800211e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	689a      	ldr	r2, [r3, #8]
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	683a      	ldr	r2, [r7, #0]
 8002134:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	1c5a      	adds	r2, r3, #1
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	601a      	str	r2, [r3, #0]
}
 8002146:	bf00      	nop
 8002148:	3714      	adds	r7, #20
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr

08002152 <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002152:	b480      	push	{r7}
 8002154:	b085      	sub	sp, #20
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	6892      	ldr	r2, [r2, #8]
 8002168:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	6852      	ldr	r2, [r2, #4]
 8002172:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	429a      	cmp	r2, r3
 800217c:	d103      	bne.n	8002186 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	689a      	ldr	r2, [r3, #8]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	1e5a      	subs	r2, r3, #1
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
}
 800219a:	4618      	mov	r0, r3
 800219c:	3714      	adds	r7, #20
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr

080021a6 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b08c      	sub	sp, #48	; 0x30
 80021aa:	af04      	add	r7, sp, #16
 80021ac:	60f8      	str	r0, [r7, #12]
 80021ae:	60b9      	str	r1, [r7, #8]
 80021b0:	603b      	str	r3, [r7, #0]
 80021b2:	4613      	mov	r3, r2
 80021b4:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80021b6:	88fb      	ldrh	r3, [r7, #6]
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	4618      	mov	r0, r3
 80021bc:	f000 fede 	bl	8002f7c <pvPortMalloc>
 80021c0:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d00e      	beq.n	80021e6 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80021c8:	2058      	movs	r0, #88	; 0x58
 80021ca:	f000 fed7 	bl	8002f7c <pvPortMalloc>
 80021ce:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d003      	beq.n	80021de <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	697a      	ldr	r2, [r7, #20]
 80021da:	631a      	str	r2, [r3, #48]	; 0x30
 80021dc:	e005      	b.n	80021ea <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80021de:	6978      	ldr	r0, [r7, #20]
 80021e0:	f000 ffac 	bl	800313c <vPortFree>
 80021e4:	e001      	b.n	80021ea <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80021e6:	2300      	movs	r3, #0
 80021e8:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d013      	beq.n	8002218 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80021f0:	88fa      	ldrh	r2, [r7, #6]
 80021f2:	2300      	movs	r3, #0
 80021f4:	9303      	str	r3, [sp, #12]
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	9302      	str	r3, [sp, #8]
 80021fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021fc:	9301      	str	r3, [sp, #4]
 80021fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002200:	9300      	str	r3, [sp, #0]
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	68b9      	ldr	r1, [r7, #8]
 8002206:	68f8      	ldr	r0, [r7, #12]
 8002208:	f000 f80e 	bl	8002228 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800220c:	69f8      	ldr	r0, [r7, #28]
 800220e:	f000 f8a1 	bl	8002354 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002212:	2301      	movs	r3, #1
 8002214:	61bb      	str	r3, [r7, #24]
 8002216:	e002      	b.n	800221e <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002218:	f04f 33ff 	mov.w	r3, #4294967295
 800221c:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800221e:	69bb      	ldr	r3, [r7, #24]
    }
 8002220:	4618      	mov	r0, r3
 8002222:	3720      	adds	r7, #32
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b088      	sub	sp, #32
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
 8002234:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002238:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	461a      	mov	r2, r3
 8002240:	21a5      	movs	r1, #165	; 0xa5
 8002242:	f002 ffe9 	bl	8005218 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002248:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002250:	3b01      	subs	r3, #1
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	4413      	add	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	f023 0307 	bic.w	r3, r3, #7
 800225e:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	f003 0307 	and.w	r3, r3, #7
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00a      	beq.n	8002280 <prvInitialiseNewTask+0x58>
        __asm volatile
 800226a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800226e:	f383 8811 	msr	BASEPRI, r3
 8002272:	f3bf 8f6f 	isb	sy
 8002276:	f3bf 8f4f 	dsb	sy
 800227a:	617b      	str	r3, [r7, #20]
    }
 800227c:	bf00      	nop
 800227e:	e7fe      	b.n	800227e <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d01f      	beq.n	80022c6 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002286:	2300      	movs	r3, #0
 8002288:	61fb      	str	r3, [r7, #28]
 800228a:	e012      	b.n	80022b2 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800228c:	68ba      	ldr	r2, [r7, #8]
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	4413      	add	r3, r2
 8002292:	7819      	ldrb	r1, [r3, #0]
 8002294:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	4413      	add	r3, r2
 800229a:	3334      	adds	r3, #52	; 0x34
 800229c:	460a      	mov	r2, r1
 800229e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80022a0:	68ba      	ldr	r2, [r7, #8]
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	4413      	add	r3, r2
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d006      	beq.n	80022ba <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	3301      	adds	r3, #1
 80022b0:	61fb      	str	r3, [r7, #28]
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	2b09      	cmp	r3, #9
 80022b6:	d9e9      	bls.n	800228c <prvInitialiseNewTask+0x64>
 80022b8:	e000      	b.n	80022bc <prvInitialiseNewTask+0x94>
            {
                break;
 80022ba:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80022bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80022c4:	e003      	b.n	80022ce <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80022c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80022ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d0:	2b04      	cmp	r3, #4
 80022d2:	d901      	bls.n	80022d8 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80022d4:	2304      	movs	r3, #4
 80022d6:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80022d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022dc:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80022de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022e2:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80022e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022e6:	2200      	movs	r2, #0
 80022e8:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80022ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ec:	3304      	adds	r3, #4
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff fefe 	bl	80020f0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80022f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f6:	3318      	adds	r3, #24
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff fef9 	bl	80020f0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80022fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002300:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002302:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002306:	f1c3 0205 	rsb	r2, r3, #5
 800230a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800230c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800230e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002310:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002312:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002316:	3350      	adds	r3, #80	; 0x50
 8002318:	2204      	movs	r2, #4
 800231a:	2100      	movs	r1, #0
 800231c:	4618      	mov	r0, r3
 800231e:	f002 ff7b 	bl	8005218 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002324:	3354      	adds	r3, #84	; 0x54
 8002326:	2201      	movs	r2, #1
 8002328:	2100      	movs	r1, #0
 800232a:	4618      	mov	r0, r3
 800232c:	f002 ff74 	bl	8005218 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002330:	683a      	ldr	r2, [r7, #0]
 8002332:	68f9      	ldr	r1, [r7, #12]
 8002334:	69b8      	ldr	r0, [r7, #24]
 8002336:	f000 fb49 	bl	80029cc <pxPortInitialiseStack>
 800233a:	4602      	mov	r2, r0
 800233c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800233e:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002342:	2b00      	cmp	r3, #0
 8002344:	d002      	beq.n	800234c <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800234a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800234c:	bf00      	nop
 800234e:	3720      	adds	r7, #32
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002354:	b5b0      	push	{r4, r5, r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af02      	add	r7, sp, #8
 800235a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800235c:	f000 fce2 	bl	8002d24 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002360:	4b35      	ldr	r3, [pc, #212]	; (8002438 <prvAddNewTaskToReadyList+0xe4>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	3301      	adds	r3, #1
 8002366:	4a34      	ldr	r2, [pc, #208]	; (8002438 <prvAddNewTaskToReadyList+0xe4>)
 8002368:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800236a:	4b34      	ldr	r3, [pc, #208]	; (800243c <prvAddNewTaskToReadyList+0xe8>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d109      	bne.n	8002386 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002372:	4a32      	ldr	r2, [pc, #200]	; (800243c <prvAddNewTaskToReadyList+0xe8>)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002378:	4b2f      	ldr	r3, [pc, #188]	; (8002438 <prvAddNewTaskToReadyList+0xe4>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d110      	bne.n	80023a2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002380:	f000 fa8a 	bl	8002898 <prvInitialiseTaskLists>
 8002384:	e00d      	b.n	80023a2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002386:	4b2e      	ldr	r3, [pc, #184]	; (8002440 <prvAddNewTaskToReadyList+0xec>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d109      	bne.n	80023a2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800238e:	4b2b      	ldr	r3, [pc, #172]	; (800243c <prvAddNewTaskToReadyList+0xe8>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002398:	429a      	cmp	r2, r3
 800239a:	d802      	bhi.n	80023a2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800239c:	4a27      	ldr	r2, [pc, #156]	; (800243c <prvAddNewTaskToReadyList+0xe8>)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80023a2:	4b28      	ldr	r3, [pc, #160]	; (8002444 <prvAddNewTaskToReadyList+0xf0>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	3301      	adds	r3, #1
 80023a8:	4a26      	ldr	r2, [pc, #152]	; (8002444 <prvAddNewTaskToReadyList+0xf0>)
 80023aa:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80023ac:	4b25      	ldr	r3, [pc, #148]	; (8002444 <prvAddNewTaskToReadyList+0xf0>)
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d016      	beq.n	80023e8 <prvAddNewTaskToReadyList+0x94>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4618      	mov	r0, r3
 80023be:	f002 fd09 	bl	8004dd4 <SEGGER_SYSVIEW_OnTaskCreate>
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	461d      	mov	r5, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	461c      	mov	r4, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	1ae3      	subs	r3, r4, r3
 80023e0:	9300      	str	r3, [sp, #0]
 80023e2:	462b      	mov	r3, r5
 80023e4:	f001 f878 	bl	80034d8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f002 fd76 	bl	8004edc <SEGGER_SYSVIEW_OnTaskStartReady>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f4:	2201      	movs	r2, #1
 80023f6:	409a      	lsls	r2, r3
 80023f8:	4b13      	ldr	r3, [pc, #76]	; (8002448 <prvAddNewTaskToReadyList+0xf4>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	4a12      	ldr	r2, [pc, #72]	; (8002448 <prvAddNewTaskToReadyList+0xf4>)
 8002400:	6013      	str	r3, [r2, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002406:	4613      	mov	r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4413      	add	r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	4a0f      	ldr	r2, [pc, #60]	; (800244c <prvAddNewTaskToReadyList+0xf8>)
 8002410:	441a      	add	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	3304      	adds	r3, #4
 8002416:	4619      	mov	r1, r3
 8002418:	4610      	mov	r0, r2
 800241a:	f7ff fe76 	bl	800210a <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800241e:	f000 fcb1 	bl	8002d84 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002422:	4b07      	ldr	r3, [pc, #28]	; (8002440 <prvAddNewTaskToReadyList+0xec>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <prvAddNewTaskToReadyList+0xda>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800242a:	4b04      	ldr	r3, [pc, #16]	; (800243c <prvAddNewTaskToReadyList+0xe8>)
 800242c:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800242e:	bf00      	nop
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bdb0      	pop	{r4, r5, r7, pc}
 8002436:	bf00      	nop
 8002438:	20000158 	.word	0x20000158
 800243c:	20000080 	.word	0x20000080
 8002440:	20000164 	.word	0x20000164
 8002444:	20000174 	.word	0x20000174
 8002448:	20000160 	.word	0x20000160
 800244c:	20000084 	.word	0x20000084

08002450 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002456:	4b24      	ldr	r3, [pc, #144]	; (80024e8 <vTaskStartScheduler+0x98>)
 8002458:	9301      	str	r3, [sp, #4]
 800245a:	2300      	movs	r3, #0
 800245c:	9300      	str	r3, [sp, #0]
 800245e:	2300      	movs	r3, #0
 8002460:	2282      	movs	r2, #130	; 0x82
 8002462:	4922      	ldr	r1, [pc, #136]	; (80024ec <vTaskStartScheduler+0x9c>)
 8002464:	4822      	ldr	r0, [pc, #136]	; (80024f0 <vTaskStartScheduler+0xa0>)
 8002466:	f7ff fe9e 	bl	80021a6 <xTaskCreate>
 800246a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d124      	bne.n	80024bc <vTaskStartScheduler+0x6c>
        __asm volatile
 8002472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002476:	f383 8811 	msr	BASEPRI, r3
 800247a:	f3bf 8f6f 	isb	sy
 800247e:	f3bf 8f4f 	dsb	sy
 8002482:	60bb      	str	r3, [r7, #8]
    }
 8002484:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002486:	4b1b      	ldr	r3, [pc, #108]	; (80024f4 <vTaskStartScheduler+0xa4>)
 8002488:	f04f 32ff 	mov.w	r2, #4294967295
 800248c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800248e:	4b1a      	ldr	r3, [pc, #104]	; (80024f8 <vTaskStartScheduler+0xa8>)
 8002490:	2201      	movs	r2, #1
 8002492:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002494:	4b19      	ldr	r3, [pc, #100]	; (80024fc <vTaskStartScheduler+0xac>)
 8002496:	2200      	movs	r2, #0
 8002498:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800249a:	4b19      	ldr	r3, [pc, #100]	; (8002500 <vTaskStartScheduler+0xb0>)
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	4b12      	ldr	r3, [pc, #72]	; (80024e8 <vTaskStartScheduler+0x98>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d102      	bne.n	80024ac <vTaskStartScheduler+0x5c>
 80024a6:	f002 fc79 	bl	8004d9c <SEGGER_SYSVIEW_OnIdle>
 80024aa:	e004      	b.n	80024b6 <vTaskStartScheduler+0x66>
 80024ac:	4b14      	ldr	r3, [pc, #80]	; (8002500 <vTaskStartScheduler+0xb0>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f002 fcd1 	bl	8004e58 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80024b6:	f000 fb15 	bl	8002ae4 <xPortStartScheduler>
 80024ba:	e00e      	b.n	80024da <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024c2:	d10a      	bne.n	80024da <vTaskStartScheduler+0x8a>
        __asm volatile
 80024c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024c8:	f383 8811 	msr	BASEPRI, r3
 80024cc:	f3bf 8f6f 	isb	sy
 80024d0:	f3bf 8f4f 	dsb	sy
 80024d4:	607b      	str	r3, [r7, #4]
    }
 80024d6:	bf00      	nop
 80024d8:	e7fe      	b.n	80024d8 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80024da:	4b0a      	ldr	r3, [pc, #40]	; (8002504 <vTaskStartScheduler+0xb4>)
 80024dc:	681b      	ldr	r3, [r3, #0]
}
 80024de:	bf00      	nop
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	2000017c 	.word	0x2000017c
 80024ec:	08005310 	.word	0x08005310
 80024f0:	08002875 	.word	0x08002875
 80024f4:	20000178 	.word	0x20000178
 80024f8:	20000164 	.word	0x20000164
 80024fc:	2000015c 	.word	0x2000015c
 8002500:	20000080 	.word	0x20000080
 8002504:	2000000c 	.word	0x2000000c

08002508 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800250c:	4b04      	ldr	r3, [pc, #16]	; (8002520 <vTaskSuspendAll+0x18>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	3301      	adds	r3, #1
 8002512:	4a03      	ldr	r2, [pc, #12]	; (8002520 <vTaskSuspendAll+0x18>)
 8002514:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002516:	bf00      	nop
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	20000180 	.word	0x20000180

08002524 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800252a:	2300      	movs	r3, #0
 800252c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800252e:	2300      	movs	r3, #0
 8002530:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002532:	4b3d      	ldr	r3, [pc, #244]	; (8002628 <xTaskResumeAll+0x104>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d10a      	bne.n	8002550 <xTaskResumeAll+0x2c>
        __asm volatile
 800253a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800253e:	f383 8811 	msr	BASEPRI, r3
 8002542:	f3bf 8f6f 	isb	sy
 8002546:	f3bf 8f4f 	dsb	sy
 800254a:	603b      	str	r3, [r7, #0]
    }
 800254c:	bf00      	nop
 800254e:	e7fe      	b.n	800254e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002550:	f000 fbe8 	bl	8002d24 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002554:	4b34      	ldr	r3, [pc, #208]	; (8002628 <xTaskResumeAll+0x104>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	3b01      	subs	r3, #1
 800255a:	4a33      	ldr	r2, [pc, #204]	; (8002628 <xTaskResumeAll+0x104>)
 800255c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800255e:	4b32      	ldr	r3, [pc, #200]	; (8002628 <xTaskResumeAll+0x104>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d159      	bne.n	800261a <xTaskResumeAll+0xf6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002566:	4b31      	ldr	r3, [pc, #196]	; (800262c <xTaskResumeAll+0x108>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d055      	beq.n	800261a <xTaskResumeAll+0xf6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800256e:	e032      	b.n	80025d6 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002570:	4b2f      	ldr	r3, [pc, #188]	; (8002630 <xTaskResumeAll+0x10c>)
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	3318      	adds	r3, #24
 800257c:	4618      	mov	r0, r3
 800257e:	f7ff fde8 	bl	8002152 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	3304      	adds	r3, #4
 8002586:	4618      	mov	r0, r3
 8002588:	f7ff fde3 	bl	8002152 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	4618      	mov	r0, r3
 8002590:	f002 fca4 	bl	8004edc <SEGGER_SYSVIEW_OnTaskStartReady>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002598:	2201      	movs	r2, #1
 800259a:	409a      	lsls	r2, r3
 800259c:	4b25      	ldr	r3, [pc, #148]	; (8002634 <xTaskResumeAll+0x110>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	4a24      	ldr	r2, [pc, #144]	; (8002634 <xTaskResumeAll+0x110>)
 80025a4:	6013      	str	r3, [r2, #0]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025aa:	4613      	mov	r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	4413      	add	r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	4a21      	ldr	r2, [pc, #132]	; (8002638 <xTaskResumeAll+0x114>)
 80025b4:	441a      	add	r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	3304      	adds	r3, #4
 80025ba:	4619      	mov	r1, r3
 80025bc:	4610      	mov	r0, r2
 80025be:	f7ff fda4 	bl	800210a <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025c6:	4b1d      	ldr	r3, [pc, #116]	; (800263c <xTaskResumeAll+0x118>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d302      	bcc.n	80025d6 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80025d0:	4b1b      	ldr	r3, [pc, #108]	; (8002640 <xTaskResumeAll+0x11c>)
 80025d2:	2201      	movs	r2, #1
 80025d4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80025d6:	4b16      	ldr	r3, [pc, #88]	; (8002630 <xTaskResumeAll+0x10c>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1c8      	bne.n	8002570 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80025e4:	f000 f9d6 	bl	8002994 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80025e8:	4b16      	ldr	r3, [pc, #88]	; (8002644 <xTaskResumeAll+0x120>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d010      	beq.n	8002616 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80025f4:	f000 f83a 	bl	800266c <xTaskIncrementTick>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d002      	beq.n	8002604 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 80025fe:	4b10      	ldr	r3, [pc, #64]	; (8002640 <xTaskResumeAll+0x11c>)
 8002600:	2201      	movs	r2, #1
 8002602:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	3b01      	subs	r3, #1
 8002608:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d1f1      	bne.n	80025f4 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8002610:	4b0c      	ldr	r3, [pc, #48]	; (8002644 <xTaskResumeAll+0x120>)
 8002612:	2200      	movs	r2, #0
 8002614:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002616:	4b0a      	ldr	r3, [pc, #40]	; (8002640 <xTaskResumeAll+0x11c>)
 8002618:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800261a:	f000 fbb3 	bl	8002d84 <vPortExitCritical>

    return xAlreadyYielded;
 800261e:	687b      	ldr	r3, [r7, #4]
}
 8002620:	4618      	mov	r0, r3
 8002622:	3710      	adds	r7, #16
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	20000180 	.word	0x20000180
 800262c:	20000158 	.word	0x20000158
 8002630:	20000118 	.word	0x20000118
 8002634:	20000160 	.word	0x20000160
 8002638:	20000084 	.word	0x20000084
 800263c:	20000080 	.word	0x20000080
 8002640:	2000016c 	.word	0x2000016c
 8002644:	20000168 	.word	0x20000168

08002648 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800264e:	f000 fc55 	bl	8002efc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002652:	2300      	movs	r3, #0
 8002654:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002656:	4b04      	ldr	r3, [pc, #16]	; (8002668 <xTaskGetTickCountFromISR+0x20>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800265c:	683b      	ldr	r3, [r7, #0]
}
 800265e:	4618      	mov	r0, r3
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	2000015c 	.word	0x2000015c

0800266c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002672:	2300      	movs	r3, #0
 8002674:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002676:	4b41      	ldr	r3, [pc, #260]	; (800277c <xTaskIncrementTick+0x110>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d173      	bne.n	8002766 <xTaskIncrementTick+0xfa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800267e:	4b40      	ldr	r3, [pc, #256]	; (8002780 <xTaskIncrementTick+0x114>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	3301      	adds	r3, #1
 8002684:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002686:	4a3e      	ldr	r2, [pc, #248]	; (8002780 <xTaskIncrementTick+0x114>)
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d120      	bne.n	80026d4 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8002692:	4b3c      	ldr	r3, [pc, #240]	; (8002784 <xTaskIncrementTick+0x118>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d00a      	beq.n	80026b2 <xTaskIncrementTick+0x46>
        __asm volatile
 800269c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026a0:	f383 8811 	msr	BASEPRI, r3
 80026a4:	f3bf 8f6f 	isb	sy
 80026a8:	f3bf 8f4f 	dsb	sy
 80026ac:	603b      	str	r3, [r7, #0]
    }
 80026ae:	bf00      	nop
 80026b0:	e7fe      	b.n	80026b0 <xTaskIncrementTick+0x44>
 80026b2:	4b34      	ldr	r3, [pc, #208]	; (8002784 <xTaskIncrementTick+0x118>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	4b33      	ldr	r3, [pc, #204]	; (8002788 <xTaskIncrementTick+0x11c>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a31      	ldr	r2, [pc, #196]	; (8002784 <xTaskIncrementTick+0x118>)
 80026be:	6013      	str	r3, [r2, #0]
 80026c0:	4a31      	ldr	r2, [pc, #196]	; (8002788 <xTaskIncrementTick+0x11c>)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6013      	str	r3, [r2, #0]
 80026c6:	4b31      	ldr	r3, [pc, #196]	; (800278c <xTaskIncrementTick+0x120>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	3301      	adds	r3, #1
 80026cc:	4a2f      	ldr	r2, [pc, #188]	; (800278c <xTaskIncrementTick+0x120>)
 80026ce:	6013      	str	r3, [r2, #0]
 80026d0:	f000 f960 	bl	8002994 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80026d4:	4b2e      	ldr	r3, [pc, #184]	; (8002790 <xTaskIncrementTick+0x124>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d348      	bcc.n	8002770 <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80026de:	4b29      	ldr	r3, [pc, #164]	; (8002784 <xTaskIncrementTick+0x118>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d104      	bne.n	80026f2 <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026e8:	4b29      	ldr	r3, [pc, #164]	; (8002790 <xTaskIncrementTick+0x124>)
 80026ea:	f04f 32ff 	mov.w	r2, #4294967295
 80026ee:	601a      	str	r2, [r3, #0]
                    break;
 80026f0:	e03e      	b.n	8002770 <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80026f2:	4b24      	ldr	r3, [pc, #144]	; (8002784 <xTaskIncrementTick+0x118>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	429a      	cmp	r2, r3
 8002708:	d203      	bcs.n	8002712 <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800270a:	4a21      	ldr	r2, [pc, #132]	; (8002790 <xTaskIncrementTick+0x124>)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002710:	e02e      	b.n	8002770 <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	3304      	adds	r3, #4
 8002716:	4618      	mov	r0, r3
 8002718:	f7ff fd1b 	bl	8002152 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002720:	2b00      	cmp	r3, #0
 8002722:	d004      	beq.n	800272e <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	3318      	adds	r3, #24
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff fd12 	bl	8002152 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	4618      	mov	r0, r3
 8002732:	f002 fbd3 	bl	8004edc <SEGGER_SYSVIEW_OnTaskStartReady>
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273a:	2201      	movs	r2, #1
 800273c:	409a      	lsls	r2, r3
 800273e:	4b15      	ldr	r3, [pc, #84]	; (8002794 <xTaskIncrementTick+0x128>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4313      	orrs	r3, r2
 8002744:	4a13      	ldr	r2, [pc, #76]	; (8002794 <xTaskIncrementTick+0x128>)
 8002746:	6013      	str	r3, [r2, #0]
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800274c:	4613      	mov	r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	4413      	add	r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	4a10      	ldr	r2, [pc, #64]	; (8002798 <xTaskIncrementTick+0x12c>)
 8002756:	441a      	add	r2, r3
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	3304      	adds	r3, #4
 800275c:	4619      	mov	r1, r3
 800275e:	4610      	mov	r0, r2
 8002760:	f7ff fcd3 	bl	800210a <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002764:	e7bb      	b.n	80026de <xTaskIncrementTick+0x72>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002766:	4b0d      	ldr	r3, [pc, #52]	; (800279c <xTaskIncrementTick+0x130>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	3301      	adds	r3, #1
 800276c:	4a0b      	ldr	r2, [pc, #44]	; (800279c <xTaskIncrementTick+0x130>)
 800276e:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002770:	697b      	ldr	r3, [r7, #20]
}
 8002772:	4618      	mov	r0, r3
 8002774:	3718      	adds	r7, #24
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	20000180 	.word	0x20000180
 8002780:	2000015c 	.word	0x2000015c
 8002784:	20000110 	.word	0x20000110
 8002788:	20000114 	.word	0x20000114
 800278c:	20000170 	.word	0x20000170
 8002790:	20000178 	.word	0x20000178
 8002794:	20000160 	.word	0x20000160
 8002798:	20000084 	.word	0x20000084
 800279c:	20000168 	.word	0x20000168

080027a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80027a6:	4b2d      	ldr	r3, [pc, #180]	; (800285c <vTaskSwitchContext+0xbc>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d003      	beq.n	80027b6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80027ae:	4b2c      	ldr	r3, [pc, #176]	; (8002860 <vTaskSwitchContext+0xc0>)
 80027b0:	2201      	movs	r2, #1
 80027b2:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80027b4:	e04d      	b.n	8002852 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 80027b6:	4b2a      	ldr	r3, [pc, #168]	; (8002860 <vTaskSwitchContext+0xc0>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80027bc:	4b29      	ldr	r3, [pc, #164]	; (8002864 <vTaskSwitchContext+0xc4>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	fab3 f383 	clz	r3, r3
 80027c8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80027ca:	7afb      	ldrb	r3, [r7, #11]
 80027cc:	f1c3 031f 	rsb	r3, r3, #31
 80027d0:	617b      	str	r3, [r7, #20]
 80027d2:	4925      	ldr	r1, [pc, #148]	; (8002868 <vTaskSwitchContext+0xc8>)
 80027d4:	697a      	ldr	r2, [r7, #20]
 80027d6:	4613      	mov	r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	4413      	add	r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	440b      	add	r3, r1
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d10a      	bne.n	80027fc <vTaskSwitchContext+0x5c>
        __asm volatile
 80027e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ea:	f383 8811 	msr	BASEPRI, r3
 80027ee:	f3bf 8f6f 	isb	sy
 80027f2:	f3bf 8f4f 	dsb	sy
 80027f6:	607b      	str	r3, [r7, #4]
    }
 80027f8:	bf00      	nop
 80027fa:	e7fe      	b.n	80027fa <vTaskSwitchContext+0x5a>
 80027fc:	697a      	ldr	r2, [r7, #20]
 80027fe:	4613      	mov	r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	4413      	add	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	4a18      	ldr	r2, [pc, #96]	; (8002868 <vTaskSwitchContext+0xc8>)
 8002808:	4413      	add	r3, r2
 800280a:	613b      	str	r3, [r7, #16]
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	685a      	ldr	r2, [r3, #4]
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	605a      	str	r2, [r3, #4]
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	685a      	ldr	r2, [r3, #4]
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	3308      	adds	r3, #8
 800281e:	429a      	cmp	r2, r3
 8002820:	d104      	bne.n	800282c <vTaskSwitchContext+0x8c>
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	685a      	ldr	r2, [r3, #4]
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	605a      	str	r2, [r3, #4]
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	4a0e      	ldr	r2, [pc, #56]	; (800286c <vTaskSwitchContext+0xcc>)
 8002834:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002836:	4b0d      	ldr	r3, [pc, #52]	; (800286c <vTaskSwitchContext+0xcc>)
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	4b0d      	ldr	r3, [pc, #52]	; (8002870 <vTaskSwitchContext+0xd0>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	429a      	cmp	r2, r3
 8002840:	d102      	bne.n	8002848 <vTaskSwitchContext+0xa8>
 8002842:	f002 faab 	bl	8004d9c <SEGGER_SYSVIEW_OnIdle>
}
 8002846:	e004      	b.n	8002852 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002848:	4b08      	ldr	r3, [pc, #32]	; (800286c <vTaskSwitchContext+0xcc>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4618      	mov	r0, r3
 800284e:	f002 fb03 	bl	8004e58 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002852:	bf00      	nop
 8002854:	3718      	adds	r7, #24
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	20000180 	.word	0x20000180
 8002860:	2000016c 	.word	0x2000016c
 8002864:	20000160 	.word	0x20000160
 8002868:	20000084 	.word	0x20000084
 800286c:	20000080 	.word	0x20000080
 8002870:	2000017c 	.word	0x2000017c

08002874 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800287c:	f000 f84c 	bl	8002918 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 8002880:	4b04      	ldr	r3, [pc, #16]	; (8002894 <prvIdleTask+0x20>)
 8002882:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	f3bf 8f4f 	dsb	sy
 800288c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002890:	e7f4      	b.n	800287c <prvIdleTask+0x8>
 8002892:	bf00      	nop
 8002894:	e000ed04 	.word	0xe000ed04

08002898 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800289e:	2300      	movs	r3, #0
 80028a0:	607b      	str	r3, [r7, #4]
 80028a2:	e00c      	b.n	80028be <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	4613      	mov	r3, r2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	4413      	add	r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	4a12      	ldr	r2, [pc, #72]	; (80028f8 <prvInitialiseTaskLists+0x60>)
 80028b0:	4413      	add	r3, r2
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff fbfc 	bl	80020b0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	3301      	adds	r3, #1
 80028bc:	607b      	str	r3, [r7, #4]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2b04      	cmp	r3, #4
 80028c2:	d9ef      	bls.n	80028a4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80028c4:	480d      	ldr	r0, [pc, #52]	; (80028fc <prvInitialiseTaskLists+0x64>)
 80028c6:	f7ff fbf3 	bl	80020b0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80028ca:	480d      	ldr	r0, [pc, #52]	; (8002900 <prvInitialiseTaskLists+0x68>)
 80028cc:	f7ff fbf0 	bl	80020b0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80028d0:	480c      	ldr	r0, [pc, #48]	; (8002904 <prvInitialiseTaskLists+0x6c>)
 80028d2:	f7ff fbed 	bl	80020b0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80028d6:	480c      	ldr	r0, [pc, #48]	; (8002908 <prvInitialiseTaskLists+0x70>)
 80028d8:	f7ff fbea 	bl	80020b0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80028dc:	480b      	ldr	r0, [pc, #44]	; (800290c <prvInitialiseTaskLists+0x74>)
 80028de:	f7ff fbe7 	bl	80020b0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80028e2:	4b0b      	ldr	r3, [pc, #44]	; (8002910 <prvInitialiseTaskLists+0x78>)
 80028e4:	4a05      	ldr	r2, [pc, #20]	; (80028fc <prvInitialiseTaskLists+0x64>)
 80028e6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80028e8:	4b0a      	ldr	r3, [pc, #40]	; (8002914 <prvInitialiseTaskLists+0x7c>)
 80028ea:	4a05      	ldr	r2, [pc, #20]	; (8002900 <prvInitialiseTaskLists+0x68>)
 80028ec:	601a      	str	r2, [r3, #0]
}
 80028ee:	bf00      	nop
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	20000084 	.word	0x20000084
 80028fc:	200000e8 	.word	0x200000e8
 8002900:	200000fc 	.word	0x200000fc
 8002904:	20000118 	.word	0x20000118
 8002908:	2000012c 	.word	0x2000012c
 800290c:	20000144 	.word	0x20000144
 8002910:	20000110 	.word	0x20000110
 8002914:	20000114 	.word	0x20000114

08002918 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800291e:	e019      	b.n	8002954 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002920:	f000 fa00 	bl	8002d24 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002924:	4b10      	ldr	r3, [pc, #64]	; (8002968 <prvCheckTasksWaitingTermination+0x50>)
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	3304      	adds	r3, #4
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff fc0e 	bl	8002152 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002936:	4b0d      	ldr	r3, [pc, #52]	; (800296c <prvCheckTasksWaitingTermination+0x54>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	3b01      	subs	r3, #1
 800293c:	4a0b      	ldr	r2, [pc, #44]	; (800296c <prvCheckTasksWaitingTermination+0x54>)
 800293e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002940:	4b0b      	ldr	r3, [pc, #44]	; (8002970 <prvCheckTasksWaitingTermination+0x58>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	3b01      	subs	r3, #1
 8002946:	4a0a      	ldr	r2, [pc, #40]	; (8002970 <prvCheckTasksWaitingTermination+0x58>)
 8002948:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800294a:	f000 fa1b 	bl	8002d84 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 f810 	bl	8002974 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002954:	4b06      	ldr	r3, [pc, #24]	; (8002970 <prvCheckTasksWaitingTermination+0x58>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d1e1      	bne.n	8002920 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800295c:	bf00      	nop
 800295e:	bf00      	nop
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	2000012c 	.word	0x2000012c
 800296c:	20000158 	.word	0x20000158
 8002970:	20000140 	.word	0x20000140

08002974 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002980:	4618      	mov	r0, r3
 8002982:	f000 fbdb 	bl	800313c <vPortFree>
                vPortFree( pxTCB );
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 fbd8 	bl	800313c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800298c:	bf00      	nop
 800298e:	3708      	adds	r7, #8
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002998:	4b0a      	ldr	r3, [pc, #40]	; (80029c4 <prvResetNextTaskUnblockTime+0x30>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d104      	bne.n	80029ac <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80029a2:	4b09      	ldr	r3, [pc, #36]	; (80029c8 <prvResetNextTaskUnblockTime+0x34>)
 80029a4:	f04f 32ff 	mov.w	r2, #4294967295
 80029a8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80029aa:	e005      	b.n	80029b8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80029ac:	4b05      	ldr	r3, [pc, #20]	; (80029c4 <prvResetNextTaskUnblockTime+0x30>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a04      	ldr	r2, [pc, #16]	; (80029c8 <prvResetNextTaskUnblockTime+0x34>)
 80029b6:	6013      	str	r3, [r2, #0]
}
 80029b8:	bf00      	nop
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	20000110 	.word	0x20000110
 80029c8:	20000178 	.word	0x20000178

080029cc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80029cc:	b480      	push	{r7}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	3b04      	subs	r3, #4
 80029dc:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80029e4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	3b04      	subs	r3, #4
 80029ea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	f023 0201 	bic.w	r2, r3, #1
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	3b04      	subs	r3, #4
 80029fa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80029fc:	4a0c      	ldr	r2, [pc, #48]	; (8002a30 <pxPortInitialiseStack+0x64>)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	3b14      	subs	r3, #20
 8002a06:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	3b04      	subs	r3, #4
 8002a12:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f06f 0202 	mvn.w	r2, #2
 8002a1a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	3b20      	subs	r3, #32
 8002a20:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002a22:	68fb      	ldr	r3, [r7, #12]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3714      	adds	r7, #20
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr
 8002a30:	08002a35 	.word	0x08002a35

08002a34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002a34:	b480      	push	{r7}
 8002a36:	b085      	sub	sp, #20
 8002a38:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002a3e:	4b12      	ldr	r3, [pc, #72]	; (8002a88 <prvTaskExitError+0x54>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a46:	d00a      	beq.n	8002a5e <prvTaskExitError+0x2a>
        __asm volatile
 8002a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a4c:	f383 8811 	msr	BASEPRI, r3
 8002a50:	f3bf 8f6f 	isb	sy
 8002a54:	f3bf 8f4f 	dsb	sy
 8002a58:	60fb      	str	r3, [r7, #12]
    }
 8002a5a:	bf00      	nop
 8002a5c:	e7fe      	b.n	8002a5c <prvTaskExitError+0x28>
        __asm volatile
 8002a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a62:	f383 8811 	msr	BASEPRI, r3
 8002a66:	f3bf 8f6f 	isb	sy
 8002a6a:	f3bf 8f4f 	dsb	sy
 8002a6e:	60bb      	str	r3, [r7, #8]
    }
 8002a70:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002a72:	bf00      	nop
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d0fc      	beq.n	8002a74 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002a7a:	bf00      	nop
 8002a7c:	bf00      	nop
 8002a7e:	3714      	adds	r7, #20
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr
 8002a88:	20000010 	.word	0x20000010
 8002a8c:	00000000 	.word	0x00000000

08002a90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002a90:	4b07      	ldr	r3, [pc, #28]	; (8002ab0 <pxCurrentTCBConst2>)
 8002a92:	6819      	ldr	r1, [r3, #0]
 8002a94:	6808      	ldr	r0, [r1, #0]
 8002a96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a9a:	f380 8809 	msr	PSP, r0
 8002a9e:	f3bf 8f6f 	isb	sy
 8002aa2:	f04f 0000 	mov.w	r0, #0
 8002aa6:	f380 8811 	msr	BASEPRI, r0
 8002aaa:	4770      	bx	lr
 8002aac:	f3af 8000 	nop.w

08002ab0 <pxCurrentTCBConst2>:
 8002ab0:	20000080 	.word	0x20000080
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002ab4:	bf00      	nop
 8002ab6:	bf00      	nop

08002ab8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002ab8:	4808      	ldr	r0, [pc, #32]	; (8002adc <prvPortStartFirstTask+0x24>)
 8002aba:	6800      	ldr	r0, [r0, #0]
 8002abc:	6800      	ldr	r0, [r0, #0]
 8002abe:	f380 8808 	msr	MSP, r0
 8002ac2:	f04f 0000 	mov.w	r0, #0
 8002ac6:	f380 8814 	msr	CONTROL, r0
 8002aca:	b662      	cpsie	i
 8002acc:	b661      	cpsie	f
 8002ace:	f3bf 8f4f 	dsb	sy
 8002ad2:	f3bf 8f6f 	isb	sy
 8002ad6:	df00      	svc	0
 8002ad8:	bf00      	nop
 8002ada:	0000      	.short	0x0000
 8002adc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002ae0:	bf00      	nop
 8002ae2:	bf00      	nop

08002ae4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002aea:	4b46      	ldr	r3, [pc, #280]	; (8002c04 <xPortStartScheduler+0x120>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a46      	ldr	r2, [pc, #280]	; (8002c08 <xPortStartScheduler+0x124>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d10a      	bne.n	8002b0a <xPortStartScheduler+0x26>
        __asm volatile
 8002af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af8:	f383 8811 	msr	BASEPRI, r3
 8002afc:	f3bf 8f6f 	isb	sy
 8002b00:	f3bf 8f4f 	dsb	sy
 8002b04:	613b      	str	r3, [r7, #16]
    }
 8002b06:	bf00      	nop
 8002b08:	e7fe      	b.n	8002b08 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002b0a:	4b3e      	ldr	r3, [pc, #248]	; (8002c04 <xPortStartScheduler+0x120>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a3f      	ldr	r2, [pc, #252]	; (8002c0c <xPortStartScheduler+0x128>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d10a      	bne.n	8002b2a <xPortStartScheduler+0x46>
        __asm volatile
 8002b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b18:	f383 8811 	msr	BASEPRI, r3
 8002b1c:	f3bf 8f6f 	isb	sy
 8002b20:	f3bf 8f4f 	dsb	sy
 8002b24:	60fb      	str	r3, [r7, #12]
    }
 8002b26:	bf00      	nop
 8002b28:	e7fe      	b.n	8002b28 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002b2a:	4b39      	ldr	r3, [pc, #228]	; (8002c10 <xPortStartScheduler+0x12c>)
 8002b2c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	22ff      	movs	r2, #255	; 0xff
 8002b3a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002b44:	78fb      	ldrb	r3, [r7, #3]
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002b4c:	b2da      	uxtb	r2, r3
 8002b4e:	4b31      	ldr	r3, [pc, #196]	; (8002c14 <xPortStartScheduler+0x130>)
 8002b50:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002b52:	4b31      	ldr	r3, [pc, #196]	; (8002c18 <xPortStartScheduler+0x134>)
 8002b54:	2207      	movs	r2, #7
 8002b56:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002b58:	e009      	b.n	8002b6e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002b5a:	4b2f      	ldr	r3, [pc, #188]	; (8002c18 <xPortStartScheduler+0x134>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	4a2d      	ldr	r2, [pc, #180]	; (8002c18 <xPortStartScheduler+0x134>)
 8002b62:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002b64:	78fb      	ldrb	r3, [r7, #3]
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002b6e:	78fb      	ldrb	r3, [r7, #3]
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b76:	2b80      	cmp	r3, #128	; 0x80
 8002b78:	d0ef      	beq.n	8002b5a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002b7a:	4b27      	ldr	r3, [pc, #156]	; (8002c18 <xPortStartScheduler+0x134>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f1c3 0307 	rsb	r3, r3, #7
 8002b82:	2b04      	cmp	r3, #4
 8002b84:	d00a      	beq.n	8002b9c <xPortStartScheduler+0xb8>
        __asm volatile
 8002b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b8a:	f383 8811 	msr	BASEPRI, r3
 8002b8e:	f3bf 8f6f 	isb	sy
 8002b92:	f3bf 8f4f 	dsb	sy
 8002b96:	60bb      	str	r3, [r7, #8]
    }
 8002b98:	bf00      	nop
 8002b9a:	e7fe      	b.n	8002b9a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002b9c:	4b1e      	ldr	r3, [pc, #120]	; (8002c18 <xPortStartScheduler+0x134>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	021b      	lsls	r3, r3, #8
 8002ba2:	4a1d      	ldr	r2, [pc, #116]	; (8002c18 <xPortStartScheduler+0x134>)
 8002ba4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002ba6:	4b1c      	ldr	r3, [pc, #112]	; (8002c18 <xPortStartScheduler+0x134>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002bae:	4a1a      	ldr	r2, [pc, #104]	; (8002c18 <xPortStartScheduler+0x134>)
 8002bb0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	b2da      	uxtb	r2, r3
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002bba:	4b18      	ldr	r3, [pc, #96]	; (8002c1c <xPortStartScheduler+0x138>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a17      	ldr	r2, [pc, #92]	; (8002c1c <xPortStartScheduler+0x138>)
 8002bc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bc4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002bc6:	4b15      	ldr	r3, [pc, #84]	; (8002c1c <xPortStartScheduler+0x138>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a14      	ldr	r2, [pc, #80]	; (8002c1c <xPortStartScheduler+0x138>)
 8002bcc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002bd0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002bd2:	f000 f963 	bl	8002e9c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002bd6:	4b12      	ldr	r3, [pc, #72]	; (8002c20 <xPortStartScheduler+0x13c>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002bdc:	f000 f982 	bl	8002ee4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002be0:	4b10      	ldr	r3, [pc, #64]	; (8002c24 <xPortStartScheduler+0x140>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a0f      	ldr	r2, [pc, #60]	; (8002c24 <xPortStartScheduler+0x140>)
 8002be6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002bea:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002bec:	f7ff ff64 	bl	8002ab8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002bf0:	f7ff fdd6 	bl	80027a0 <vTaskSwitchContext>
    prvTaskExitError();
 8002bf4:	f7ff ff1e 	bl	8002a34 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3718      	adds	r7, #24
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	e000ed00 	.word	0xe000ed00
 8002c08:	410fc271 	.word	0x410fc271
 8002c0c:	410fc270 	.word	0x410fc270
 8002c10:	e000e400 	.word	0xe000e400
 8002c14:	20000184 	.word	0x20000184
 8002c18:	20000188 	.word	0x20000188
 8002c1c:	e000ed20 	.word	0xe000ed20
 8002c20:	20000010 	.word	0x20000010
 8002c24:	e000ef34 	.word	0xe000ef34

08002c28 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b087      	sub	sp, #28
 8002c2c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002c2e:	4b37      	ldr	r3, [pc, #220]	; (8002d0c <vInitPrioGroupValue+0xe4>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a37      	ldr	r2, [pc, #220]	; (8002d10 <vInitPrioGroupValue+0xe8>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d10a      	bne.n	8002c4e <vInitPrioGroupValue+0x26>
        __asm volatile
 8002c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c3c:	f383 8811 	msr	BASEPRI, r3
 8002c40:	f3bf 8f6f 	isb	sy
 8002c44:	f3bf 8f4f 	dsb	sy
 8002c48:	613b      	str	r3, [r7, #16]
    }
 8002c4a:	bf00      	nop
 8002c4c:	e7fe      	b.n	8002c4c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002c4e:	4b2f      	ldr	r3, [pc, #188]	; (8002d0c <vInitPrioGroupValue+0xe4>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a30      	ldr	r2, [pc, #192]	; (8002d14 <vInitPrioGroupValue+0xec>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d10a      	bne.n	8002c6e <vInitPrioGroupValue+0x46>
        __asm volatile
 8002c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c5c:	f383 8811 	msr	BASEPRI, r3
 8002c60:	f3bf 8f6f 	isb	sy
 8002c64:	f3bf 8f4f 	dsb	sy
 8002c68:	60fb      	str	r3, [r7, #12]
    }
 8002c6a:	bf00      	nop
 8002c6c:	e7fe      	b.n	8002c6c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002c6e:	4b2a      	ldr	r3, [pc, #168]	; (8002d18 <vInitPrioGroupValue+0xf0>)
 8002c70:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	22ff      	movs	r2, #255	; 0xff
 8002c7e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002c88:	78fb      	ldrb	r3, [r7, #3]
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002c90:	b2da      	uxtb	r2, r3
 8002c92:	4b22      	ldr	r3, [pc, #136]	; (8002d1c <vInitPrioGroupValue+0xf4>)
 8002c94:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002c96:	4b22      	ldr	r3, [pc, #136]	; (8002d20 <vInitPrioGroupValue+0xf8>)
 8002c98:	2207      	movs	r2, #7
 8002c9a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002c9c:	e009      	b.n	8002cb2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002c9e:	4b20      	ldr	r3, [pc, #128]	; (8002d20 <vInitPrioGroupValue+0xf8>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	4a1e      	ldr	r2, [pc, #120]	; (8002d20 <vInitPrioGroupValue+0xf8>)
 8002ca6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002ca8:	78fb      	ldrb	r3, [r7, #3]
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002cb2:	78fb      	ldrb	r3, [r7, #3]
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cba:	2b80      	cmp	r3, #128	; 0x80
 8002cbc:	d0ef      	beq.n	8002c9e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002cbe:	4b18      	ldr	r3, [pc, #96]	; (8002d20 <vInitPrioGroupValue+0xf8>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f1c3 0307 	rsb	r3, r3, #7
 8002cc6:	2b04      	cmp	r3, #4
 8002cc8:	d00a      	beq.n	8002ce0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8002cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cce:	f383 8811 	msr	BASEPRI, r3
 8002cd2:	f3bf 8f6f 	isb	sy
 8002cd6:	f3bf 8f4f 	dsb	sy
 8002cda:	60bb      	str	r3, [r7, #8]
    }
 8002cdc:	bf00      	nop
 8002cde:	e7fe      	b.n	8002cde <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002ce0:	4b0f      	ldr	r3, [pc, #60]	; (8002d20 <vInitPrioGroupValue+0xf8>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	021b      	lsls	r3, r3, #8
 8002ce6:	4a0e      	ldr	r2, [pc, #56]	; (8002d20 <vInitPrioGroupValue+0xf8>)
 8002ce8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002cea:	4b0d      	ldr	r3, [pc, #52]	; (8002d20 <vInitPrioGroupValue+0xf8>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002cf2:	4a0b      	ldr	r2, [pc, #44]	; (8002d20 <vInitPrioGroupValue+0xf8>)
 8002cf4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	b2da      	uxtb	r2, r3
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8002cfe:	bf00      	nop
 8002d00:	371c      	adds	r7, #28
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	e000ed00 	.word	0xe000ed00
 8002d10:	410fc271 	.word	0x410fc271
 8002d14:	410fc270 	.word	0x410fc270
 8002d18:	e000e400 	.word	0xe000e400
 8002d1c:	20000184 	.word	0x20000184
 8002d20:	20000188 	.word	0x20000188

08002d24 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
        __asm volatile
 8002d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d2e:	f383 8811 	msr	BASEPRI, r3
 8002d32:	f3bf 8f6f 	isb	sy
 8002d36:	f3bf 8f4f 	dsb	sy
 8002d3a:	607b      	str	r3, [r7, #4]
    }
 8002d3c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002d3e:	4b0f      	ldr	r3, [pc, #60]	; (8002d7c <vPortEnterCritical+0x58>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	3301      	adds	r3, #1
 8002d44:	4a0d      	ldr	r2, [pc, #52]	; (8002d7c <vPortEnterCritical+0x58>)
 8002d46:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002d48:	4b0c      	ldr	r3, [pc, #48]	; (8002d7c <vPortEnterCritical+0x58>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d10f      	bne.n	8002d70 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002d50:	4b0b      	ldr	r3, [pc, #44]	; (8002d80 <vPortEnterCritical+0x5c>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00a      	beq.n	8002d70 <vPortEnterCritical+0x4c>
        __asm volatile
 8002d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d5e:	f383 8811 	msr	BASEPRI, r3
 8002d62:	f3bf 8f6f 	isb	sy
 8002d66:	f3bf 8f4f 	dsb	sy
 8002d6a:	603b      	str	r3, [r7, #0]
    }
 8002d6c:	bf00      	nop
 8002d6e:	e7fe      	b.n	8002d6e <vPortEnterCritical+0x4a>
    }
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr
 8002d7c:	20000010 	.word	0x20000010
 8002d80:	e000ed04 	.word	0xe000ed04

08002d84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002d8a:	4b12      	ldr	r3, [pc, #72]	; (8002dd4 <vPortExitCritical+0x50>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d10a      	bne.n	8002da8 <vPortExitCritical+0x24>
        __asm volatile
 8002d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d96:	f383 8811 	msr	BASEPRI, r3
 8002d9a:	f3bf 8f6f 	isb	sy
 8002d9e:	f3bf 8f4f 	dsb	sy
 8002da2:	607b      	str	r3, [r7, #4]
    }
 8002da4:	bf00      	nop
 8002da6:	e7fe      	b.n	8002da6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002da8:	4b0a      	ldr	r3, [pc, #40]	; (8002dd4 <vPortExitCritical+0x50>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	3b01      	subs	r3, #1
 8002dae:	4a09      	ldr	r2, [pc, #36]	; (8002dd4 <vPortExitCritical+0x50>)
 8002db0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002db2:	4b08      	ldr	r3, [pc, #32]	; (8002dd4 <vPortExitCritical+0x50>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d105      	bne.n	8002dc6 <vPortExitCritical+0x42>
 8002dba:	2300      	movs	r3, #0
 8002dbc:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002dc4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002dc6:	bf00      	nop
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	20000010 	.word	0x20000010
	...

08002de0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002de0:	f3ef 8009 	mrs	r0, PSP
 8002de4:	f3bf 8f6f 	isb	sy
 8002de8:	4b15      	ldr	r3, [pc, #84]	; (8002e40 <pxCurrentTCBConst>)
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	f01e 0f10 	tst.w	lr, #16
 8002df0:	bf08      	it	eq
 8002df2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002df6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dfa:	6010      	str	r0, [r2, #0]
 8002dfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002e00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002e04:	f380 8811 	msr	BASEPRI, r0
 8002e08:	f3bf 8f4f 	dsb	sy
 8002e0c:	f3bf 8f6f 	isb	sy
 8002e10:	f7ff fcc6 	bl	80027a0 <vTaskSwitchContext>
 8002e14:	f04f 0000 	mov.w	r0, #0
 8002e18:	f380 8811 	msr	BASEPRI, r0
 8002e1c:	bc09      	pop	{r0, r3}
 8002e1e:	6819      	ldr	r1, [r3, #0]
 8002e20:	6808      	ldr	r0, [r1, #0]
 8002e22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e26:	f01e 0f10 	tst.w	lr, #16
 8002e2a:	bf08      	it	eq
 8002e2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002e30:	f380 8809 	msr	PSP, r0
 8002e34:	f3bf 8f6f 	isb	sy
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	f3af 8000 	nop.w

08002e40 <pxCurrentTCBConst>:
 8002e40:	20000080 	.word	0x20000080
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002e44:	bf00      	nop
 8002e46:	bf00      	nop

08002e48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
        __asm volatile
 8002e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e52:	f383 8811 	msr	BASEPRI, r3
 8002e56:	f3bf 8f6f 	isb	sy
 8002e5a:	f3bf 8f4f 	dsb	sy
 8002e5e:	607b      	str	r3, [r7, #4]
    }
 8002e60:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8002e62:	f001 ff21 	bl	8004ca8 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002e66:	f7ff fc01 	bl	800266c <xTaskIncrementTick>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d006      	beq.n	8002e7e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8002e70:	f001 ff78 	bl	8004d64 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002e74:	4b08      	ldr	r3, [pc, #32]	; (8002e98 <SysTick_Handler+0x50>)
 8002e76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e7a:	601a      	str	r2, [r3, #0]
 8002e7c:	e001      	b.n	8002e82 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8002e7e:	f001 ff55 	bl	8004d2c <SEGGER_SYSVIEW_RecordExitISR>
 8002e82:	2300      	movs	r3, #0
 8002e84:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	f383 8811 	msr	BASEPRI, r3
    }
 8002e8c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8002e8e:	bf00      	nop
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	e000ed04 	.word	0xe000ed04

08002e9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002ea0:	4b0b      	ldr	r3, [pc, #44]	; (8002ed0 <vPortSetupTimerInterrupt+0x34>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002ea6:	4b0b      	ldr	r3, [pc, #44]	; (8002ed4 <vPortSetupTimerInterrupt+0x38>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002eac:	4b0a      	ldr	r3, [pc, #40]	; (8002ed8 <vPortSetupTimerInterrupt+0x3c>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a0a      	ldr	r2, [pc, #40]	; (8002edc <vPortSetupTimerInterrupt+0x40>)
 8002eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb6:	099b      	lsrs	r3, r3, #6
 8002eb8:	4a09      	ldr	r2, [pc, #36]	; (8002ee0 <vPortSetupTimerInterrupt+0x44>)
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002ebe:	4b04      	ldr	r3, [pc, #16]	; (8002ed0 <vPortSetupTimerInterrupt+0x34>)
 8002ec0:	2207      	movs	r2, #7
 8002ec2:	601a      	str	r2, [r3, #0]
}
 8002ec4:	bf00      	nop
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	e000e010 	.word	0xe000e010
 8002ed4:	e000e018 	.word	0xe000e018
 8002ed8:	20000000 	.word	0x20000000
 8002edc:	10624dd3 	.word	0x10624dd3
 8002ee0:	e000e014 	.word	0xe000e014

08002ee4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002ee4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002ef4 <vPortEnableVFP+0x10>
 8002ee8:	6801      	ldr	r1, [r0, #0]
 8002eea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002eee:	6001      	str	r1, [r0, #0]
 8002ef0:	4770      	bx	lr
 8002ef2:	0000      	.short	0x0000
 8002ef4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002ef8:	bf00      	nop
 8002efa:	bf00      	nop

08002efc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8002efc:	b480      	push	{r7}
 8002efe:	b085      	sub	sp, #20
 8002f00:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8002f02:	f3ef 8305 	mrs	r3, IPSR
 8002f06:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2b0f      	cmp	r3, #15
 8002f0c:	d914      	bls.n	8002f38 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002f0e:	4a17      	ldr	r2, [pc, #92]	; (8002f6c <vPortValidateInterruptPriority+0x70>)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	4413      	add	r3, r2
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002f18:	4b15      	ldr	r3, [pc, #84]	; (8002f70 <vPortValidateInterruptPriority+0x74>)
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	7afa      	ldrb	r2, [r7, #11]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d20a      	bcs.n	8002f38 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8002f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f26:	f383 8811 	msr	BASEPRI, r3
 8002f2a:	f3bf 8f6f 	isb	sy
 8002f2e:	f3bf 8f4f 	dsb	sy
 8002f32:	607b      	str	r3, [r7, #4]
    }
 8002f34:	bf00      	nop
 8002f36:	e7fe      	b.n	8002f36 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002f38:	4b0e      	ldr	r3, [pc, #56]	; (8002f74 <vPortValidateInterruptPriority+0x78>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002f40:	4b0d      	ldr	r3, [pc, #52]	; (8002f78 <vPortValidateInterruptPriority+0x7c>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d90a      	bls.n	8002f5e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8002f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f4c:	f383 8811 	msr	BASEPRI, r3
 8002f50:	f3bf 8f6f 	isb	sy
 8002f54:	f3bf 8f4f 	dsb	sy
 8002f58:	603b      	str	r3, [r7, #0]
    }
 8002f5a:	bf00      	nop
 8002f5c:	e7fe      	b.n	8002f5c <vPortValidateInterruptPriority+0x60>
    }
 8002f5e:	bf00      	nop
 8002f60:	3714      	adds	r7, #20
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	e000e3f0 	.word	0xe000e3f0
 8002f70:	20000184 	.word	0x20000184
 8002f74:	e000ed0c 	.word	0xe000ed0c
 8002f78:	20000188 	.word	0x20000188

08002f7c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b08a      	sub	sp, #40	; 0x28
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8002f84:	2300      	movs	r3, #0
 8002f86:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8002f88:	f7ff fabe 	bl	8002508 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002f8c:	4b65      	ldr	r3, [pc, #404]	; (8003124 <pvPortMalloc+0x1a8>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d101      	bne.n	8002f98 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002f94:	f000 f934 	bl	8003200 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002f98:	4b63      	ldr	r3, [pc, #396]	; (8003128 <pvPortMalloc+0x1ac>)
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f040 80a7 	bne.w	80030f4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d02d      	beq.n	8003008 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8002fac:	2208      	movs	r2, #8
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d227      	bcs.n	8003008 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8002fb8:	2208      	movs	r2, #8
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f003 0307 	and.w	r3, r3, #7
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d021      	beq.n	800300e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f023 0307 	bic.w	r3, r3, #7
 8002fd0:	3308      	adds	r3, #8
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d214      	bcs.n	8003002 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f023 0307 	bic.w	r3, r3, #7
 8002fde:	3308      	adds	r3, #8
 8002fe0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f003 0307 	and.w	r3, r3, #7
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d010      	beq.n	800300e <pvPortMalloc+0x92>
        __asm volatile
 8002fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff0:	f383 8811 	msr	BASEPRI, r3
 8002ff4:	f3bf 8f6f 	isb	sy
 8002ff8:	f3bf 8f4f 	dsb	sy
 8002ffc:	617b      	str	r3, [r7, #20]
    }
 8002ffe:	bf00      	nop
 8003000:	e7fe      	b.n	8003000 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003002:	2300      	movs	r3, #0
 8003004:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003006:	e002      	b.n	800300e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8003008:	2300      	movs	r3, #0
 800300a:	607b      	str	r3, [r7, #4]
 800300c:	e000      	b.n	8003010 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800300e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d06e      	beq.n	80030f4 <pvPortMalloc+0x178>
 8003016:	4b45      	ldr	r3, [pc, #276]	; (800312c <pvPortMalloc+0x1b0>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	429a      	cmp	r2, r3
 800301e:	d869      	bhi.n	80030f4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003020:	4b43      	ldr	r3, [pc, #268]	; (8003130 <pvPortMalloc+0x1b4>)
 8003022:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003024:	4b42      	ldr	r3, [pc, #264]	; (8003130 <pvPortMalloc+0x1b4>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800302a:	e004      	b.n	8003036 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800302c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	429a      	cmp	r2, r3
 800303e:	d903      	bls.n	8003048 <pvPortMalloc+0xcc>
 8003040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d1f1      	bne.n	800302c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003048:	4b36      	ldr	r3, [pc, #216]	; (8003124 <pvPortMalloc+0x1a8>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800304e:	429a      	cmp	r2, r3
 8003050:	d050      	beq.n	80030f4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003052:	6a3b      	ldr	r3, [r7, #32]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2208      	movs	r2, #8
 8003058:	4413      	add	r3, r2
 800305a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800305c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	6a3b      	ldr	r3, [r7, #32]
 8003062:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003066:	685a      	ldr	r2, [r3, #4]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	1ad2      	subs	r2, r2, r3
 800306c:	2308      	movs	r3, #8
 800306e:	005b      	lsls	r3, r3, #1
 8003070:	429a      	cmp	r2, r3
 8003072:	d91f      	bls.n	80030b4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003074:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4413      	add	r3, r2
 800307a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	f003 0307 	and.w	r3, r3, #7
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00a      	beq.n	800309c <pvPortMalloc+0x120>
        __asm volatile
 8003086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800308a:	f383 8811 	msr	BASEPRI, r3
 800308e:	f3bf 8f6f 	isb	sy
 8003092:	f3bf 8f4f 	dsb	sy
 8003096:	613b      	str	r3, [r7, #16]
    }
 8003098:	bf00      	nop
 800309a:	e7fe      	b.n	800309a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800309c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309e:	685a      	ldr	r2, [r3, #4]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	1ad2      	subs	r2, r2, r3
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80030a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80030ae:	69b8      	ldr	r0, [r7, #24]
 80030b0:	f000 f908 	bl	80032c4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80030b4:	4b1d      	ldr	r3, [pc, #116]	; (800312c <pvPortMalloc+0x1b0>)
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	4a1b      	ldr	r2, [pc, #108]	; (800312c <pvPortMalloc+0x1b0>)
 80030c0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80030c2:	4b1a      	ldr	r3, [pc, #104]	; (800312c <pvPortMalloc+0x1b0>)
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	4b1b      	ldr	r3, [pc, #108]	; (8003134 <pvPortMalloc+0x1b8>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d203      	bcs.n	80030d6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80030ce:	4b17      	ldr	r3, [pc, #92]	; (800312c <pvPortMalloc+0x1b0>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a18      	ldr	r2, [pc, #96]	; (8003134 <pvPortMalloc+0x1b8>)
 80030d4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80030d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	4b13      	ldr	r3, [pc, #76]	; (8003128 <pvPortMalloc+0x1ac>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	431a      	orrs	r2, r3
 80030e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80030e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e6:	2200      	movs	r2, #0
 80030e8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80030ea:	4b13      	ldr	r3, [pc, #76]	; (8003138 <pvPortMalloc+0x1bc>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	3301      	adds	r3, #1
 80030f0:	4a11      	ldr	r2, [pc, #68]	; (8003138 <pvPortMalloc+0x1bc>)
 80030f2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80030f4:	f7ff fa16 	bl	8002524 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	f003 0307 	and.w	r3, r3, #7
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00a      	beq.n	8003118 <pvPortMalloc+0x19c>
        __asm volatile
 8003102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003106:	f383 8811 	msr	BASEPRI, r3
 800310a:	f3bf 8f6f 	isb	sy
 800310e:	f3bf 8f4f 	dsb	sy
 8003112:	60fb      	str	r3, [r7, #12]
    }
 8003114:	bf00      	nop
 8003116:	e7fe      	b.n	8003116 <pvPortMalloc+0x19a>
    return pvReturn;
 8003118:	69fb      	ldr	r3, [r7, #28]
}
 800311a:	4618      	mov	r0, r3
 800311c:	3728      	adds	r7, #40	; 0x28
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	20012d94 	.word	0x20012d94
 8003128:	20012da8 	.word	0x20012da8
 800312c:	20012d98 	.word	0x20012d98
 8003130:	20012d8c 	.word	0x20012d8c
 8003134:	20012d9c 	.word	0x20012d9c
 8003138:	20012da0 	.word	0x20012da0

0800313c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d04d      	beq.n	80031ea <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800314e:	2308      	movs	r3, #8
 8003150:	425b      	negs	r3, r3
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	4413      	add	r3, r2
 8003156:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	685a      	ldr	r2, [r3, #4]
 8003160:	4b24      	ldr	r3, [pc, #144]	; (80031f4 <vPortFree+0xb8>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4013      	ands	r3, r2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d10a      	bne.n	8003180 <vPortFree+0x44>
        __asm volatile
 800316a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800316e:	f383 8811 	msr	BASEPRI, r3
 8003172:	f3bf 8f6f 	isb	sy
 8003176:	f3bf 8f4f 	dsb	sy
 800317a:	60fb      	str	r3, [r7, #12]
    }
 800317c:	bf00      	nop
 800317e:	e7fe      	b.n	800317e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00a      	beq.n	800319e <vPortFree+0x62>
        __asm volatile
 8003188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800318c:	f383 8811 	msr	BASEPRI, r3
 8003190:	f3bf 8f6f 	isb	sy
 8003194:	f3bf 8f4f 	dsb	sy
 8003198:	60bb      	str	r3, [r7, #8]
    }
 800319a:	bf00      	nop
 800319c:	e7fe      	b.n	800319c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	685a      	ldr	r2, [r3, #4]
 80031a2:	4b14      	ldr	r3, [pc, #80]	; (80031f4 <vPortFree+0xb8>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4013      	ands	r3, r2
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d01e      	beq.n	80031ea <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d11a      	bne.n	80031ea <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	685a      	ldr	r2, [r3, #4]
 80031b8:	4b0e      	ldr	r3, [pc, #56]	; (80031f4 <vPortFree+0xb8>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	43db      	mvns	r3, r3
 80031be:	401a      	ands	r2, r3
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80031c4:	f7ff f9a0 	bl	8002508 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	685a      	ldr	r2, [r3, #4]
 80031cc:	4b0a      	ldr	r3, [pc, #40]	; (80031f8 <vPortFree+0xbc>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4413      	add	r3, r2
 80031d2:	4a09      	ldr	r2, [pc, #36]	; (80031f8 <vPortFree+0xbc>)
 80031d4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80031d6:	6938      	ldr	r0, [r7, #16]
 80031d8:	f000 f874 	bl	80032c4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80031dc:	4b07      	ldr	r3, [pc, #28]	; (80031fc <vPortFree+0xc0>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	3301      	adds	r3, #1
 80031e2:	4a06      	ldr	r2, [pc, #24]	; (80031fc <vPortFree+0xc0>)
 80031e4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80031e6:	f7ff f99d 	bl	8002524 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80031ea:	bf00      	nop
 80031ec:	3718      	adds	r7, #24
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	20012da8 	.word	0x20012da8
 80031f8:	20012d98 	.word	0x20012d98
 80031fc:	20012da4 	.word	0x20012da4

08003200 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003200:	b480      	push	{r7}
 8003202:	b085      	sub	sp, #20
 8003204:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003206:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800320a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800320c:	4b27      	ldr	r3, [pc, #156]	; (80032ac <prvHeapInit+0xac>)
 800320e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f003 0307 	and.w	r3, r3, #7
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00c      	beq.n	8003234 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	3307      	adds	r3, #7
 800321e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f023 0307 	bic.w	r3, r3, #7
 8003226:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003228:	68ba      	ldr	r2, [r7, #8]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	4a1f      	ldr	r2, [pc, #124]	; (80032ac <prvHeapInit+0xac>)
 8003230:	4413      	add	r3, r2
 8003232:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003238:	4a1d      	ldr	r2, [pc, #116]	; (80032b0 <prvHeapInit+0xb0>)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800323e:	4b1c      	ldr	r3, [pc, #112]	; (80032b0 <prvHeapInit+0xb0>)
 8003240:	2200      	movs	r2, #0
 8003242:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	68ba      	ldr	r2, [r7, #8]
 8003248:	4413      	add	r3, r2
 800324a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800324c:	2208      	movs	r2, #8
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	1a9b      	subs	r3, r3, r2
 8003252:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f023 0307 	bic.w	r3, r3, #7
 800325a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	4a15      	ldr	r2, [pc, #84]	; (80032b4 <prvHeapInit+0xb4>)
 8003260:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003262:	4b14      	ldr	r3, [pc, #80]	; (80032b4 <prvHeapInit+0xb4>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2200      	movs	r2, #0
 8003268:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800326a:	4b12      	ldr	r3, [pc, #72]	; (80032b4 <prvHeapInit+0xb4>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2200      	movs	r2, #0
 8003270:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	68fa      	ldr	r2, [r7, #12]
 800327a:	1ad2      	subs	r2, r2, r3
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003280:	4b0c      	ldr	r3, [pc, #48]	; (80032b4 <prvHeapInit+0xb4>)
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	4a0a      	ldr	r2, [pc, #40]	; (80032b8 <prvHeapInit+0xb8>)
 800328e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	4a09      	ldr	r2, [pc, #36]	; (80032bc <prvHeapInit+0xbc>)
 8003296:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003298:	4b09      	ldr	r3, [pc, #36]	; (80032c0 <prvHeapInit+0xc0>)
 800329a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800329e:	601a      	str	r2, [r3, #0]
}
 80032a0:	bf00      	nop
 80032a2:	3714      	adds	r7, #20
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr
 80032ac:	2000018c 	.word	0x2000018c
 80032b0:	20012d8c 	.word	0x20012d8c
 80032b4:	20012d94 	.word	0x20012d94
 80032b8:	20012d9c 	.word	0x20012d9c
 80032bc:	20012d98 	.word	0x20012d98
 80032c0:	20012da8 	.word	0x20012da8

080032c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80032c4:	b480      	push	{r7}
 80032c6:	b085      	sub	sp, #20
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80032cc:	4b28      	ldr	r3, [pc, #160]	; (8003370 <prvInsertBlockIntoFreeList+0xac>)
 80032ce:	60fb      	str	r3, [r7, #12]
 80032d0:	e002      	b.n	80032d8 <prvInsertBlockIntoFreeList+0x14>
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	60fb      	str	r3, [r7, #12]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d8f7      	bhi.n	80032d2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	68ba      	ldr	r2, [r7, #8]
 80032ec:	4413      	add	r3, r2
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d108      	bne.n	8003306 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	685a      	ldr	r2, [r3, #4]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	441a      	add	r2, r3
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	68ba      	ldr	r2, [r7, #8]
 8003310:	441a      	add	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	429a      	cmp	r2, r3
 8003318:	d118      	bne.n	800334c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	4b15      	ldr	r3, [pc, #84]	; (8003374 <prvInsertBlockIntoFreeList+0xb0>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	429a      	cmp	r2, r3
 8003324:	d00d      	beq.n	8003342 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685a      	ldr	r2, [r3, #4]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	441a      	add	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	601a      	str	r2, [r3, #0]
 8003340:	e008      	b.n	8003354 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003342:	4b0c      	ldr	r3, [pc, #48]	; (8003374 <prvInsertBlockIntoFreeList+0xb0>)
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	601a      	str	r2, [r3, #0]
 800334a:	e003      	b.n	8003354 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	429a      	cmp	r2, r3
 800335a:	d002      	beq.n	8003362 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003362:	bf00      	nop
 8003364:	3714      	adds	r7, #20
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	20012d8c 	.word	0x20012d8c
 8003374:	20012d94 	.word	0x20012d94

08003378 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800337c:	4803      	ldr	r0, [pc, #12]	; (800338c <_cbSendSystemDesc+0x14>)
 800337e:	f001 fc3d 	bl	8004bfc <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003382:	4803      	ldr	r0, [pc, #12]	; (8003390 <_cbSendSystemDesc+0x18>)
 8003384:	f001 fc3a 	bl	8004bfc <SEGGER_SYSVIEW_SendSysDesc>
}
 8003388:	bf00      	nop
 800338a:	bd80      	pop	{r7, pc}
 800338c:	08005318 	.word	0x08005318
 8003390:	0800535c 	.word	0x0800535c

08003394 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003398:	4b06      	ldr	r3, [pc, #24]	; (80033b4 <SEGGER_SYSVIEW_Conf+0x20>)
 800339a:	6818      	ldr	r0, [r3, #0]
 800339c:	4b05      	ldr	r3, [pc, #20]	; (80033b4 <SEGGER_SYSVIEW_Conf+0x20>)
 800339e:	6819      	ldr	r1, [r3, #0]
 80033a0:	4b05      	ldr	r3, [pc, #20]	; (80033b8 <SEGGER_SYSVIEW_Conf+0x24>)
 80033a2:	4a06      	ldr	r2, [pc, #24]	; (80033bc <SEGGER_SYSVIEW_Conf+0x28>)
 80033a4:	f001 f8b0 	bl	8004508 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80033a8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80033ac:	f001 f8f0 	bl	8004590 <SEGGER_SYSVIEW_SetRAMBase>
}
 80033b0:	bf00      	nop
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	20000000 	.word	0x20000000
 80033b8:	08003379 	.word	0x08003379
 80033bc:	080053fc 	.word	0x080053fc

080033c0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80033c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033c2:	b085      	sub	sp, #20
 80033c4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80033c6:	2300      	movs	r3, #0
 80033c8:	607b      	str	r3, [r7, #4]
 80033ca:	e033      	b.n	8003434 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80033cc:	491e      	ldr	r1, [pc, #120]	; (8003448 <_cbSendTaskList+0x88>)
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	4613      	mov	r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	4413      	add	r3, r2
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	440b      	add	r3, r1
 80033da:	6818      	ldr	r0, [r3, #0]
 80033dc:	491a      	ldr	r1, [pc, #104]	; (8003448 <_cbSendTaskList+0x88>)
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	4613      	mov	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	4413      	add	r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	440b      	add	r3, r1
 80033ea:	3304      	adds	r3, #4
 80033ec:	6819      	ldr	r1, [r3, #0]
 80033ee:	4c16      	ldr	r4, [pc, #88]	; (8003448 <_cbSendTaskList+0x88>)
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	4613      	mov	r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	4413      	add	r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	4423      	add	r3, r4
 80033fc:	3308      	adds	r3, #8
 80033fe:	681c      	ldr	r4, [r3, #0]
 8003400:	4d11      	ldr	r5, [pc, #68]	; (8003448 <_cbSendTaskList+0x88>)
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	4613      	mov	r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	4413      	add	r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	442b      	add	r3, r5
 800340e:	330c      	adds	r3, #12
 8003410:	681d      	ldr	r5, [r3, #0]
 8003412:	4e0d      	ldr	r6, [pc, #52]	; (8003448 <_cbSendTaskList+0x88>)
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	4613      	mov	r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	4413      	add	r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	4433      	add	r3, r6
 8003420:	3310      	adds	r3, #16
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	9300      	str	r3, [sp, #0]
 8003426:	462b      	mov	r3, r5
 8003428:	4622      	mov	r2, r4
 800342a:	f000 f8bd 	bl	80035a8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	3301      	adds	r3, #1
 8003432:	607b      	str	r3, [r7, #4]
 8003434:	4b05      	ldr	r3, [pc, #20]	; (800344c <_cbSendTaskList+0x8c>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	429a      	cmp	r2, r3
 800343c:	d3c6      	bcc.n	80033cc <_cbSendTaskList+0xc>
  }
}
 800343e:	bf00      	nop
 8003440:	bf00      	nop
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003448:	20012dac 	.word	0x20012dac
 800344c:	20012e4c 	.word	0x20012e4c

08003450 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003450:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003454:	b082      	sub	sp, #8
 8003456:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003458:	f7ff f8f6 	bl	8002648 <xTaskGetTickCountFromISR>
 800345c:	4603      	mov	r3, r0
 800345e:	2200      	movs	r2, #0
 8003460:	469a      	mov	sl, r3
 8003462:	4693      	mov	fp, r2
 8003464:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003468:	e9d7 0100 	ldrd	r0, r1, [r7]
 800346c:	4602      	mov	r2, r0
 800346e:	460b      	mov	r3, r1
 8003470:	f04f 0a00 	mov.w	sl, #0
 8003474:	f04f 0b00 	mov.w	fp, #0
 8003478:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800347c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8003480:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8003484:	4652      	mov	r2, sl
 8003486:	465b      	mov	r3, fp
 8003488:	1a14      	subs	r4, r2, r0
 800348a:	eb63 0501 	sbc.w	r5, r3, r1
 800348e:	f04f 0200 	mov.w	r2, #0
 8003492:	f04f 0300 	mov.w	r3, #0
 8003496:	00ab      	lsls	r3, r5, #2
 8003498:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800349c:	00a2      	lsls	r2, r4, #2
 800349e:	4614      	mov	r4, r2
 80034a0:	461d      	mov	r5, r3
 80034a2:	eb14 0800 	adds.w	r8, r4, r0
 80034a6:	eb45 0901 	adc.w	r9, r5, r1
 80034aa:	f04f 0200 	mov.w	r2, #0
 80034ae:	f04f 0300 	mov.w	r3, #0
 80034b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034be:	4690      	mov	r8, r2
 80034c0:	4699      	mov	r9, r3
 80034c2:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80034c6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80034ca:	4610      	mov	r0, r2
 80034cc:	4619      	mov	r1, r3
 80034ce:	3708      	adds	r7, #8
 80034d0:	46bd      	mov	sp, r7
 80034d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080034d8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80034d8:	b580      	push	{r7, lr}
 80034da:	b086      	sub	sp, #24
 80034dc:	af02      	add	r7, sp, #8
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	607a      	str	r2, [r7, #4]
 80034e4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80034e6:	2205      	movs	r2, #5
 80034e8:	492b      	ldr	r1, [pc, #172]	; (8003598 <SYSVIEW_AddTask+0xc0>)
 80034ea:	68b8      	ldr	r0, [r7, #8]
 80034ec:	f001 fe84 	bl	80051f8 <memcmp>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d04b      	beq.n	800358e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80034f6:	4b29      	ldr	r3, [pc, #164]	; (800359c <SYSVIEW_AddTask+0xc4>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2b07      	cmp	r3, #7
 80034fc:	d903      	bls.n	8003506 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80034fe:	4828      	ldr	r0, [pc, #160]	; (80035a0 <SYSVIEW_AddTask+0xc8>)
 8003500:	f001 fe1e 	bl	8005140 <SEGGER_SYSVIEW_Warn>
    return;
 8003504:	e044      	b.n	8003590 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003506:	4b25      	ldr	r3, [pc, #148]	; (800359c <SYSVIEW_AddTask+0xc4>)
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	4926      	ldr	r1, [pc, #152]	; (80035a4 <SYSVIEW_AddTask+0xcc>)
 800350c:	4613      	mov	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	4413      	add	r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	440b      	add	r3, r1
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800351a:	4b20      	ldr	r3, [pc, #128]	; (800359c <SYSVIEW_AddTask+0xc4>)
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	4921      	ldr	r1, [pc, #132]	; (80035a4 <SYSVIEW_AddTask+0xcc>)
 8003520:	4613      	mov	r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	4413      	add	r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	440b      	add	r3, r1
 800352a:	3304      	adds	r3, #4
 800352c:	68ba      	ldr	r2, [r7, #8]
 800352e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003530:	4b1a      	ldr	r3, [pc, #104]	; (800359c <SYSVIEW_AddTask+0xc4>)
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	491b      	ldr	r1, [pc, #108]	; (80035a4 <SYSVIEW_AddTask+0xcc>)
 8003536:	4613      	mov	r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	4413      	add	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	440b      	add	r3, r1
 8003540:	3308      	adds	r3, #8
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003546:	4b15      	ldr	r3, [pc, #84]	; (800359c <SYSVIEW_AddTask+0xc4>)
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	4916      	ldr	r1, [pc, #88]	; (80035a4 <SYSVIEW_AddTask+0xcc>)
 800354c:	4613      	mov	r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	4413      	add	r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	440b      	add	r3, r1
 8003556:	330c      	adds	r3, #12
 8003558:	683a      	ldr	r2, [r7, #0]
 800355a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800355c:	4b0f      	ldr	r3, [pc, #60]	; (800359c <SYSVIEW_AddTask+0xc4>)
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	4910      	ldr	r1, [pc, #64]	; (80035a4 <SYSVIEW_AddTask+0xcc>)
 8003562:	4613      	mov	r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	4413      	add	r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	440b      	add	r3, r1
 800356c:	3310      	adds	r3, #16
 800356e:	69ba      	ldr	r2, [r7, #24]
 8003570:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003572:	4b0a      	ldr	r3, [pc, #40]	; (800359c <SYSVIEW_AddTask+0xc4>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	3301      	adds	r3, #1
 8003578:	4a08      	ldr	r2, [pc, #32]	; (800359c <SYSVIEW_AddTask+0xc4>)
 800357a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	9300      	str	r3, [sp, #0]
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	68b9      	ldr	r1, [r7, #8]
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f000 f80e 	bl	80035a8 <SYSVIEW_SendTaskInfo>
 800358c:	e000      	b.n	8003590 <SYSVIEW_AddTask+0xb8>
    return;
 800358e:	bf00      	nop

}
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	0800536c 	.word	0x0800536c
 800359c:	20012e4c 	.word	0x20012e4c
 80035a0:	08005374 	.word	0x08005374
 80035a4:	20012dac 	.word	0x20012dac

080035a8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b08a      	sub	sp, #40	; 0x28
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	607a      	str	r2, [r7, #4]
 80035b4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80035b6:	f107 0314 	add.w	r3, r7, #20
 80035ba:	2214      	movs	r2, #20
 80035bc:	2100      	movs	r1, #0
 80035be:	4618      	mov	r0, r3
 80035c0:	f001 fe2a 	bl	8005218 <memset>
  TaskInfo.TaskID     = TaskID;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80035d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80035d8:	f107 0314 	add.w	r3, r7, #20
 80035dc:	4618      	mov	r0, r3
 80035de:	f001 fa15 	bl	8004a0c <SEGGER_SYSVIEW_SendTaskInfo>
}
 80035e2:	bf00      	nop
 80035e4:	3728      	adds	r7, #40	; 0x28
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
	...

080035ec <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80035f2:	4b24      	ldr	r3, [pc, #144]	; (8003684 <_DoInit+0x98>)
 80035f4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2203      	movs	r2, #3
 80035fa:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2203      	movs	r2, #3
 8003600:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a20      	ldr	r2, [pc, #128]	; (8003688 <_DoInit+0x9c>)
 8003606:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4a20      	ldr	r2, [pc, #128]	; (800368c <_DoInit+0xa0>)
 800360c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003614:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4a17      	ldr	r2, [pc, #92]	; (8003688 <_DoInit+0x9c>)
 800362c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a17      	ldr	r2, [pc, #92]	; (8003690 <_DoInit+0xa4>)
 8003632:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2210      	movs	r2, #16
 8003638:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	3307      	adds	r3, #7
 8003650:	4a10      	ldr	r2, [pc, #64]	; (8003694 <_DoInit+0xa8>)
 8003652:	6810      	ldr	r0, [r2, #0]
 8003654:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003656:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a0e      	ldr	r2, [pc, #56]	; (8003698 <_DoInit+0xac>)
 800365e:	6810      	ldr	r0, [r2, #0]
 8003660:	6018      	str	r0, [r3, #0]
 8003662:	8891      	ldrh	r1, [r2, #4]
 8003664:	7992      	ldrb	r2, [r2, #6]
 8003666:	8099      	strh	r1, [r3, #4]
 8003668:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800366a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2220      	movs	r2, #32
 8003672:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003674:	f3bf 8f5f 	dmb	sy
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr
 8003684:	20012e50 	.word	0x20012e50
 8003688:	080053c4 	.word	0x080053c4
 800368c:	20012ef8 	.word	0x20012ef8
 8003690:	200132f8 	.word	0x200132f8
 8003694:	080053d0 	.word	0x080053d0
 8003698:	080053d4 	.word	0x080053d4

0800369c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800369c:	b580      	push	{r7, lr}
 800369e:	b08c      	sub	sp, #48	; 0x30
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80036a8:	4b3e      	ldr	r3, [pc, #248]	; (80037a4 <SEGGER_RTT_ReadNoLock+0x108>)
 80036aa:	623b      	str	r3, [r7, #32]
 80036ac:	6a3b      	ldr	r3, [r7, #32]
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d101      	bne.n	80036ba <SEGGER_RTT_ReadNoLock+0x1e>
 80036b6:	f7ff ff99 	bl	80035ec <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	4613      	mov	r3, r2
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	4413      	add	r3, r2
 80036c2:	00db      	lsls	r3, r3, #3
 80036c4:	3360      	adds	r3, #96	; 0x60
 80036c6:	4a37      	ldr	r2, [pc, #220]	; (80037a4 <SEGGER_RTT_ReadNoLock+0x108>)
 80036c8:	4413      	add	r3, r2
 80036ca:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80036dc:	2300      	movs	r3, #0
 80036de:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80036e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d92b      	bls.n	8003740 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	689a      	ldr	r2, [r3, #8]
 80036ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4293      	cmp	r3, r2
 80036f8:	bf28      	it	cs
 80036fa:	4613      	movcs	r3, r2
 80036fc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	685a      	ldr	r2, [r3, #4]
 8003702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003704:	4413      	add	r3, r2
 8003706:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003708:	697a      	ldr	r2, [r7, #20]
 800370a:	6939      	ldr	r1, [r7, #16]
 800370c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800370e:	f001 fdaf 	bl	8005270 <memcpy>
    NumBytesRead += NumBytesRem;
 8003712:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	4413      	add	r3, r2
 8003718:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800371a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	4413      	add	r3, r2
 8003720:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800372a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	4413      	add	r3, r2
 8003730:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003738:	429a      	cmp	r2, r3
 800373a:	d101      	bne.n	8003740 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800373c:	2300      	movs	r3, #0
 800373e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003740:	69ba      	ldr	r2, [r7, #24]
 8003742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003748:	697a      	ldr	r2, [r7, #20]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4293      	cmp	r3, r2
 800374e:	bf28      	it	cs
 8003750:	4613      	movcs	r3, r2
 8003752:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d019      	beq.n	800378e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	685a      	ldr	r2, [r3, #4]
 800375e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003760:	4413      	add	r3, r2
 8003762:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003764:	697a      	ldr	r2, [r7, #20]
 8003766:	6939      	ldr	r1, [r7, #16]
 8003768:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800376a:	f001 fd81 	bl	8005270 <memcpy>
    NumBytesRead += NumBytesRem;
 800376e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	4413      	add	r3, r2
 8003774:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	4413      	add	r3, r2
 800377c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003786:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	4413      	add	r3, r2
 800378c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800378e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003790:	2b00      	cmp	r3, #0
 8003792:	d002      	beq.n	800379a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003798:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800379a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800379c:	4618      	mov	r0, r3
 800379e:	3730      	adds	r7, #48	; 0x30
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	20012e50 	.word	0x20012e50

080037a8 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b088      	sub	sp, #32
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	607a      	str	r2, [r7, #4]
 80037b4:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80037b6:	4b3d      	ldr	r3, [pc, #244]	; (80038ac <SEGGER_RTT_AllocUpBuffer+0x104>)
 80037b8:	61bb      	str	r3, [r7, #24]
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d101      	bne.n	80037c8 <SEGGER_RTT_AllocUpBuffer+0x20>
 80037c4:	f7ff ff12 	bl	80035ec <_DoInit>
  SEGGER_RTT_LOCK();
 80037c8:	f3ef 8311 	mrs	r3, BASEPRI
 80037cc:	f04f 0120 	mov.w	r1, #32
 80037d0:	f381 8811 	msr	BASEPRI, r1
 80037d4:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80037d6:	4b35      	ldr	r3, [pc, #212]	; (80038ac <SEGGER_RTT_AllocUpBuffer+0x104>)
 80037d8:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80037da:	2300      	movs	r3, #0
 80037dc:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80037de:	6939      	ldr	r1, [r7, #16]
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	1c5a      	adds	r2, r3, #1
 80037e4:	4613      	mov	r3, r2
 80037e6:	005b      	lsls	r3, r3, #1
 80037e8:	4413      	add	r3, r2
 80037ea:	00db      	lsls	r3, r3, #3
 80037ec:	440b      	add	r3, r1
 80037ee:	3304      	adds	r3, #4
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d008      	beq.n	8003808 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	3301      	adds	r3, #1
 80037fa:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	69fa      	ldr	r2, [r7, #28]
 8003802:	429a      	cmp	r2, r3
 8003804:	dbeb      	blt.n	80037de <SEGGER_RTT_AllocUpBuffer+0x36>
 8003806:	e000      	b.n	800380a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8003808:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	69fa      	ldr	r2, [r7, #28]
 8003810:	429a      	cmp	r2, r3
 8003812:	da3f      	bge.n	8003894 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8003814:	6939      	ldr	r1, [r7, #16]
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	1c5a      	adds	r2, r3, #1
 800381a:	4613      	mov	r3, r2
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	4413      	add	r3, r2
 8003820:	00db      	lsls	r3, r3, #3
 8003822:	440b      	add	r3, r1
 8003824:	68fa      	ldr	r2, [r7, #12]
 8003826:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003828:	6939      	ldr	r1, [r7, #16]
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	1c5a      	adds	r2, r3, #1
 800382e:	4613      	mov	r3, r2
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	4413      	add	r3, r2
 8003834:	00db      	lsls	r3, r3, #3
 8003836:	440b      	add	r3, r1
 8003838:	3304      	adds	r3, #4
 800383a:	68ba      	ldr	r2, [r7, #8]
 800383c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800383e:	6939      	ldr	r1, [r7, #16]
 8003840:	69fa      	ldr	r2, [r7, #28]
 8003842:	4613      	mov	r3, r2
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	4413      	add	r3, r2
 8003848:	00db      	lsls	r3, r3, #3
 800384a:	440b      	add	r3, r1
 800384c:	3320      	adds	r3, #32
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8003852:	6939      	ldr	r1, [r7, #16]
 8003854:	69fa      	ldr	r2, [r7, #28]
 8003856:	4613      	mov	r3, r2
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	4413      	add	r3, r2
 800385c:	00db      	lsls	r3, r3, #3
 800385e:	440b      	add	r3, r1
 8003860:	3328      	adds	r3, #40	; 0x28
 8003862:	2200      	movs	r2, #0
 8003864:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8003866:	6939      	ldr	r1, [r7, #16]
 8003868:	69fa      	ldr	r2, [r7, #28]
 800386a:	4613      	mov	r3, r2
 800386c:	005b      	lsls	r3, r3, #1
 800386e:	4413      	add	r3, r2
 8003870:	00db      	lsls	r3, r3, #3
 8003872:	440b      	add	r3, r1
 8003874:	3324      	adds	r3, #36	; 0x24
 8003876:	2200      	movs	r2, #0
 8003878:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800387a:	6939      	ldr	r1, [r7, #16]
 800387c:	69fa      	ldr	r2, [r7, #28]
 800387e:	4613      	mov	r3, r2
 8003880:	005b      	lsls	r3, r3, #1
 8003882:	4413      	add	r3, r2
 8003884:	00db      	lsls	r3, r3, #3
 8003886:	440b      	add	r3, r1
 8003888:	332c      	adds	r3, #44	; 0x2c
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800388e:	f3bf 8f5f 	dmb	sy
 8003892:	e002      	b.n	800389a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8003894:	f04f 33ff 	mov.w	r3, #4294967295
 8003898:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80038a0:	69fb      	ldr	r3, [r7, #28]
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3720      	adds	r7, #32
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	20012e50 	.word	0x20012e50

080038b0 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b088      	sub	sp, #32
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	607a      	str	r2, [r7, #4]
 80038bc:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80038be:	4b33      	ldr	r3, [pc, #204]	; (800398c <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80038c0:	61bb      	str	r3, [r7, #24]
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d101      	bne.n	80038d0 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80038cc:	f7ff fe8e 	bl	80035ec <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80038d0:	4b2e      	ldr	r3, [pc, #184]	; (800398c <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80038d2:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	695b      	ldr	r3, [r3, #20]
 80038d8:	461a      	mov	r2, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	4293      	cmp	r3, r2
 80038de:	d24d      	bcs.n	800397c <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 80038e0:	f3ef 8311 	mrs	r3, BASEPRI
 80038e4:	f04f 0120 	mov.w	r1, #32
 80038e8:	f381 8811 	msr	BASEPRI, r1
 80038ec:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d031      	beq.n	8003958 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 80038f4:	6979      	ldr	r1, [r7, #20]
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	4613      	mov	r3, r2
 80038fa:	005b      	lsls	r3, r3, #1
 80038fc:	4413      	add	r3, r2
 80038fe:	00db      	lsls	r3, r3, #3
 8003900:	440b      	add	r3, r1
 8003902:	3360      	adds	r3, #96	; 0x60
 8003904:	68ba      	ldr	r2, [r7, #8]
 8003906:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8003908:	6979      	ldr	r1, [r7, #20]
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	4613      	mov	r3, r2
 800390e:	005b      	lsls	r3, r3, #1
 8003910:	4413      	add	r3, r2
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	440b      	add	r3, r1
 8003916:	3364      	adds	r3, #100	; 0x64
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 800391c:	6979      	ldr	r1, [r7, #20]
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	4613      	mov	r3, r2
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	4413      	add	r3, r2
 8003926:	00db      	lsls	r3, r3, #3
 8003928:	440b      	add	r3, r1
 800392a:	3368      	adds	r3, #104	; 0x68
 800392c:	683a      	ldr	r2, [r7, #0]
 800392e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8003930:	6979      	ldr	r1, [r7, #20]
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	4613      	mov	r3, r2
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	4413      	add	r3, r2
 800393a:	00db      	lsls	r3, r3, #3
 800393c:	440b      	add	r3, r1
 800393e:	3370      	adds	r3, #112	; 0x70
 8003940:	2200      	movs	r2, #0
 8003942:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8003944:	6979      	ldr	r1, [r7, #20]
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	4613      	mov	r3, r2
 800394a:	005b      	lsls	r3, r3, #1
 800394c:	4413      	add	r3, r2
 800394e:	00db      	lsls	r3, r3, #3
 8003950:	440b      	add	r3, r1
 8003952:	336c      	adds	r3, #108	; 0x6c
 8003954:	2200      	movs	r2, #0
 8003956:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8003958:	6979      	ldr	r1, [r7, #20]
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	4613      	mov	r3, r2
 800395e:	005b      	lsls	r3, r3, #1
 8003960:	4413      	add	r3, r2
 8003962:	00db      	lsls	r3, r3, #3
 8003964:	440b      	add	r3, r1
 8003966:	3374      	adds	r3, #116	; 0x74
 8003968:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800396a:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800396c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003976:	2300      	movs	r3, #0
 8003978:	61fb      	str	r3, [r7, #28]
 800397a:	e002      	b.n	8003982 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 800397c:	f04f 33ff 	mov.w	r3, #4294967295
 8003980:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8003982:	69fb      	ldr	r3, [r7, #28]
}
 8003984:	4618      	mov	r0, r3
 8003986:	3720      	adds	r7, #32
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	20012e50 	.word	0x20012e50

08003990 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003990:	b480      	push	{r7}
 8003992:	b087      	sub	sp, #28
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800399c:	2300      	movs	r3, #0
 800399e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80039a0:	e002      	b.n	80039a8 <_EncodeStr+0x18>
    Len++;
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	3301      	adds	r3, #1
 80039a6:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80039a8:	68ba      	ldr	r2, [r7, #8]
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	4413      	add	r3, r2
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d1f6      	bne.n	80039a2 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80039b4:	693a      	ldr	r2, [r7, #16]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d901      	bls.n	80039c0 <_EncodeStr+0x30>
    Len = Limit;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	2bfe      	cmp	r3, #254	; 0xfe
 80039c4:	d806      	bhi.n	80039d4 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	1c5a      	adds	r2, r3, #1
 80039ca:	60fa      	str	r2, [r7, #12]
 80039cc:	693a      	ldr	r2, [r7, #16]
 80039ce:	b2d2      	uxtb	r2, r2
 80039d0:	701a      	strb	r2, [r3, #0]
 80039d2:	e011      	b.n	80039f8 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	1c5a      	adds	r2, r3, #1
 80039d8:	60fa      	str	r2, [r7, #12]
 80039da:	22ff      	movs	r2, #255	; 0xff
 80039dc:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	1c5a      	adds	r2, r3, #1
 80039e2:	60fa      	str	r2, [r7, #12]
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	b2d2      	uxtb	r2, r2
 80039e8:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	0a19      	lsrs	r1, r3, #8
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	1c5a      	adds	r2, r3, #1
 80039f2:	60fa      	str	r2, [r7, #12]
 80039f4:	b2ca      	uxtb	r2, r1
 80039f6:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80039f8:	2300      	movs	r3, #0
 80039fa:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80039fc:	e00a      	b.n	8003a14 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80039fe:	68ba      	ldr	r2, [r7, #8]
 8003a00:	1c53      	adds	r3, r2, #1
 8003a02:	60bb      	str	r3, [r7, #8]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	1c59      	adds	r1, r3, #1
 8003a08:	60f9      	str	r1, [r7, #12]
 8003a0a:	7812      	ldrb	r2, [r2, #0]
 8003a0c:	701a      	strb	r2, [r3, #0]
    n++;
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	3301      	adds	r3, #1
 8003a12:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003a14:	697a      	ldr	r2, [r7, #20]
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d3f0      	bcc.n	80039fe <_EncodeStr+0x6e>
  }
  return pPayload;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	371c      	adds	r7, #28
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr

08003a2a <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8003a2a:	b480      	push	{r7}
 8003a2c:	b083      	sub	sp, #12
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	3304      	adds	r3, #4
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	370c      	adds	r7, #12
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
	...

08003a44 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003a4a:	4b35      	ldr	r3, [pc, #212]	; (8003b20 <_HandleIncomingPacket+0xdc>)
 8003a4c:	7e1b      	ldrb	r3, [r3, #24]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	1cfb      	adds	r3, r7, #3
 8003a52:	2201      	movs	r2, #1
 8003a54:	4619      	mov	r1, r3
 8003a56:	f7ff fe21 	bl	800369c <SEGGER_RTT_ReadNoLock>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	dd59      	ble.n	8003b18 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8003a64:	78fb      	ldrb	r3, [r7, #3]
 8003a66:	2b80      	cmp	r3, #128	; 0x80
 8003a68:	d032      	beq.n	8003ad0 <_HandleIncomingPacket+0x8c>
 8003a6a:	2b80      	cmp	r3, #128	; 0x80
 8003a6c:	dc42      	bgt.n	8003af4 <_HandleIncomingPacket+0xb0>
 8003a6e:	2b07      	cmp	r3, #7
 8003a70:	dc16      	bgt.n	8003aa0 <_HandleIncomingPacket+0x5c>
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	dd3e      	ble.n	8003af4 <_HandleIncomingPacket+0xb0>
 8003a76:	3b01      	subs	r3, #1
 8003a78:	2b06      	cmp	r3, #6
 8003a7a:	d83b      	bhi.n	8003af4 <_HandleIncomingPacket+0xb0>
 8003a7c:	a201      	add	r2, pc, #4	; (adr r2, 8003a84 <_HandleIncomingPacket+0x40>)
 8003a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a82:	bf00      	nop
 8003a84:	08003aa7 	.word	0x08003aa7
 8003a88:	08003aad 	.word	0x08003aad
 8003a8c:	08003ab3 	.word	0x08003ab3
 8003a90:	08003ab9 	.word	0x08003ab9
 8003a94:	08003abf 	.word	0x08003abf
 8003a98:	08003ac5 	.word	0x08003ac5
 8003a9c:	08003acb 	.word	0x08003acb
 8003aa0:	2b7f      	cmp	r3, #127	; 0x7f
 8003aa2:	d034      	beq.n	8003b0e <_HandleIncomingPacket+0xca>
 8003aa4:	e026      	b.n	8003af4 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8003aa6:	f000 fe37 	bl	8004718 <SEGGER_SYSVIEW_Start>
      break;
 8003aaa:	e035      	b.n	8003b18 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8003aac:	f000 feee 	bl	800488c <SEGGER_SYSVIEW_Stop>
      break;
 8003ab0:	e032      	b.n	8003b18 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8003ab2:	f001 f8c7 	bl	8004c44 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8003ab6:	e02f      	b.n	8003b18 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8003ab8:	f001 f88c 	bl	8004bd4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8003abc:	e02c      	b.n	8003b18 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8003abe:	f000 ff0b 	bl	80048d8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8003ac2:	e029      	b.n	8003b18 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8003ac4:	f001 faea 	bl	800509c <SEGGER_SYSVIEW_SendNumModules>
      break;
 8003ac8:	e026      	b.n	8003b18 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8003aca:	f001 fac9 	bl	8005060 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8003ace:	e023      	b.n	8003b18 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003ad0:	4b13      	ldr	r3, [pc, #76]	; (8003b20 <_HandleIncomingPacket+0xdc>)
 8003ad2:	7e1b      	ldrb	r3, [r3, #24]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	1cfb      	adds	r3, r7, #3
 8003ad8:	2201      	movs	r2, #1
 8003ada:	4619      	mov	r1, r3
 8003adc:	f7ff fdde 	bl	800369c <SEGGER_RTT_ReadNoLock>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	dd13      	ble.n	8003b12 <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8003aea:	78fb      	ldrb	r3, [r7, #3]
 8003aec:	4618      	mov	r0, r3
 8003aee:	f001 fa37 	bl	8004f60 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8003af2:	e00e      	b.n	8003b12 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8003af4:	78fb      	ldrb	r3, [r7, #3]
 8003af6:	b25b      	sxtb	r3, r3
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	da0c      	bge.n	8003b16 <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003afc:	4b08      	ldr	r3, [pc, #32]	; (8003b20 <_HandleIncomingPacket+0xdc>)
 8003afe:	7e1b      	ldrb	r3, [r3, #24]
 8003b00:	4618      	mov	r0, r3
 8003b02:	1cfb      	adds	r3, r7, #3
 8003b04:	2201      	movs	r2, #1
 8003b06:	4619      	mov	r1, r3
 8003b08:	f7ff fdc8 	bl	800369c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8003b0c:	e003      	b.n	8003b16 <_HandleIncomingPacket+0xd2>
      break;
 8003b0e:	bf00      	nop
 8003b10:	e002      	b.n	8003b18 <_HandleIncomingPacket+0xd4>
      break;
 8003b12:	bf00      	nop
 8003b14:	e000      	b.n	8003b18 <_HandleIncomingPacket+0xd4>
      break;
 8003b16:	bf00      	nop
    }
  }
}
 8003b18:	bf00      	nop
 8003b1a:	3708      	adds	r7, #8
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	20014310 	.word	0x20014310

08003b24 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b08c      	sub	sp, #48	; 0x30
 8003b28:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8003b2e:	1d3b      	adds	r3, r7, #4
 8003b30:	3301      	adds	r3, #1
 8003b32:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b38:	4b31      	ldr	r3, [pc, #196]	; (8003c00 <_TrySendOverflowPacket+0xdc>)
 8003b3a:	695b      	ldr	r3, [r3, #20]
 8003b3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b3e:	e00b      	b.n	8003b58 <_TrySendOverflowPacket+0x34>
 8003b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b42:	b2da      	uxtb	r2, r3
 8003b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b46:	1c59      	adds	r1, r3, #1
 8003b48:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003b4a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b4e:	b2d2      	uxtb	r2, r2
 8003b50:	701a      	strb	r2, [r3, #0]
 8003b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b54:	09db      	lsrs	r3, r3, #7
 8003b56:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b5a:	2b7f      	cmp	r3, #127	; 0x7f
 8003b5c:	d8f0      	bhi.n	8003b40 <_TrySendOverflowPacket+0x1c>
 8003b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b60:	1c5a      	adds	r2, r3, #1
 8003b62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b66:	b2d2      	uxtb	r2, r2
 8003b68:	701a      	strb	r2, [r3, #0]
 8003b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b6c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003b6e:	4b25      	ldr	r3, [pc, #148]	; (8003c04 <_TrySendOverflowPacket+0xe0>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003b74:	4b22      	ldr	r3, [pc, #136]	; (8003c00 <_TrySendOverflowPacket+0xdc>)
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	69ba      	ldr	r2, [r7, #24]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	627b      	str	r3, [r7, #36]	; 0x24
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	623b      	str	r3, [r7, #32]
 8003b86:	e00b      	b.n	8003ba0 <_TrySendOverflowPacket+0x7c>
 8003b88:	6a3b      	ldr	r3, [r7, #32]
 8003b8a:	b2da      	uxtb	r2, r3
 8003b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8e:	1c59      	adds	r1, r3, #1
 8003b90:	6279      	str	r1, [r7, #36]	; 0x24
 8003b92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b96:	b2d2      	uxtb	r2, r2
 8003b98:	701a      	strb	r2, [r3, #0]
 8003b9a:	6a3b      	ldr	r3, [r7, #32]
 8003b9c:	09db      	lsrs	r3, r3, #7
 8003b9e:	623b      	str	r3, [r7, #32]
 8003ba0:	6a3b      	ldr	r3, [r7, #32]
 8003ba2:	2b7f      	cmp	r3, #127	; 0x7f
 8003ba4:	d8f0      	bhi.n	8003b88 <_TrySendOverflowPacket+0x64>
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba8:	1c5a      	adds	r2, r3, #1
 8003baa:	627a      	str	r2, [r7, #36]	; 0x24
 8003bac:	6a3a      	ldr	r2, [r7, #32]
 8003bae:	b2d2      	uxtb	r2, r2
 8003bb0:	701a      	strb	r2, [r3, #0]
 8003bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb4:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8003bb6:	4b12      	ldr	r3, [pc, #72]	; (8003c00 <_TrySendOverflowPacket+0xdc>)
 8003bb8:	785b      	ldrb	r3, [r3, #1]
 8003bba:	4618      	mov	r0, r3
 8003bbc:	1d3b      	adds	r3, r7, #4
 8003bbe:	69fa      	ldr	r2, [r7, #28]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	1d3b      	adds	r3, r7, #4
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	f7fc fb2a 	bl	8000220 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d009      	beq.n	8003bea <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003bd6:	4a0a      	ldr	r2, [pc, #40]	; (8003c00 <_TrySendOverflowPacket+0xdc>)
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8003bdc:	4b08      	ldr	r3, [pc, #32]	; (8003c00 <_TrySendOverflowPacket+0xdc>)
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	3b01      	subs	r3, #1
 8003be2:	b2da      	uxtb	r2, r3
 8003be4:	4b06      	ldr	r3, [pc, #24]	; (8003c00 <_TrySendOverflowPacket+0xdc>)
 8003be6:	701a      	strb	r2, [r3, #0]
 8003be8:	e004      	b.n	8003bf4 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8003bea:	4b05      	ldr	r3, [pc, #20]	; (8003c00 <_TrySendOverflowPacket+0xdc>)
 8003bec:	695b      	ldr	r3, [r3, #20]
 8003bee:	3301      	adds	r3, #1
 8003bf0:	4a03      	ldr	r2, [pc, #12]	; (8003c00 <_TrySendOverflowPacket+0xdc>)
 8003bf2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8003bf4:	693b      	ldr	r3, [r7, #16]
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3730      	adds	r7, #48	; 0x30
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	20014310 	.word	0x20014310
 8003c04:	e0001004 	.word	0xe0001004

08003c08 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b08a      	sub	sp, #40	; 0x28
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8003c14:	4b6c      	ldr	r3, [pc, #432]	; (8003dc8 <_SendPacket+0x1c0>)
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d010      	beq.n	8003c3e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003c1c:	4b6a      	ldr	r3, [pc, #424]	; (8003dc8 <_SendPacket+0x1c0>)
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f000 80a3 	beq.w	8003d6c <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8003c26:	4b68      	ldr	r3, [pc, #416]	; (8003dc8 <_SendPacket+0x1c0>)
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d109      	bne.n	8003c42 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8003c2e:	f7ff ff79 	bl	8003b24 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8003c32:	4b65      	ldr	r3, [pc, #404]	; (8003dc8 <_SendPacket+0x1c0>)
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	f040 809a 	bne.w	8003d70 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8003c3c:	e001      	b.n	8003c42 <_SendPacket+0x3a>
    goto Send;
 8003c3e:	bf00      	nop
 8003c40:	e000      	b.n	8003c44 <_SendPacket+0x3c>
Send:
 8003c42:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2b1f      	cmp	r3, #31
 8003c48:	d809      	bhi.n	8003c5e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8003c4a:	4b5f      	ldr	r3, [pc, #380]	; (8003dc8 <_SendPacket+0x1c0>)
 8003c4c:	69da      	ldr	r2, [r3, #28]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	fa22 f303 	lsr.w	r3, r2, r3
 8003c54:	f003 0301 	and.w	r3, r3, #1
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	f040 808b 	bne.w	8003d74 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2b17      	cmp	r3, #23
 8003c62:	d807      	bhi.n	8003c74 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	3b01      	subs	r3, #1
 8003c68:	60fb      	str	r3, [r7, #12]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	b2da      	uxtb	r2, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	701a      	strb	r2, [r3, #0]
 8003c72:	e03d      	b.n	8003cf0 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8003c74:	68ba      	ldr	r2, [r7, #8]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	2b7f      	cmp	r3, #127	; 0x7f
 8003c80:	d912      	bls.n	8003ca8 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	09da      	lsrs	r2, r3, #7
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	60fb      	str	r3, [r7, #12]
 8003c8c:	b2d2      	uxtb	r2, r2
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	3a01      	subs	r2, #1
 8003c9a:	60fa      	str	r2, [r7, #12]
 8003c9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003ca0:	b2da      	uxtb	r2, r3
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	701a      	strb	r2, [r3, #0]
 8003ca6:	e006      	b.n	8003cb6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	3b01      	subs	r3, #1
 8003cac:	60fb      	str	r3, [r7, #12]
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	b2da      	uxtb	r2, r3
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2b7f      	cmp	r3, #127	; 0x7f
 8003cba:	d912      	bls.n	8003ce2 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	09da      	lsrs	r2, r3, #7
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	60fb      	str	r3, [r7, #12]
 8003cc6:	b2d2      	uxtb	r2, r2
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	3a01      	subs	r2, #1
 8003cd4:	60fa      	str	r2, [r7, #12]
 8003cd6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003cda:	b2da      	uxtb	r2, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	701a      	strb	r2, [r3, #0]
 8003ce0:	e006      	b.n	8003cf0 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	60fb      	str	r3, [r7, #12]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	b2da      	uxtb	r2, r3
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003cf0:	4b36      	ldr	r3, [pc, #216]	; (8003dcc <_SendPacket+0x1c4>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003cf6:	4b34      	ldr	r3, [pc, #208]	; (8003dc8 <_SendPacket+0x1c0>)
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	69ba      	ldr	r2, [r7, #24]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	627b      	str	r3, [r7, #36]	; 0x24
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	623b      	str	r3, [r7, #32]
 8003d08:	e00b      	b.n	8003d22 <_SendPacket+0x11a>
 8003d0a:	6a3b      	ldr	r3, [r7, #32]
 8003d0c:	b2da      	uxtb	r2, r3
 8003d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d10:	1c59      	adds	r1, r3, #1
 8003d12:	6279      	str	r1, [r7, #36]	; 0x24
 8003d14:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d18:	b2d2      	uxtb	r2, r2
 8003d1a:	701a      	strb	r2, [r3, #0]
 8003d1c:	6a3b      	ldr	r3, [r7, #32]
 8003d1e:	09db      	lsrs	r3, r3, #7
 8003d20:	623b      	str	r3, [r7, #32]
 8003d22:	6a3b      	ldr	r3, [r7, #32]
 8003d24:	2b7f      	cmp	r3, #127	; 0x7f
 8003d26:	d8f0      	bhi.n	8003d0a <_SendPacket+0x102>
 8003d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2a:	1c5a      	adds	r2, r3, #1
 8003d2c:	627a      	str	r2, [r7, #36]	; 0x24
 8003d2e:	6a3a      	ldr	r2, [r7, #32]
 8003d30:	b2d2      	uxtb	r2, r2
 8003d32:	701a      	strb	r2, [r3, #0]
 8003d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d36:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8003d38:	4b23      	ldr	r3, [pc, #140]	; (8003dc8 <_SendPacket+0x1c0>)
 8003d3a:	785b      	ldrb	r3, [r3, #1]
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	68ba      	ldr	r2, [r7, #8]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	461a      	mov	r2, r3
 8003d46:	68f9      	ldr	r1, [r7, #12]
 8003d48:	f7fc fa6a 	bl	8000220 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d003      	beq.n	8003d5e <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003d56:	4a1c      	ldr	r2, [pc, #112]	; (8003dc8 <_SendPacket+0x1c0>)
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	60d3      	str	r3, [r2, #12]
 8003d5c:	e00b      	b.n	8003d76 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8003d5e:	4b1a      	ldr	r3, [pc, #104]	; (8003dc8 <_SendPacket+0x1c0>)
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	3301      	adds	r3, #1
 8003d64:	b2da      	uxtb	r2, r3
 8003d66:	4b18      	ldr	r3, [pc, #96]	; (8003dc8 <_SendPacket+0x1c0>)
 8003d68:	701a      	strb	r2, [r3, #0]
 8003d6a:	e004      	b.n	8003d76 <_SendPacket+0x16e>
    goto SendDone;
 8003d6c:	bf00      	nop
 8003d6e:	e002      	b.n	8003d76 <_SendPacket+0x16e>
      goto SendDone;
 8003d70:	bf00      	nop
 8003d72:	e000      	b.n	8003d76 <_SendPacket+0x16e>
      goto SendDone;
 8003d74:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8003d76:	4b14      	ldr	r3, [pc, #80]	; (8003dc8 <_SendPacket+0x1c0>)
 8003d78:	7e1b      	ldrb	r3, [r3, #24]
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	4a14      	ldr	r2, [pc, #80]	; (8003dd0 <_SendPacket+0x1c8>)
 8003d7e:	460b      	mov	r3, r1
 8003d80:	005b      	lsls	r3, r3, #1
 8003d82:	440b      	add	r3, r1
 8003d84:	00db      	lsls	r3, r3, #3
 8003d86:	4413      	add	r3, r2
 8003d88:	336c      	adds	r3, #108	; 0x6c
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	4b0e      	ldr	r3, [pc, #56]	; (8003dc8 <_SendPacket+0x1c0>)
 8003d8e:	7e1b      	ldrb	r3, [r3, #24]
 8003d90:	4618      	mov	r0, r3
 8003d92:	490f      	ldr	r1, [pc, #60]	; (8003dd0 <_SendPacket+0x1c8>)
 8003d94:	4603      	mov	r3, r0
 8003d96:	005b      	lsls	r3, r3, #1
 8003d98:	4403      	add	r3, r0
 8003d9a:	00db      	lsls	r3, r3, #3
 8003d9c:	440b      	add	r3, r1
 8003d9e:	3370      	adds	r3, #112	; 0x70
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d00b      	beq.n	8003dbe <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8003da6:	4b08      	ldr	r3, [pc, #32]	; (8003dc8 <_SendPacket+0x1c0>)
 8003da8:	789b      	ldrb	r3, [r3, #2]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d107      	bne.n	8003dbe <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8003dae:	4b06      	ldr	r3, [pc, #24]	; (8003dc8 <_SendPacket+0x1c0>)
 8003db0:	2201      	movs	r2, #1
 8003db2:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8003db4:	f7ff fe46 	bl	8003a44 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8003db8:	4b03      	ldr	r3, [pc, #12]	; (8003dc8 <_SendPacket+0x1c0>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8003dbe:	bf00      	nop
 8003dc0:	3728      	adds	r7, #40	; 0x28
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	20014310 	.word	0x20014310
 8003dcc:	e0001004 	.word	0xe0001004
 8003dd0:	20012e50 	.word	0x20012e50

08003dd4 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b08a      	sub	sp, #40	; 0x28
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	460b      	mov	r3, r1
 8003dde:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	3301      	adds	r3, #1
 8003dea:	2b80      	cmp	r3, #128	; 0x80
 8003dec:	d80a      	bhi.n	8003e04 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	1c59      	adds	r1, r3, #1
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	6051      	str	r1, [r2, #4]
 8003df8:	78fa      	ldrb	r2, [r7, #3]
 8003dfa:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	1c5a      	adds	r2, r3, #1
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	691b      	ldr	r3, [r3, #16]
 8003e08:	2b80      	cmp	r3, #128	; 0x80
 8003e0a:	d15a      	bne.n	8003ec2 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	691a      	ldr	r2, [r3, #16]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	b2d2      	uxtb	r2, r2
 8003e16:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	627b      	str	r3, [r7, #36]	; 0x24
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	623b      	str	r3, [r7, #32]
 8003e2c:	e00b      	b.n	8003e46 <_StoreChar+0x72>
 8003e2e:	6a3b      	ldr	r3, [r7, #32]
 8003e30:	b2da      	uxtb	r2, r3
 8003e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e34:	1c59      	adds	r1, r3, #1
 8003e36:	6279      	str	r1, [r7, #36]	; 0x24
 8003e38:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e3c:	b2d2      	uxtb	r2, r2
 8003e3e:	701a      	strb	r2, [r3, #0]
 8003e40:	6a3b      	ldr	r3, [r7, #32]
 8003e42:	09db      	lsrs	r3, r3, #7
 8003e44:	623b      	str	r3, [r7, #32]
 8003e46:	6a3b      	ldr	r3, [r7, #32]
 8003e48:	2b7f      	cmp	r3, #127	; 0x7f
 8003e4a:	d8f0      	bhi.n	8003e2e <_StoreChar+0x5a>
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4e:	1c5a      	adds	r2, r3, #1
 8003e50:	627a      	str	r2, [r7, #36]	; 0x24
 8003e52:	6a3a      	ldr	r2, [r7, #32]
 8003e54:	b2d2      	uxtb	r2, r2
 8003e56:	701a      	strb	r2, [r3, #0]
 8003e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5a:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	61fb      	str	r3, [r7, #28]
 8003e60:	2300      	movs	r3, #0
 8003e62:	61bb      	str	r3, [r7, #24]
 8003e64:	e00b      	b.n	8003e7e <_StoreChar+0xaa>
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	b2da      	uxtb	r2, r3
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	1c59      	adds	r1, r3, #1
 8003e6e:	61f9      	str	r1, [r7, #28]
 8003e70:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e74:	b2d2      	uxtb	r2, r2
 8003e76:	701a      	strb	r2, [r3, #0]
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	09db      	lsrs	r3, r3, #7
 8003e7c:	61bb      	str	r3, [r7, #24]
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	2b7f      	cmp	r3, #127	; 0x7f
 8003e82:	d8f0      	bhi.n	8003e66 <_StoreChar+0x92>
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	1c5a      	adds	r2, r3, #1
 8003e88:	61fa      	str	r2, [r7, #28]
 8003e8a:	69ba      	ldr	r2, [r7, #24]
 8003e8c:	b2d2      	uxtb	r2, r2
 8003e8e:	701a      	strb	r2, [r3, #0]
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	221a      	movs	r2, #26
 8003e9a:	6939      	ldr	r1, [r7, #16]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7ff feb3 	bl	8003c08 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7ff fdbf 	bl	8003a2a <_PreparePacket>
 8003eac:	4602      	mov	r2, r0
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	1c5a      	adds	r2, r3, #1
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	611a      	str	r2, [r3, #16]
  }
}
 8003ec2:	bf00      	nop
 8003ec4:	3728      	adds	r7, #40	; 0x28
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
	...

08003ecc <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b08a      	sub	sp, #40	; 0x28
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	607a      	str	r2, [r7, #4]
 8003ed8:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8003ee6:	e007      	b.n	8003ef8 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8003ee8:	6a3a      	ldr	r2, [r7, #32]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ef0:	623b      	str	r3, [r7, #32]
    Width++;
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8003ef8:	6a3a      	ldr	r2, [r7, #32]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d2f3      	bcs.n	8003ee8 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8003f00:	683a      	ldr	r2, [r7, #0]
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d901      	bls.n	8003f0c <_PrintUnsigned+0x40>
    Width = NumDigits;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8003f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d11f      	bne.n	8003f56 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8003f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d01c      	beq.n	8003f56 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8003f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d005      	beq.n	8003f32 <_PrintUnsigned+0x66>
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d102      	bne.n	8003f32 <_PrintUnsigned+0x66>
        c = '0';
 8003f2c:	2330      	movs	r3, #48	; 0x30
 8003f2e:	76fb      	strb	r3, [r7, #27]
 8003f30:	e001      	b.n	8003f36 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8003f32:	2320      	movs	r3, #32
 8003f34:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003f36:	e007      	b.n	8003f48 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8003f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8003f3e:	7efb      	ldrb	r3, [r7, #27]
 8003f40:	4619      	mov	r1, r3
 8003f42:	68f8      	ldr	r0, [r7, #12]
 8003f44:	f7ff ff46 	bl	8003dd4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d003      	beq.n	8003f56 <_PrintUnsigned+0x8a>
 8003f4e:	69fa      	ldr	r2, [r7, #28]
 8003f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d3f0      	bcc.n	8003f38 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d903      	bls.n	8003f64 <_PrintUnsigned+0x98>
      NumDigits--;
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	603b      	str	r3, [r7, #0]
 8003f62:	e009      	b.n	8003f78 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8003f64:	68ba      	ldr	r2, [r7, #8]
 8003f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f6c:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8003f6e:	697a      	ldr	r2, [r7, #20]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d200      	bcs.n	8003f78 <_PrintUnsigned+0xac>
        break;
 8003f76:	e005      	b.n	8003f84 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8003f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	fb02 f303 	mul.w	r3, r2, r3
 8003f80:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8003f82:	e7e8      	b.n	8003f56 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8003f84:	68ba      	ldr	r2, [r7, #8]
 8003f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f8c:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f92:	fb02 f303 	mul.w	r3, r2, r3
 8003f96:	68ba      	ldr	r2, [r7, #8]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8003f9c:	4a15      	ldr	r2, [pc, #84]	; (8003ff4 <_PrintUnsigned+0x128>)
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	68f8      	ldr	r0, [r7, #12]
 8003fa8:	f7ff ff14 	bl	8003dd4 <_StoreChar>
    Digit /= Base;
 8003fac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb4:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1e3      	bne.n	8003f84 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8003fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fbe:	f003 0301 	and.w	r3, r3, #1
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d011      	beq.n	8003fea <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8003fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00e      	beq.n	8003fea <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003fcc:	e006      	b.n	8003fdc <_PrintUnsigned+0x110>
        FieldWidth--;
 8003fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8003fd4:	2120      	movs	r1, #32
 8003fd6:	68f8      	ldr	r0, [r7, #12]
 8003fd8:	f7ff fefc 	bl	8003dd4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d003      	beq.n	8003fea <_PrintUnsigned+0x11e>
 8003fe2:	69fa      	ldr	r2, [r7, #28]
 8003fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d3f1      	bcc.n	8003fce <_PrintUnsigned+0x102>
      }
    }
  }
}
 8003fea:	bf00      	nop
 8003fec:	3728      	adds	r7, #40	; 0x28
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	08005410 	.word	0x08005410

08003ff8 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b088      	sub	sp, #32
 8003ffc:	af02      	add	r7, sp, #8
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	607a      	str	r2, [r7, #4]
 8004004:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	2b00      	cmp	r3, #0
 800400a:	bfb8      	it	lt
 800400c:	425b      	neglt	r3, r3
 800400e:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8004010:	2301      	movs	r3, #1
 8004012:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004014:	e007      	b.n	8004026 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	fb92 f3f3 	sdiv	r3, r2, r3
 800401e:	613b      	str	r3, [r7, #16]
    Width++;
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	3301      	adds	r3, #1
 8004024:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	429a      	cmp	r2, r3
 800402c:	daf3      	bge.n	8004016 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 800402e:	683a      	ldr	r2, [r7, #0]
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	429a      	cmp	r2, r3
 8004034:	d901      	bls.n	800403a <_PrintInt+0x42>
    Width = NumDigits;
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800403a:	6a3b      	ldr	r3, [r7, #32]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d00a      	beq.n	8004056 <_PrintInt+0x5e>
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	2b00      	cmp	r3, #0
 8004044:	db04      	blt.n	8004050 <_PrintInt+0x58>
 8004046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004048:	f003 0304 	and.w	r3, r3, #4
 800404c:	2b00      	cmp	r3, #0
 800404e:	d002      	beq.n	8004056 <_PrintInt+0x5e>
    FieldWidth--;
 8004050:	6a3b      	ldr	r3, [r7, #32]
 8004052:	3b01      	subs	r3, #1
 8004054:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8004056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004058:	f003 0302 	and.w	r3, r3, #2
 800405c:	2b00      	cmp	r3, #0
 800405e:	d002      	beq.n	8004066 <_PrintInt+0x6e>
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d016      	beq.n	8004094 <_PrintInt+0x9c>
 8004066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004068:	f003 0301 	and.w	r3, r3, #1
 800406c:	2b00      	cmp	r3, #0
 800406e:	d111      	bne.n	8004094 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8004070:	6a3b      	ldr	r3, [r7, #32]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00e      	beq.n	8004094 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004076:	e006      	b.n	8004086 <_PrintInt+0x8e>
        FieldWidth--;
 8004078:	6a3b      	ldr	r3, [r7, #32]
 800407a:	3b01      	subs	r3, #1
 800407c:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 800407e:	2120      	movs	r1, #32
 8004080:	68f8      	ldr	r0, [r7, #12]
 8004082:	f7ff fea7 	bl	8003dd4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004086:	6a3b      	ldr	r3, [r7, #32]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d003      	beq.n	8004094 <_PrintInt+0x9c>
 800408c:	697a      	ldr	r2, [r7, #20]
 800408e:	6a3b      	ldr	r3, [r7, #32]
 8004090:	429a      	cmp	r2, r3
 8004092:	d3f1      	bcc.n	8004078 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	2b00      	cmp	r3, #0
 8004098:	da07      	bge.n	80040aa <_PrintInt+0xb2>
    v = -v;
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	425b      	negs	r3, r3
 800409e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 80040a0:	212d      	movs	r1, #45	; 0x2d
 80040a2:	68f8      	ldr	r0, [r7, #12]
 80040a4:	f7ff fe96 	bl	8003dd4 <_StoreChar>
 80040a8:	e008      	b.n	80040bc <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80040aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ac:	f003 0304 	and.w	r3, r3, #4
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d003      	beq.n	80040bc <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80040b4:	212b      	movs	r1, #43	; 0x2b
 80040b6:	68f8      	ldr	r0, [r7, #12]
 80040b8:	f7ff fe8c 	bl	8003dd4 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80040bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040be:	f003 0302 	and.w	r3, r3, #2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d019      	beq.n	80040fa <_PrintInt+0x102>
 80040c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c8:	f003 0301 	and.w	r3, r3, #1
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d114      	bne.n	80040fa <_PrintInt+0x102>
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d111      	bne.n	80040fa <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80040d6:	6a3b      	ldr	r3, [r7, #32]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00e      	beq.n	80040fa <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80040dc:	e006      	b.n	80040ec <_PrintInt+0xf4>
        FieldWidth--;
 80040de:	6a3b      	ldr	r3, [r7, #32]
 80040e0:	3b01      	subs	r3, #1
 80040e2:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 80040e4:	2130      	movs	r1, #48	; 0x30
 80040e6:	68f8      	ldr	r0, [r7, #12]
 80040e8:	f7ff fe74 	bl	8003dd4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80040ec:	6a3b      	ldr	r3, [r7, #32]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d003      	beq.n	80040fa <_PrintInt+0x102>
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	6a3b      	ldr	r3, [r7, #32]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d3f1      	bcc.n	80040de <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 80040fa:	68b9      	ldr	r1, [r7, #8]
 80040fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fe:	9301      	str	r3, [sp, #4]
 8004100:	6a3b      	ldr	r3, [r7, #32]
 8004102:	9300      	str	r3, [sp, #0]
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	68f8      	ldr	r0, [r7, #12]
 800410a:	f7ff fedf 	bl	8003ecc <_PrintUnsigned>
}
 800410e:	bf00      	nop
 8004110:	3718      	adds	r7, #24
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
	...

08004118 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8004118:	b580      	push	{r7, lr}
 800411a:	b098      	sub	sp, #96	; 0x60
 800411c:	af02      	add	r7, sp, #8
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004124:	f3ef 8311 	mrs	r3, BASEPRI
 8004128:	f04f 0120 	mov.w	r1, #32
 800412c:	f381 8811 	msr	BASEPRI, r1
 8004130:	633b      	str	r3, [r7, #48]	; 0x30
 8004132:	48b7      	ldr	r0, [pc, #732]	; (8004410 <_VPrintTarget+0x2f8>)
 8004134:	f7ff fc79 	bl	8003a2a <_PreparePacket>
 8004138:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 800413a:	4bb5      	ldr	r3, [pc, #724]	; (8004410 <_VPrintTarget+0x2f8>)
 800413c:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 800413e:	2300      	movs	r3, #0
 8004140:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8004142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004144:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	3301      	adds	r3, #1
 800414a:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	3301      	adds	r3, #1
 800415c:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 800415e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004162:	2b00      	cmp	r3, #0
 8004164:	f000 8183 	beq.w	800446e <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8004168:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800416c:	2b25      	cmp	r3, #37	; 0x25
 800416e:	f040 8170 	bne.w	8004452 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8004172:	2300      	movs	r3, #0
 8004174:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8004176:	2301      	movs	r3, #1
 8004178:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8004182:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004186:	3b23      	subs	r3, #35	; 0x23
 8004188:	2b0d      	cmp	r3, #13
 800418a:	d83f      	bhi.n	800420c <_VPrintTarget+0xf4>
 800418c:	a201      	add	r2, pc, #4	; (adr r2, 8004194 <_VPrintTarget+0x7c>)
 800418e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004192:	bf00      	nop
 8004194:	080041fd 	.word	0x080041fd
 8004198:	0800420d 	.word	0x0800420d
 800419c:	0800420d 	.word	0x0800420d
 80041a0:	0800420d 	.word	0x0800420d
 80041a4:	0800420d 	.word	0x0800420d
 80041a8:	0800420d 	.word	0x0800420d
 80041ac:	0800420d 	.word	0x0800420d
 80041b0:	0800420d 	.word	0x0800420d
 80041b4:	080041ed 	.word	0x080041ed
 80041b8:	0800420d 	.word	0x0800420d
 80041bc:	080041cd 	.word	0x080041cd
 80041c0:	0800420d 	.word	0x0800420d
 80041c4:	0800420d 	.word	0x0800420d
 80041c8:	080041dd 	.word	0x080041dd
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80041cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041ce:	f043 0301 	orr.w	r3, r3, #1
 80041d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	3301      	adds	r3, #1
 80041d8:	60fb      	str	r3, [r7, #12]
 80041da:	e01a      	b.n	8004212 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80041dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041de:	f043 0302 	orr.w	r3, r3, #2
 80041e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	3301      	adds	r3, #1
 80041e8:	60fb      	str	r3, [r7, #12]
 80041ea:	e012      	b.n	8004212 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80041ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041ee:	f043 0304 	orr.w	r3, r3, #4
 80041f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	3301      	adds	r3, #1
 80041f8:	60fb      	str	r3, [r7, #12]
 80041fa:	e00a      	b.n	8004212 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80041fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041fe:	f043 0308 	orr.w	r3, r3, #8
 8004202:	64bb      	str	r3, [r7, #72]	; 0x48
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	3301      	adds	r3, #1
 8004208:	60fb      	str	r3, [r7, #12]
 800420a:	e002      	b.n	8004212 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 800420c:	2300      	movs	r3, #0
 800420e:	653b      	str	r3, [r7, #80]	; 0x50
 8004210:	bf00      	nop
        }
      } while (v);
 8004212:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1b0      	bne.n	800417a <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8004218:	2300      	movs	r3, #0
 800421a:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8004224:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004228:	2b2f      	cmp	r3, #47	; 0x2f
 800422a:	d912      	bls.n	8004252 <_VPrintTarget+0x13a>
 800422c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004230:	2b39      	cmp	r3, #57	; 0x39
 8004232:	d80e      	bhi.n	8004252 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	3301      	adds	r3, #1
 8004238:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 800423a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800423c:	4613      	mov	r3, r2
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	4413      	add	r3, r2
 8004242:	005b      	lsls	r3, r3, #1
 8004244:	461a      	mov	r2, r3
 8004246:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800424a:	4413      	add	r3, r2
 800424c:	3b30      	subs	r3, #48	; 0x30
 800424e:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8004250:	e7e4      	b.n	800421c <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8004252:	2300      	movs	r3, #0
 8004254:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 800425e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004262:	2b2e      	cmp	r3, #46	; 0x2e
 8004264:	d11d      	bne.n	80042a2 <_VPrintTarget+0x18a>
        sFormat++;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	3301      	adds	r3, #1
 800426a:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8004274:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004278:	2b2f      	cmp	r3, #47	; 0x2f
 800427a:	d912      	bls.n	80042a2 <_VPrintTarget+0x18a>
 800427c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004280:	2b39      	cmp	r3, #57	; 0x39
 8004282:	d80e      	bhi.n	80042a2 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	3301      	adds	r3, #1
 8004288:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 800428a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800428c:	4613      	mov	r3, r2
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	4413      	add	r3, r2
 8004292:	005b      	lsls	r3, r3, #1
 8004294:	461a      	mov	r2, r3
 8004296:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800429a:	4413      	add	r3, r2
 800429c:	3b30      	subs	r3, #48	; 0x30
 800429e:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 80042a0:	e7e4      	b.n	800426c <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 80042aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80042ae:	2b6c      	cmp	r3, #108	; 0x6c
 80042b0:	d003      	beq.n	80042ba <_VPrintTarget+0x1a2>
 80042b2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80042b6:	2b68      	cmp	r3, #104	; 0x68
 80042b8:	d107      	bne.n	80042ca <_VPrintTarget+0x1b2>
          c = *sFormat;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	3301      	adds	r3, #1
 80042c6:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80042c8:	e7ef      	b.n	80042aa <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80042ca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80042ce:	2b25      	cmp	r3, #37	; 0x25
 80042d0:	f000 80b3 	beq.w	800443a <_VPrintTarget+0x322>
 80042d4:	2b25      	cmp	r3, #37	; 0x25
 80042d6:	f2c0 80b7 	blt.w	8004448 <_VPrintTarget+0x330>
 80042da:	2b78      	cmp	r3, #120	; 0x78
 80042dc:	f300 80b4 	bgt.w	8004448 <_VPrintTarget+0x330>
 80042e0:	2b58      	cmp	r3, #88	; 0x58
 80042e2:	f2c0 80b1 	blt.w	8004448 <_VPrintTarget+0x330>
 80042e6:	3b58      	subs	r3, #88	; 0x58
 80042e8:	2b20      	cmp	r3, #32
 80042ea:	f200 80ad 	bhi.w	8004448 <_VPrintTarget+0x330>
 80042ee:	a201      	add	r2, pc, #4	; (adr r2, 80042f4 <_VPrintTarget+0x1dc>)
 80042f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042f4:	080043eb 	.word	0x080043eb
 80042f8:	08004449 	.word	0x08004449
 80042fc:	08004449 	.word	0x08004449
 8004300:	08004449 	.word	0x08004449
 8004304:	08004449 	.word	0x08004449
 8004308:	08004449 	.word	0x08004449
 800430c:	08004449 	.word	0x08004449
 8004310:	08004449 	.word	0x08004449
 8004314:	08004449 	.word	0x08004449
 8004318:	08004449 	.word	0x08004449
 800431c:	08004449 	.word	0x08004449
 8004320:	08004379 	.word	0x08004379
 8004324:	0800439f 	.word	0x0800439f
 8004328:	08004449 	.word	0x08004449
 800432c:	08004449 	.word	0x08004449
 8004330:	08004449 	.word	0x08004449
 8004334:	08004449 	.word	0x08004449
 8004338:	08004449 	.word	0x08004449
 800433c:	08004449 	.word	0x08004449
 8004340:	08004449 	.word	0x08004449
 8004344:	08004449 	.word	0x08004449
 8004348:	08004449 	.word	0x08004449
 800434c:	08004449 	.word	0x08004449
 8004350:	08004449 	.word	0x08004449
 8004354:	08004415 	.word	0x08004415
 8004358:	08004449 	.word	0x08004449
 800435c:	08004449 	.word	0x08004449
 8004360:	08004449 	.word	0x08004449
 8004364:	08004449 	.word	0x08004449
 8004368:	080043c5 	.word	0x080043c5
 800436c:	08004449 	.word	0x08004449
 8004370:	08004449 	.word	0x08004449
 8004374:	080043eb 	.word	0x080043eb
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	1d19      	adds	r1, r3, #4
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	6011      	str	r1, [r2, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8004386:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004388:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 800438c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8004390:	f107 0314 	add.w	r3, r7, #20
 8004394:	4611      	mov	r1, r2
 8004396:	4618      	mov	r0, r3
 8004398:	f7ff fd1c 	bl	8003dd4 <_StoreChar>
        break;
 800439c:	e055      	b.n	800444a <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	1d19      	adds	r1, r3, #4
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	6011      	str	r1, [r2, #0]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80043ac:	f107 0014 	add.w	r0, r7, #20
 80043b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043b2:	9301      	str	r3, [sp, #4]
 80043b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043b6:	9300      	str	r3, [sp, #0]
 80043b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043ba:	220a      	movs	r2, #10
 80043bc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80043be:	f7ff fe1b 	bl	8003ff8 <_PrintInt>
        break;
 80043c2:	e042      	b.n	800444a <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	1d19      	adds	r1, r3, #4
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	6011      	str	r1, [r2, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80043d2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80043d4:	f107 0014 	add.w	r0, r7, #20
 80043d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043da:	9301      	str	r3, [sp, #4]
 80043dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043de:	9300      	str	r3, [sp, #0]
 80043e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043e2:	220a      	movs	r2, #10
 80043e4:	f7ff fd72 	bl	8003ecc <_PrintUnsigned>
        break;
 80043e8:	e02f      	b.n	800444a <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	1d19      	adds	r1, r3, #4
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	6011      	str	r1, [r2, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80043f8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80043fa:	f107 0014 	add.w	r0, r7, #20
 80043fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004400:	9301      	str	r3, [sp, #4]
 8004402:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004404:	9300      	str	r3, [sp, #0]
 8004406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004408:	2210      	movs	r2, #16
 800440a:	f7ff fd5f 	bl	8003ecc <_PrintUnsigned>
        break;
 800440e:	e01c      	b.n	800444a <_VPrintTarget+0x332>
 8004410:	20014340 	.word	0x20014340
      case 'p':
        v = va_arg(*pParamList, int);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	1d19      	adds	r1, r3, #4
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	6011      	str	r1, [r2, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8004422:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004424:	f107 0014 	add.w	r0, r7, #20
 8004428:	2300      	movs	r3, #0
 800442a:	9301      	str	r3, [sp, #4]
 800442c:	2308      	movs	r3, #8
 800442e:	9300      	str	r3, [sp, #0]
 8004430:	2308      	movs	r3, #8
 8004432:	2210      	movs	r2, #16
 8004434:	f7ff fd4a 	bl	8003ecc <_PrintUnsigned>
        break;
 8004438:	e007      	b.n	800444a <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 800443a:	f107 0314 	add.w	r3, r7, #20
 800443e:	2125      	movs	r1, #37	; 0x25
 8004440:	4618      	mov	r0, r3
 8004442:	f7ff fcc7 	bl	8003dd4 <_StoreChar>
        break;
 8004446:	e000      	b.n	800444a <_VPrintTarget+0x332>
      default:
        break;
 8004448:	bf00      	nop
      }
      sFormat++;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	3301      	adds	r3, #1
 800444e:	60fb      	str	r3, [r7, #12]
 8004450:	e007      	b.n	8004462 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8004452:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004456:	f107 0314 	add.w	r3, r7, #20
 800445a:	4611      	mov	r1, r2
 800445c:	4618      	mov	r0, r3
 800445e:	f7ff fcb9 	bl	8003dd4 <_StoreChar>
    }
  } while (*sFormat);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	2b00      	cmp	r3, #0
 8004468:	f47f ae72 	bne.w	8004150 <_VPrintTarget+0x38>
 800446c:	e000      	b.n	8004470 <_VPrintTarget+0x358>
      break;
 800446e:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8004470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004472:	2b00      	cmp	r3, #0
 8004474:	d041      	beq.n	80044fa <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8004476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	b2d2      	uxtb	r2, r2
 800447c:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	643b      	str	r3, [r7, #64]	; 0x40
 8004482:	6a3b      	ldr	r3, [r7, #32]
 8004484:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004486:	e00b      	b.n	80044a0 <_VPrintTarget+0x388>
 8004488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800448a:	b2da      	uxtb	r2, r3
 800448c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800448e:	1c59      	adds	r1, r3, #1
 8004490:	6439      	str	r1, [r7, #64]	; 0x40
 8004492:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004496:	b2d2      	uxtb	r2, r2
 8004498:	701a      	strb	r2, [r3, #0]
 800449a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800449c:	09db      	lsrs	r3, r3, #7
 800449e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044a2:	2b7f      	cmp	r3, #127	; 0x7f
 80044a4:	d8f0      	bhi.n	8004488 <_VPrintTarget+0x370>
 80044a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044a8:	1c5a      	adds	r2, r3, #1
 80044aa:	643a      	str	r2, [r7, #64]	; 0x40
 80044ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80044ae:	b2d2      	uxtb	r2, r2
 80044b0:	701a      	strb	r2, [r3, #0]
 80044b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044b4:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80044ba:	2300      	movs	r3, #0
 80044bc:	637b      	str	r3, [r7, #52]	; 0x34
 80044be:	e00b      	b.n	80044d8 <_VPrintTarget+0x3c0>
 80044c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044c2:	b2da      	uxtb	r2, r3
 80044c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c6:	1c59      	adds	r1, r3, #1
 80044c8:	63b9      	str	r1, [r7, #56]	; 0x38
 80044ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80044ce:	b2d2      	uxtb	r2, r2
 80044d0:	701a      	strb	r2, [r3, #0]
 80044d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044d4:	09db      	lsrs	r3, r3, #7
 80044d6:	637b      	str	r3, [r7, #52]	; 0x34
 80044d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044da:	2b7f      	cmp	r3, #127	; 0x7f
 80044dc:	d8f0      	bhi.n	80044c0 <_VPrintTarget+0x3a8>
 80044de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044e0:	1c5a      	adds	r2, r3, #1
 80044e2:	63ba      	str	r2, [r7, #56]	; 0x38
 80044e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044e6:	b2d2      	uxtb	r2, r2
 80044e8:	701a      	strb	r2, [r3, #0]
 80044ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ec:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	69b9      	ldr	r1, [r7, #24]
 80044f2:	221a      	movs	r2, #26
 80044f4:	4618      	mov	r0, r3
 80044f6:	f7ff fb87 	bl	8003c08 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80044fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044fc:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8004500:	bf00      	nop
 8004502:	3758      	adds	r7, #88	; 0x58
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004508:	b580      	push	{r7, lr}
 800450a:	b086      	sub	sp, #24
 800450c:	af02      	add	r7, sp, #8
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	607a      	str	r2, [r7, #4]
 8004514:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004516:	2300      	movs	r3, #0
 8004518:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800451c:	4917      	ldr	r1, [pc, #92]	; (800457c <SEGGER_SYSVIEW_Init+0x74>)
 800451e:	4818      	ldr	r0, [pc, #96]	; (8004580 <SEGGER_SYSVIEW_Init+0x78>)
 8004520:	f7ff f942 	bl	80037a8 <SEGGER_RTT_AllocUpBuffer>
 8004524:	4603      	mov	r3, r0
 8004526:	b2da      	uxtb	r2, r3
 8004528:	4b16      	ldr	r3, [pc, #88]	; (8004584 <SEGGER_SYSVIEW_Init+0x7c>)
 800452a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800452c:	4b15      	ldr	r3, [pc, #84]	; (8004584 <SEGGER_SYSVIEW_Init+0x7c>)
 800452e:	785a      	ldrb	r2, [r3, #1]
 8004530:	4b14      	ldr	r3, [pc, #80]	; (8004584 <SEGGER_SYSVIEW_Init+0x7c>)
 8004532:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004534:	4b13      	ldr	r3, [pc, #76]	; (8004584 <SEGGER_SYSVIEW_Init+0x7c>)
 8004536:	7e1b      	ldrb	r3, [r3, #24]
 8004538:	4618      	mov	r0, r3
 800453a:	2300      	movs	r3, #0
 800453c:	9300      	str	r3, [sp, #0]
 800453e:	2308      	movs	r3, #8
 8004540:	4a11      	ldr	r2, [pc, #68]	; (8004588 <SEGGER_SYSVIEW_Init+0x80>)
 8004542:	490f      	ldr	r1, [pc, #60]	; (8004580 <SEGGER_SYSVIEW_Init+0x78>)
 8004544:	f7ff f9b4 	bl	80038b0 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004548:	4b0e      	ldr	r3, [pc, #56]	; (8004584 <SEGGER_SYSVIEW_Init+0x7c>)
 800454a:	2200      	movs	r2, #0
 800454c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800454e:	4b0f      	ldr	r3, [pc, #60]	; (800458c <SEGGER_SYSVIEW_Init+0x84>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a0c      	ldr	r2, [pc, #48]	; (8004584 <SEGGER_SYSVIEW_Init+0x7c>)
 8004554:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004556:	4a0b      	ldr	r2, [pc, #44]	; (8004584 <SEGGER_SYSVIEW_Init+0x7c>)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800455c:	4a09      	ldr	r2, [pc, #36]	; (8004584 <SEGGER_SYSVIEW_Init+0x7c>)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004562:	4a08      	ldr	r2, [pc, #32]	; (8004584 <SEGGER_SYSVIEW_Init+0x7c>)
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004568:	4a06      	ldr	r2, [pc, #24]	; (8004584 <SEGGER_SYSVIEW_Init+0x7c>)
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800456e:	4b05      	ldr	r3, [pc, #20]	; (8004584 <SEGGER_SYSVIEW_Init+0x7c>)
 8004570:	2200      	movs	r2, #0
 8004572:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004574:	bf00      	nop
 8004576:	3710      	adds	r7, #16
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}
 800457c:	20013308 	.word	0x20013308
 8004580:	080053dc 	.word	0x080053dc
 8004584:	20014310 	.word	0x20014310
 8004588:	20014308 	.word	0x20014308
 800458c:	e0001004 	.word	0xe0001004

08004590 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004598:	4a04      	ldr	r2, [pc, #16]	; (80045ac <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6113      	str	r3, [r2, #16]
}
 800459e:	bf00      	nop
 80045a0:	370c      	adds	r7, #12
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	20014310 	.word	0x20014310

080045b0 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80045b8:	f3ef 8311 	mrs	r3, BASEPRI
 80045bc:	f04f 0120 	mov.w	r1, #32
 80045c0:	f381 8811 	msr	BASEPRI, r1
 80045c4:	60fb      	str	r3, [r7, #12]
 80045c6:	4808      	ldr	r0, [pc, #32]	; (80045e8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80045c8:	f7ff fa2f 	bl	8003a2a <_PreparePacket>
 80045cc:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	68b9      	ldr	r1, [r7, #8]
 80045d2:	68b8      	ldr	r0, [r7, #8]
 80045d4:	f7ff fb18 	bl	8003c08 <_SendPacket>
  RECORD_END();
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f383 8811 	msr	BASEPRI, r3
}
 80045de:	bf00      	nop
 80045e0:	3710      	adds	r7, #16
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	20014340 	.word	0x20014340

080045ec <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b088      	sub	sp, #32
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80045f6:	f3ef 8311 	mrs	r3, BASEPRI
 80045fa:	f04f 0120 	mov.w	r1, #32
 80045fe:	f381 8811 	msr	BASEPRI, r1
 8004602:	617b      	str	r3, [r7, #20]
 8004604:	4816      	ldr	r0, [pc, #88]	; (8004660 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004606:	f7ff fa10 	bl	8003a2a <_PreparePacket>
 800460a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	61fb      	str	r3, [r7, #28]
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	61bb      	str	r3, [r7, #24]
 8004618:	e00b      	b.n	8004632 <SEGGER_SYSVIEW_RecordU32+0x46>
 800461a:	69bb      	ldr	r3, [r7, #24]
 800461c:	b2da      	uxtb	r2, r3
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	1c59      	adds	r1, r3, #1
 8004622:	61f9      	str	r1, [r7, #28]
 8004624:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004628:	b2d2      	uxtb	r2, r2
 800462a:	701a      	strb	r2, [r3, #0]
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	09db      	lsrs	r3, r3, #7
 8004630:	61bb      	str	r3, [r7, #24]
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	2b7f      	cmp	r3, #127	; 0x7f
 8004636:	d8f0      	bhi.n	800461a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	1c5a      	adds	r2, r3, #1
 800463c:	61fa      	str	r2, [r7, #28]
 800463e:	69ba      	ldr	r2, [r7, #24]
 8004640:	b2d2      	uxtb	r2, r2
 8004642:	701a      	strb	r2, [r3, #0]
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	68f9      	ldr	r1, [r7, #12]
 800464c:	6938      	ldr	r0, [r7, #16]
 800464e:	f7ff fadb 	bl	8003c08 <_SendPacket>
  RECORD_END();
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	f383 8811 	msr	BASEPRI, r3
}
 8004658:	bf00      	nop
 800465a:	3720      	adds	r7, #32
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	20014340 	.word	0x20014340

08004664 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004664:	b580      	push	{r7, lr}
 8004666:	b08c      	sub	sp, #48	; 0x30
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004670:	f3ef 8311 	mrs	r3, BASEPRI
 8004674:	f04f 0120 	mov.w	r1, #32
 8004678:	f381 8811 	msr	BASEPRI, r1
 800467c:	61fb      	str	r3, [r7, #28]
 800467e:	4825      	ldr	r0, [pc, #148]	; (8004714 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004680:	f7ff f9d3 	bl	8003a2a <_PreparePacket>
 8004684:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	62bb      	str	r3, [r7, #40]	; 0x28
 8004692:	e00b      	b.n	80046ac <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004696:	b2da      	uxtb	r2, r3
 8004698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800469a:	1c59      	adds	r1, r3, #1
 800469c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800469e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046a2:	b2d2      	uxtb	r2, r2
 80046a4:	701a      	strb	r2, [r3, #0]
 80046a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a8:	09db      	lsrs	r3, r3, #7
 80046aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80046ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ae:	2b7f      	cmp	r3, #127	; 0x7f
 80046b0:	d8f0      	bhi.n	8004694 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80046b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b4:	1c5a      	adds	r2, r3, #1
 80046b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046ba:	b2d2      	uxtb	r2, r2
 80046bc:	701a      	strb	r2, [r3, #0]
 80046be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	627b      	str	r3, [r7, #36]	; 0x24
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	623b      	str	r3, [r7, #32]
 80046ca:	e00b      	b.n	80046e4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80046cc:	6a3b      	ldr	r3, [r7, #32]
 80046ce:	b2da      	uxtb	r2, r3
 80046d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d2:	1c59      	adds	r1, r3, #1
 80046d4:	6279      	str	r1, [r7, #36]	; 0x24
 80046d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046da:	b2d2      	uxtb	r2, r2
 80046dc:	701a      	strb	r2, [r3, #0]
 80046de:	6a3b      	ldr	r3, [r7, #32]
 80046e0:	09db      	lsrs	r3, r3, #7
 80046e2:	623b      	str	r3, [r7, #32]
 80046e4:	6a3b      	ldr	r3, [r7, #32]
 80046e6:	2b7f      	cmp	r3, #127	; 0x7f
 80046e8:	d8f0      	bhi.n	80046cc <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80046ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ec:	1c5a      	adds	r2, r3, #1
 80046ee:	627a      	str	r2, [r7, #36]	; 0x24
 80046f0:	6a3a      	ldr	r2, [r7, #32]
 80046f2:	b2d2      	uxtb	r2, r2
 80046f4:	701a      	strb	r2, [r3, #0]
 80046f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	6979      	ldr	r1, [r7, #20]
 80046fe:	69b8      	ldr	r0, [r7, #24]
 8004700:	f7ff fa82 	bl	8003c08 <_SendPacket>
  RECORD_END();
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	f383 8811 	msr	BASEPRI, r3
}
 800470a:	bf00      	nop
 800470c:	3730      	adds	r7, #48	; 0x30
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	20014340 	.word	0x20014340

08004718 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004718:	b580      	push	{r7, lr}
 800471a:	b08c      	sub	sp, #48	; 0x30
 800471c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800471e:	4b58      	ldr	r3, [pc, #352]	; (8004880 <SEGGER_SYSVIEW_Start+0x168>)
 8004720:	2201      	movs	r2, #1
 8004722:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004724:	f3ef 8311 	mrs	r3, BASEPRI
 8004728:	f04f 0120 	mov.w	r1, #32
 800472c:	f381 8811 	msr	BASEPRI, r1
 8004730:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004732:	4b53      	ldr	r3, [pc, #332]	; (8004880 <SEGGER_SYSVIEW_Start+0x168>)
 8004734:	785b      	ldrb	r3, [r3, #1]
 8004736:	220a      	movs	r2, #10
 8004738:	4952      	ldr	r1, [pc, #328]	; (8004884 <SEGGER_SYSVIEW_Start+0x16c>)
 800473a:	4618      	mov	r0, r3
 800473c:	f7fb fd70 	bl	8000220 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004746:	200a      	movs	r0, #10
 8004748:	f7ff ff32 	bl	80045b0 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800474c:	f3ef 8311 	mrs	r3, BASEPRI
 8004750:	f04f 0120 	mov.w	r1, #32
 8004754:	f381 8811 	msr	BASEPRI, r1
 8004758:	60bb      	str	r3, [r7, #8]
 800475a:	484b      	ldr	r0, [pc, #300]	; (8004888 <SEGGER_SYSVIEW_Start+0x170>)
 800475c:	f7ff f965 	bl	8003a2a <_PreparePacket>
 8004760:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	62fb      	str	r3, [r7, #44]	; 0x2c
 800476a:	4b45      	ldr	r3, [pc, #276]	; (8004880 <SEGGER_SYSVIEW_Start+0x168>)
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004770:	e00b      	b.n	800478a <SEGGER_SYSVIEW_Start+0x72>
 8004772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004774:	b2da      	uxtb	r2, r3
 8004776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004778:	1c59      	adds	r1, r3, #1
 800477a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800477c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004780:	b2d2      	uxtb	r2, r2
 8004782:	701a      	strb	r2, [r3, #0]
 8004784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004786:	09db      	lsrs	r3, r3, #7
 8004788:	62bb      	str	r3, [r7, #40]	; 0x28
 800478a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800478c:	2b7f      	cmp	r3, #127	; 0x7f
 800478e:	d8f0      	bhi.n	8004772 <SEGGER_SYSVIEW_Start+0x5a>
 8004790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004792:	1c5a      	adds	r2, r3, #1
 8004794:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004796:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004798:	b2d2      	uxtb	r2, r2
 800479a:	701a      	strb	r2, [r3, #0]
 800479c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800479e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	627b      	str	r3, [r7, #36]	; 0x24
 80047a4:	4b36      	ldr	r3, [pc, #216]	; (8004880 <SEGGER_SYSVIEW_Start+0x168>)
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	623b      	str	r3, [r7, #32]
 80047aa:	e00b      	b.n	80047c4 <SEGGER_SYSVIEW_Start+0xac>
 80047ac:	6a3b      	ldr	r3, [r7, #32]
 80047ae:	b2da      	uxtb	r2, r3
 80047b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b2:	1c59      	adds	r1, r3, #1
 80047b4:	6279      	str	r1, [r7, #36]	; 0x24
 80047b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80047ba:	b2d2      	uxtb	r2, r2
 80047bc:	701a      	strb	r2, [r3, #0]
 80047be:	6a3b      	ldr	r3, [r7, #32]
 80047c0:	09db      	lsrs	r3, r3, #7
 80047c2:	623b      	str	r3, [r7, #32]
 80047c4:	6a3b      	ldr	r3, [r7, #32]
 80047c6:	2b7f      	cmp	r3, #127	; 0x7f
 80047c8:	d8f0      	bhi.n	80047ac <SEGGER_SYSVIEW_Start+0x94>
 80047ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047cc:	1c5a      	adds	r2, r3, #1
 80047ce:	627a      	str	r2, [r7, #36]	; 0x24
 80047d0:	6a3a      	ldr	r2, [r7, #32]
 80047d2:	b2d2      	uxtb	r2, r2
 80047d4:	701a      	strb	r2, [r3, #0]
 80047d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	61fb      	str	r3, [r7, #28]
 80047de:	4b28      	ldr	r3, [pc, #160]	; (8004880 <SEGGER_SYSVIEW_Start+0x168>)
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	61bb      	str	r3, [r7, #24]
 80047e4:	e00b      	b.n	80047fe <SEGGER_SYSVIEW_Start+0xe6>
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	b2da      	uxtb	r2, r3
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	1c59      	adds	r1, r3, #1
 80047ee:	61f9      	str	r1, [r7, #28]
 80047f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80047f4:	b2d2      	uxtb	r2, r2
 80047f6:	701a      	strb	r2, [r3, #0]
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	09db      	lsrs	r3, r3, #7
 80047fc:	61bb      	str	r3, [r7, #24]
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	2b7f      	cmp	r3, #127	; 0x7f
 8004802:	d8f0      	bhi.n	80047e6 <SEGGER_SYSVIEW_Start+0xce>
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	1c5a      	adds	r2, r3, #1
 8004808:	61fa      	str	r2, [r7, #28]
 800480a:	69ba      	ldr	r2, [r7, #24]
 800480c:	b2d2      	uxtb	r2, r2
 800480e:	701a      	strb	r2, [r3, #0]
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	617b      	str	r3, [r7, #20]
 8004818:	2300      	movs	r3, #0
 800481a:	613b      	str	r3, [r7, #16]
 800481c:	e00b      	b.n	8004836 <SEGGER_SYSVIEW_Start+0x11e>
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	b2da      	uxtb	r2, r3
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	1c59      	adds	r1, r3, #1
 8004826:	6179      	str	r1, [r7, #20]
 8004828:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800482c:	b2d2      	uxtb	r2, r2
 800482e:	701a      	strb	r2, [r3, #0]
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	09db      	lsrs	r3, r3, #7
 8004834:	613b      	str	r3, [r7, #16]
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	2b7f      	cmp	r3, #127	; 0x7f
 800483a:	d8f0      	bhi.n	800481e <SEGGER_SYSVIEW_Start+0x106>
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	1c5a      	adds	r2, r3, #1
 8004840:	617a      	str	r2, [r7, #20]
 8004842:	693a      	ldr	r2, [r7, #16]
 8004844:	b2d2      	uxtb	r2, r2
 8004846:	701a      	strb	r2, [r3, #0]
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800484c:	2218      	movs	r2, #24
 800484e:	6839      	ldr	r1, [r7, #0]
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f7ff f9d9 	bl	8003c08 <_SendPacket>
      RECORD_END();
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800485c:	4b08      	ldr	r3, [pc, #32]	; (8004880 <SEGGER_SYSVIEW_Start+0x168>)
 800485e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004860:	2b00      	cmp	r3, #0
 8004862:	d002      	beq.n	800486a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004864:	4b06      	ldr	r3, [pc, #24]	; (8004880 <SEGGER_SYSVIEW_Start+0x168>)
 8004866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004868:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800486a:	f000 f9eb 	bl	8004c44 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800486e:	f000 f9b1 	bl	8004bd4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004872:	f000 fc13 	bl	800509c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8004876:	bf00      	nop
 8004878:	3730      	adds	r7, #48	; 0x30
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	20014310 	.word	0x20014310
 8004884:	08005404 	.word	0x08005404
 8004888:	20014340 	.word	0x20014340

0800488c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004892:	f3ef 8311 	mrs	r3, BASEPRI
 8004896:	f04f 0120 	mov.w	r1, #32
 800489a:	f381 8811 	msr	BASEPRI, r1
 800489e:	607b      	str	r3, [r7, #4]
 80048a0:	480b      	ldr	r0, [pc, #44]	; (80048d0 <SEGGER_SYSVIEW_Stop+0x44>)
 80048a2:	f7ff f8c2 	bl	8003a2a <_PreparePacket>
 80048a6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80048a8:	4b0a      	ldr	r3, [pc, #40]	; (80048d4 <SEGGER_SYSVIEW_Stop+0x48>)
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d007      	beq.n	80048c0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80048b0:	220b      	movs	r2, #11
 80048b2:	6839      	ldr	r1, [r7, #0]
 80048b4:	6838      	ldr	r0, [r7, #0]
 80048b6:	f7ff f9a7 	bl	8003c08 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80048ba:	4b06      	ldr	r3, [pc, #24]	; (80048d4 <SEGGER_SYSVIEW_Stop+0x48>)
 80048bc:	2200      	movs	r2, #0
 80048be:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f383 8811 	msr	BASEPRI, r3
}
 80048c6:	bf00      	nop
 80048c8:	3708      	adds	r7, #8
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	20014340 	.word	0x20014340
 80048d4:	20014310 	.word	0x20014310

080048d8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80048d8:	b580      	push	{r7, lr}
 80048da:	b08c      	sub	sp, #48	; 0x30
 80048dc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80048de:	f3ef 8311 	mrs	r3, BASEPRI
 80048e2:	f04f 0120 	mov.w	r1, #32
 80048e6:	f381 8811 	msr	BASEPRI, r1
 80048ea:	60fb      	str	r3, [r7, #12]
 80048ec:	4845      	ldr	r0, [pc, #276]	; (8004a04 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80048ee:	f7ff f89c 	bl	8003a2a <_PreparePacket>
 80048f2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048fc:	4b42      	ldr	r3, [pc, #264]	; (8004a08 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	62bb      	str	r3, [r7, #40]	; 0x28
 8004902:	e00b      	b.n	800491c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004906:	b2da      	uxtb	r2, r3
 8004908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800490a:	1c59      	adds	r1, r3, #1
 800490c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800490e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004912:	b2d2      	uxtb	r2, r2
 8004914:	701a      	strb	r2, [r3, #0]
 8004916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004918:	09db      	lsrs	r3, r3, #7
 800491a:	62bb      	str	r3, [r7, #40]	; 0x28
 800491c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800491e:	2b7f      	cmp	r3, #127	; 0x7f
 8004920:	d8f0      	bhi.n	8004904 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004924:	1c5a      	adds	r2, r3, #1
 8004926:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004928:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800492a:	b2d2      	uxtb	r2, r2
 800492c:	701a      	strb	r2, [r3, #0]
 800492e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004930:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	627b      	str	r3, [r7, #36]	; 0x24
 8004936:	4b34      	ldr	r3, [pc, #208]	; (8004a08 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	623b      	str	r3, [r7, #32]
 800493c:	e00b      	b.n	8004956 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800493e:	6a3b      	ldr	r3, [r7, #32]
 8004940:	b2da      	uxtb	r2, r3
 8004942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004944:	1c59      	adds	r1, r3, #1
 8004946:	6279      	str	r1, [r7, #36]	; 0x24
 8004948:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800494c:	b2d2      	uxtb	r2, r2
 800494e:	701a      	strb	r2, [r3, #0]
 8004950:	6a3b      	ldr	r3, [r7, #32]
 8004952:	09db      	lsrs	r3, r3, #7
 8004954:	623b      	str	r3, [r7, #32]
 8004956:	6a3b      	ldr	r3, [r7, #32]
 8004958:	2b7f      	cmp	r3, #127	; 0x7f
 800495a:	d8f0      	bhi.n	800493e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800495c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495e:	1c5a      	adds	r2, r3, #1
 8004960:	627a      	str	r2, [r7, #36]	; 0x24
 8004962:	6a3a      	ldr	r2, [r7, #32]
 8004964:	b2d2      	uxtb	r2, r2
 8004966:	701a      	strb	r2, [r3, #0]
 8004968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	61fb      	str	r3, [r7, #28]
 8004970:	4b25      	ldr	r3, [pc, #148]	; (8004a08 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004972:	691b      	ldr	r3, [r3, #16]
 8004974:	61bb      	str	r3, [r7, #24]
 8004976:	e00b      	b.n	8004990 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	b2da      	uxtb	r2, r3
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	1c59      	adds	r1, r3, #1
 8004980:	61f9      	str	r1, [r7, #28]
 8004982:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004986:	b2d2      	uxtb	r2, r2
 8004988:	701a      	strb	r2, [r3, #0]
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	09db      	lsrs	r3, r3, #7
 800498e:	61bb      	str	r3, [r7, #24]
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	2b7f      	cmp	r3, #127	; 0x7f
 8004994:	d8f0      	bhi.n	8004978 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	1c5a      	adds	r2, r3, #1
 800499a:	61fa      	str	r2, [r7, #28]
 800499c:	69ba      	ldr	r2, [r7, #24]
 800499e:	b2d2      	uxtb	r2, r2
 80049a0:	701a      	strb	r2, [r3, #0]
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	617b      	str	r3, [r7, #20]
 80049aa:	2300      	movs	r3, #0
 80049ac:	613b      	str	r3, [r7, #16]
 80049ae:	e00b      	b.n	80049c8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	b2da      	uxtb	r2, r3
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	1c59      	adds	r1, r3, #1
 80049b8:	6179      	str	r1, [r7, #20]
 80049ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049be:	b2d2      	uxtb	r2, r2
 80049c0:	701a      	strb	r2, [r3, #0]
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	09db      	lsrs	r3, r3, #7
 80049c6:	613b      	str	r3, [r7, #16]
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	2b7f      	cmp	r3, #127	; 0x7f
 80049cc:	d8f0      	bhi.n	80049b0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	1c5a      	adds	r2, r3, #1
 80049d2:	617a      	str	r2, [r7, #20]
 80049d4:	693a      	ldr	r2, [r7, #16]
 80049d6:	b2d2      	uxtb	r2, r2
 80049d8:	701a      	strb	r2, [r3, #0]
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80049de:	2218      	movs	r2, #24
 80049e0:	6879      	ldr	r1, [r7, #4]
 80049e2:	68b8      	ldr	r0, [r7, #8]
 80049e4:	f7ff f910 	bl	8003c08 <_SendPacket>
  RECORD_END();
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80049ee:	4b06      	ldr	r3, [pc, #24]	; (8004a08 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80049f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d002      	beq.n	80049fc <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80049f6:	4b04      	ldr	r3, [pc, #16]	; (8004a08 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80049f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fa:	4798      	blx	r3
  }
}
 80049fc:	bf00      	nop
 80049fe:	3730      	adds	r7, #48	; 0x30
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	20014340 	.word	0x20014340
 8004a08:	20014310 	.word	0x20014310

08004a0c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b092      	sub	sp, #72	; 0x48
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004a14:	f3ef 8311 	mrs	r3, BASEPRI
 8004a18:	f04f 0120 	mov.w	r1, #32
 8004a1c:	f381 8811 	msr	BASEPRI, r1
 8004a20:	617b      	str	r3, [r7, #20]
 8004a22:	486a      	ldr	r0, [pc, #424]	; (8004bcc <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8004a24:	f7ff f801 	bl	8003a2a <_PreparePacket>
 8004a28:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	647b      	str	r3, [r7, #68]	; 0x44
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	4b66      	ldr	r3, [pc, #408]	; (8004bd0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	643b      	str	r3, [r7, #64]	; 0x40
 8004a3e:	e00b      	b.n	8004a58 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8004a40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a42:	b2da      	uxtb	r2, r3
 8004a44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a46:	1c59      	adds	r1, r3, #1
 8004a48:	6479      	str	r1, [r7, #68]	; 0x44
 8004a4a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a4e:	b2d2      	uxtb	r2, r2
 8004a50:	701a      	strb	r2, [r3, #0]
 8004a52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a54:	09db      	lsrs	r3, r3, #7
 8004a56:	643b      	str	r3, [r7, #64]	; 0x40
 8004a58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a5a:	2b7f      	cmp	r3, #127	; 0x7f
 8004a5c:	d8f0      	bhi.n	8004a40 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8004a5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a60:	1c5a      	adds	r2, r3, #1
 8004a62:	647a      	str	r2, [r7, #68]	; 0x44
 8004a64:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a66:	b2d2      	uxtb	r2, r2
 8004a68:	701a      	strb	r2, [r3, #0]
 8004a6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a6c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a78:	e00b      	b.n	8004a92 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8004a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a7c:	b2da      	uxtb	r2, r3
 8004a7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a80:	1c59      	adds	r1, r3, #1
 8004a82:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004a84:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a88:	b2d2      	uxtb	r2, r2
 8004a8a:	701a      	strb	r2, [r3, #0]
 8004a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a8e:	09db      	lsrs	r3, r3, #7
 8004a90:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a94:	2b7f      	cmp	r3, #127	; 0x7f
 8004a96:	d8f0      	bhi.n	8004a7a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8004a98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a9a:	1c5a      	adds	r2, r3, #1
 8004a9c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004a9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004aa0:	b2d2      	uxtb	r2, r2
 8004aa2:	701a      	strb	r2, [r3, #0]
 8004aa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aa6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	2220      	movs	r2, #32
 8004aae:	4619      	mov	r1, r3
 8004ab0:	68f8      	ldr	r0, [r7, #12]
 8004ab2:	f7fe ff6d 	bl	8003990 <_EncodeStr>
 8004ab6:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8004ab8:	2209      	movs	r2, #9
 8004aba:	68f9      	ldr	r1, [r7, #12]
 8004abc:	6938      	ldr	r0, [r7, #16]
 8004abe:	f7ff f8a3 	bl	8003c08 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	637b      	str	r3, [r7, #52]	; 0x34
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	4b40      	ldr	r3, [pc, #256]	; (8004bd0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	633b      	str	r3, [r7, #48]	; 0x30
 8004ad6:	e00b      	b.n	8004af0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8004ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ada:	b2da      	uxtb	r2, r3
 8004adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ade:	1c59      	adds	r1, r3, #1
 8004ae0:	6379      	str	r1, [r7, #52]	; 0x34
 8004ae2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ae6:	b2d2      	uxtb	r2, r2
 8004ae8:	701a      	strb	r2, [r3, #0]
 8004aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aec:	09db      	lsrs	r3, r3, #7
 8004aee:	633b      	str	r3, [r7, #48]	; 0x30
 8004af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af2:	2b7f      	cmp	r3, #127	; 0x7f
 8004af4:	d8f0      	bhi.n	8004ad8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8004af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004af8:	1c5a      	adds	r2, r3, #1
 8004afa:	637a      	str	r2, [r7, #52]	; 0x34
 8004afc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004afe:	b2d2      	uxtb	r2, r2
 8004b00:	701a      	strb	r2, [r3, #0]
 8004b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b04:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b10:	e00b      	b.n	8004b2a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8004b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b14:	b2da      	uxtb	r2, r3
 8004b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b18:	1c59      	adds	r1, r3, #1
 8004b1a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004b1c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b20:	b2d2      	uxtb	r2, r2
 8004b22:	701a      	strb	r2, [r3, #0]
 8004b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b26:	09db      	lsrs	r3, r3, #7
 8004b28:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b2c:	2b7f      	cmp	r3, #127	; 0x7f
 8004b2e:	d8f0      	bhi.n	8004b12 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8004b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b32:	1c5a      	adds	r2, r3, #1
 8004b34:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b38:	b2d2      	uxtb	r2, r2
 8004b3a:	701a      	strb	r2, [r3, #0]
 8004b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b3e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	627b      	str	r3, [r7, #36]	; 0x24
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	623b      	str	r3, [r7, #32]
 8004b4a:	e00b      	b.n	8004b64 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8004b4c:	6a3b      	ldr	r3, [r7, #32]
 8004b4e:	b2da      	uxtb	r2, r3
 8004b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b52:	1c59      	adds	r1, r3, #1
 8004b54:	6279      	str	r1, [r7, #36]	; 0x24
 8004b56:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b5a:	b2d2      	uxtb	r2, r2
 8004b5c:	701a      	strb	r2, [r3, #0]
 8004b5e:	6a3b      	ldr	r3, [r7, #32]
 8004b60:	09db      	lsrs	r3, r3, #7
 8004b62:	623b      	str	r3, [r7, #32]
 8004b64:	6a3b      	ldr	r3, [r7, #32]
 8004b66:	2b7f      	cmp	r3, #127	; 0x7f
 8004b68:	d8f0      	bhi.n	8004b4c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8004b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6c:	1c5a      	adds	r2, r3, #1
 8004b6e:	627a      	str	r2, [r7, #36]	; 0x24
 8004b70:	6a3a      	ldr	r2, [r7, #32]
 8004b72:	b2d2      	uxtb	r2, r2
 8004b74:	701a      	strb	r2, [r3, #0]
 8004b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b78:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	61fb      	str	r3, [r7, #28]
 8004b7e:	2300      	movs	r3, #0
 8004b80:	61bb      	str	r3, [r7, #24]
 8004b82:	e00b      	b.n	8004b9c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	b2da      	uxtb	r2, r3
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	1c59      	adds	r1, r3, #1
 8004b8c:	61f9      	str	r1, [r7, #28]
 8004b8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b92:	b2d2      	uxtb	r2, r2
 8004b94:	701a      	strb	r2, [r3, #0]
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	09db      	lsrs	r3, r3, #7
 8004b9a:	61bb      	str	r3, [r7, #24]
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	2b7f      	cmp	r3, #127	; 0x7f
 8004ba0:	d8f0      	bhi.n	8004b84 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	1c5a      	adds	r2, r3, #1
 8004ba6:	61fa      	str	r2, [r7, #28]
 8004ba8:	69ba      	ldr	r2, [r7, #24]
 8004baa:	b2d2      	uxtb	r2, r2
 8004bac:	701a      	strb	r2, [r3, #0]
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004bb2:	2215      	movs	r2, #21
 8004bb4:	68f9      	ldr	r1, [r7, #12]
 8004bb6:	6938      	ldr	r0, [r7, #16]
 8004bb8:	f7ff f826 	bl	8003c08 <_SendPacket>
  RECORD_END();
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	f383 8811 	msr	BASEPRI, r3
}
 8004bc2:	bf00      	nop
 8004bc4:	3748      	adds	r7, #72	; 0x48
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	20014340 	.word	0x20014340
 8004bd0:	20014310 	.word	0x20014310

08004bd4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004bd8:	4b07      	ldr	r3, [pc, #28]	; (8004bf8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004bda:	6a1b      	ldr	r3, [r3, #32]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d008      	beq.n	8004bf2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004be0:	4b05      	ldr	r3, [pc, #20]	; (8004bf8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004be2:	6a1b      	ldr	r3, [r3, #32]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d003      	beq.n	8004bf2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8004bea:	4b03      	ldr	r3, [pc, #12]	; (8004bf8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004bec:	6a1b      	ldr	r3, [r3, #32]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	4798      	blx	r3
  }
}
 8004bf2:	bf00      	nop
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	20014310 	.word	0x20014310

08004bfc <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b086      	sub	sp, #24
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004c04:	f3ef 8311 	mrs	r3, BASEPRI
 8004c08:	f04f 0120 	mov.w	r1, #32
 8004c0c:	f381 8811 	msr	BASEPRI, r1
 8004c10:	617b      	str	r3, [r7, #20]
 8004c12:	480b      	ldr	r0, [pc, #44]	; (8004c40 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8004c14:	f7fe ff09 	bl	8003a2a <_PreparePacket>
 8004c18:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004c1a:	2280      	movs	r2, #128	; 0x80
 8004c1c:	6879      	ldr	r1, [r7, #4]
 8004c1e:	6938      	ldr	r0, [r7, #16]
 8004c20:	f7fe feb6 	bl	8003990 <_EncodeStr>
 8004c24:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8004c26:	220e      	movs	r2, #14
 8004c28:	68f9      	ldr	r1, [r7, #12]
 8004c2a:	6938      	ldr	r0, [r7, #16]
 8004c2c:	f7fe ffec 	bl	8003c08 <_SendPacket>
  RECORD_END();
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	f383 8811 	msr	BASEPRI, r3
}
 8004c36:	bf00      	nop
 8004c38:	3718      	adds	r7, #24
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	20014340 	.word	0x20014340

08004c44 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004c44:	b590      	push	{r4, r7, lr}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004c4a:	4b15      	ldr	r3, [pc, #84]	; (8004ca0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004c4c:	6a1b      	ldr	r3, [r3, #32]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d01a      	beq.n	8004c88 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8004c52:	4b13      	ldr	r3, [pc, #76]	; (8004ca0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004c54:	6a1b      	ldr	r3, [r3, #32]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d015      	beq.n	8004c88 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004c5c:	4b10      	ldr	r3, [pc, #64]	; (8004ca0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004c5e:	6a1b      	ldr	r3, [r3, #32]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4798      	blx	r3
 8004c64:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004c68:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004c6a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c6e:	f04f 0200 	mov.w	r2, #0
 8004c72:	f04f 0300 	mov.w	r3, #0
 8004c76:	000a      	movs	r2, r1
 8004c78:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004c7a:	4613      	mov	r3, r2
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	4621      	mov	r1, r4
 8004c80:	200d      	movs	r0, #13
 8004c82:	f7ff fcef 	bl	8004664 <SEGGER_SYSVIEW_RecordU32x2>
 8004c86:	e006      	b.n	8004c96 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004c88:	4b06      	ldr	r3, [pc, #24]	; (8004ca4 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	200c      	movs	r0, #12
 8004c90:	f7ff fcac 	bl	80045ec <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004c94:	bf00      	nop
 8004c96:	bf00      	nop
 8004c98:	370c      	adds	r7, #12
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd90      	pop	{r4, r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	20014310 	.word	0x20014310
 8004ca4:	e0001004 	.word	0xe0001004

08004ca8 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b086      	sub	sp, #24
 8004cac:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004cae:	f3ef 8311 	mrs	r3, BASEPRI
 8004cb2:	f04f 0120 	mov.w	r1, #32
 8004cb6:	f381 8811 	msr	BASEPRI, r1
 8004cba:	60fb      	str	r3, [r7, #12]
 8004cbc:	4819      	ldr	r0, [pc, #100]	; (8004d24 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8004cbe:	f7fe feb4 	bl	8003a2a <_PreparePacket>
 8004cc2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004cc8:	4b17      	ldr	r3, [pc, #92]	; (8004d28 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cd0:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	617b      	str	r3, [r7, #20]
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	613b      	str	r3, [r7, #16]
 8004cda:	e00b      	b.n	8004cf4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	b2da      	uxtb	r2, r3
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	1c59      	adds	r1, r3, #1
 8004ce4:	6179      	str	r1, [r7, #20]
 8004ce6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004cea:	b2d2      	uxtb	r2, r2
 8004cec:	701a      	strb	r2, [r3, #0]
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	09db      	lsrs	r3, r3, #7
 8004cf2:	613b      	str	r3, [r7, #16]
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	2b7f      	cmp	r3, #127	; 0x7f
 8004cf8:	d8f0      	bhi.n	8004cdc <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	1c5a      	adds	r2, r3, #1
 8004cfe:	617a      	str	r2, [r7, #20]
 8004d00:	693a      	ldr	r2, [r7, #16]
 8004d02:	b2d2      	uxtb	r2, r2
 8004d04:	701a      	strb	r2, [r3, #0]
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8004d0a:	2202      	movs	r2, #2
 8004d0c:	6879      	ldr	r1, [r7, #4]
 8004d0e:	68b8      	ldr	r0, [r7, #8]
 8004d10:	f7fe ff7a 	bl	8003c08 <_SendPacket>
  RECORD_END();
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f383 8811 	msr	BASEPRI, r3
}
 8004d1a:	bf00      	nop
 8004d1c:	3718      	adds	r7, #24
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	20014340 	.word	0x20014340
 8004d28:	e000ed04 	.word	0xe000ed04

08004d2c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004d32:	f3ef 8311 	mrs	r3, BASEPRI
 8004d36:	f04f 0120 	mov.w	r1, #32
 8004d3a:	f381 8811 	msr	BASEPRI, r1
 8004d3e:	607b      	str	r3, [r7, #4]
 8004d40:	4807      	ldr	r0, [pc, #28]	; (8004d60 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8004d42:	f7fe fe72 	bl	8003a2a <_PreparePacket>
 8004d46:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004d48:	2203      	movs	r2, #3
 8004d4a:	6839      	ldr	r1, [r7, #0]
 8004d4c:	6838      	ldr	r0, [r7, #0]
 8004d4e:	f7fe ff5b 	bl	8003c08 <_SendPacket>
  RECORD_END();
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f383 8811 	msr	BASEPRI, r3
}
 8004d58:	bf00      	nop
 8004d5a:	3708      	adds	r7, #8
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	20014340 	.word	0x20014340

08004d64 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004d6a:	f3ef 8311 	mrs	r3, BASEPRI
 8004d6e:	f04f 0120 	mov.w	r1, #32
 8004d72:	f381 8811 	msr	BASEPRI, r1
 8004d76:	607b      	str	r3, [r7, #4]
 8004d78:	4807      	ldr	r0, [pc, #28]	; (8004d98 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8004d7a:	f7fe fe56 	bl	8003a2a <_PreparePacket>
 8004d7e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004d80:	2212      	movs	r2, #18
 8004d82:	6839      	ldr	r1, [r7, #0]
 8004d84:	6838      	ldr	r0, [r7, #0]
 8004d86:	f7fe ff3f 	bl	8003c08 <_SendPacket>
  RECORD_END();
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f383 8811 	msr	BASEPRI, r3
}
 8004d90:	bf00      	nop
 8004d92:	3708      	adds	r7, #8
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	20014340 	.word	0x20014340

08004d9c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004da2:	f3ef 8311 	mrs	r3, BASEPRI
 8004da6:	f04f 0120 	mov.w	r1, #32
 8004daa:	f381 8811 	msr	BASEPRI, r1
 8004dae:	607b      	str	r3, [r7, #4]
 8004db0:	4807      	ldr	r0, [pc, #28]	; (8004dd0 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8004db2:	f7fe fe3a 	bl	8003a2a <_PreparePacket>
 8004db6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004db8:	2211      	movs	r2, #17
 8004dba:	6839      	ldr	r1, [r7, #0]
 8004dbc:	6838      	ldr	r0, [r7, #0]
 8004dbe:	f7fe ff23 	bl	8003c08 <_SendPacket>
  RECORD_END();
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f383 8811 	msr	BASEPRI, r3
}
 8004dc8:	bf00      	nop
 8004dca:	3708      	adds	r7, #8
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	20014340 	.word	0x20014340

08004dd4 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b088      	sub	sp, #32
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004ddc:	f3ef 8311 	mrs	r3, BASEPRI
 8004de0:	f04f 0120 	mov.w	r1, #32
 8004de4:	f381 8811 	msr	BASEPRI, r1
 8004de8:	617b      	str	r3, [r7, #20]
 8004dea:	4819      	ldr	r0, [pc, #100]	; (8004e50 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8004dec:	f7fe fe1d 	bl	8003a2a <_PreparePacket>
 8004df0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004df6:	4b17      	ldr	r3, [pc, #92]	; (8004e54 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	61fb      	str	r3, [r7, #28]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	61bb      	str	r3, [r7, #24]
 8004e08:	e00b      	b.n	8004e22 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	b2da      	uxtb	r2, r3
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	1c59      	adds	r1, r3, #1
 8004e12:	61f9      	str	r1, [r7, #28]
 8004e14:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e18:	b2d2      	uxtb	r2, r2
 8004e1a:	701a      	strb	r2, [r3, #0]
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	09db      	lsrs	r3, r3, #7
 8004e20:	61bb      	str	r3, [r7, #24]
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	2b7f      	cmp	r3, #127	; 0x7f
 8004e26:	d8f0      	bhi.n	8004e0a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	1c5a      	adds	r2, r3, #1
 8004e2c:	61fa      	str	r2, [r7, #28]
 8004e2e:	69ba      	ldr	r2, [r7, #24]
 8004e30:	b2d2      	uxtb	r2, r2
 8004e32:	701a      	strb	r2, [r3, #0]
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8004e38:	2208      	movs	r2, #8
 8004e3a:	68f9      	ldr	r1, [r7, #12]
 8004e3c:	6938      	ldr	r0, [r7, #16]
 8004e3e:	f7fe fee3 	bl	8003c08 <_SendPacket>
  RECORD_END();
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	f383 8811 	msr	BASEPRI, r3
}
 8004e48:	bf00      	nop
 8004e4a:	3720      	adds	r7, #32
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	20014340 	.word	0x20014340
 8004e54:	20014310 	.word	0x20014310

08004e58 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b088      	sub	sp, #32
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004e60:	f3ef 8311 	mrs	r3, BASEPRI
 8004e64:	f04f 0120 	mov.w	r1, #32
 8004e68:	f381 8811 	msr	BASEPRI, r1
 8004e6c:	617b      	str	r3, [r7, #20]
 8004e6e:	4819      	ldr	r0, [pc, #100]	; (8004ed4 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8004e70:	f7fe fddb 	bl	8003a2a <_PreparePacket>
 8004e74:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004e7a:	4b17      	ldr	r3, [pc, #92]	; (8004ed8 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	61fb      	str	r3, [r7, #28]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	61bb      	str	r3, [r7, #24]
 8004e8c:	e00b      	b.n	8004ea6 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	b2da      	uxtb	r2, r3
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	1c59      	adds	r1, r3, #1
 8004e96:	61f9      	str	r1, [r7, #28]
 8004e98:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e9c:	b2d2      	uxtb	r2, r2
 8004e9e:	701a      	strb	r2, [r3, #0]
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	09db      	lsrs	r3, r3, #7
 8004ea4:	61bb      	str	r3, [r7, #24]
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	2b7f      	cmp	r3, #127	; 0x7f
 8004eaa:	d8f0      	bhi.n	8004e8e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	1c5a      	adds	r2, r3, #1
 8004eb0:	61fa      	str	r2, [r7, #28]
 8004eb2:	69ba      	ldr	r2, [r7, #24]
 8004eb4:	b2d2      	uxtb	r2, r2
 8004eb6:	701a      	strb	r2, [r3, #0]
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004ebc:	2204      	movs	r2, #4
 8004ebe:	68f9      	ldr	r1, [r7, #12]
 8004ec0:	6938      	ldr	r0, [r7, #16]
 8004ec2:	f7fe fea1 	bl	8003c08 <_SendPacket>
  RECORD_END();
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	f383 8811 	msr	BASEPRI, r3
}
 8004ecc:	bf00      	nop
 8004ece:	3720      	adds	r7, #32
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	20014340 	.word	0x20014340
 8004ed8:	20014310 	.word	0x20014310

08004edc <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b088      	sub	sp, #32
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004ee4:	f3ef 8311 	mrs	r3, BASEPRI
 8004ee8:	f04f 0120 	mov.w	r1, #32
 8004eec:	f381 8811 	msr	BASEPRI, r1
 8004ef0:	617b      	str	r3, [r7, #20]
 8004ef2:	4819      	ldr	r0, [pc, #100]	; (8004f58 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8004ef4:	f7fe fd99 	bl	8003a2a <_PreparePacket>
 8004ef8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004efe:	4b17      	ldr	r3, [pc, #92]	; (8004f5c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	61fb      	str	r3, [r7, #28]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	61bb      	str	r3, [r7, #24]
 8004f10:	e00b      	b.n	8004f2a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	b2da      	uxtb	r2, r3
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	1c59      	adds	r1, r3, #1
 8004f1a:	61f9      	str	r1, [r7, #28]
 8004f1c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f20:	b2d2      	uxtb	r2, r2
 8004f22:	701a      	strb	r2, [r3, #0]
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	09db      	lsrs	r3, r3, #7
 8004f28:	61bb      	str	r3, [r7, #24]
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	2b7f      	cmp	r3, #127	; 0x7f
 8004f2e:	d8f0      	bhi.n	8004f12 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	1c5a      	adds	r2, r3, #1
 8004f34:	61fa      	str	r2, [r7, #28]
 8004f36:	69ba      	ldr	r2, [r7, #24]
 8004f38:	b2d2      	uxtb	r2, r2
 8004f3a:	701a      	strb	r2, [r3, #0]
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8004f40:	2206      	movs	r2, #6
 8004f42:	68f9      	ldr	r1, [r7, #12]
 8004f44:	6938      	ldr	r0, [r7, #16]
 8004f46:	f7fe fe5f 	bl	8003c08 <_SendPacket>
  RECORD_END();
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	f383 8811 	msr	BASEPRI, r3
}
 8004f50:	bf00      	nop
 8004f52:	3720      	adds	r7, #32
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	20014340 	.word	0x20014340
 8004f5c:	20014310 	.word	0x20014310

08004f60 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b08c      	sub	sp, #48	; 0x30
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	4603      	mov	r3, r0
 8004f68:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8004f6a:	4b3b      	ldr	r3, [pc, #236]	; (8005058 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d06d      	beq.n	800504e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8004f72:	4b39      	ldr	r3, [pc, #228]	; (8005058 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8004f78:	2300      	movs	r3, #0
 8004f7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f7c:	e008      	b.n	8004f90 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8004f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8004f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d007      	beq.n	8004f9a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8004f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f90:	79fb      	ldrb	r3, [r7, #7]
 8004f92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d3f2      	bcc.n	8004f7e <SEGGER_SYSVIEW_SendModule+0x1e>
 8004f98:	e000      	b.n	8004f9c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8004f9a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8004f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d055      	beq.n	800504e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004fa2:	f3ef 8311 	mrs	r3, BASEPRI
 8004fa6:	f04f 0120 	mov.w	r1, #32
 8004faa:	f381 8811 	msr	BASEPRI, r1
 8004fae:	617b      	str	r3, [r7, #20]
 8004fb0:	482a      	ldr	r0, [pc, #168]	; (800505c <SEGGER_SYSVIEW_SendModule+0xfc>)
 8004fb2:	f7fe fd3a 	bl	8003a2a <_PreparePacket>
 8004fb6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	627b      	str	r3, [r7, #36]	; 0x24
 8004fc0:	79fb      	ldrb	r3, [r7, #7]
 8004fc2:	623b      	str	r3, [r7, #32]
 8004fc4:	e00b      	b.n	8004fde <SEGGER_SYSVIEW_SendModule+0x7e>
 8004fc6:	6a3b      	ldr	r3, [r7, #32]
 8004fc8:	b2da      	uxtb	r2, r3
 8004fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fcc:	1c59      	adds	r1, r3, #1
 8004fce:	6279      	str	r1, [r7, #36]	; 0x24
 8004fd0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fd4:	b2d2      	uxtb	r2, r2
 8004fd6:	701a      	strb	r2, [r3, #0]
 8004fd8:	6a3b      	ldr	r3, [r7, #32]
 8004fda:	09db      	lsrs	r3, r3, #7
 8004fdc:	623b      	str	r3, [r7, #32]
 8004fde:	6a3b      	ldr	r3, [r7, #32]
 8004fe0:	2b7f      	cmp	r3, #127	; 0x7f
 8004fe2:	d8f0      	bhi.n	8004fc6 <SEGGER_SYSVIEW_SendModule+0x66>
 8004fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe6:	1c5a      	adds	r2, r3, #1
 8004fe8:	627a      	str	r2, [r7, #36]	; 0x24
 8004fea:	6a3a      	ldr	r2, [r7, #32]
 8004fec:	b2d2      	uxtb	r2, r2
 8004fee:	701a      	strb	r2, [r3, #0]
 8004ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	61fb      	str	r3, [r7, #28]
 8004ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	61bb      	str	r3, [r7, #24]
 8004ffe:	e00b      	b.n	8005018 <SEGGER_SYSVIEW_SendModule+0xb8>
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	b2da      	uxtb	r2, r3
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	1c59      	adds	r1, r3, #1
 8005008:	61f9      	str	r1, [r7, #28]
 800500a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800500e:	b2d2      	uxtb	r2, r2
 8005010:	701a      	strb	r2, [r3, #0]
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	09db      	lsrs	r3, r3, #7
 8005016:	61bb      	str	r3, [r7, #24]
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	2b7f      	cmp	r3, #127	; 0x7f
 800501c:	d8f0      	bhi.n	8005000 <SEGGER_SYSVIEW_SendModule+0xa0>
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	1c5a      	adds	r2, r3, #1
 8005022:	61fa      	str	r2, [r7, #28]
 8005024:	69ba      	ldr	r2, [r7, #24]
 8005026:	b2d2      	uxtb	r2, r2
 8005028:	701a      	strb	r2, [r3, #0]
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800502e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2280      	movs	r2, #128	; 0x80
 8005034:	4619      	mov	r1, r3
 8005036:	68f8      	ldr	r0, [r7, #12]
 8005038:	f7fe fcaa 	bl	8003990 <_EncodeStr>
 800503c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800503e:	2216      	movs	r2, #22
 8005040:	68f9      	ldr	r1, [r7, #12]
 8005042:	6938      	ldr	r0, [r7, #16]
 8005044:	f7fe fde0 	bl	8003c08 <_SendPacket>
      RECORD_END();
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800504e:	bf00      	nop
 8005050:	3730      	adds	r7, #48	; 0x30
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	20014338 	.word	0x20014338
 800505c:	20014340 	.word	0x20014340

08005060 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005060:	b580      	push	{r7, lr}
 8005062:	b082      	sub	sp, #8
 8005064:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005066:	4b0c      	ldr	r3, [pc, #48]	; (8005098 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00f      	beq.n	800508e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800506e:	4b0a      	ldr	r3, [pc, #40]	; (8005098 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d002      	beq.n	8005082 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d1f2      	bne.n	8005074 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800508e:	bf00      	nop
 8005090:	3708      	adds	r7, #8
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	20014338 	.word	0x20014338

0800509c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800509c:	b580      	push	{r7, lr}
 800509e:	b086      	sub	sp, #24
 80050a0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80050a2:	f3ef 8311 	mrs	r3, BASEPRI
 80050a6:	f04f 0120 	mov.w	r1, #32
 80050aa:	f381 8811 	msr	BASEPRI, r1
 80050ae:	60fb      	str	r3, [r7, #12]
 80050b0:	4817      	ldr	r0, [pc, #92]	; (8005110 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80050b2:	f7fe fcba 	bl	8003a2a <_PreparePacket>
 80050b6:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	617b      	str	r3, [r7, #20]
 80050c0:	4b14      	ldr	r3, [pc, #80]	; (8005114 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	613b      	str	r3, [r7, #16]
 80050c6:	e00b      	b.n	80050e0 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	b2da      	uxtb	r2, r3
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	1c59      	adds	r1, r3, #1
 80050d0:	6179      	str	r1, [r7, #20]
 80050d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050d6:	b2d2      	uxtb	r2, r2
 80050d8:	701a      	strb	r2, [r3, #0]
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	09db      	lsrs	r3, r3, #7
 80050de:	613b      	str	r3, [r7, #16]
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	2b7f      	cmp	r3, #127	; 0x7f
 80050e4:	d8f0      	bhi.n	80050c8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	1c5a      	adds	r2, r3, #1
 80050ea:	617a      	str	r2, [r7, #20]
 80050ec:	693a      	ldr	r2, [r7, #16]
 80050ee:	b2d2      	uxtb	r2, r2
 80050f0:	701a      	strb	r2, [r3, #0]
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80050f6:	221b      	movs	r2, #27
 80050f8:	6879      	ldr	r1, [r7, #4]
 80050fa:	68b8      	ldr	r0, [r7, #8]
 80050fc:	f7fe fd84 	bl	8003c08 <_SendPacket>
  RECORD_END();
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f383 8811 	msr	BASEPRI, r3
}
 8005106:	bf00      	nop
 8005108:	3718      	adds	r7, #24
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	20014340 	.word	0x20014340
 8005114:	2001433c 	.word	0x2001433c

08005118 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8005118:	b40f      	push	{r0, r1, r2, r3}
 800511a:	b580      	push	{r7, lr}
 800511c:	b082      	sub	sp, #8
 800511e:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8005120:	f107 0314 	add.w	r3, r7, #20
 8005124:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8005126:	1d3b      	adds	r3, r7, #4
 8005128:	461a      	mov	r2, r3
 800512a:	2100      	movs	r1, #0
 800512c:	6938      	ldr	r0, [r7, #16]
 800512e:	f7fe fff3 	bl	8004118 <_VPrintTarget>
  va_end(ParamList);
}
 8005132:	bf00      	nop
 8005134:	3708      	adds	r7, #8
 8005136:	46bd      	mov	sp, r7
 8005138:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800513c:	b004      	add	sp, #16
 800513e:	4770      	bx	lr

08005140 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005140:	b580      	push	{r7, lr}
 8005142:	b08a      	sub	sp, #40	; 0x28
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005148:	f3ef 8311 	mrs	r3, BASEPRI
 800514c:	f04f 0120 	mov.w	r1, #32
 8005150:	f381 8811 	msr	BASEPRI, r1
 8005154:	617b      	str	r3, [r7, #20]
 8005156:	4827      	ldr	r0, [pc, #156]	; (80051f4 <SEGGER_SYSVIEW_Warn+0xb4>)
 8005158:	f7fe fc67 	bl	8003a2a <_PreparePacket>
 800515c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800515e:	2280      	movs	r2, #128	; 0x80
 8005160:	6879      	ldr	r1, [r7, #4]
 8005162:	6938      	ldr	r0, [r7, #16]
 8005164:	f7fe fc14 	bl	8003990 <_EncodeStr>
 8005168:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	627b      	str	r3, [r7, #36]	; 0x24
 800516e:	2301      	movs	r3, #1
 8005170:	623b      	str	r3, [r7, #32]
 8005172:	e00b      	b.n	800518c <SEGGER_SYSVIEW_Warn+0x4c>
 8005174:	6a3b      	ldr	r3, [r7, #32]
 8005176:	b2da      	uxtb	r2, r3
 8005178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517a:	1c59      	adds	r1, r3, #1
 800517c:	6279      	str	r1, [r7, #36]	; 0x24
 800517e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005182:	b2d2      	uxtb	r2, r2
 8005184:	701a      	strb	r2, [r3, #0]
 8005186:	6a3b      	ldr	r3, [r7, #32]
 8005188:	09db      	lsrs	r3, r3, #7
 800518a:	623b      	str	r3, [r7, #32]
 800518c:	6a3b      	ldr	r3, [r7, #32]
 800518e:	2b7f      	cmp	r3, #127	; 0x7f
 8005190:	d8f0      	bhi.n	8005174 <SEGGER_SYSVIEW_Warn+0x34>
 8005192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005194:	1c5a      	adds	r2, r3, #1
 8005196:	627a      	str	r2, [r7, #36]	; 0x24
 8005198:	6a3a      	ldr	r2, [r7, #32]
 800519a:	b2d2      	uxtb	r2, r2
 800519c:	701a      	strb	r2, [r3, #0]
 800519e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	61fb      	str	r3, [r7, #28]
 80051a6:	2300      	movs	r3, #0
 80051a8:	61bb      	str	r3, [r7, #24]
 80051aa:	e00b      	b.n	80051c4 <SEGGER_SYSVIEW_Warn+0x84>
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	b2da      	uxtb	r2, r3
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	1c59      	adds	r1, r3, #1
 80051b4:	61f9      	str	r1, [r7, #28]
 80051b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051ba:	b2d2      	uxtb	r2, r2
 80051bc:	701a      	strb	r2, [r3, #0]
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	09db      	lsrs	r3, r3, #7
 80051c2:	61bb      	str	r3, [r7, #24]
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	2b7f      	cmp	r3, #127	; 0x7f
 80051c8:	d8f0      	bhi.n	80051ac <SEGGER_SYSVIEW_Warn+0x6c>
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	1c5a      	adds	r2, r3, #1
 80051ce:	61fa      	str	r2, [r7, #28]
 80051d0:	69ba      	ldr	r2, [r7, #24]
 80051d2:	b2d2      	uxtb	r2, r2
 80051d4:	701a      	strb	r2, [r3, #0]
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80051da:	221a      	movs	r2, #26
 80051dc:	68f9      	ldr	r1, [r7, #12]
 80051de:	6938      	ldr	r0, [r7, #16]
 80051e0:	f7fe fd12 	bl	8003c08 <_SendPacket>
  RECORD_END();
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	f383 8811 	msr	BASEPRI, r3
}
 80051ea:	bf00      	nop
 80051ec:	3728      	adds	r7, #40	; 0x28
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	20014340 	.word	0x20014340

080051f8 <memcmp>:
 80051f8:	b510      	push	{r4, lr}
 80051fa:	3901      	subs	r1, #1
 80051fc:	4402      	add	r2, r0
 80051fe:	4290      	cmp	r0, r2
 8005200:	d101      	bne.n	8005206 <memcmp+0xe>
 8005202:	2000      	movs	r0, #0
 8005204:	e005      	b.n	8005212 <memcmp+0x1a>
 8005206:	7803      	ldrb	r3, [r0, #0]
 8005208:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800520c:	42a3      	cmp	r3, r4
 800520e:	d001      	beq.n	8005214 <memcmp+0x1c>
 8005210:	1b18      	subs	r0, r3, r4
 8005212:	bd10      	pop	{r4, pc}
 8005214:	3001      	adds	r0, #1
 8005216:	e7f2      	b.n	80051fe <memcmp+0x6>

08005218 <memset>:
 8005218:	4402      	add	r2, r0
 800521a:	4603      	mov	r3, r0
 800521c:	4293      	cmp	r3, r2
 800521e:	d100      	bne.n	8005222 <memset+0xa>
 8005220:	4770      	bx	lr
 8005222:	f803 1b01 	strb.w	r1, [r3], #1
 8005226:	e7f9      	b.n	800521c <memset+0x4>

08005228 <__libc_init_array>:
 8005228:	b570      	push	{r4, r5, r6, lr}
 800522a:	4d0d      	ldr	r5, [pc, #52]	; (8005260 <__libc_init_array+0x38>)
 800522c:	4c0d      	ldr	r4, [pc, #52]	; (8005264 <__libc_init_array+0x3c>)
 800522e:	1b64      	subs	r4, r4, r5
 8005230:	10a4      	asrs	r4, r4, #2
 8005232:	2600      	movs	r6, #0
 8005234:	42a6      	cmp	r6, r4
 8005236:	d109      	bne.n	800524c <__libc_init_array+0x24>
 8005238:	4d0b      	ldr	r5, [pc, #44]	; (8005268 <__libc_init_array+0x40>)
 800523a:	4c0c      	ldr	r4, [pc, #48]	; (800526c <__libc_init_array+0x44>)
 800523c:	f000 f826 	bl	800528c <_init>
 8005240:	1b64      	subs	r4, r4, r5
 8005242:	10a4      	asrs	r4, r4, #2
 8005244:	2600      	movs	r6, #0
 8005246:	42a6      	cmp	r6, r4
 8005248:	d105      	bne.n	8005256 <__libc_init_array+0x2e>
 800524a:	bd70      	pop	{r4, r5, r6, pc}
 800524c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005250:	4798      	blx	r3
 8005252:	3601      	adds	r6, #1
 8005254:	e7ee      	b.n	8005234 <__libc_init_array+0xc>
 8005256:	f855 3b04 	ldr.w	r3, [r5], #4
 800525a:	4798      	blx	r3
 800525c:	3601      	adds	r6, #1
 800525e:	e7f2      	b.n	8005246 <__libc_init_array+0x1e>
 8005260:	08005420 	.word	0x08005420
 8005264:	08005420 	.word	0x08005420
 8005268:	08005420 	.word	0x08005420
 800526c:	08005424 	.word	0x08005424

08005270 <memcpy>:
 8005270:	440a      	add	r2, r1
 8005272:	4291      	cmp	r1, r2
 8005274:	f100 33ff 	add.w	r3, r0, #4294967295
 8005278:	d100      	bne.n	800527c <memcpy+0xc>
 800527a:	4770      	bx	lr
 800527c:	b510      	push	{r4, lr}
 800527e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005282:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005286:	4291      	cmp	r1, r2
 8005288:	d1f9      	bne.n	800527e <memcpy+0xe>
 800528a:	bd10      	pop	{r4, pc}

0800528c <_init>:
 800528c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800528e:	bf00      	nop
 8005290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005292:	bc08      	pop	{r3}
 8005294:	469e      	mov	lr, r3
 8005296:	4770      	bx	lr

08005298 <_fini>:
 8005298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800529a:	bf00      	nop
 800529c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800529e:	bc08      	pop	{r3}
 80052a0:	469e      	mov	lr, r3
 80052a2:	4770      	bx	lr

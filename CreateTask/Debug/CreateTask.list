
CreateTask.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054f8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  080056d8  080056d8  000156d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005804  08005804  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08005804  08005804  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005804  08005804  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005804  08005804  00015804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005808  08005808  00015808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  0800580c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013554  20000064  08005870  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200135b8  08005870  000235b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012dda  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b0d  00000000  00000000  00032eb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001318  00000000  00000000  000359c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000eb2  00000000  00000000  00036cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027bbf  00000000  00000000  00037b8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001486d  00000000  00000000  0005f749  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00102171  00000000  00000000  00073fb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005550  00000000  00000000  00176128  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a2  00000000  00000000  0017b678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000064 	.word	0x20000064
 80001fc:	00000000 	.word	0x00000000
 8000200:	080056c0 	.word	0x080056c0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000068 	.word	0x20000068
 800021c:	080056c0 	.word	0x080056c0

08000220 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000220:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000222:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000226:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002b0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800022a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800022e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000232:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000234:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000236:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000238:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800023a:	d332      	bcc.n	80002a2 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800023c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800023e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000240:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000242:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000244:	d314      	bcc.n	8000270 <_CheckCase2>

08000246 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000246:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000248:	19d0      	adds	r0, r2, r7
 800024a:	bf00      	nop

0800024c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800024c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000250:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000254:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000256:	d005      	beq.n	8000264 <_CSDone>
        LDRB     R3,[R1], #+1
 8000258:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000260:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000262:	d1f3      	bne.n	800024c <_LoopCopyStraight>

08000264 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000264:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000268:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800026a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800026e:	4770      	bx	lr

08000270 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000270:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000272:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000274:	d319      	bcc.n	80002aa <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000276:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000278:	1b12      	subs	r2, r2, r4

0800027a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800027e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000282:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000286:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000288:	d005      	beq.n	8000296 <_No2ChunkNeeded>

0800028a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800028a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800028e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000292:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000294:	d1f9      	bne.n	800028a <_LoopCopyAfterWrapAround>

08000296 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000296:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800029a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800029c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800029e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80002a0:	4770      	bx	lr

080002a2 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80002a2:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80002a4:	3801      	subs	r0, #1
        CMP      R0,R2
 80002a6:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80002a8:	d2cd      	bcs.n	8000246 <_Case4>

080002aa <_Case3>:
_Case3:
        MOVS     R0,#+0
 80002aa:	2000      	movs	r0, #0
        POP      {R4-R7}
 80002ac:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80002ae:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002b0:	20012ea0 	.word	0x20012ea0
	...

080002c0 <memchr>:
 80002c0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002c4:	2a10      	cmp	r2, #16
 80002c6:	db2b      	blt.n	8000320 <memchr+0x60>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	d008      	beq.n	80002e0 <memchr+0x20>
 80002ce:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d2:	3a01      	subs	r2, #1
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d02d      	beq.n	8000334 <memchr+0x74>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	b342      	cbz	r2, 8000330 <memchr+0x70>
 80002de:	d1f6      	bne.n	80002ce <memchr+0xe>
 80002e0:	b4f0      	push	{r4, r5, r6, r7}
 80002e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ea:	f022 0407 	bic.w	r4, r2, #7
 80002ee:	f07f 0700 	mvns.w	r7, #0
 80002f2:	2300      	movs	r3, #0
 80002f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002f8:	3c08      	subs	r4, #8
 80002fa:	ea85 0501 	eor.w	r5, r5, r1
 80002fe:	ea86 0601 	eor.w	r6, r6, r1
 8000302:	fa85 f547 	uadd8	r5, r5, r7
 8000306:	faa3 f587 	sel	r5, r3, r7
 800030a:	fa86 f647 	uadd8	r6, r6, r7
 800030e:	faa5 f687 	sel	r6, r5, r7
 8000312:	b98e      	cbnz	r6, 8000338 <memchr+0x78>
 8000314:	d1ee      	bne.n	80002f4 <memchr+0x34>
 8000316:	bcf0      	pop	{r4, r5, r6, r7}
 8000318:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800031c:	f002 0207 	and.w	r2, r2, #7
 8000320:	b132      	cbz	r2, 8000330 <memchr+0x70>
 8000322:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000326:	3a01      	subs	r2, #1
 8000328:	ea83 0301 	eor.w	r3, r3, r1
 800032c:	b113      	cbz	r3, 8000334 <memchr+0x74>
 800032e:	d1f8      	bne.n	8000322 <memchr+0x62>
 8000330:	2000      	movs	r0, #0
 8000332:	4770      	bx	lr
 8000334:	3801      	subs	r0, #1
 8000336:	4770      	bx	lr
 8000338:	2d00      	cmp	r5, #0
 800033a:	bf06      	itte	eq
 800033c:	4635      	moveq	r5, r6
 800033e:	3803      	subeq	r0, #3
 8000340:	3807      	subne	r0, #7
 8000342:	f015 0f01 	tst.w	r5, #1
 8000346:	d107      	bne.n	8000358 <memchr+0x98>
 8000348:	3001      	adds	r0, #1
 800034a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800034e:	bf02      	ittt	eq
 8000350:	3001      	addeq	r0, #1
 8000352:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000356:	3001      	addeq	r0, #1
 8000358:	bcf0      	pop	{r4, r5, r6, r7}
 800035a:	3801      	subs	r0, #1
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop

08000360 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b088      	sub	sp, #32
 8000364:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000366:	f000 fa5c 	bl	8000822 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800036a:	f000 f845 	bl	80003f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800036e:	f000 f88f 	bl	8000490 <MX_GPIO_Init>
  //DWT_CTRL |= ( 1 << 0 );

  //SEGGER_SYSVIEW_Conf();
  //SEGGER_SYSVIEW_Start();

  status = xTaskCreate(task1_handler, "Task-1", 200, "Hello, world from Task-1", 2, &task1_handle);
 8000372:	f107 0308 	add.w	r3, r7, #8
 8000376:	9301      	str	r3, [sp, #4]
 8000378:	2302      	movs	r3, #2
 800037a:	9300      	str	r3, [sp, #0]
 800037c:	4b18      	ldr	r3, [pc, #96]	; (80003e0 <main+0x80>)
 800037e:	22c8      	movs	r2, #200	; 0xc8
 8000380:	4918      	ldr	r1, [pc, #96]	; (80003e4 <main+0x84>)
 8000382:	4819      	ldr	r0, [pc, #100]	; (80003e8 <main+0x88>)
 8000384:	f001 ff11 	bl	80021aa <xTaskCreate>
 8000388:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 800038a:	697b      	ldr	r3, [r7, #20]
 800038c:	2b01      	cmp	r3, #1
 800038e:	d00a      	beq.n	80003a6 <main+0x46>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000394:	f383 8811 	msr	BASEPRI, r3
 8000398:	f3bf 8f6f 	isb	sy
 800039c:	f3bf 8f4f 	dsb	sy
 80003a0:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80003a2:	bf00      	nop
 80003a4:	e7fe      	b.n	80003a4 <main+0x44>

  status = xTaskCreate(task2_handler, "Task-2", 200, "Hello, world from Task-2", 2, &task2_handle);
 80003a6:	1d3b      	adds	r3, r7, #4
 80003a8:	9301      	str	r3, [sp, #4]
 80003aa:	2302      	movs	r3, #2
 80003ac:	9300      	str	r3, [sp, #0]
 80003ae:	4b0f      	ldr	r3, [pc, #60]	; (80003ec <main+0x8c>)
 80003b0:	22c8      	movs	r2, #200	; 0xc8
 80003b2:	490f      	ldr	r1, [pc, #60]	; (80003f0 <main+0x90>)
 80003b4:	480f      	ldr	r0, [pc, #60]	; (80003f4 <main+0x94>)
 80003b6:	f001 fef8 	bl	80021aa <xTaskCreate>
 80003ba:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80003bc:	697b      	ldr	r3, [r7, #20]
 80003be:	2b01      	cmp	r3, #1
 80003c0:	d00a      	beq.n	80003d8 <main+0x78>
        __asm volatile
 80003c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003c6:	f383 8811 	msr	BASEPRI, r3
 80003ca:	f3bf 8f6f 	isb	sy
 80003ce:	f3bf 8f4f 	dsb	sy
 80003d2:	60fb      	str	r3, [r7, #12]
    }
 80003d4:	bf00      	nop
 80003d6:	e7fe      	b.n	80003d6 <main+0x76>

  // start the freeRTOS scheduler
  vTaskStartScheduler();
 80003d8:	f002 f83c 	bl	8002454 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003dc:	e7fe      	b.n	80003dc <main+0x7c>
 80003de:	bf00      	nop
 80003e0:	080056d8 	.word	0x080056d8
 80003e4:	080056f4 	.word	0x080056f4
 80003e8:	08000591 	.word	0x08000591
 80003ec:	080056fc 	.word	0x080056fc
 80003f0:	08005718 	.word	0x08005718
 80003f4:	080005cd 	.word	0x080005cd

080003f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b094      	sub	sp, #80	; 0x50
 80003fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003fe:	f107 0318 	add.w	r3, r7, #24
 8000402:	2238      	movs	r2, #56	; 0x38
 8000404:	2100      	movs	r1, #0
 8000406:	4618      	mov	r0, r3
 8000408:	f004 fcce 	bl	8004da8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800040c:	1d3b      	adds	r3, r7, #4
 800040e:	2200      	movs	r2, #0
 8000410:	601a      	str	r2, [r3, #0]
 8000412:	605a      	str	r2, [r3, #4]
 8000414:	609a      	str	r2, [r3, #8]
 8000416:	60da      	str	r2, [r3, #12]
 8000418:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800041a:	2000      	movs	r0, #0
 800041c:	f000 fcd6 	bl	8000dcc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000420:	2302      	movs	r3, #2
 8000422:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000424:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000428:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800042a:	2340      	movs	r3, #64	; 0x40
 800042c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800042e:	2302      	movs	r3, #2
 8000430:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000432:	2302      	movs	r3, #2
 8000434:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000436:	2304      	movs	r3, #4
 8000438:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800043a:	2355      	movs	r3, #85	; 0x55
 800043c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800043e:	2302      	movs	r3, #2
 8000440:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000442:	2302      	movs	r3, #2
 8000444:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000446:	2302      	movs	r3, #2
 8000448:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800044a:	f107 0318 	add.w	r3, r7, #24
 800044e:	4618      	mov	r0, r3
 8000450:	f000 fd70 	bl	8000f34 <HAL_RCC_OscConfig>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d001      	beq.n	800045e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800045a:	f000 f8e7 	bl	800062c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800045e:	230f      	movs	r3, #15
 8000460:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000462:	2303      	movs	r3, #3
 8000464:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000466:	2300      	movs	r3, #0
 8000468:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800046a:	2300      	movs	r3, #0
 800046c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800046e:	2300      	movs	r3, #0
 8000470:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000472:	1d3b      	adds	r3, r7, #4
 8000474:	2104      	movs	r1, #4
 8000476:	4618      	mov	r0, r3
 8000478:	f001 f874 	bl	8001564 <HAL_RCC_ClockConfig>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d001      	beq.n	8000486 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000482:	f000 f8d3 	bl	800062c <Error_Handler>
  }
}
 8000486:	bf00      	nop
 8000488:	3750      	adds	r7, #80	; 0x50
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
	...

08000490 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b08a      	sub	sp, #40	; 0x28
 8000494:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000496:	f107 0314 	add.w	r3, r7, #20
 800049a:	2200      	movs	r2, #0
 800049c:	601a      	str	r2, [r3, #0]
 800049e:	605a      	str	r2, [r3, #4]
 80004a0:	609a      	str	r2, [r3, #8]
 80004a2:	60da      	str	r2, [r3, #12]
 80004a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004a6:	4b38      	ldr	r3, [pc, #224]	; (8000588 <MX_GPIO_Init+0xf8>)
 80004a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004aa:	4a37      	ldr	r2, [pc, #220]	; (8000588 <MX_GPIO_Init+0xf8>)
 80004ac:	f043 0304 	orr.w	r3, r3, #4
 80004b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004b2:	4b35      	ldr	r3, [pc, #212]	; (8000588 <MX_GPIO_Init+0xf8>)
 80004b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004b6:	f003 0304 	and.w	r3, r3, #4
 80004ba:	613b      	str	r3, [r7, #16]
 80004bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004be:	4b32      	ldr	r3, [pc, #200]	; (8000588 <MX_GPIO_Init+0xf8>)
 80004c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004c2:	4a31      	ldr	r2, [pc, #196]	; (8000588 <MX_GPIO_Init+0xf8>)
 80004c4:	f043 0320 	orr.w	r3, r3, #32
 80004c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ca:	4b2f      	ldr	r3, [pc, #188]	; (8000588 <MX_GPIO_Init+0xf8>)
 80004cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ce:	f003 0320 	and.w	r3, r3, #32
 80004d2:	60fb      	str	r3, [r7, #12]
 80004d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d6:	4b2c      	ldr	r3, [pc, #176]	; (8000588 <MX_GPIO_Init+0xf8>)
 80004d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004da:	4a2b      	ldr	r2, [pc, #172]	; (8000588 <MX_GPIO_Init+0xf8>)
 80004dc:	f043 0301 	orr.w	r3, r3, #1
 80004e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004e2:	4b29      	ldr	r3, [pc, #164]	; (8000588 <MX_GPIO_Init+0xf8>)
 80004e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e6:	f003 0301 	and.w	r3, r3, #1
 80004ea:	60bb      	str	r3, [r7, #8]
 80004ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ee:	4b26      	ldr	r3, [pc, #152]	; (8000588 <MX_GPIO_Init+0xf8>)
 80004f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f2:	4a25      	ldr	r2, [pc, #148]	; (8000588 <MX_GPIO_Init+0xf8>)
 80004f4:	f043 0302 	orr.w	r3, r3, #2
 80004f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004fa:	4b23      	ldr	r3, [pc, #140]	; (8000588 <MX_GPIO_Init+0xf8>)
 80004fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fe:	f003 0302 	and.w	r3, r3, #2
 8000502:	607b      	str	r3, [r7, #4]
 8000504:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000506:	2200      	movs	r2, #0
 8000508:	2120      	movs	r1, #32
 800050a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800050e:	f000 fc21 	bl	8000d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000512:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000516:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000518:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800051c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051e:	2300      	movs	r3, #0
 8000520:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000522:	f107 0314 	add.w	r3, r7, #20
 8000526:	4619      	mov	r1, r3
 8000528:	4818      	ldr	r0, [pc, #96]	; (800058c <MX_GPIO_Init+0xfc>)
 800052a:	f000 fa91 	bl	8000a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPUART1_TX_Pin LPUART1_RX_Pin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800052e:	230c      	movs	r3, #12
 8000530:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000532:	2302      	movs	r3, #2
 8000534:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000536:	2300      	movs	r3, #0
 8000538:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800053a:	2300      	movs	r3, #0
 800053c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800053e:	230c      	movs	r3, #12
 8000540:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000542:	f107 0314 	add.w	r3, r7, #20
 8000546:	4619      	mov	r1, r3
 8000548:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800054c:	f000 fa80 	bl	8000a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000550:	2320      	movs	r3, #32
 8000552:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000554:	2301      	movs	r3, #1
 8000556:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000558:	2300      	movs	r3, #0
 800055a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800055c:	2300      	movs	r3, #0
 800055e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000560:	f107 0314 	add.w	r3, r7, #20
 8000564:	4619      	mov	r1, r3
 8000566:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800056a:	f000 fa71 	bl	8000a50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800056e:	2200      	movs	r2, #0
 8000570:	2100      	movs	r1, #0
 8000572:	2028      	movs	r0, #40	; 0x28
 8000574:	f000 fa44 	bl	8000a00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000578:	2028      	movs	r0, #40	; 0x28
 800057a:	f000 fa5b 	bl	8000a34 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800057e:	bf00      	nop
 8000580:	3728      	adds	r7, #40	; 0x28
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	40021000 	.word	0x40021000
 800058c:	48000800 	.word	0x48000800

08000590 <task1_handler>:

/* USER CODE BEGIN 4 */

static void task1_handler(void* parameters)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b09c      	sub	sp, #112	; 0x70
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1)
	{
		//printf("%s\n", (char*)parameters);
		snprintf(msg, 100, "%s\n", (char*)parameters);
 8000598:	f107 000c 	add.w	r0, r7, #12
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	4a09      	ldr	r2, [pc, #36]	; (80005c4 <task1_handler+0x34>)
 80005a0:	2164      	movs	r1, #100	; 0x64
 80005a2:	f004 fbbd 	bl	8004d20 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 80005a6:	f107 030c 	add.w	r3, r7, #12
 80005aa:	4618      	mov	r0, r3
 80005ac:	f004 fb48 	bl	8004c40 <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 80005b0:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <task1_handler+0x38>)
 80005b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	f3bf 8f4f 	dsb	sy
 80005bc:	f3bf 8f6f 	isb	sy
		snprintf(msg, 100, "%s\n", (char*)parameters);
 80005c0:	e7ea      	b.n	8000598 <task1_handler+0x8>
 80005c2:	bf00      	nop
 80005c4:	08005720 	.word	0x08005720
 80005c8:	e000ed04 	.word	0xe000ed04

080005cc <task2_handler>:
	}
}

static void task2_handler(void* parameters)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b09c      	sub	sp, #112	; 0x70
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1)
	{
		//printf("%s\n", (char*)parameters);
		snprintf(msg, 100, "%s\n", (char*)parameters);
 80005d4:	f107 000c 	add.w	r0, r7, #12
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	4a09      	ldr	r2, [pc, #36]	; (8000600 <task2_handler+0x34>)
 80005dc:	2164      	movs	r1, #100	; 0x64
 80005de:	f004 fb9f 	bl	8004d20 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 80005e2:	f107 030c 	add.w	r3, r7, #12
 80005e6:	4618      	mov	r0, r3
 80005e8:	f004 fb2a 	bl	8004c40 <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 80005ec:	4b05      	ldr	r3, [pc, #20]	; (8000604 <task2_handler+0x38>)
 80005ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	f3bf 8f4f 	dsb	sy
 80005f8:	f3bf 8f6f 	isb	sy
		snprintf(msg, 100, "%s\n", (char*)parameters);
 80005fc:	e7ea      	b.n	80005d4 <task2_handler+0x8>
 80005fe:	bf00      	nop
 8000600:	08005720 	.word	0x08005720
 8000604:	e000ed04 	.word	0xe000ed04

08000608 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a04      	ldr	r2, [pc, #16]	; (8000628 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000616:	4293      	cmp	r3, r2
 8000618:	d101      	bne.n	800061e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800061a:	f000 f91b 	bl	8000854 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800061e:	bf00      	nop
 8000620:	3708      	adds	r7, #8
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40001000 	.word	0x40001000

0800062c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000630:	b672      	cpsid	i
}
 8000632:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000634:	e7fe      	b.n	8000634 <Error_Handler+0x8>
	...

08000638 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800063e:	4b10      	ldr	r3, [pc, #64]	; (8000680 <HAL_MspInit+0x48>)
 8000640:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000642:	4a0f      	ldr	r2, [pc, #60]	; (8000680 <HAL_MspInit+0x48>)
 8000644:	f043 0301 	orr.w	r3, r3, #1
 8000648:	6613      	str	r3, [r2, #96]	; 0x60
 800064a:	4b0d      	ldr	r3, [pc, #52]	; (8000680 <HAL_MspInit+0x48>)
 800064c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000656:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <HAL_MspInit+0x48>)
 8000658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800065a:	4a09      	ldr	r2, [pc, #36]	; (8000680 <HAL_MspInit+0x48>)
 800065c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000660:	6593      	str	r3, [r2, #88]	; 0x58
 8000662:	4b07      	ldr	r3, [pc, #28]	; (8000680 <HAL_MspInit+0x48>)
 8000664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800066a:	603b      	str	r3, [r7, #0]
 800066c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800066e:	f000 fc51 	bl	8000f14 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 8000672:	f002 fac9 	bl	8002c08 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000676:	bf00      	nop
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40021000 	.word	0x40021000

08000684 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b08c      	sub	sp, #48	; 0x30
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800068c:	2300      	movs	r3, #0
 800068e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8000690:	2300      	movs	r3, #0
 8000692:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000694:	4b2c      	ldr	r3, [pc, #176]	; (8000748 <HAL_InitTick+0xc4>)
 8000696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000698:	4a2b      	ldr	r2, [pc, #172]	; (8000748 <HAL_InitTick+0xc4>)
 800069a:	f043 0310 	orr.w	r3, r3, #16
 800069e:	6593      	str	r3, [r2, #88]	; 0x58
 80006a0:	4b29      	ldr	r3, [pc, #164]	; (8000748 <HAL_InitTick+0xc4>)
 80006a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006a4:	f003 0310 	and.w	r3, r3, #16
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80006ac:	f107 020c 	add.w	r2, r7, #12
 80006b0:	f107 0310 	add.w	r3, r7, #16
 80006b4:	4611      	mov	r1, r2
 80006b6:	4618      	mov	r0, r3
 80006b8:	f001 f914 	bl	80018e4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80006bc:	f001 f8fc 	bl	80018b8 <HAL_RCC_GetPCLK1Freq>
 80006c0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80006c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006c4:	4a21      	ldr	r2, [pc, #132]	; (800074c <HAL_InitTick+0xc8>)
 80006c6:	fba2 2303 	umull	r2, r3, r2, r3
 80006ca:	0c9b      	lsrs	r3, r3, #18
 80006cc:	3b01      	subs	r3, #1
 80006ce:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80006d0:	4b1f      	ldr	r3, [pc, #124]	; (8000750 <HAL_InitTick+0xcc>)
 80006d2:	4a20      	ldr	r2, [pc, #128]	; (8000754 <HAL_InitTick+0xd0>)
 80006d4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80006d6:	4b1e      	ldr	r3, [pc, #120]	; (8000750 <HAL_InitTick+0xcc>)
 80006d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006dc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80006de:	4a1c      	ldr	r2, [pc, #112]	; (8000750 <HAL_InitTick+0xcc>)
 80006e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006e2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80006e4:	4b1a      	ldr	r3, [pc, #104]	; (8000750 <HAL_InitTick+0xcc>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ea:	4b19      	ldr	r3, [pc, #100]	; (8000750 <HAL_InitTick+0xcc>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80006f0:	4817      	ldr	r0, [pc, #92]	; (8000750 <HAL_InitTick+0xcc>)
 80006f2:	f001 f96f 	bl	80019d4 <HAL_TIM_Base_Init>
 80006f6:	4603      	mov	r3, r0
 80006f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80006fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000700:	2b00      	cmp	r3, #0
 8000702:	d11b      	bne.n	800073c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000704:	4812      	ldr	r0, [pc, #72]	; (8000750 <HAL_InitTick+0xcc>)
 8000706:	f001 f9c7 	bl	8001a98 <HAL_TIM_Base_Start_IT>
 800070a:	4603      	mov	r3, r0
 800070c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000710:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000714:	2b00      	cmp	r3, #0
 8000716:	d111      	bne.n	800073c <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000718:	2036      	movs	r0, #54	; 0x36
 800071a:	f000 f98b 	bl	8000a34 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	2b0f      	cmp	r3, #15
 8000722:	d808      	bhi.n	8000736 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000724:	2200      	movs	r2, #0
 8000726:	6879      	ldr	r1, [r7, #4]
 8000728:	2036      	movs	r0, #54	; 0x36
 800072a:	f000 f969 	bl	8000a00 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800072e:	4a0a      	ldr	r2, [pc, #40]	; (8000758 <HAL_InitTick+0xd4>)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	6013      	str	r3, [r2, #0]
 8000734:	e002      	b.n	800073c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000736:	2301      	movs	r3, #1
 8000738:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800073c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000740:	4618      	mov	r0, r3
 8000742:	3730      	adds	r7, #48	; 0x30
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40021000 	.word	0x40021000
 800074c:	431bde83 	.word	0x431bde83
 8000750:	20000080 	.word	0x20000080
 8000754:	40001000 	.word	0x40001000
 8000758:	20000004 	.word	0x20000004

0800075c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000760:	e7fe      	b.n	8000760 <NMI_Handler+0x4>

08000762 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000762:	b480      	push	{r7}
 8000764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000766:	e7fe      	b.n	8000766 <HardFault_Handler+0x4>

08000768 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800076c:	e7fe      	b.n	800076c <MemManage_Handler+0x4>

0800076e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800076e:	b480      	push	{r7}
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000772:	e7fe      	b.n	8000772 <BusFault_Handler+0x4>

08000774 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000778:	e7fe      	b.n	8000778 <UsageFault_Handler+0x4>

0800077a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800077a:	b480      	push	{r7}
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800077e:	bf00      	nop
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr

08000788 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800078c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000790:	f000 faf8 	bl	8000d84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}

08000798 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800079c:	4802      	ldr	r0, [pc, #8]	; (80007a8 <TIM6_DAC_IRQHandler+0x10>)
 800079e:	f001 f9f3 	bl	8001b88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000080 	.word	0x20000080

080007ac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <SystemInit+0x20>)
 80007b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007b6:	4a05      	ldr	r2, [pc, #20]	; (80007cc <SystemInit+0x20>)
 80007b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	e000ed00 	.word	0xe000ed00

080007d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007d0:	480d      	ldr	r0, [pc, #52]	; (8000808 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007d2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007d4:	480d      	ldr	r0, [pc, #52]	; (800080c <LoopForever+0x6>)
  ldr r1, =_edata
 80007d6:	490e      	ldr	r1, [pc, #56]	; (8000810 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007d8:	4a0e      	ldr	r2, [pc, #56]	; (8000814 <LoopForever+0xe>)
  movs r3, #0
 80007da:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80007dc:	e002      	b.n	80007e4 <LoopCopyDataInit>

080007de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007e2:	3304      	adds	r3, #4

080007e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007e8:	d3f9      	bcc.n	80007de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ea:	4a0b      	ldr	r2, [pc, #44]	; (8000818 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007ec:	4c0b      	ldr	r4, [pc, #44]	; (800081c <LoopForever+0x16>)
  movs r3, #0
 80007ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007f0:	e001      	b.n	80007f6 <LoopFillZerobss>

080007f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007f4:	3204      	adds	r2, #4

080007f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007f8:	d3fb      	bcc.n	80007f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007fa:	f7ff ffd7 	bl	80007ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007fe:	f004 fadb 	bl	8004db8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000802:	f7ff fdad 	bl	8000360 <main>

08000806 <LoopForever>:

LoopForever:
    b LoopForever
 8000806:	e7fe      	b.n	8000806 <LoopForever>
  ldr   r0, =_estack
 8000808:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800080c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000810:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000814:	0800580c 	.word	0x0800580c
  ldr r2, =_sbss
 8000818:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 800081c:	200135b8 	.word	0x200135b8

08000820 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000820:	e7fe      	b.n	8000820 <ADC1_2_IRQHandler>

08000822 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000822:	b580      	push	{r7, lr}
 8000824:	b082      	sub	sp, #8
 8000826:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000828:	2300      	movs	r3, #0
 800082a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800082c:	2003      	movs	r0, #3
 800082e:	f000 f8dc 	bl	80009ea <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000832:	200f      	movs	r0, #15
 8000834:	f7ff ff26 	bl	8000684 <HAL_InitTick>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d002      	beq.n	8000844 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800083e:	2301      	movs	r3, #1
 8000840:	71fb      	strb	r3, [r7, #7]
 8000842:	e001      	b.n	8000848 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000844:	f7ff fef8 	bl	8000638 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000848:	79fb      	ldrb	r3, [r7, #7]

}
 800084a:	4618      	mov	r0, r3
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
	...

08000854 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000858:	4b05      	ldr	r3, [pc, #20]	; (8000870 <HAL_IncTick+0x1c>)
 800085a:	681a      	ldr	r2, [r3, #0]
 800085c:	4b05      	ldr	r3, [pc, #20]	; (8000874 <HAL_IncTick+0x20>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4413      	add	r3, r2
 8000862:	4a03      	ldr	r2, [pc, #12]	; (8000870 <HAL_IncTick+0x1c>)
 8000864:	6013      	str	r3, [r2, #0]
}
 8000866:	bf00      	nop
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr
 8000870:	200000cc 	.word	0x200000cc
 8000874:	20000008 	.word	0x20000008

08000878 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  return uwTick;
 800087c:	4b03      	ldr	r3, [pc, #12]	; (800088c <HAL_GetTick+0x14>)
 800087e:	681b      	ldr	r3, [r3, #0]
}
 8000880:	4618      	mov	r0, r3
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	200000cc 	.word	0x200000cc

08000890 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000890:	b480      	push	{r7}
 8000892:	b085      	sub	sp, #20
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	f003 0307 	and.w	r3, r3, #7
 800089e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008a0:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <__NVIC_SetPriorityGrouping+0x44>)
 80008a2:	68db      	ldr	r3, [r3, #12]
 80008a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008a6:	68ba      	ldr	r2, [r7, #8]
 80008a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008ac:	4013      	ands	r3, r2
 80008ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008c2:	4a04      	ldr	r2, [pc, #16]	; (80008d4 <__NVIC_SetPriorityGrouping+0x44>)
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	60d3      	str	r3, [r2, #12]
}
 80008c8:	bf00      	nop
 80008ca:	3714      	adds	r7, #20
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr
 80008d4:	e000ed00 	.word	0xe000ed00

080008d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008dc:	4b04      	ldr	r3, [pc, #16]	; (80008f0 <__NVIC_GetPriorityGrouping+0x18>)
 80008de:	68db      	ldr	r3, [r3, #12]
 80008e0:	0a1b      	lsrs	r3, r3, #8
 80008e2:	f003 0307 	and.w	r3, r3, #7
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr
 80008f0:	e000ed00 	.word	0xe000ed00

080008f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000902:	2b00      	cmp	r3, #0
 8000904:	db0b      	blt.n	800091e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	f003 021f 	and.w	r2, r3, #31
 800090c:	4907      	ldr	r1, [pc, #28]	; (800092c <__NVIC_EnableIRQ+0x38>)
 800090e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000912:	095b      	lsrs	r3, r3, #5
 8000914:	2001      	movs	r0, #1
 8000916:	fa00 f202 	lsl.w	r2, r0, r2
 800091a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800091e:	bf00      	nop
 8000920:	370c      	adds	r7, #12
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	e000e100 	.word	0xe000e100

08000930 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	6039      	str	r1, [r7, #0]
 800093a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800093c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000940:	2b00      	cmp	r3, #0
 8000942:	db0a      	blt.n	800095a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	b2da      	uxtb	r2, r3
 8000948:	490c      	ldr	r1, [pc, #48]	; (800097c <__NVIC_SetPriority+0x4c>)
 800094a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094e:	0112      	lsls	r2, r2, #4
 8000950:	b2d2      	uxtb	r2, r2
 8000952:	440b      	add	r3, r1
 8000954:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000958:	e00a      	b.n	8000970 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	b2da      	uxtb	r2, r3
 800095e:	4908      	ldr	r1, [pc, #32]	; (8000980 <__NVIC_SetPriority+0x50>)
 8000960:	79fb      	ldrb	r3, [r7, #7]
 8000962:	f003 030f 	and.w	r3, r3, #15
 8000966:	3b04      	subs	r3, #4
 8000968:	0112      	lsls	r2, r2, #4
 800096a:	b2d2      	uxtb	r2, r2
 800096c:	440b      	add	r3, r1
 800096e:	761a      	strb	r2, [r3, #24]
}
 8000970:	bf00      	nop
 8000972:	370c      	adds	r7, #12
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr
 800097c:	e000e100 	.word	0xe000e100
 8000980:	e000ed00 	.word	0xe000ed00

08000984 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000984:	b480      	push	{r7}
 8000986:	b089      	sub	sp, #36	; 0x24
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	f003 0307 	and.w	r3, r3, #7
 8000996:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000998:	69fb      	ldr	r3, [r7, #28]
 800099a:	f1c3 0307 	rsb	r3, r3, #7
 800099e:	2b04      	cmp	r3, #4
 80009a0:	bf28      	it	cs
 80009a2:	2304      	movcs	r3, #4
 80009a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009a6:	69fb      	ldr	r3, [r7, #28]
 80009a8:	3304      	adds	r3, #4
 80009aa:	2b06      	cmp	r3, #6
 80009ac:	d902      	bls.n	80009b4 <NVIC_EncodePriority+0x30>
 80009ae:	69fb      	ldr	r3, [r7, #28]
 80009b0:	3b03      	subs	r3, #3
 80009b2:	e000      	b.n	80009b6 <NVIC_EncodePriority+0x32>
 80009b4:	2300      	movs	r3, #0
 80009b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b8:	f04f 32ff 	mov.w	r2, #4294967295
 80009bc:	69bb      	ldr	r3, [r7, #24]
 80009be:	fa02 f303 	lsl.w	r3, r2, r3
 80009c2:	43da      	mvns	r2, r3
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	401a      	ands	r2, r3
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009cc:	f04f 31ff 	mov.w	r1, #4294967295
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	fa01 f303 	lsl.w	r3, r1, r3
 80009d6:	43d9      	mvns	r1, r3
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009dc:	4313      	orrs	r3, r2
         );
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3724      	adds	r7, #36	; 0x24
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr

080009ea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009ea:	b580      	push	{r7, lr}
 80009ec:	b082      	sub	sp, #8
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009f2:	6878      	ldr	r0, [r7, #4]
 80009f4:	f7ff ff4c 	bl	8000890 <__NVIC_SetPriorityGrouping>
}
 80009f8:	bf00      	nop
 80009fa:	3708      	adds	r7, #8
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b086      	sub	sp, #24
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	60b9      	str	r1, [r7, #8]
 8000a0a:	607a      	str	r2, [r7, #4]
 8000a0c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a0e:	f7ff ff63 	bl	80008d8 <__NVIC_GetPriorityGrouping>
 8000a12:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a14:	687a      	ldr	r2, [r7, #4]
 8000a16:	68b9      	ldr	r1, [r7, #8]
 8000a18:	6978      	ldr	r0, [r7, #20]
 8000a1a:	f7ff ffb3 	bl	8000984 <NVIC_EncodePriority>
 8000a1e:	4602      	mov	r2, r0
 8000a20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a24:	4611      	mov	r1, r2
 8000a26:	4618      	mov	r0, r3
 8000a28:	f7ff ff82 	bl	8000930 <__NVIC_SetPriority>
}
 8000a2c:	bf00      	nop
 8000a2e:	3718      	adds	r7, #24
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff ff56 	bl	80008f4 <__NVIC_EnableIRQ>
}
 8000a48:	bf00      	nop
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b087      	sub	sp, #28
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000a5e:	e15a      	b.n	8000d16 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	2101      	movs	r1, #1
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	fa01 f303 	lsl.w	r3, r1, r3
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	f000 814c 	beq.w	8000d10 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	f003 0303 	and.w	r3, r3, #3
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d005      	beq.n	8000a90 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a8c:	2b02      	cmp	r3, #2
 8000a8e:	d130      	bne.n	8000af2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	689b      	ldr	r3, [r3, #8]
 8000a94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	2203      	movs	r2, #3
 8000a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa0:	43db      	mvns	r3, r3
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	68da      	ldr	r2, [r3, #12]
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	005b      	lsls	r3, r3, #1
 8000ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab4:	693a      	ldr	r2, [r7, #16]
 8000ab6:	4313      	orrs	r3, r2
 8000ab8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	693a      	ldr	r2, [r7, #16]
 8000abe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ace:	43db      	mvns	r3, r3
 8000ad0:	693a      	ldr	r2, [r7, #16]
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	091b      	lsrs	r3, r3, #4
 8000adc:	f003 0201 	and.w	r2, r3, #1
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	693a      	ldr	r2, [r7, #16]
 8000af0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	f003 0303 	and.w	r3, r3, #3
 8000afa:	2b03      	cmp	r3, #3
 8000afc:	d017      	beq.n	8000b2e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	68db      	ldr	r3, [r3, #12]
 8000b02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	005b      	lsls	r3, r3, #1
 8000b08:	2203      	movs	r2, #3
 8000b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0e:	43db      	mvns	r3, r3
 8000b10:	693a      	ldr	r2, [r7, #16]
 8000b12:	4013      	ands	r3, r2
 8000b14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	689a      	ldr	r2, [r3, #8]
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	005b      	lsls	r3, r3, #1
 8000b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b22:	693a      	ldr	r2, [r7, #16]
 8000b24:	4313      	orrs	r3, r2
 8000b26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	f003 0303 	and.w	r3, r3, #3
 8000b36:	2b02      	cmp	r3, #2
 8000b38:	d123      	bne.n	8000b82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	08da      	lsrs	r2, r3, #3
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	3208      	adds	r2, #8
 8000b42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	f003 0307 	and.w	r3, r3, #7
 8000b4e:	009b      	lsls	r3, r3, #2
 8000b50:	220f      	movs	r2, #15
 8000b52:	fa02 f303 	lsl.w	r3, r2, r3
 8000b56:	43db      	mvns	r3, r3
 8000b58:	693a      	ldr	r2, [r7, #16]
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	691a      	ldr	r2, [r3, #16]
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	f003 0307 	and.w	r3, r3, #7
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6e:	693a      	ldr	r2, [r7, #16]
 8000b70:	4313      	orrs	r3, r2
 8000b72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	08da      	lsrs	r2, r3, #3
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	3208      	adds	r2, #8
 8000b7c:	6939      	ldr	r1, [r7, #16]
 8000b7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	2203      	movs	r2, #3
 8000b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b92:	43db      	mvns	r3, r3
 8000b94:	693a      	ldr	r2, [r7, #16]
 8000b96:	4013      	ands	r3, r2
 8000b98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	f003 0203 	and.w	r2, r3, #3
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	005b      	lsls	r3, r3, #1
 8000ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	4313      	orrs	r3, r2
 8000bae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	693a      	ldr	r2, [r7, #16]
 8000bb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	f000 80a6 	beq.w	8000d10 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc4:	4b5b      	ldr	r3, [pc, #364]	; (8000d34 <HAL_GPIO_Init+0x2e4>)
 8000bc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bc8:	4a5a      	ldr	r2, [pc, #360]	; (8000d34 <HAL_GPIO_Init+0x2e4>)
 8000bca:	f043 0301 	orr.w	r3, r3, #1
 8000bce:	6613      	str	r3, [r2, #96]	; 0x60
 8000bd0:	4b58      	ldr	r3, [pc, #352]	; (8000d34 <HAL_GPIO_Init+0x2e4>)
 8000bd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bd4:	f003 0301 	and.w	r3, r3, #1
 8000bd8:	60bb      	str	r3, [r7, #8]
 8000bda:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000bdc:	4a56      	ldr	r2, [pc, #344]	; (8000d38 <HAL_GPIO_Init+0x2e8>)
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	089b      	lsrs	r3, r3, #2
 8000be2:	3302      	adds	r3, #2
 8000be4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000be8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	f003 0303 	and.w	r3, r3, #3
 8000bf0:	009b      	lsls	r3, r3, #2
 8000bf2:	220f      	movs	r2, #15
 8000bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf8:	43db      	mvns	r3, r3
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c06:	d01f      	beq.n	8000c48 <HAL_GPIO_Init+0x1f8>
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	4a4c      	ldr	r2, [pc, #304]	; (8000d3c <HAL_GPIO_Init+0x2ec>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d019      	beq.n	8000c44 <HAL_GPIO_Init+0x1f4>
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	4a4b      	ldr	r2, [pc, #300]	; (8000d40 <HAL_GPIO_Init+0x2f0>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d013      	beq.n	8000c40 <HAL_GPIO_Init+0x1f0>
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	4a4a      	ldr	r2, [pc, #296]	; (8000d44 <HAL_GPIO_Init+0x2f4>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d00d      	beq.n	8000c3c <HAL_GPIO_Init+0x1ec>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	4a49      	ldr	r2, [pc, #292]	; (8000d48 <HAL_GPIO_Init+0x2f8>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d007      	beq.n	8000c38 <HAL_GPIO_Init+0x1e8>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4a48      	ldr	r2, [pc, #288]	; (8000d4c <HAL_GPIO_Init+0x2fc>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d101      	bne.n	8000c34 <HAL_GPIO_Init+0x1e4>
 8000c30:	2305      	movs	r3, #5
 8000c32:	e00a      	b.n	8000c4a <HAL_GPIO_Init+0x1fa>
 8000c34:	2306      	movs	r3, #6
 8000c36:	e008      	b.n	8000c4a <HAL_GPIO_Init+0x1fa>
 8000c38:	2304      	movs	r3, #4
 8000c3a:	e006      	b.n	8000c4a <HAL_GPIO_Init+0x1fa>
 8000c3c:	2303      	movs	r3, #3
 8000c3e:	e004      	b.n	8000c4a <HAL_GPIO_Init+0x1fa>
 8000c40:	2302      	movs	r3, #2
 8000c42:	e002      	b.n	8000c4a <HAL_GPIO_Init+0x1fa>
 8000c44:	2301      	movs	r3, #1
 8000c46:	e000      	b.n	8000c4a <HAL_GPIO_Init+0x1fa>
 8000c48:	2300      	movs	r3, #0
 8000c4a:	697a      	ldr	r2, [r7, #20]
 8000c4c:	f002 0203 	and.w	r2, r2, #3
 8000c50:	0092      	lsls	r2, r2, #2
 8000c52:	4093      	lsls	r3, r2
 8000c54:	693a      	ldr	r2, [r7, #16]
 8000c56:	4313      	orrs	r3, r2
 8000c58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000c5a:	4937      	ldr	r1, [pc, #220]	; (8000d38 <HAL_GPIO_Init+0x2e8>)
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	089b      	lsrs	r3, r3, #2
 8000c60:	3302      	adds	r3, #2
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c68:	4b39      	ldr	r3, [pc, #228]	; (8000d50 <HAL_GPIO_Init+0x300>)
 8000c6a:	689b      	ldr	r3, [r3, #8]
 8000c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	43db      	mvns	r3, r3
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	4013      	ands	r3, r2
 8000c76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d003      	beq.n	8000c8c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000c84:	693a      	ldr	r2, [r7, #16]
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c8c:	4a30      	ldr	r2, [pc, #192]	; (8000d50 <HAL_GPIO_Init+0x300>)
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000c92:	4b2f      	ldr	r3, [pc, #188]	; (8000d50 <HAL_GPIO_Init+0x300>)
 8000c94:	68db      	ldr	r3, [r3, #12]
 8000c96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	43db      	mvns	r3, r3
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d003      	beq.n	8000cb6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000cb6:	4a26      	ldr	r2, [pc, #152]	; (8000d50 <HAL_GPIO_Init+0x300>)
 8000cb8:	693b      	ldr	r3, [r7, #16]
 8000cba:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000cbc:	4b24      	ldr	r3, [pc, #144]	; (8000d50 <HAL_GPIO_Init+0x300>)
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	43db      	mvns	r3, r3
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	4013      	ands	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d003      	beq.n	8000ce0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000cd8:	693a      	ldr	r2, [r7, #16]
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ce0:	4a1b      	ldr	r2, [pc, #108]	; (8000d50 <HAL_GPIO_Init+0x300>)
 8000ce2:	693b      	ldr	r3, [r7, #16]
 8000ce4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000ce6:	4b1a      	ldr	r3, [pc, #104]	; (8000d50 <HAL_GPIO_Init+0x300>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	43db      	mvns	r3, r3
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d003      	beq.n	8000d0a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d0a:	4a11      	ldr	r2, [pc, #68]	; (8000d50 <HAL_GPIO_Init+0x300>)
 8000d0c:	693b      	ldr	r3, [r7, #16]
 8000d0e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	3301      	adds	r3, #1
 8000d14:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	f47f ae9d 	bne.w	8000a60 <HAL_GPIO_Init+0x10>
  }
}
 8000d26:	bf00      	nop
 8000d28:	bf00      	nop
 8000d2a:	371c      	adds	r7, #28
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	40021000 	.word	0x40021000
 8000d38:	40010000 	.word	0x40010000
 8000d3c:	48000400 	.word	0x48000400
 8000d40:	48000800 	.word	0x48000800
 8000d44:	48000c00 	.word	0x48000c00
 8000d48:	48001000 	.word	0x48001000
 8000d4c:	48001400 	.word	0x48001400
 8000d50:	40010400 	.word	0x40010400

08000d54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	460b      	mov	r3, r1
 8000d5e:	807b      	strh	r3, [r7, #2]
 8000d60:	4613      	mov	r3, r2
 8000d62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d64:	787b      	ldrb	r3, [r7, #1]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d003      	beq.n	8000d72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d6a:	887a      	ldrh	r2, [r7, #2]
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d70:	e002      	b.n	8000d78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d72:	887a      	ldrh	r2, [r7, #2]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d78:	bf00      	nop
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000d8e:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d90:	695a      	ldr	r2, [r3, #20]
 8000d92:	88fb      	ldrh	r3, [r7, #6]
 8000d94:	4013      	ands	r3, r2
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d006      	beq.n	8000da8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000d9a:	4a05      	ldr	r2, [pc, #20]	; (8000db0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d9c:	88fb      	ldrh	r3, [r7, #6]
 8000d9e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000da0:	88fb      	ldrh	r3, [r7, #6]
 8000da2:	4618      	mov	r0, r3
 8000da4:	f000 f806 	bl	8000db4 <HAL_GPIO_EXTI_Callback>
  }
}
 8000da8:	bf00      	nop
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40010400 	.word	0x40010400

08000db4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000dbe:	bf00      	nop
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
	...

08000dcc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b085      	sub	sp, #20
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d141      	bne.n	8000e5e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000dda:	4b4b      	ldr	r3, [pc, #300]	; (8000f08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000de2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000de6:	d131      	bne.n	8000e4c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000de8:	4b47      	ldr	r3, [pc, #284]	; (8000f08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000dee:	4a46      	ldr	r2, [pc, #280]	; (8000f08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000df0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000df4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000df8:	4b43      	ldr	r3, [pc, #268]	; (8000f08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e00:	4a41      	ldr	r2, [pc, #260]	; (8000f08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e06:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000e08:	4b40      	ldr	r3, [pc, #256]	; (8000f0c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2232      	movs	r2, #50	; 0x32
 8000e0e:	fb02 f303 	mul.w	r3, r2, r3
 8000e12:	4a3f      	ldr	r2, [pc, #252]	; (8000f10 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000e14:	fba2 2303 	umull	r2, r3, r2, r3
 8000e18:	0c9b      	lsrs	r3, r3, #18
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e1e:	e002      	b.n	8000e26 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	3b01      	subs	r3, #1
 8000e24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e26:	4b38      	ldr	r3, [pc, #224]	; (8000f08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e28:	695b      	ldr	r3, [r3, #20]
 8000e2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e32:	d102      	bne.n	8000e3a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d1f2      	bne.n	8000e20 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e3a:	4b33      	ldr	r3, [pc, #204]	; (8000f08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e3c:	695b      	ldr	r3, [r3, #20]
 8000e3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e46:	d158      	bne.n	8000efa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	e057      	b.n	8000efc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000e4c:	4b2e      	ldr	r3, [pc, #184]	; (8000f08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e52:	4a2d      	ldr	r2, [pc, #180]	; (8000f08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e58:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000e5c:	e04d      	b.n	8000efa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e64:	d141      	bne.n	8000eea <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e66:	4b28      	ldr	r3, [pc, #160]	; (8000f08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e72:	d131      	bne.n	8000ed8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000e74:	4b24      	ldr	r3, [pc, #144]	; (8000f08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e7a:	4a23      	ldr	r2, [pc, #140]	; (8000f08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e80:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e84:	4b20      	ldr	r3, [pc, #128]	; (8000f08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e8c:	4a1e      	ldr	r2, [pc, #120]	; (8000f08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e92:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000e94:	4b1d      	ldr	r3, [pc, #116]	; (8000f0c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2232      	movs	r2, #50	; 0x32
 8000e9a:	fb02 f303 	mul.w	r3, r2, r3
 8000e9e:	4a1c      	ldr	r2, [pc, #112]	; (8000f10 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea4:	0c9b      	lsrs	r3, r3, #18
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000eaa:	e002      	b.n	8000eb2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	3b01      	subs	r3, #1
 8000eb0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000eb2:	4b15      	ldr	r3, [pc, #84]	; (8000f08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000eb4:	695b      	ldr	r3, [r3, #20]
 8000eb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000eba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ebe:	d102      	bne.n	8000ec6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d1f2      	bne.n	8000eac <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000ec6:	4b10      	ldr	r3, [pc, #64]	; (8000f08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ec8:	695b      	ldr	r3, [r3, #20]
 8000eca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ece:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ed2:	d112      	bne.n	8000efa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	e011      	b.n	8000efc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000ed8:	4b0b      	ldr	r3, [pc, #44]	; (8000f08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000eda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ede:	4a0a      	ldr	r2, [pc, #40]	; (8000f08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ee0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ee4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000ee8:	e007      	b.n	8000efa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000eea:	4b07      	ldr	r3, [pc, #28]	; (8000f08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000ef2:	4a05      	ldr	r2, [pc, #20]	; (8000f08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ef4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ef8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8000efa:	2300      	movs	r3, #0
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3714      	adds	r7, #20
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	40007000 	.word	0x40007000
 8000f0c:	20000000 	.word	0x20000000
 8000f10:	431bde83 	.word	0x431bde83

08000f14 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000f18:	4b05      	ldr	r3, [pc, #20]	; (8000f30 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	4a04      	ldr	r2, [pc, #16]	; (8000f30 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000f1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f22:	6093      	str	r3, [r2, #8]
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	40007000 	.word	0x40007000

08000f34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b088      	sub	sp, #32
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d101      	bne.n	8000f46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e306      	b.n	8001554 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d075      	beq.n	800103e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f52:	4b97      	ldr	r3, [pc, #604]	; (80011b0 <HAL_RCC_OscConfig+0x27c>)
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	f003 030c 	and.w	r3, r3, #12
 8000f5a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f5c:	4b94      	ldr	r3, [pc, #592]	; (80011b0 <HAL_RCC_OscConfig+0x27c>)
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	f003 0303 	and.w	r3, r3, #3
 8000f64:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	2b0c      	cmp	r3, #12
 8000f6a:	d102      	bne.n	8000f72 <HAL_RCC_OscConfig+0x3e>
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	2b03      	cmp	r3, #3
 8000f70:	d002      	beq.n	8000f78 <HAL_RCC_OscConfig+0x44>
 8000f72:	69bb      	ldr	r3, [r7, #24]
 8000f74:	2b08      	cmp	r3, #8
 8000f76:	d10b      	bne.n	8000f90 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f78:	4b8d      	ldr	r3, [pc, #564]	; (80011b0 <HAL_RCC_OscConfig+0x27c>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d05b      	beq.n	800103c <HAL_RCC_OscConfig+0x108>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d157      	bne.n	800103c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	e2e1      	b.n	8001554 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f98:	d106      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x74>
 8000f9a:	4b85      	ldr	r3, [pc, #532]	; (80011b0 <HAL_RCC_OscConfig+0x27c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a84      	ldr	r2, [pc, #528]	; (80011b0 <HAL_RCC_OscConfig+0x27c>)
 8000fa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fa4:	6013      	str	r3, [r2, #0]
 8000fa6:	e01d      	b.n	8000fe4 <HAL_RCC_OscConfig+0xb0>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fb0:	d10c      	bne.n	8000fcc <HAL_RCC_OscConfig+0x98>
 8000fb2:	4b7f      	ldr	r3, [pc, #508]	; (80011b0 <HAL_RCC_OscConfig+0x27c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a7e      	ldr	r2, [pc, #504]	; (80011b0 <HAL_RCC_OscConfig+0x27c>)
 8000fb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fbc:	6013      	str	r3, [r2, #0]
 8000fbe:	4b7c      	ldr	r3, [pc, #496]	; (80011b0 <HAL_RCC_OscConfig+0x27c>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a7b      	ldr	r2, [pc, #492]	; (80011b0 <HAL_RCC_OscConfig+0x27c>)
 8000fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fc8:	6013      	str	r3, [r2, #0]
 8000fca:	e00b      	b.n	8000fe4 <HAL_RCC_OscConfig+0xb0>
 8000fcc:	4b78      	ldr	r3, [pc, #480]	; (80011b0 <HAL_RCC_OscConfig+0x27c>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a77      	ldr	r2, [pc, #476]	; (80011b0 <HAL_RCC_OscConfig+0x27c>)
 8000fd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fd6:	6013      	str	r3, [r2, #0]
 8000fd8:	4b75      	ldr	r3, [pc, #468]	; (80011b0 <HAL_RCC_OscConfig+0x27c>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a74      	ldr	r2, [pc, #464]	; (80011b0 <HAL_RCC_OscConfig+0x27c>)
 8000fde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fe2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d013      	beq.n	8001014 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fec:	f7ff fc44 	bl	8000878 <HAL_GetTick>
 8000ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000ff2:	e008      	b.n	8001006 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ff4:	f7ff fc40 	bl	8000878 <HAL_GetTick>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	2b64      	cmp	r3, #100	; 0x64
 8001000:	d901      	bls.n	8001006 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001002:	2303      	movs	r3, #3
 8001004:	e2a6      	b.n	8001554 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001006:	4b6a      	ldr	r3, [pc, #424]	; (80011b0 <HAL_RCC_OscConfig+0x27c>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800100e:	2b00      	cmp	r3, #0
 8001010:	d0f0      	beq.n	8000ff4 <HAL_RCC_OscConfig+0xc0>
 8001012:	e014      	b.n	800103e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001014:	f7ff fc30 	bl	8000878 <HAL_GetTick>
 8001018:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800101a:	e008      	b.n	800102e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800101c:	f7ff fc2c 	bl	8000878 <HAL_GetTick>
 8001020:	4602      	mov	r2, r0
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	2b64      	cmp	r3, #100	; 0x64
 8001028:	d901      	bls.n	800102e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800102a:	2303      	movs	r3, #3
 800102c:	e292      	b.n	8001554 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800102e:	4b60      	ldr	r3, [pc, #384]	; (80011b0 <HAL_RCC_OscConfig+0x27c>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001036:	2b00      	cmp	r3, #0
 8001038:	d1f0      	bne.n	800101c <HAL_RCC_OscConfig+0xe8>
 800103a:	e000      	b.n	800103e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800103c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f003 0302 	and.w	r3, r3, #2
 8001046:	2b00      	cmp	r3, #0
 8001048:	d075      	beq.n	8001136 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800104a:	4b59      	ldr	r3, [pc, #356]	; (80011b0 <HAL_RCC_OscConfig+0x27c>)
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	f003 030c 	and.w	r3, r3, #12
 8001052:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001054:	4b56      	ldr	r3, [pc, #344]	; (80011b0 <HAL_RCC_OscConfig+0x27c>)
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	f003 0303 	and.w	r3, r3, #3
 800105c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	2b0c      	cmp	r3, #12
 8001062:	d102      	bne.n	800106a <HAL_RCC_OscConfig+0x136>
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	2b02      	cmp	r3, #2
 8001068:	d002      	beq.n	8001070 <HAL_RCC_OscConfig+0x13c>
 800106a:	69bb      	ldr	r3, [r7, #24]
 800106c:	2b04      	cmp	r3, #4
 800106e:	d11f      	bne.n	80010b0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001070:	4b4f      	ldr	r3, [pc, #316]	; (80011b0 <HAL_RCC_OscConfig+0x27c>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001078:	2b00      	cmp	r3, #0
 800107a:	d005      	beq.n	8001088 <HAL_RCC_OscConfig+0x154>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d101      	bne.n	8001088 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001084:	2301      	movs	r3, #1
 8001086:	e265      	b.n	8001554 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001088:	4b49      	ldr	r3, [pc, #292]	; (80011b0 <HAL_RCC_OscConfig+0x27c>)
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	691b      	ldr	r3, [r3, #16]
 8001094:	061b      	lsls	r3, r3, #24
 8001096:	4946      	ldr	r1, [pc, #280]	; (80011b0 <HAL_RCC_OscConfig+0x27c>)
 8001098:	4313      	orrs	r3, r2
 800109a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800109c:	4b45      	ldr	r3, [pc, #276]	; (80011b4 <HAL_RCC_OscConfig+0x280>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff faef 	bl	8000684 <HAL_InitTick>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d043      	beq.n	8001134 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
 80010ae:	e251      	b.n	8001554 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d023      	beq.n	8001100 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010b8:	4b3d      	ldr	r3, [pc, #244]	; (80011b0 <HAL_RCC_OscConfig+0x27c>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a3c      	ldr	r2, [pc, #240]	; (80011b0 <HAL_RCC_OscConfig+0x27c>)
 80010be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010c4:	f7ff fbd8 	bl	8000878 <HAL_GetTick>
 80010c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010ca:	e008      	b.n	80010de <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010cc:	f7ff fbd4 	bl	8000878 <HAL_GetTick>
 80010d0:	4602      	mov	r2, r0
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	d901      	bls.n	80010de <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80010da:	2303      	movs	r3, #3
 80010dc:	e23a      	b.n	8001554 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010de:	4b34      	ldr	r3, [pc, #208]	; (80011b0 <HAL_RCC_OscConfig+0x27c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d0f0      	beq.n	80010cc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ea:	4b31      	ldr	r3, [pc, #196]	; (80011b0 <HAL_RCC_OscConfig+0x27c>)
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	691b      	ldr	r3, [r3, #16]
 80010f6:	061b      	lsls	r3, r3, #24
 80010f8:	492d      	ldr	r1, [pc, #180]	; (80011b0 <HAL_RCC_OscConfig+0x27c>)
 80010fa:	4313      	orrs	r3, r2
 80010fc:	604b      	str	r3, [r1, #4]
 80010fe:	e01a      	b.n	8001136 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001100:	4b2b      	ldr	r3, [pc, #172]	; (80011b0 <HAL_RCC_OscConfig+0x27c>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a2a      	ldr	r2, [pc, #168]	; (80011b0 <HAL_RCC_OscConfig+0x27c>)
 8001106:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800110a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800110c:	f7ff fbb4 	bl	8000878 <HAL_GetTick>
 8001110:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001112:	e008      	b.n	8001126 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001114:	f7ff fbb0 	bl	8000878 <HAL_GetTick>
 8001118:	4602      	mov	r2, r0
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	2b02      	cmp	r3, #2
 8001120:	d901      	bls.n	8001126 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001122:	2303      	movs	r3, #3
 8001124:	e216      	b.n	8001554 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001126:	4b22      	ldr	r3, [pc, #136]	; (80011b0 <HAL_RCC_OscConfig+0x27c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800112e:	2b00      	cmp	r3, #0
 8001130:	d1f0      	bne.n	8001114 <HAL_RCC_OscConfig+0x1e0>
 8001132:	e000      	b.n	8001136 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001134:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f003 0308 	and.w	r3, r3, #8
 800113e:	2b00      	cmp	r3, #0
 8001140:	d041      	beq.n	80011c6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	695b      	ldr	r3, [r3, #20]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d01c      	beq.n	8001184 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800114a:	4b19      	ldr	r3, [pc, #100]	; (80011b0 <HAL_RCC_OscConfig+0x27c>)
 800114c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001150:	4a17      	ldr	r2, [pc, #92]	; (80011b0 <HAL_RCC_OscConfig+0x27c>)
 8001152:	f043 0301 	orr.w	r3, r3, #1
 8001156:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800115a:	f7ff fb8d 	bl	8000878 <HAL_GetTick>
 800115e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001160:	e008      	b.n	8001174 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001162:	f7ff fb89 	bl	8000878 <HAL_GetTick>
 8001166:	4602      	mov	r2, r0
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	2b02      	cmp	r3, #2
 800116e:	d901      	bls.n	8001174 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001170:	2303      	movs	r3, #3
 8001172:	e1ef      	b.n	8001554 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001174:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <HAL_RCC_OscConfig+0x27c>)
 8001176:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800117a:	f003 0302 	and.w	r3, r3, #2
 800117e:	2b00      	cmp	r3, #0
 8001180:	d0ef      	beq.n	8001162 <HAL_RCC_OscConfig+0x22e>
 8001182:	e020      	b.n	80011c6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001184:	4b0a      	ldr	r3, [pc, #40]	; (80011b0 <HAL_RCC_OscConfig+0x27c>)
 8001186:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800118a:	4a09      	ldr	r2, [pc, #36]	; (80011b0 <HAL_RCC_OscConfig+0x27c>)
 800118c:	f023 0301 	bic.w	r3, r3, #1
 8001190:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001194:	f7ff fb70 	bl	8000878 <HAL_GetTick>
 8001198:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800119a:	e00d      	b.n	80011b8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800119c:	f7ff fb6c 	bl	8000878 <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d906      	bls.n	80011b8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80011aa:	2303      	movs	r3, #3
 80011ac:	e1d2      	b.n	8001554 <HAL_RCC_OscConfig+0x620>
 80011ae:	bf00      	nop
 80011b0:	40021000 	.word	0x40021000
 80011b4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011b8:	4b8c      	ldr	r3, [pc, #560]	; (80013ec <HAL_RCC_OscConfig+0x4b8>)
 80011ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d1ea      	bne.n	800119c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 0304 	and.w	r3, r3, #4
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	f000 80a6 	beq.w	8001320 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011d4:	2300      	movs	r3, #0
 80011d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80011d8:	4b84      	ldr	r3, [pc, #528]	; (80013ec <HAL_RCC_OscConfig+0x4b8>)
 80011da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d101      	bne.n	80011e8 <HAL_RCC_OscConfig+0x2b4>
 80011e4:	2301      	movs	r3, #1
 80011e6:	e000      	b.n	80011ea <HAL_RCC_OscConfig+0x2b6>
 80011e8:	2300      	movs	r3, #0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d00d      	beq.n	800120a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011ee:	4b7f      	ldr	r3, [pc, #508]	; (80013ec <HAL_RCC_OscConfig+0x4b8>)
 80011f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f2:	4a7e      	ldr	r2, [pc, #504]	; (80013ec <HAL_RCC_OscConfig+0x4b8>)
 80011f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f8:	6593      	str	r3, [r2, #88]	; 0x58
 80011fa:	4b7c      	ldr	r3, [pc, #496]	; (80013ec <HAL_RCC_OscConfig+0x4b8>)
 80011fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001206:	2301      	movs	r3, #1
 8001208:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800120a:	4b79      	ldr	r3, [pc, #484]	; (80013f0 <HAL_RCC_OscConfig+0x4bc>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001212:	2b00      	cmp	r3, #0
 8001214:	d118      	bne.n	8001248 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001216:	4b76      	ldr	r3, [pc, #472]	; (80013f0 <HAL_RCC_OscConfig+0x4bc>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a75      	ldr	r2, [pc, #468]	; (80013f0 <HAL_RCC_OscConfig+0x4bc>)
 800121c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001220:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001222:	f7ff fb29 	bl	8000878 <HAL_GetTick>
 8001226:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001228:	e008      	b.n	800123c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800122a:	f7ff fb25 	bl	8000878 <HAL_GetTick>
 800122e:	4602      	mov	r2, r0
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	2b02      	cmp	r3, #2
 8001236:	d901      	bls.n	800123c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001238:	2303      	movs	r3, #3
 800123a:	e18b      	b.n	8001554 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800123c:	4b6c      	ldr	r3, [pc, #432]	; (80013f0 <HAL_RCC_OscConfig+0x4bc>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001244:	2b00      	cmp	r3, #0
 8001246:	d0f0      	beq.n	800122a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d108      	bne.n	8001262 <HAL_RCC_OscConfig+0x32e>
 8001250:	4b66      	ldr	r3, [pc, #408]	; (80013ec <HAL_RCC_OscConfig+0x4b8>)
 8001252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001256:	4a65      	ldr	r2, [pc, #404]	; (80013ec <HAL_RCC_OscConfig+0x4b8>)
 8001258:	f043 0301 	orr.w	r3, r3, #1
 800125c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001260:	e024      	b.n	80012ac <HAL_RCC_OscConfig+0x378>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	2b05      	cmp	r3, #5
 8001268:	d110      	bne.n	800128c <HAL_RCC_OscConfig+0x358>
 800126a:	4b60      	ldr	r3, [pc, #384]	; (80013ec <HAL_RCC_OscConfig+0x4b8>)
 800126c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001270:	4a5e      	ldr	r2, [pc, #376]	; (80013ec <HAL_RCC_OscConfig+0x4b8>)
 8001272:	f043 0304 	orr.w	r3, r3, #4
 8001276:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800127a:	4b5c      	ldr	r3, [pc, #368]	; (80013ec <HAL_RCC_OscConfig+0x4b8>)
 800127c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001280:	4a5a      	ldr	r2, [pc, #360]	; (80013ec <HAL_RCC_OscConfig+0x4b8>)
 8001282:	f043 0301 	orr.w	r3, r3, #1
 8001286:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800128a:	e00f      	b.n	80012ac <HAL_RCC_OscConfig+0x378>
 800128c:	4b57      	ldr	r3, [pc, #348]	; (80013ec <HAL_RCC_OscConfig+0x4b8>)
 800128e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001292:	4a56      	ldr	r2, [pc, #344]	; (80013ec <HAL_RCC_OscConfig+0x4b8>)
 8001294:	f023 0301 	bic.w	r3, r3, #1
 8001298:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800129c:	4b53      	ldr	r3, [pc, #332]	; (80013ec <HAL_RCC_OscConfig+0x4b8>)
 800129e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012a2:	4a52      	ldr	r2, [pc, #328]	; (80013ec <HAL_RCC_OscConfig+0x4b8>)
 80012a4:	f023 0304 	bic.w	r3, r3, #4
 80012a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d016      	beq.n	80012e2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012b4:	f7ff fae0 	bl	8000878 <HAL_GetTick>
 80012b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012ba:	e00a      	b.n	80012d2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012bc:	f7ff fadc 	bl	8000878 <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d901      	bls.n	80012d2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80012ce:	2303      	movs	r3, #3
 80012d0:	e140      	b.n	8001554 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012d2:	4b46      	ldr	r3, [pc, #280]	; (80013ec <HAL_RCC_OscConfig+0x4b8>)
 80012d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012d8:	f003 0302 	and.w	r3, r3, #2
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d0ed      	beq.n	80012bc <HAL_RCC_OscConfig+0x388>
 80012e0:	e015      	b.n	800130e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012e2:	f7ff fac9 	bl	8000878 <HAL_GetTick>
 80012e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012e8:	e00a      	b.n	8001300 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012ea:	f7ff fac5 	bl	8000878 <HAL_GetTick>
 80012ee:	4602      	mov	r2, r0
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d901      	bls.n	8001300 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e129      	b.n	8001554 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001300:	4b3a      	ldr	r3, [pc, #232]	; (80013ec <HAL_RCC_OscConfig+0x4b8>)
 8001302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	2b00      	cmp	r3, #0
 800130c:	d1ed      	bne.n	80012ea <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800130e:	7ffb      	ldrb	r3, [r7, #31]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d105      	bne.n	8001320 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001314:	4b35      	ldr	r3, [pc, #212]	; (80013ec <HAL_RCC_OscConfig+0x4b8>)
 8001316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001318:	4a34      	ldr	r2, [pc, #208]	; (80013ec <HAL_RCC_OscConfig+0x4b8>)
 800131a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800131e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 0320 	and.w	r3, r3, #32
 8001328:	2b00      	cmp	r3, #0
 800132a:	d03c      	beq.n	80013a6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d01c      	beq.n	800136e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001334:	4b2d      	ldr	r3, [pc, #180]	; (80013ec <HAL_RCC_OscConfig+0x4b8>)
 8001336:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800133a:	4a2c      	ldr	r2, [pc, #176]	; (80013ec <HAL_RCC_OscConfig+0x4b8>)
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001344:	f7ff fa98 	bl	8000878 <HAL_GetTick>
 8001348:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800134a:	e008      	b.n	800135e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800134c:	f7ff fa94 	bl	8000878 <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	2b02      	cmp	r3, #2
 8001358:	d901      	bls.n	800135e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e0fa      	b.n	8001554 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800135e:	4b23      	ldr	r3, [pc, #140]	; (80013ec <HAL_RCC_OscConfig+0x4b8>)
 8001360:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001364:	f003 0302 	and.w	r3, r3, #2
 8001368:	2b00      	cmp	r3, #0
 800136a:	d0ef      	beq.n	800134c <HAL_RCC_OscConfig+0x418>
 800136c:	e01b      	b.n	80013a6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800136e:	4b1f      	ldr	r3, [pc, #124]	; (80013ec <HAL_RCC_OscConfig+0x4b8>)
 8001370:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001374:	4a1d      	ldr	r2, [pc, #116]	; (80013ec <HAL_RCC_OscConfig+0x4b8>)
 8001376:	f023 0301 	bic.w	r3, r3, #1
 800137a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800137e:	f7ff fa7b 	bl	8000878 <HAL_GetTick>
 8001382:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001384:	e008      	b.n	8001398 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001386:	f7ff fa77 	bl	8000878 <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	2b02      	cmp	r3, #2
 8001392:	d901      	bls.n	8001398 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e0dd      	b.n	8001554 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001398:	4b14      	ldr	r3, [pc, #80]	; (80013ec <HAL_RCC_OscConfig+0x4b8>)
 800139a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d1ef      	bne.n	8001386 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	f000 80d1 	beq.w	8001552 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013b0:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <HAL_RCC_OscConfig+0x4b8>)
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	f003 030c 	and.w	r3, r3, #12
 80013b8:	2b0c      	cmp	r3, #12
 80013ba:	f000 808b 	beq.w	80014d4 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	69db      	ldr	r3, [r3, #28]
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d15e      	bne.n	8001484 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013c6:	4b09      	ldr	r3, [pc, #36]	; (80013ec <HAL_RCC_OscConfig+0x4b8>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a08      	ldr	r2, [pc, #32]	; (80013ec <HAL_RCC_OscConfig+0x4b8>)
 80013cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013d2:	f7ff fa51 	bl	8000878 <HAL_GetTick>
 80013d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013d8:	e00c      	b.n	80013f4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013da:	f7ff fa4d 	bl	8000878 <HAL_GetTick>
 80013de:	4602      	mov	r2, r0
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d905      	bls.n	80013f4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80013e8:	2303      	movs	r3, #3
 80013ea:	e0b3      	b.n	8001554 <HAL_RCC_OscConfig+0x620>
 80013ec:	40021000 	.word	0x40021000
 80013f0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013f4:	4b59      	ldr	r3, [pc, #356]	; (800155c <HAL_RCC_OscConfig+0x628>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d1ec      	bne.n	80013da <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001400:	4b56      	ldr	r3, [pc, #344]	; (800155c <HAL_RCC_OscConfig+0x628>)
 8001402:	68da      	ldr	r2, [r3, #12]
 8001404:	4b56      	ldr	r3, [pc, #344]	; (8001560 <HAL_RCC_OscConfig+0x62c>)
 8001406:	4013      	ands	r3, r2
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	6a11      	ldr	r1, [r2, #32]
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001410:	3a01      	subs	r2, #1
 8001412:	0112      	lsls	r2, r2, #4
 8001414:	4311      	orrs	r1, r2
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800141a:	0212      	lsls	r2, r2, #8
 800141c:	4311      	orrs	r1, r2
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001422:	0852      	lsrs	r2, r2, #1
 8001424:	3a01      	subs	r2, #1
 8001426:	0552      	lsls	r2, r2, #21
 8001428:	4311      	orrs	r1, r2
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800142e:	0852      	lsrs	r2, r2, #1
 8001430:	3a01      	subs	r2, #1
 8001432:	0652      	lsls	r2, r2, #25
 8001434:	4311      	orrs	r1, r2
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800143a:	06d2      	lsls	r2, r2, #27
 800143c:	430a      	orrs	r2, r1
 800143e:	4947      	ldr	r1, [pc, #284]	; (800155c <HAL_RCC_OscConfig+0x628>)
 8001440:	4313      	orrs	r3, r2
 8001442:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001444:	4b45      	ldr	r3, [pc, #276]	; (800155c <HAL_RCC_OscConfig+0x628>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a44      	ldr	r2, [pc, #272]	; (800155c <HAL_RCC_OscConfig+0x628>)
 800144a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800144e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001450:	4b42      	ldr	r3, [pc, #264]	; (800155c <HAL_RCC_OscConfig+0x628>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	4a41      	ldr	r2, [pc, #260]	; (800155c <HAL_RCC_OscConfig+0x628>)
 8001456:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800145a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800145c:	f7ff fa0c 	bl	8000878 <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001464:	f7ff fa08 	bl	8000878 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b02      	cmp	r3, #2
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e06e      	b.n	8001554 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001476:	4b39      	ldr	r3, [pc, #228]	; (800155c <HAL_RCC_OscConfig+0x628>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d0f0      	beq.n	8001464 <HAL_RCC_OscConfig+0x530>
 8001482:	e066      	b.n	8001552 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001484:	4b35      	ldr	r3, [pc, #212]	; (800155c <HAL_RCC_OscConfig+0x628>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a34      	ldr	r2, [pc, #208]	; (800155c <HAL_RCC_OscConfig+0x628>)
 800148a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800148e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001490:	4b32      	ldr	r3, [pc, #200]	; (800155c <HAL_RCC_OscConfig+0x628>)
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	4a31      	ldr	r2, [pc, #196]	; (800155c <HAL_RCC_OscConfig+0x628>)
 8001496:	f023 0303 	bic.w	r3, r3, #3
 800149a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800149c:	4b2f      	ldr	r3, [pc, #188]	; (800155c <HAL_RCC_OscConfig+0x628>)
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	4a2e      	ldr	r2, [pc, #184]	; (800155c <HAL_RCC_OscConfig+0x628>)
 80014a2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80014a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014aa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ac:	f7ff f9e4 	bl	8000878 <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014b2:	e008      	b.n	80014c6 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014b4:	f7ff f9e0 	bl	8000878 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e046      	b.n	8001554 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014c6:	4b25      	ldr	r3, [pc, #148]	; (800155c <HAL_RCC_OscConfig+0x628>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1f0      	bne.n	80014b4 <HAL_RCC_OscConfig+0x580>
 80014d2:	e03e      	b.n	8001552 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	69db      	ldr	r3, [r3, #28]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d101      	bne.n	80014e0 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e039      	b.n	8001554 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80014e0:	4b1e      	ldr	r3, [pc, #120]	; (800155c <HAL_RCC_OscConfig+0x628>)
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	f003 0203 	and.w	r2, r3, #3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a1b      	ldr	r3, [r3, #32]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d12c      	bne.n	800154e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fe:	3b01      	subs	r3, #1
 8001500:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001502:	429a      	cmp	r2, r3
 8001504:	d123      	bne.n	800154e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001510:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001512:	429a      	cmp	r2, r3
 8001514:	d11b      	bne.n	800154e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001520:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001522:	429a      	cmp	r2, r3
 8001524:	d113      	bne.n	800154e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001530:	085b      	lsrs	r3, r3, #1
 8001532:	3b01      	subs	r3, #1
 8001534:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001536:	429a      	cmp	r2, r3
 8001538:	d109      	bne.n	800154e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001544:	085b      	lsrs	r3, r3, #1
 8001546:	3b01      	subs	r3, #1
 8001548:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800154a:	429a      	cmp	r2, r3
 800154c:	d001      	beq.n	8001552 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e000      	b.n	8001554 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8001552:	2300      	movs	r3, #0
}
 8001554:	4618      	mov	r0, r3
 8001556:	3720      	adds	r7, #32
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	40021000 	.word	0x40021000
 8001560:	019f800c 	.word	0x019f800c

08001564 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800156e:	2300      	movs	r3, #0
 8001570:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d101      	bne.n	800157c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e11e      	b.n	80017ba <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800157c:	4b91      	ldr	r3, [pc, #580]	; (80017c4 <HAL_RCC_ClockConfig+0x260>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 030f 	and.w	r3, r3, #15
 8001584:	683a      	ldr	r2, [r7, #0]
 8001586:	429a      	cmp	r2, r3
 8001588:	d910      	bls.n	80015ac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800158a:	4b8e      	ldr	r3, [pc, #568]	; (80017c4 <HAL_RCC_ClockConfig+0x260>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f023 020f 	bic.w	r2, r3, #15
 8001592:	498c      	ldr	r1, [pc, #560]	; (80017c4 <HAL_RCC_ClockConfig+0x260>)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	4313      	orrs	r3, r2
 8001598:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800159a:	4b8a      	ldr	r3, [pc, #552]	; (80017c4 <HAL_RCC_ClockConfig+0x260>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 030f 	and.w	r3, r3, #15
 80015a2:	683a      	ldr	r2, [r7, #0]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d001      	beq.n	80015ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e106      	b.n	80017ba <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0301 	and.w	r3, r3, #1
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d073      	beq.n	80016a0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	2b03      	cmp	r3, #3
 80015be:	d129      	bne.n	8001614 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015c0:	4b81      	ldr	r3, [pc, #516]	; (80017c8 <HAL_RCC_ClockConfig+0x264>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d101      	bne.n	80015d0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e0f4      	b.n	80017ba <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80015d0:	f000 f9ba 	bl	8001948 <RCC_GetSysClockFreqFromPLLSource>
 80015d4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	4a7c      	ldr	r2, [pc, #496]	; (80017cc <HAL_RCC_ClockConfig+0x268>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d93f      	bls.n	800165e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80015de:	4b7a      	ldr	r3, [pc, #488]	; (80017c8 <HAL_RCC_ClockConfig+0x264>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d009      	beq.n	80015fe <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d033      	beq.n	800165e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d12f      	bne.n	800165e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80015fe:	4b72      	ldr	r3, [pc, #456]	; (80017c8 <HAL_RCC_ClockConfig+0x264>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001606:	4a70      	ldr	r2, [pc, #448]	; (80017c8 <HAL_RCC_ClockConfig+0x264>)
 8001608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800160c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800160e:	2380      	movs	r3, #128	; 0x80
 8001610:	617b      	str	r3, [r7, #20]
 8001612:	e024      	b.n	800165e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	2b02      	cmp	r3, #2
 800161a:	d107      	bne.n	800162c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800161c:	4b6a      	ldr	r3, [pc, #424]	; (80017c8 <HAL_RCC_ClockConfig+0x264>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d109      	bne.n	800163c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e0c6      	b.n	80017ba <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800162c:	4b66      	ldr	r3, [pc, #408]	; (80017c8 <HAL_RCC_ClockConfig+0x264>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001634:	2b00      	cmp	r3, #0
 8001636:	d101      	bne.n	800163c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e0be      	b.n	80017ba <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800163c:	f000 f8ce 	bl	80017dc <HAL_RCC_GetSysClockFreq>
 8001640:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	4a61      	ldr	r2, [pc, #388]	; (80017cc <HAL_RCC_ClockConfig+0x268>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d909      	bls.n	800165e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800164a:	4b5f      	ldr	r3, [pc, #380]	; (80017c8 <HAL_RCC_ClockConfig+0x264>)
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001652:	4a5d      	ldr	r2, [pc, #372]	; (80017c8 <HAL_RCC_ClockConfig+0x264>)
 8001654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001658:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800165a:	2380      	movs	r3, #128	; 0x80
 800165c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800165e:	4b5a      	ldr	r3, [pc, #360]	; (80017c8 <HAL_RCC_ClockConfig+0x264>)
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	f023 0203 	bic.w	r2, r3, #3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	4957      	ldr	r1, [pc, #348]	; (80017c8 <HAL_RCC_ClockConfig+0x264>)
 800166c:	4313      	orrs	r3, r2
 800166e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001670:	f7ff f902 	bl	8000878 <HAL_GetTick>
 8001674:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001676:	e00a      	b.n	800168e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001678:	f7ff f8fe 	bl	8000878 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	f241 3288 	movw	r2, #5000	; 0x1388
 8001686:	4293      	cmp	r3, r2
 8001688:	d901      	bls.n	800168e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e095      	b.n	80017ba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800168e:	4b4e      	ldr	r3, [pc, #312]	; (80017c8 <HAL_RCC_ClockConfig+0x264>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f003 020c 	and.w	r2, r3, #12
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	429a      	cmp	r2, r3
 800169e:	d1eb      	bne.n	8001678 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d023      	beq.n	80016f4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0304 	and.w	r3, r3, #4
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d005      	beq.n	80016c4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016b8:	4b43      	ldr	r3, [pc, #268]	; (80017c8 <HAL_RCC_ClockConfig+0x264>)
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	4a42      	ldr	r2, [pc, #264]	; (80017c8 <HAL_RCC_ClockConfig+0x264>)
 80016be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80016c2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0308 	and.w	r3, r3, #8
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d007      	beq.n	80016e0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80016d0:	4b3d      	ldr	r3, [pc, #244]	; (80017c8 <HAL_RCC_ClockConfig+0x264>)
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80016d8:	4a3b      	ldr	r2, [pc, #236]	; (80017c8 <HAL_RCC_ClockConfig+0x264>)
 80016da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80016de:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016e0:	4b39      	ldr	r3, [pc, #228]	; (80017c8 <HAL_RCC_ClockConfig+0x264>)
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	4936      	ldr	r1, [pc, #216]	; (80017c8 <HAL_RCC_ClockConfig+0x264>)
 80016ee:	4313      	orrs	r3, r2
 80016f0:	608b      	str	r3, [r1, #8]
 80016f2:	e008      	b.n	8001706 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	2b80      	cmp	r3, #128	; 0x80
 80016f8:	d105      	bne.n	8001706 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80016fa:	4b33      	ldr	r3, [pc, #204]	; (80017c8 <HAL_RCC_ClockConfig+0x264>)
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	4a32      	ldr	r2, [pc, #200]	; (80017c8 <HAL_RCC_ClockConfig+0x264>)
 8001700:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001704:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001706:	4b2f      	ldr	r3, [pc, #188]	; (80017c4 <HAL_RCC_ClockConfig+0x260>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 030f 	and.w	r3, r3, #15
 800170e:	683a      	ldr	r2, [r7, #0]
 8001710:	429a      	cmp	r2, r3
 8001712:	d21d      	bcs.n	8001750 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001714:	4b2b      	ldr	r3, [pc, #172]	; (80017c4 <HAL_RCC_ClockConfig+0x260>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f023 020f 	bic.w	r2, r3, #15
 800171c:	4929      	ldr	r1, [pc, #164]	; (80017c4 <HAL_RCC_ClockConfig+0x260>)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	4313      	orrs	r3, r2
 8001722:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001724:	f7ff f8a8 	bl	8000878 <HAL_GetTick>
 8001728:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800172a:	e00a      	b.n	8001742 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800172c:	f7ff f8a4 	bl	8000878 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	f241 3288 	movw	r2, #5000	; 0x1388
 800173a:	4293      	cmp	r3, r2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e03b      	b.n	80017ba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001742:	4b20      	ldr	r3, [pc, #128]	; (80017c4 <HAL_RCC_ClockConfig+0x260>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 030f 	and.w	r3, r3, #15
 800174a:	683a      	ldr	r2, [r7, #0]
 800174c:	429a      	cmp	r2, r3
 800174e:	d1ed      	bne.n	800172c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0304 	and.w	r3, r3, #4
 8001758:	2b00      	cmp	r3, #0
 800175a:	d008      	beq.n	800176e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800175c:	4b1a      	ldr	r3, [pc, #104]	; (80017c8 <HAL_RCC_ClockConfig+0x264>)
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	4917      	ldr	r1, [pc, #92]	; (80017c8 <HAL_RCC_ClockConfig+0x264>)
 800176a:	4313      	orrs	r3, r2
 800176c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0308 	and.w	r3, r3, #8
 8001776:	2b00      	cmp	r3, #0
 8001778:	d009      	beq.n	800178e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800177a:	4b13      	ldr	r3, [pc, #76]	; (80017c8 <HAL_RCC_ClockConfig+0x264>)
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	691b      	ldr	r3, [r3, #16]
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	490f      	ldr	r1, [pc, #60]	; (80017c8 <HAL_RCC_ClockConfig+0x264>)
 800178a:	4313      	orrs	r3, r2
 800178c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800178e:	f000 f825 	bl	80017dc <HAL_RCC_GetSysClockFreq>
 8001792:	4602      	mov	r2, r0
 8001794:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <HAL_RCC_ClockConfig+0x264>)
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	091b      	lsrs	r3, r3, #4
 800179a:	f003 030f 	and.w	r3, r3, #15
 800179e:	490c      	ldr	r1, [pc, #48]	; (80017d0 <HAL_RCC_ClockConfig+0x26c>)
 80017a0:	5ccb      	ldrb	r3, [r1, r3]
 80017a2:	f003 031f 	and.w	r3, r3, #31
 80017a6:	fa22 f303 	lsr.w	r3, r2, r3
 80017aa:	4a0a      	ldr	r2, [pc, #40]	; (80017d4 <HAL_RCC_ClockConfig+0x270>)
 80017ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80017ae:	4b0a      	ldr	r3, [pc, #40]	; (80017d8 <HAL_RCC_ClockConfig+0x274>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7fe ff66 	bl	8000684 <HAL_InitTick>
 80017b8:	4603      	mov	r3, r0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3718      	adds	r7, #24
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40022000 	.word	0x40022000
 80017c8:	40021000 	.word	0x40021000
 80017cc:	04c4b400 	.word	0x04c4b400
 80017d0:	0800579c 	.word	0x0800579c
 80017d4:	20000000 	.word	0x20000000
 80017d8:	20000004 	.word	0x20000004

080017dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	b087      	sub	sp, #28
 80017e0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80017e2:	4b2c      	ldr	r3, [pc, #176]	; (8001894 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	f003 030c 	and.w	r3, r3, #12
 80017ea:	2b04      	cmp	r3, #4
 80017ec:	d102      	bne.n	80017f4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80017ee:	4b2a      	ldr	r3, [pc, #168]	; (8001898 <HAL_RCC_GetSysClockFreq+0xbc>)
 80017f0:	613b      	str	r3, [r7, #16]
 80017f2:	e047      	b.n	8001884 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80017f4:	4b27      	ldr	r3, [pc, #156]	; (8001894 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f003 030c 	and.w	r3, r3, #12
 80017fc:	2b08      	cmp	r3, #8
 80017fe:	d102      	bne.n	8001806 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001800:	4b26      	ldr	r3, [pc, #152]	; (800189c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001802:	613b      	str	r3, [r7, #16]
 8001804:	e03e      	b.n	8001884 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001806:	4b23      	ldr	r3, [pc, #140]	; (8001894 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	f003 030c 	and.w	r3, r3, #12
 800180e:	2b0c      	cmp	r3, #12
 8001810:	d136      	bne.n	8001880 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001812:	4b20      	ldr	r3, [pc, #128]	; (8001894 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	f003 0303 	and.w	r3, r3, #3
 800181a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800181c:	4b1d      	ldr	r3, [pc, #116]	; (8001894 <HAL_RCC_GetSysClockFreq+0xb8>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	091b      	lsrs	r3, r3, #4
 8001822:	f003 030f 	and.w	r3, r3, #15
 8001826:	3301      	adds	r3, #1
 8001828:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	2b03      	cmp	r3, #3
 800182e:	d10c      	bne.n	800184a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001830:	4a1a      	ldr	r2, [pc, #104]	; (800189c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	fbb2 f3f3 	udiv	r3, r2, r3
 8001838:	4a16      	ldr	r2, [pc, #88]	; (8001894 <HAL_RCC_GetSysClockFreq+0xb8>)
 800183a:	68d2      	ldr	r2, [r2, #12]
 800183c:	0a12      	lsrs	r2, r2, #8
 800183e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001842:	fb02 f303 	mul.w	r3, r2, r3
 8001846:	617b      	str	r3, [r7, #20]
      break;
 8001848:	e00c      	b.n	8001864 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800184a:	4a13      	ldr	r2, [pc, #76]	; (8001898 <HAL_RCC_GetSysClockFreq+0xbc>)
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001852:	4a10      	ldr	r2, [pc, #64]	; (8001894 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001854:	68d2      	ldr	r2, [r2, #12]
 8001856:	0a12      	lsrs	r2, r2, #8
 8001858:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800185c:	fb02 f303 	mul.w	r3, r2, r3
 8001860:	617b      	str	r3, [r7, #20]
      break;
 8001862:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001864:	4b0b      	ldr	r3, [pc, #44]	; (8001894 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	0e5b      	lsrs	r3, r3, #25
 800186a:	f003 0303 	and.w	r3, r3, #3
 800186e:	3301      	adds	r3, #1
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001874:	697a      	ldr	r2, [r7, #20]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	fbb2 f3f3 	udiv	r3, r2, r3
 800187c:	613b      	str	r3, [r7, #16]
 800187e:	e001      	b.n	8001884 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001880:	2300      	movs	r3, #0
 8001882:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001884:	693b      	ldr	r3, [r7, #16]
}
 8001886:	4618      	mov	r0, r3
 8001888:	371c      	adds	r7, #28
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	40021000 	.word	0x40021000
 8001898:	00f42400 	.word	0x00f42400
 800189c:	016e3600 	.word	0x016e3600

080018a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018a4:	4b03      	ldr	r3, [pc, #12]	; (80018b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80018a6:	681b      	ldr	r3, [r3, #0]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	20000000 	.word	0x20000000

080018b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80018bc:	f7ff fff0 	bl	80018a0 <HAL_RCC_GetHCLKFreq>
 80018c0:	4602      	mov	r2, r0
 80018c2:	4b06      	ldr	r3, [pc, #24]	; (80018dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	0a1b      	lsrs	r3, r3, #8
 80018c8:	f003 0307 	and.w	r3, r3, #7
 80018cc:	4904      	ldr	r1, [pc, #16]	; (80018e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80018ce:	5ccb      	ldrb	r3, [r1, r3]
 80018d0:	f003 031f 	and.w	r3, r3, #31
 80018d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018d8:	4618      	mov	r0, r3
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	40021000 	.word	0x40021000
 80018e0:	080057ac 	.word	0x080057ac

080018e4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	220f      	movs	r2, #15
 80018f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80018f4:	4b12      	ldr	r3, [pc, #72]	; (8001940 <HAL_RCC_GetClockConfig+0x5c>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	f003 0203 	and.w	r2, r3, #3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001900:	4b0f      	ldr	r3, [pc, #60]	; (8001940 <HAL_RCC_GetClockConfig+0x5c>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800190c:	4b0c      	ldr	r3, [pc, #48]	; (8001940 <HAL_RCC_GetClockConfig+0x5c>)
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001918:	4b09      	ldr	r3, [pc, #36]	; (8001940 <HAL_RCC_GetClockConfig+0x5c>)
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	08db      	lsrs	r3, r3, #3
 800191e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001926:	4b07      	ldr	r3, [pc, #28]	; (8001944 <HAL_RCC_GetClockConfig+0x60>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 020f 	and.w	r2, r3, #15
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	601a      	str	r2, [r3, #0]
}
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	40021000 	.word	0x40021000
 8001944:	40022000 	.word	0x40022000

08001948 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001948:	b480      	push	{r7}
 800194a:	b087      	sub	sp, #28
 800194c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800194e:	4b1e      	ldr	r3, [pc, #120]	; (80019c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	f003 0303 	and.w	r3, r3, #3
 8001956:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001958:	4b1b      	ldr	r3, [pc, #108]	; (80019c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	091b      	lsrs	r3, r3, #4
 800195e:	f003 030f 	and.w	r3, r3, #15
 8001962:	3301      	adds	r3, #1
 8001964:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	2b03      	cmp	r3, #3
 800196a:	d10c      	bne.n	8001986 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800196c:	4a17      	ldr	r2, [pc, #92]	; (80019cc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	fbb2 f3f3 	udiv	r3, r2, r3
 8001974:	4a14      	ldr	r2, [pc, #80]	; (80019c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001976:	68d2      	ldr	r2, [r2, #12]
 8001978:	0a12      	lsrs	r2, r2, #8
 800197a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800197e:	fb02 f303 	mul.w	r3, r2, r3
 8001982:	617b      	str	r3, [r7, #20]
    break;
 8001984:	e00c      	b.n	80019a0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001986:	4a12      	ldr	r2, [pc, #72]	; (80019d0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	fbb2 f3f3 	udiv	r3, r2, r3
 800198e:	4a0e      	ldr	r2, [pc, #56]	; (80019c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001990:	68d2      	ldr	r2, [r2, #12]
 8001992:	0a12      	lsrs	r2, r2, #8
 8001994:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001998:	fb02 f303 	mul.w	r3, r2, r3
 800199c:	617b      	str	r3, [r7, #20]
    break;
 800199e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80019a0:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	0e5b      	lsrs	r3, r3, #25
 80019a6:	f003 0303 	and.w	r3, r3, #3
 80019aa:	3301      	adds	r3, #1
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80019b0:	697a      	ldr	r2, [r7, #20]
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80019ba:	687b      	ldr	r3, [r7, #4]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	371c      	adds	r7, #28
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	40021000 	.word	0x40021000
 80019cc:	016e3600 	.word	0x016e3600
 80019d0:	00f42400 	.word	0x00f42400

080019d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d101      	bne.n	80019e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e049      	b.n	8001a7a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d106      	bne.n	8001a00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f000 f841 	bl	8001a82 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2202      	movs	r2, #2
 8001a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3304      	adds	r3, #4
 8001a10:	4619      	mov	r1, r3
 8001a12:	4610      	mov	r0, r2
 8001a14:	f000 fa60 	bl	8001ed8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2201      	movs	r2, #1
 8001a34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2201      	movs	r2, #1
 8001a54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2201      	movs	r2, #1
 8001a64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2201      	movs	r2, #1
 8001a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a82:	b480      	push	{r7}
 8001a84:	b083      	sub	sp, #12
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a8a:	bf00      	nop
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
	...

08001a98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d001      	beq.n	8001ab0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e054      	b.n	8001b5a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2202      	movs	r2, #2
 8001ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	68da      	ldr	r2, [r3, #12]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f042 0201 	orr.w	r2, r2, #1
 8001ac6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a26      	ldr	r2, [pc, #152]	; (8001b68 <HAL_TIM_Base_Start_IT+0xd0>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d022      	beq.n	8001b18 <HAL_TIM_Base_Start_IT+0x80>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ada:	d01d      	beq.n	8001b18 <HAL_TIM_Base_Start_IT+0x80>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a22      	ldr	r2, [pc, #136]	; (8001b6c <HAL_TIM_Base_Start_IT+0xd4>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d018      	beq.n	8001b18 <HAL_TIM_Base_Start_IT+0x80>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a21      	ldr	r2, [pc, #132]	; (8001b70 <HAL_TIM_Base_Start_IT+0xd8>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d013      	beq.n	8001b18 <HAL_TIM_Base_Start_IT+0x80>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a1f      	ldr	r2, [pc, #124]	; (8001b74 <HAL_TIM_Base_Start_IT+0xdc>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d00e      	beq.n	8001b18 <HAL_TIM_Base_Start_IT+0x80>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a1e      	ldr	r2, [pc, #120]	; (8001b78 <HAL_TIM_Base_Start_IT+0xe0>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d009      	beq.n	8001b18 <HAL_TIM_Base_Start_IT+0x80>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a1c      	ldr	r2, [pc, #112]	; (8001b7c <HAL_TIM_Base_Start_IT+0xe4>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d004      	beq.n	8001b18 <HAL_TIM_Base_Start_IT+0x80>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a1b      	ldr	r2, [pc, #108]	; (8001b80 <HAL_TIM_Base_Start_IT+0xe8>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d115      	bne.n	8001b44 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	689a      	ldr	r2, [r3, #8]
 8001b1e:	4b19      	ldr	r3, [pc, #100]	; (8001b84 <HAL_TIM_Base_Start_IT+0xec>)
 8001b20:	4013      	ands	r3, r2
 8001b22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2b06      	cmp	r3, #6
 8001b28:	d015      	beq.n	8001b56 <HAL_TIM_Base_Start_IT+0xbe>
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b30:	d011      	beq.n	8001b56 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f042 0201 	orr.w	r2, r2, #1
 8001b40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b42:	e008      	b.n	8001b56 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f042 0201 	orr.w	r2, r2, #1
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	e000      	b.n	8001b58 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b56:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3714      	adds	r7, #20
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	40012c00 	.word	0x40012c00
 8001b6c:	40000400 	.word	0x40000400
 8001b70:	40000800 	.word	0x40000800
 8001b74:	40000c00 	.word	0x40000c00
 8001b78:	40013400 	.word	0x40013400
 8001b7c:	40014000 	.word	0x40014000
 8001b80:	40015000 	.word	0x40015000
 8001b84:	00010007 	.word	0x00010007

08001b88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d122      	bne.n	8001be4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	f003 0302 	and.w	r3, r3, #2
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d11b      	bne.n	8001be4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f06f 0202 	mvn.w	r2, #2
 8001bb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	f003 0303 	and.w	r3, r3, #3
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d003      	beq.n	8001bd2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 f965 	bl	8001e9a <HAL_TIM_IC_CaptureCallback>
 8001bd0:	e005      	b.n	8001bde <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f000 f957 	bl	8001e86 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f000 f968 	bl	8001eae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	f003 0304 	and.w	r3, r3, #4
 8001bee:	2b04      	cmp	r3, #4
 8001bf0:	d122      	bne.n	8001c38 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	f003 0304 	and.w	r3, r3, #4
 8001bfc:	2b04      	cmp	r3, #4
 8001bfe:	d11b      	bne.n	8001c38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f06f 0204 	mvn.w	r2, #4
 8001c08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2202      	movs	r2, #2
 8001c0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d003      	beq.n	8001c26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 f93b 	bl	8001e9a <HAL_TIM_IC_CaptureCallback>
 8001c24:	e005      	b.n	8001c32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f000 f92d 	bl	8001e86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f000 f93e 	bl	8001eae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	f003 0308 	and.w	r3, r3, #8
 8001c42:	2b08      	cmp	r3, #8
 8001c44:	d122      	bne.n	8001c8c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	f003 0308 	and.w	r3, r3, #8
 8001c50:	2b08      	cmp	r3, #8
 8001c52:	d11b      	bne.n	8001c8c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f06f 0208 	mvn.w	r2, #8
 8001c5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2204      	movs	r2, #4
 8001c62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	69db      	ldr	r3, [r3, #28]
 8001c6a:	f003 0303 	and.w	r3, r3, #3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f000 f911 	bl	8001e9a <HAL_TIM_IC_CaptureCallback>
 8001c78:	e005      	b.n	8001c86 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 f903 	bl	8001e86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f000 f914 	bl	8001eae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	691b      	ldr	r3, [r3, #16]
 8001c92:	f003 0310 	and.w	r3, r3, #16
 8001c96:	2b10      	cmp	r3, #16
 8001c98:	d122      	bne.n	8001ce0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	f003 0310 	and.w	r3, r3, #16
 8001ca4:	2b10      	cmp	r3, #16
 8001ca6:	d11b      	bne.n	8001ce0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f06f 0210 	mvn.w	r2, #16
 8001cb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2208      	movs	r2, #8
 8001cb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	69db      	ldr	r3, [r3, #28]
 8001cbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d003      	beq.n	8001cce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f000 f8e7 	bl	8001e9a <HAL_TIM_IC_CaptureCallback>
 8001ccc:	e005      	b.n	8001cda <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 f8d9 	bl	8001e86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f000 f8ea 	bl	8001eae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d10e      	bne.n	8001d0c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	f003 0301 	and.w	r3, r3, #1
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d107      	bne.n	8001d0c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f06f 0201 	mvn.w	r2, #1
 8001d04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f7fe fc7e 	bl	8000608 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	691b      	ldr	r3, [r3, #16]
 8001d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d16:	2b80      	cmp	r3, #128	; 0x80
 8001d18:	d10e      	bne.n	8001d38 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d24:	2b80      	cmp	r3, #128	; 0x80
 8001d26:	d107      	bne.n	8001d38 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 f982 	bl	800203c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d46:	d10e      	bne.n	8001d66 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d52:	2b80      	cmp	r3, #128	; 0x80
 8001d54:	d107      	bne.n	8001d66 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001d5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f000 f975 	bl	8002050 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	691b      	ldr	r3, [r3, #16]
 8001d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d70:	2b40      	cmp	r3, #64	; 0x40
 8001d72:	d10e      	bne.n	8001d92 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d7e:	2b40      	cmp	r3, #64	; 0x40
 8001d80:	d107      	bne.n	8001d92 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f000 f898 	bl	8001ec2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	f003 0320 	and.w	r3, r3, #32
 8001d9c:	2b20      	cmp	r3, #32
 8001d9e:	d10e      	bne.n	8001dbe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	f003 0320 	and.w	r3, r3, #32
 8001daa:	2b20      	cmp	r3, #32
 8001dac:	d107      	bne.n	8001dbe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f06f 0220 	mvn.w	r2, #32
 8001db6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f000 f935 	bl	8002028 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001dcc:	d10f      	bne.n	8001dee <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ddc:	d107      	bne.n	8001dee <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8001de6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f000 f93b 	bl	8002064 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001df8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001dfc:	d10f      	bne.n	8001e1e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001e0c:	d107      	bne.n	8001e1e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8001e16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f000 f92d 	bl	8002078 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	691b      	ldr	r3, [r3, #16]
 8001e24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e2c:	d10f      	bne.n	8001e4e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e3c:	d107      	bne.n	8001e4e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8001e46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f000 f91f 	bl	800208c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	691b      	ldr	r3, [r3, #16]
 8001e54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e58:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001e5c:	d10f      	bne.n	8001e7e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e68:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001e6c:	d107      	bne.n	8001e7e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8001e76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f000 f911 	bl	80020a0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e7e:	bf00      	nop
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e86:	b480      	push	{r7}
 8001e88:	b083      	sub	sp, #12
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr

08001e9a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	b083      	sub	sp, #12
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ea2:	bf00      	nop
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr

08001eae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	b083      	sub	sp, #12
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001eb6:	bf00      	nop
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr

08001ec2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	b083      	sub	sp, #12
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001eca:	bf00      	nop
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
	...

08001ed8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a46      	ldr	r2, [pc, #280]	; (8002004 <TIM_Base_SetConfig+0x12c>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d017      	beq.n	8001f20 <TIM_Base_SetConfig+0x48>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ef6:	d013      	beq.n	8001f20 <TIM_Base_SetConfig+0x48>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a43      	ldr	r2, [pc, #268]	; (8002008 <TIM_Base_SetConfig+0x130>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d00f      	beq.n	8001f20 <TIM_Base_SetConfig+0x48>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a42      	ldr	r2, [pc, #264]	; (800200c <TIM_Base_SetConfig+0x134>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d00b      	beq.n	8001f20 <TIM_Base_SetConfig+0x48>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a41      	ldr	r2, [pc, #260]	; (8002010 <TIM_Base_SetConfig+0x138>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d007      	beq.n	8001f20 <TIM_Base_SetConfig+0x48>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4a40      	ldr	r2, [pc, #256]	; (8002014 <TIM_Base_SetConfig+0x13c>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d003      	beq.n	8001f20 <TIM_Base_SetConfig+0x48>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4a3f      	ldr	r2, [pc, #252]	; (8002018 <TIM_Base_SetConfig+0x140>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d108      	bne.n	8001f32 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a33      	ldr	r2, [pc, #204]	; (8002004 <TIM_Base_SetConfig+0x12c>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d023      	beq.n	8001f82 <TIM_Base_SetConfig+0xaa>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f40:	d01f      	beq.n	8001f82 <TIM_Base_SetConfig+0xaa>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a30      	ldr	r2, [pc, #192]	; (8002008 <TIM_Base_SetConfig+0x130>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d01b      	beq.n	8001f82 <TIM_Base_SetConfig+0xaa>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a2f      	ldr	r2, [pc, #188]	; (800200c <TIM_Base_SetConfig+0x134>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d017      	beq.n	8001f82 <TIM_Base_SetConfig+0xaa>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a2e      	ldr	r2, [pc, #184]	; (8002010 <TIM_Base_SetConfig+0x138>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d013      	beq.n	8001f82 <TIM_Base_SetConfig+0xaa>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a2d      	ldr	r2, [pc, #180]	; (8002014 <TIM_Base_SetConfig+0x13c>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d00f      	beq.n	8001f82 <TIM_Base_SetConfig+0xaa>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a2d      	ldr	r2, [pc, #180]	; (800201c <TIM_Base_SetConfig+0x144>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d00b      	beq.n	8001f82 <TIM_Base_SetConfig+0xaa>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a2c      	ldr	r2, [pc, #176]	; (8002020 <TIM_Base_SetConfig+0x148>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d007      	beq.n	8001f82 <TIM_Base_SetConfig+0xaa>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a2b      	ldr	r2, [pc, #172]	; (8002024 <TIM_Base_SetConfig+0x14c>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d003      	beq.n	8001f82 <TIM_Base_SetConfig+0xaa>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a26      	ldr	r2, [pc, #152]	; (8002018 <TIM_Base_SetConfig+0x140>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d108      	bne.n	8001f94 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	68fa      	ldr	r2, [r7, #12]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	68fa      	ldr	r2, [r7, #12]
 8001fa6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	689a      	ldr	r2, [r3, #8]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a12      	ldr	r2, [pc, #72]	; (8002004 <TIM_Base_SetConfig+0x12c>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d013      	beq.n	8001fe8 <TIM_Base_SetConfig+0x110>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a14      	ldr	r2, [pc, #80]	; (8002014 <TIM_Base_SetConfig+0x13c>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d00f      	beq.n	8001fe8 <TIM_Base_SetConfig+0x110>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a14      	ldr	r2, [pc, #80]	; (800201c <TIM_Base_SetConfig+0x144>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d00b      	beq.n	8001fe8 <TIM_Base_SetConfig+0x110>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a13      	ldr	r2, [pc, #76]	; (8002020 <TIM_Base_SetConfig+0x148>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d007      	beq.n	8001fe8 <TIM_Base_SetConfig+0x110>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a12      	ldr	r2, [pc, #72]	; (8002024 <TIM_Base_SetConfig+0x14c>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d003      	beq.n	8001fe8 <TIM_Base_SetConfig+0x110>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a0d      	ldr	r2, [pc, #52]	; (8002018 <TIM_Base_SetConfig+0x140>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d103      	bne.n	8001ff0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	691a      	ldr	r2, [r3, #16]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	615a      	str	r2, [r3, #20]
}
 8001ff6:	bf00      	nop
 8001ff8:	3714      	adds	r7, #20
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	40012c00 	.word	0x40012c00
 8002008:	40000400 	.word	0x40000400
 800200c:	40000800 	.word	0x40000800
 8002010:	40000c00 	.word	0x40000c00
 8002014:	40013400 	.word	0x40013400
 8002018:	40015000 	.word	0x40015000
 800201c:	40014000 	.word	0x40014000
 8002020:	40014400 	.word	0x40014400
 8002024:	40014800 	.word	0x40014800

08002028 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f103 0208 	add.w	r2, r3, #8
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f04f 32ff 	mov.w	r2, #4294967295
 80020cc:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f103 0208 	add.w	r2, r3, #8
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f103 0208 	add.w	r2, r3, #8
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002102:	bf00      	nop
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr

0800210e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800210e:	b480      	push	{r7}
 8002110:	b085      	sub	sp, #20
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
 8002116:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	68fa      	ldr	r2, [r7, #12]
 8002122:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	689a      	ldr	r2, [r3, #8]
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	683a      	ldr	r2, [r7, #0]
 8002138:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	1c5a      	adds	r2, r3, #1
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	601a      	str	r2, [r3, #0]
}
 800214a:	bf00      	nop
 800214c:	3714      	adds	r7, #20
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr

08002156 <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002156:	b480      	push	{r7}
 8002158:	b085      	sub	sp, #20
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	6892      	ldr	r2, [r2, #8]
 800216c:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	6852      	ldr	r2, [r2, #4]
 8002176:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	429a      	cmp	r2, r3
 8002180:	d103      	bne.n	800218a <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	689a      	ldr	r2, [r3, #8]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	1e5a      	subs	r2, r3, #1
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3714      	adds	r7, #20
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b08c      	sub	sp, #48	; 0x30
 80021ae:	af04      	add	r7, sp, #16
 80021b0:	60f8      	str	r0, [r7, #12]
 80021b2:	60b9      	str	r1, [r7, #8]
 80021b4:	603b      	str	r3, [r7, #0]
 80021b6:	4613      	mov	r3, r2
 80021b8:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80021ba:	88fb      	ldrh	r3, [r7, #6]
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	4618      	mov	r0, r3
 80021c0:	f000 fe8c 	bl	8002edc <pvPortMalloc>
 80021c4:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d00e      	beq.n	80021ea <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80021cc:	2058      	movs	r0, #88	; 0x58
 80021ce:	f000 fe85 	bl	8002edc <pvPortMalloc>
 80021d2:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d003      	beq.n	80021e2 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	697a      	ldr	r2, [r7, #20]
 80021de:	631a      	str	r2, [r3, #48]	; 0x30
 80021e0:	e005      	b.n	80021ee <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80021e2:	6978      	ldr	r0, [r7, #20]
 80021e4:	f000 ff5a 	bl	800309c <vPortFree>
 80021e8:	e001      	b.n	80021ee <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80021ea:	2300      	movs	r3, #0
 80021ec:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d013      	beq.n	800221c <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80021f4:	88fa      	ldrh	r2, [r7, #6]
 80021f6:	2300      	movs	r3, #0
 80021f8:	9303      	str	r3, [sp, #12]
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	9302      	str	r3, [sp, #8]
 80021fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002200:	9301      	str	r3, [sp, #4]
 8002202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002204:	9300      	str	r3, [sp, #0]
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	68b9      	ldr	r1, [r7, #8]
 800220a:	68f8      	ldr	r0, [r7, #12]
 800220c:	f000 f80e 	bl	800222c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002210:	69f8      	ldr	r0, [r7, #28]
 8002212:	f000 f8a1 	bl	8002358 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002216:	2301      	movs	r3, #1
 8002218:	61bb      	str	r3, [r7, #24]
 800221a:	e002      	b.n	8002222 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800221c:	f04f 33ff 	mov.w	r3, #4294967295
 8002220:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002222:	69bb      	ldr	r3, [r7, #24]
    }
 8002224:	4618      	mov	r0, r3
 8002226:	3720      	adds	r7, #32
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b088      	sub	sp, #32
 8002230:	af00      	add	r7, sp, #0
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	607a      	str	r2, [r7, #4]
 8002238:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800223a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800223c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	461a      	mov	r2, r3
 8002244:	21a5      	movs	r1, #165	; 0xa5
 8002246:	f002 fdaf 	bl	8004da8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800224a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800224c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002254:	3b01      	subs	r3, #1
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	4413      	add	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	f023 0307 	bic.w	r3, r3, #7
 8002262:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	f003 0307 	and.w	r3, r3, #7
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00a      	beq.n	8002284 <prvInitialiseNewTask+0x58>
        __asm volatile
 800226e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002272:	f383 8811 	msr	BASEPRI, r3
 8002276:	f3bf 8f6f 	isb	sy
 800227a:	f3bf 8f4f 	dsb	sy
 800227e:	617b      	str	r3, [r7, #20]
    }
 8002280:	bf00      	nop
 8002282:	e7fe      	b.n	8002282 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d01f      	beq.n	80022ca <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800228a:	2300      	movs	r3, #0
 800228c:	61fb      	str	r3, [r7, #28]
 800228e:	e012      	b.n	80022b6 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002290:	68ba      	ldr	r2, [r7, #8]
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	4413      	add	r3, r2
 8002296:	7819      	ldrb	r1, [r3, #0]
 8002298:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	4413      	add	r3, r2
 800229e:	3334      	adds	r3, #52	; 0x34
 80022a0:	460a      	mov	r2, r1
 80022a2:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80022a4:	68ba      	ldr	r2, [r7, #8]
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	4413      	add	r3, r2
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d006      	beq.n	80022be <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	3301      	adds	r3, #1
 80022b4:	61fb      	str	r3, [r7, #28]
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	2b09      	cmp	r3, #9
 80022ba:	d9e9      	bls.n	8002290 <prvInitialiseNewTask+0x64>
 80022bc:	e000      	b.n	80022c0 <prvInitialiseNewTask+0x94>
            {
                break;
 80022be:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80022c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80022c8:	e003      	b.n	80022d2 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80022ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80022d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d4:	2b04      	cmp	r3, #4
 80022d6:	d901      	bls.n	80022dc <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80022d8:	2304      	movs	r3, #4
 80022da:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80022dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022e0:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80022e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022e6:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80022e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ea:	2200      	movs	r2, #0
 80022ec:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80022ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f0:	3304      	adds	r3, #4
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff fefe 	bl	80020f4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80022f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022fa:	3318      	adds	r3, #24
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff fef9 	bl	80020f4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002304:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002306:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800230a:	f1c3 0205 	rsb	r2, r3, #5
 800230e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002310:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002314:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002316:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800231a:	3350      	adds	r3, #80	; 0x50
 800231c:	2204      	movs	r2, #4
 800231e:	2100      	movs	r1, #0
 8002320:	4618      	mov	r0, r3
 8002322:	f002 fd41 	bl	8004da8 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002328:	3354      	adds	r3, #84	; 0x54
 800232a:	2201      	movs	r2, #1
 800232c:	2100      	movs	r1, #0
 800232e:	4618      	mov	r0, r3
 8002330:	f002 fd3a 	bl	8004da8 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	68f9      	ldr	r1, [r7, #12]
 8002338:	69b8      	ldr	r0, [r7, #24]
 800233a:	f000 fb37 	bl	80029ac <pxPortInitialiseStack>
 800233e:	4602      	mov	r2, r0
 8002340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002342:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002346:	2b00      	cmp	r3, #0
 8002348:	d002      	beq.n	8002350 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800234a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800234c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800234e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002350:	bf00      	nop
 8002352:	3720      	adds	r7, #32
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002358:	b5b0      	push	{r4, r5, r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af02      	add	r7, sp, #8
 800235e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002360:	f000 fcd0 	bl	8002d04 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002364:	4b35      	ldr	r3, [pc, #212]	; (800243c <prvAddNewTaskToReadyList+0xe4>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	3301      	adds	r3, #1
 800236a:	4a34      	ldr	r2, [pc, #208]	; (800243c <prvAddNewTaskToReadyList+0xe4>)
 800236c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800236e:	4b34      	ldr	r3, [pc, #208]	; (8002440 <prvAddNewTaskToReadyList+0xe8>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d109      	bne.n	800238a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002376:	4a32      	ldr	r2, [pc, #200]	; (8002440 <prvAddNewTaskToReadyList+0xe8>)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800237c:	4b2f      	ldr	r3, [pc, #188]	; (800243c <prvAddNewTaskToReadyList+0xe4>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d110      	bne.n	80023a6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002384:	f000 fa78 	bl	8002878 <prvInitialiseTaskLists>
 8002388:	e00d      	b.n	80023a6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800238a:	4b2e      	ldr	r3, [pc, #184]	; (8002444 <prvAddNewTaskToReadyList+0xec>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d109      	bne.n	80023a6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002392:	4b2b      	ldr	r3, [pc, #172]	; (8002440 <prvAddNewTaskToReadyList+0xe8>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239c:	429a      	cmp	r2, r3
 800239e:	d802      	bhi.n	80023a6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80023a0:	4a27      	ldr	r2, [pc, #156]	; (8002440 <prvAddNewTaskToReadyList+0xe8>)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80023a6:	4b28      	ldr	r3, [pc, #160]	; (8002448 <prvAddNewTaskToReadyList+0xf0>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	3301      	adds	r3, #1
 80023ac:	4a26      	ldr	r2, [pc, #152]	; (8002448 <prvAddNewTaskToReadyList+0xf0>)
 80023ae:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80023b0:	4b25      	ldr	r3, [pc, #148]	; (8002448 <prvAddNewTaskToReadyList+0xf0>)
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d016      	beq.n	80023ec <prvAddNewTaskToReadyList+0x94>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f002 fa9b 	bl	80048fc <SEGGER_SYSVIEW_OnTaskCreate>
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d6:	461d      	mov	r5, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	461c      	mov	r4, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e2:	1ae3      	subs	r3, r4, r3
 80023e4:	9300      	str	r3, [sp, #0]
 80023e6:	462b      	mov	r3, r5
 80023e8:	f000 ff76 	bl	80032d8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f002 fb08 	bl	8004a04 <SEGGER_SYSVIEW_OnTaskStartReady>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f8:	2201      	movs	r2, #1
 80023fa:	409a      	lsls	r2, r3
 80023fc:	4b13      	ldr	r3, [pc, #76]	; (800244c <prvAddNewTaskToReadyList+0xf4>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4313      	orrs	r3, r2
 8002402:	4a12      	ldr	r2, [pc, #72]	; (800244c <prvAddNewTaskToReadyList+0xf4>)
 8002404:	6013      	str	r3, [r2, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800240a:	4613      	mov	r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	4413      	add	r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	4a0f      	ldr	r2, [pc, #60]	; (8002450 <prvAddNewTaskToReadyList+0xf8>)
 8002414:	441a      	add	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	3304      	adds	r3, #4
 800241a:	4619      	mov	r1, r3
 800241c:	4610      	mov	r0, r2
 800241e:	f7ff fe76 	bl	800210e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002422:	f000 fc9f 	bl	8002d64 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002426:	4b07      	ldr	r3, [pc, #28]	; (8002444 <prvAddNewTaskToReadyList+0xec>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <prvAddNewTaskToReadyList+0xda>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800242e:	4b04      	ldr	r3, [pc, #16]	; (8002440 <prvAddNewTaskToReadyList+0xe8>)
 8002430:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002432:	bf00      	nop
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bdb0      	pop	{r4, r5, r7, pc}
 800243a:	bf00      	nop
 800243c:	200001a8 	.word	0x200001a8
 8002440:	200000d0 	.word	0x200000d0
 8002444:	200001b4 	.word	0x200001b4
 8002448:	200001c4 	.word	0x200001c4
 800244c:	200001b0 	.word	0x200001b0
 8002450:	200000d4 	.word	0x200000d4

08002454 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800245a:	4b24      	ldr	r3, [pc, #144]	; (80024ec <vTaskStartScheduler+0x98>)
 800245c:	9301      	str	r3, [sp, #4]
 800245e:	2300      	movs	r3, #0
 8002460:	9300      	str	r3, [sp, #0]
 8002462:	2300      	movs	r3, #0
 8002464:	2282      	movs	r2, #130	; 0x82
 8002466:	4922      	ldr	r1, [pc, #136]	; (80024f0 <vTaskStartScheduler+0x9c>)
 8002468:	4822      	ldr	r0, [pc, #136]	; (80024f4 <vTaskStartScheduler+0xa0>)
 800246a:	f7ff fe9e 	bl	80021aa <xTaskCreate>
 800246e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d124      	bne.n	80024c0 <vTaskStartScheduler+0x6c>
        __asm volatile
 8002476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800247a:	f383 8811 	msr	BASEPRI, r3
 800247e:	f3bf 8f6f 	isb	sy
 8002482:	f3bf 8f4f 	dsb	sy
 8002486:	60bb      	str	r3, [r7, #8]
    }
 8002488:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800248a:	4b1b      	ldr	r3, [pc, #108]	; (80024f8 <vTaskStartScheduler+0xa4>)
 800248c:	f04f 32ff 	mov.w	r2, #4294967295
 8002490:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002492:	4b1a      	ldr	r3, [pc, #104]	; (80024fc <vTaskStartScheduler+0xa8>)
 8002494:	2201      	movs	r2, #1
 8002496:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002498:	4b19      	ldr	r3, [pc, #100]	; (8002500 <vTaskStartScheduler+0xac>)
 800249a:	2200      	movs	r2, #0
 800249c:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800249e:	4b19      	ldr	r3, [pc, #100]	; (8002504 <vTaskStartScheduler+0xb0>)
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	4b12      	ldr	r3, [pc, #72]	; (80024ec <vTaskStartScheduler+0x98>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d102      	bne.n	80024b0 <vTaskStartScheduler+0x5c>
 80024aa:	f002 fa0b 	bl	80048c4 <SEGGER_SYSVIEW_OnIdle>
 80024ae:	e004      	b.n	80024ba <vTaskStartScheduler+0x66>
 80024b0:	4b14      	ldr	r3, [pc, #80]	; (8002504 <vTaskStartScheduler+0xb0>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f002 fa63 	bl	8004980 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80024ba:	f000 fb03 	bl	8002ac4 <xPortStartScheduler>
 80024be:	e00e      	b.n	80024de <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024c6:	d10a      	bne.n	80024de <vTaskStartScheduler+0x8a>
        __asm volatile
 80024c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024cc:	f383 8811 	msr	BASEPRI, r3
 80024d0:	f3bf 8f6f 	isb	sy
 80024d4:	f3bf 8f4f 	dsb	sy
 80024d8:	607b      	str	r3, [r7, #4]
    }
 80024da:	bf00      	nop
 80024dc:	e7fe      	b.n	80024dc <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80024de:	4b0a      	ldr	r3, [pc, #40]	; (8002508 <vTaskStartScheduler+0xb4>)
 80024e0:	681b      	ldr	r3, [r3, #0]
}
 80024e2:	bf00      	nop
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	200001cc 	.word	0x200001cc
 80024f0:	08005724 	.word	0x08005724
 80024f4:	08002855 	.word	0x08002855
 80024f8:	200001c8 	.word	0x200001c8
 80024fc:	200001b4 	.word	0x200001b4
 8002500:	200001ac 	.word	0x200001ac
 8002504:	200000d0 	.word	0x200000d0
 8002508:	2000000c 	.word	0x2000000c

0800250c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002510:	4b04      	ldr	r3, [pc, #16]	; (8002524 <vTaskSuspendAll+0x18>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	3301      	adds	r3, #1
 8002516:	4a03      	ldr	r2, [pc, #12]	; (8002524 <vTaskSuspendAll+0x18>)
 8002518:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800251a:	bf00      	nop
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr
 8002524:	200001d0 	.word	0x200001d0

08002528 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800252e:	2300      	movs	r3, #0
 8002530:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002532:	2300      	movs	r3, #0
 8002534:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002536:	4b3d      	ldr	r3, [pc, #244]	; (800262c <xTaskResumeAll+0x104>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d10a      	bne.n	8002554 <xTaskResumeAll+0x2c>
        __asm volatile
 800253e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002542:	f383 8811 	msr	BASEPRI, r3
 8002546:	f3bf 8f6f 	isb	sy
 800254a:	f3bf 8f4f 	dsb	sy
 800254e:	603b      	str	r3, [r7, #0]
    }
 8002550:	bf00      	nop
 8002552:	e7fe      	b.n	8002552 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002554:	f000 fbd6 	bl	8002d04 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002558:	4b34      	ldr	r3, [pc, #208]	; (800262c <xTaskResumeAll+0x104>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	3b01      	subs	r3, #1
 800255e:	4a33      	ldr	r2, [pc, #204]	; (800262c <xTaskResumeAll+0x104>)
 8002560:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002562:	4b32      	ldr	r3, [pc, #200]	; (800262c <xTaskResumeAll+0x104>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d159      	bne.n	800261e <xTaskResumeAll+0xf6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800256a:	4b31      	ldr	r3, [pc, #196]	; (8002630 <xTaskResumeAll+0x108>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d055      	beq.n	800261e <xTaskResumeAll+0xf6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002572:	e032      	b.n	80025da <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002574:	4b2f      	ldr	r3, [pc, #188]	; (8002634 <xTaskResumeAll+0x10c>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	3318      	adds	r3, #24
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff fde8 	bl	8002156 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	3304      	adds	r3, #4
 800258a:	4618      	mov	r0, r3
 800258c:	f7ff fde3 	bl	8002156 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	4618      	mov	r0, r3
 8002594:	f002 fa36 	bl	8004a04 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259c:	2201      	movs	r2, #1
 800259e:	409a      	lsls	r2, r3
 80025a0:	4b25      	ldr	r3, [pc, #148]	; (8002638 <xTaskResumeAll+0x110>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	4a24      	ldr	r2, [pc, #144]	; (8002638 <xTaskResumeAll+0x110>)
 80025a8:	6013      	str	r3, [r2, #0]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025ae:	4613      	mov	r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	4413      	add	r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	4a21      	ldr	r2, [pc, #132]	; (800263c <xTaskResumeAll+0x114>)
 80025b8:	441a      	add	r2, r3
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	3304      	adds	r3, #4
 80025be:	4619      	mov	r1, r3
 80025c0:	4610      	mov	r0, r2
 80025c2:	f7ff fda4 	bl	800210e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025ca:	4b1d      	ldr	r3, [pc, #116]	; (8002640 <xTaskResumeAll+0x118>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d302      	bcc.n	80025da <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80025d4:	4b1b      	ldr	r3, [pc, #108]	; (8002644 <xTaskResumeAll+0x11c>)
 80025d6:	2201      	movs	r2, #1
 80025d8:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80025da:	4b16      	ldr	r3, [pc, #88]	; (8002634 <xTaskResumeAll+0x10c>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d1c8      	bne.n	8002574 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80025e8:	f000 f9c4 	bl	8002974 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80025ec:	4b16      	ldr	r3, [pc, #88]	; (8002648 <xTaskResumeAll+0x120>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d010      	beq.n	800261a <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80025f8:	f000 f828 	bl	800264c <xTaskIncrementTick>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d002      	beq.n	8002608 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8002602:	4b10      	ldr	r3, [pc, #64]	; (8002644 <xTaskResumeAll+0x11c>)
 8002604:	2201      	movs	r2, #1
 8002606:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	3b01      	subs	r3, #1
 800260c:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d1f1      	bne.n	80025f8 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8002614:	4b0c      	ldr	r3, [pc, #48]	; (8002648 <xTaskResumeAll+0x120>)
 8002616:	2200      	movs	r2, #0
 8002618:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800261a:	4b0a      	ldr	r3, [pc, #40]	; (8002644 <xTaskResumeAll+0x11c>)
 800261c:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800261e:	f000 fba1 	bl	8002d64 <vPortExitCritical>

    return xAlreadyYielded;
 8002622:	687b      	ldr	r3, [r7, #4]
}
 8002624:	4618      	mov	r0, r3
 8002626:	3710      	adds	r7, #16
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	200001d0 	.word	0x200001d0
 8002630:	200001a8 	.word	0x200001a8
 8002634:	20000168 	.word	0x20000168
 8002638:	200001b0 	.word	0x200001b0
 800263c:	200000d4 	.word	0x200000d4
 8002640:	200000d0 	.word	0x200000d0
 8002644:	200001bc 	.word	0x200001bc
 8002648:	200001b8 	.word	0x200001b8

0800264c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002652:	2300      	movs	r3, #0
 8002654:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002656:	4b41      	ldr	r3, [pc, #260]	; (800275c <xTaskIncrementTick+0x110>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d173      	bne.n	8002746 <xTaskIncrementTick+0xfa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800265e:	4b40      	ldr	r3, [pc, #256]	; (8002760 <xTaskIncrementTick+0x114>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	3301      	adds	r3, #1
 8002664:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002666:	4a3e      	ldr	r2, [pc, #248]	; (8002760 <xTaskIncrementTick+0x114>)
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d120      	bne.n	80026b4 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8002672:	4b3c      	ldr	r3, [pc, #240]	; (8002764 <xTaskIncrementTick+0x118>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00a      	beq.n	8002692 <xTaskIncrementTick+0x46>
        __asm volatile
 800267c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002680:	f383 8811 	msr	BASEPRI, r3
 8002684:	f3bf 8f6f 	isb	sy
 8002688:	f3bf 8f4f 	dsb	sy
 800268c:	603b      	str	r3, [r7, #0]
    }
 800268e:	bf00      	nop
 8002690:	e7fe      	b.n	8002690 <xTaskIncrementTick+0x44>
 8002692:	4b34      	ldr	r3, [pc, #208]	; (8002764 <xTaskIncrementTick+0x118>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	60fb      	str	r3, [r7, #12]
 8002698:	4b33      	ldr	r3, [pc, #204]	; (8002768 <xTaskIncrementTick+0x11c>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a31      	ldr	r2, [pc, #196]	; (8002764 <xTaskIncrementTick+0x118>)
 800269e:	6013      	str	r3, [r2, #0]
 80026a0:	4a31      	ldr	r2, [pc, #196]	; (8002768 <xTaskIncrementTick+0x11c>)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6013      	str	r3, [r2, #0]
 80026a6:	4b31      	ldr	r3, [pc, #196]	; (800276c <xTaskIncrementTick+0x120>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	3301      	adds	r3, #1
 80026ac:	4a2f      	ldr	r2, [pc, #188]	; (800276c <xTaskIncrementTick+0x120>)
 80026ae:	6013      	str	r3, [r2, #0]
 80026b0:	f000 f960 	bl	8002974 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80026b4:	4b2e      	ldr	r3, [pc, #184]	; (8002770 <xTaskIncrementTick+0x124>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	693a      	ldr	r2, [r7, #16]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d348      	bcc.n	8002750 <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80026be:	4b29      	ldr	r3, [pc, #164]	; (8002764 <xTaskIncrementTick+0x118>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d104      	bne.n	80026d2 <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026c8:	4b29      	ldr	r3, [pc, #164]	; (8002770 <xTaskIncrementTick+0x124>)
 80026ca:	f04f 32ff 	mov.w	r2, #4294967295
 80026ce:	601a      	str	r2, [r3, #0]
                    break;
 80026d0:	e03e      	b.n	8002750 <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80026d2:	4b24      	ldr	r3, [pc, #144]	; (8002764 <xTaskIncrementTick+0x118>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d203      	bcs.n	80026f2 <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80026ea:	4a21      	ldr	r2, [pc, #132]	; (8002770 <xTaskIncrementTick+0x124>)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80026f0:	e02e      	b.n	8002750 <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	3304      	adds	r3, #4
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff fd2d 	bl	8002156 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002700:	2b00      	cmp	r3, #0
 8002702:	d004      	beq.n	800270e <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	3318      	adds	r3, #24
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff fd24 	bl	8002156 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	4618      	mov	r0, r3
 8002712:	f002 f977 	bl	8004a04 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271a:	2201      	movs	r2, #1
 800271c:	409a      	lsls	r2, r3
 800271e:	4b15      	ldr	r3, [pc, #84]	; (8002774 <xTaskIncrementTick+0x128>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4313      	orrs	r3, r2
 8002724:	4a13      	ldr	r2, [pc, #76]	; (8002774 <xTaskIncrementTick+0x128>)
 8002726:	6013      	str	r3, [r2, #0]
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800272c:	4613      	mov	r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	4413      	add	r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	4a10      	ldr	r2, [pc, #64]	; (8002778 <xTaskIncrementTick+0x12c>)
 8002736:	441a      	add	r2, r3
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	3304      	adds	r3, #4
 800273c:	4619      	mov	r1, r3
 800273e:	4610      	mov	r0, r2
 8002740:	f7ff fce5 	bl	800210e <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002744:	e7bb      	b.n	80026be <xTaskIncrementTick+0x72>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002746:	4b0d      	ldr	r3, [pc, #52]	; (800277c <xTaskIncrementTick+0x130>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	3301      	adds	r3, #1
 800274c:	4a0b      	ldr	r2, [pc, #44]	; (800277c <xTaskIncrementTick+0x130>)
 800274e:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002750:	697b      	ldr	r3, [r7, #20]
}
 8002752:	4618      	mov	r0, r3
 8002754:	3718      	adds	r7, #24
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	200001d0 	.word	0x200001d0
 8002760:	200001ac 	.word	0x200001ac
 8002764:	20000160 	.word	0x20000160
 8002768:	20000164 	.word	0x20000164
 800276c:	200001c0 	.word	0x200001c0
 8002770:	200001c8 	.word	0x200001c8
 8002774:	200001b0 	.word	0x200001b0
 8002778:	200000d4 	.word	0x200000d4
 800277c:	200001b8 	.word	0x200001b8

08002780 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b086      	sub	sp, #24
 8002784:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002786:	4b2d      	ldr	r3, [pc, #180]	; (800283c <vTaskSwitchContext+0xbc>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d003      	beq.n	8002796 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800278e:	4b2c      	ldr	r3, [pc, #176]	; (8002840 <vTaskSwitchContext+0xc0>)
 8002790:	2201      	movs	r2, #1
 8002792:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002794:	e04d      	b.n	8002832 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002796:	4b2a      	ldr	r3, [pc, #168]	; (8002840 <vTaskSwitchContext+0xc0>)
 8002798:	2200      	movs	r2, #0
 800279a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800279c:	4b29      	ldr	r3, [pc, #164]	; (8002844 <vTaskSwitchContext+0xc4>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	fab3 f383 	clz	r3, r3
 80027a8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80027aa:	7afb      	ldrb	r3, [r7, #11]
 80027ac:	f1c3 031f 	rsb	r3, r3, #31
 80027b0:	617b      	str	r3, [r7, #20]
 80027b2:	4925      	ldr	r1, [pc, #148]	; (8002848 <vTaskSwitchContext+0xc8>)
 80027b4:	697a      	ldr	r2, [r7, #20]
 80027b6:	4613      	mov	r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	4413      	add	r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	440b      	add	r3, r1
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d10a      	bne.n	80027dc <vTaskSwitchContext+0x5c>
        __asm volatile
 80027c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ca:	f383 8811 	msr	BASEPRI, r3
 80027ce:	f3bf 8f6f 	isb	sy
 80027d2:	f3bf 8f4f 	dsb	sy
 80027d6:	607b      	str	r3, [r7, #4]
    }
 80027d8:	bf00      	nop
 80027da:	e7fe      	b.n	80027da <vTaskSwitchContext+0x5a>
 80027dc:	697a      	ldr	r2, [r7, #20]
 80027de:	4613      	mov	r3, r2
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	4413      	add	r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	4a18      	ldr	r2, [pc, #96]	; (8002848 <vTaskSwitchContext+0xc8>)
 80027e8:	4413      	add	r3, r2
 80027ea:	613b      	str	r3, [r7, #16]
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	685a      	ldr	r2, [r3, #4]
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	605a      	str	r2, [r3, #4]
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	685a      	ldr	r2, [r3, #4]
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	3308      	adds	r3, #8
 80027fe:	429a      	cmp	r2, r3
 8002800:	d104      	bne.n	800280c <vTaskSwitchContext+0x8c>
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	685a      	ldr	r2, [r3, #4]
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	605a      	str	r2, [r3, #4]
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	4a0e      	ldr	r2, [pc, #56]	; (800284c <vTaskSwitchContext+0xcc>)
 8002814:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002816:	4b0d      	ldr	r3, [pc, #52]	; (800284c <vTaskSwitchContext+0xcc>)
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	4b0d      	ldr	r3, [pc, #52]	; (8002850 <vTaskSwitchContext+0xd0>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	429a      	cmp	r2, r3
 8002820:	d102      	bne.n	8002828 <vTaskSwitchContext+0xa8>
 8002822:	f002 f84f 	bl	80048c4 <SEGGER_SYSVIEW_OnIdle>
}
 8002826:	e004      	b.n	8002832 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002828:	4b08      	ldr	r3, [pc, #32]	; (800284c <vTaskSwitchContext+0xcc>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4618      	mov	r0, r3
 800282e:	f002 f8a7 	bl	8004980 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002832:	bf00      	nop
 8002834:	3718      	adds	r7, #24
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	200001d0 	.word	0x200001d0
 8002840:	200001bc 	.word	0x200001bc
 8002844:	200001b0 	.word	0x200001b0
 8002848:	200000d4 	.word	0x200000d4
 800284c:	200000d0 	.word	0x200000d0
 8002850:	200001cc 	.word	0x200001cc

08002854 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800285c:	f000 f84c 	bl	80028f8 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 8002860:	4b04      	ldr	r3, [pc, #16]	; (8002874 <prvIdleTask+0x20>)
 8002862:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002866:	601a      	str	r2, [r3, #0]
 8002868:	f3bf 8f4f 	dsb	sy
 800286c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002870:	e7f4      	b.n	800285c <prvIdleTask+0x8>
 8002872:	bf00      	nop
 8002874:	e000ed04 	.word	0xe000ed04

08002878 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800287e:	2300      	movs	r3, #0
 8002880:	607b      	str	r3, [r7, #4]
 8002882:	e00c      	b.n	800289e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	4613      	mov	r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	4413      	add	r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	4a12      	ldr	r2, [pc, #72]	; (80028d8 <prvInitialiseTaskLists+0x60>)
 8002890:	4413      	add	r3, r2
 8002892:	4618      	mov	r0, r3
 8002894:	f7ff fc0e 	bl	80020b4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	3301      	adds	r3, #1
 800289c:	607b      	str	r3, [r7, #4]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2b04      	cmp	r3, #4
 80028a2:	d9ef      	bls.n	8002884 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80028a4:	480d      	ldr	r0, [pc, #52]	; (80028dc <prvInitialiseTaskLists+0x64>)
 80028a6:	f7ff fc05 	bl	80020b4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80028aa:	480d      	ldr	r0, [pc, #52]	; (80028e0 <prvInitialiseTaskLists+0x68>)
 80028ac:	f7ff fc02 	bl	80020b4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80028b0:	480c      	ldr	r0, [pc, #48]	; (80028e4 <prvInitialiseTaskLists+0x6c>)
 80028b2:	f7ff fbff 	bl	80020b4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80028b6:	480c      	ldr	r0, [pc, #48]	; (80028e8 <prvInitialiseTaskLists+0x70>)
 80028b8:	f7ff fbfc 	bl	80020b4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80028bc:	480b      	ldr	r0, [pc, #44]	; (80028ec <prvInitialiseTaskLists+0x74>)
 80028be:	f7ff fbf9 	bl	80020b4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80028c2:	4b0b      	ldr	r3, [pc, #44]	; (80028f0 <prvInitialiseTaskLists+0x78>)
 80028c4:	4a05      	ldr	r2, [pc, #20]	; (80028dc <prvInitialiseTaskLists+0x64>)
 80028c6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80028c8:	4b0a      	ldr	r3, [pc, #40]	; (80028f4 <prvInitialiseTaskLists+0x7c>)
 80028ca:	4a05      	ldr	r2, [pc, #20]	; (80028e0 <prvInitialiseTaskLists+0x68>)
 80028cc:	601a      	str	r2, [r3, #0]
}
 80028ce:	bf00      	nop
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	200000d4 	.word	0x200000d4
 80028dc:	20000138 	.word	0x20000138
 80028e0:	2000014c 	.word	0x2000014c
 80028e4:	20000168 	.word	0x20000168
 80028e8:	2000017c 	.word	0x2000017c
 80028ec:	20000194 	.word	0x20000194
 80028f0:	20000160 	.word	0x20000160
 80028f4:	20000164 	.word	0x20000164

080028f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80028fe:	e019      	b.n	8002934 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002900:	f000 fa00 	bl	8002d04 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002904:	4b10      	ldr	r3, [pc, #64]	; (8002948 <prvCheckTasksWaitingTermination+0x50>)
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	3304      	adds	r3, #4
 8002910:	4618      	mov	r0, r3
 8002912:	f7ff fc20 	bl	8002156 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002916:	4b0d      	ldr	r3, [pc, #52]	; (800294c <prvCheckTasksWaitingTermination+0x54>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	3b01      	subs	r3, #1
 800291c:	4a0b      	ldr	r2, [pc, #44]	; (800294c <prvCheckTasksWaitingTermination+0x54>)
 800291e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002920:	4b0b      	ldr	r3, [pc, #44]	; (8002950 <prvCheckTasksWaitingTermination+0x58>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	3b01      	subs	r3, #1
 8002926:	4a0a      	ldr	r2, [pc, #40]	; (8002950 <prvCheckTasksWaitingTermination+0x58>)
 8002928:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800292a:	f000 fa1b 	bl	8002d64 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 f810 	bl	8002954 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002934:	4b06      	ldr	r3, [pc, #24]	; (8002950 <prvCheckTasksWaitingTermination+0x58>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d1e1      	bne.n	8002900 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800293c:	bf00      	nop
 800293e:	bf00      	nop
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	2000017c 	.word	0x2000017c
 800294c:	200001a8 	.word	0x200001a8
 8002950:	20000190 	.word	0x20000190

08002954 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002960:	4618      	mov	r0, r3
 8002962:	f000 fb9b 	bl	800309c <vPortFree>
                vPortFree( pxTCB );
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 fb98 	bl	800309c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800296c:	bf00      	nop
 800296e:	3708      	adds	r7, #8
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002978:	4b0a      	ldr	r3, [pc, #40]	; (80029a4 <prvResetNextTaskUnblockTime+0x30>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d104      	bne.n	800298c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002982:	4b09      	ldr	r3, [pc, #36]	; (80029a8 <prvResetNextTaskUnblockTime+0x34>)
 8002984:	f04f 32ff 	mov.w	r2, #4294967295
 8002988:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800298a:	e005      	b.n	8002998 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800298c:	4b05      	ldr	r3, [pc, #20]	; (80029a4 <prvResetNextTaskUnblockTime+0x30>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a04      	ldr	r2, [pc, #16]	; (80029a8 <prvResetNextTaskUnblockTime+0x34>)
 8002996:	6013      	str	r3, [r2, #0]
}
 8002998:	bf00      	nop
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	20000160 	.word	0x20000160
 80029a8:	200001c8 	.word	0x200001c8

080029ac <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80029ac:	b480      	push	{r7}
 80029ae:	b085      	sub	sp, #20
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	3b04      	subs	r3, #4
 80029bc:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80029c4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	3b04      	subs	r3, #4
 80029ca:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	f023 0201 	bic.w	r2, r3, #1
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	3b04      	subs	r3, #4
 80029da:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80029dc:	4a0c      	ldr	r2, [pc, #48]	; (8002a10 <pxPortInitialiseStack+0x64>)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	3b14      	subs	r3, #20
 80029e6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	3b04      	subs	r3, #4
 80029f2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f06f 0202 	mvn.w	r2, #2
 80029fa:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	3b20      	subs	r3, #32
 8002a00:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002a02:	68fb      	ldr	r3, [r7, #12]
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3714      	adds	r7, #20
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr
 8002a10:	08002a15 	.word	0x08002a15

08002a14 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002a1e:	4b12      	ldr	r3, [pc, #72]	; (8002a68 <prvTaskExitError+0x54>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a26:	d00a      	beq.n	8002a3e <prvTaskExitError+0x2a>
        __asm volatile
 8002a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a2c:	f383 8811 	msr	BASEPRI, r3
 8002a30:	f3bf 8f6f 	isb	sy
 8002a34:	f3bf 8f4f 	dsb	sy
 8002a38:	60fb      	str	r3, [r7, #12]
    }
 8002a3a:	bf00      	nop
 8002a3c:	e7fe      	b.n	8002a3c <prvTaskExitError+0x28>
        __asm volatile
 8002a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a42:	f383 8811 	msr	BASEPRI, r3
 8002a46:	f3bf 8f6f 	isb	sy
 8002a4a:	f3bf 8f4f 	dsb	sy
 8002a4e:	60bb      	str	r3, [r7, #8]
    }
 8002a50:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002a52:	bf00      	nop
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d0fc      	beq.n	8002a54 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002a5a:	bf00      	nop
 8002a5c:	bf00      	nop
 8002a5e:	3714      	adds	r7, #20
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr
 8002a68:	20000010 	.word	0x20000010
 8002a6c:	00000000 	.word	0x00000000

08002a70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002a70:	4b07      	ldr	r3, [pc, #28]	; (8002a90 <pxCurrentTCBConst2>)
 8002a72:	6819      	ldr	r1, [r3, #0]
 8002a74:	6808      	ldr	r0, [r1, #0]
 8002a76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a7a:	f380 8809 	msr	PSP, r0
 8002a7e:	f3bf 8f6f 	isb	sy
 8002a82:	f04f 0000 	mov.w	r0, #0
 8002a86:	f380 8811 	msr	BASEPRI, r0
 8002a8a:	4770      	bx	lr
 8002a8c:	f3af 8000 	nop.w

08002a90 <pxCurrentTCBConst2>:
 8002a90:	200000d0 	.word	0x200000d0
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002a94:	bf00      	nop
 8002a96:	bf00      	nop

08002a98 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002a98:	4808      	ldr	r0, [pc, #32]	; (8002abc <prvPortStartFirstTask+0x24>)
 8002a9a:	6800      	ldr	r0, [r0, #0]
 8002a9c:	6800      	ldr	r0, [r0, #0]
 8002a9e:	f380 8808 	msr	MSP, r0
 8002aa2:	f04f 0000 	mov.w	r0, #0
 8002aa6:	f380 8814 	msr	CONTROL, r0
 8002aaa:	b662      	cpsie	i
 8002aac:	b661      	cpsie	f
 8002aae:	f3bf 8f4f 	dsb	sy
 8002ab2:	f3bf 8f6f 	isb	sy
 8002ab6:	df00      	svc	0
 8002ab8:	bf00      	nop
 8002aba:	0000      	.short	0x0000
 8002abc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002ac0:	bf00      	nop
 8002ac2:	bf00      	nop

08002ac4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002aca:	4b46      	ldr	r3, [pc, #280]	; (8002be4 <xPortStartScheduler+0x120>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a46      	ldr	r2, [pc, #280]	; (8002be8 <xPortStartScheduler+0x124>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d10a      	bne.n	8002aea <xPortStartScheduler+0x26>
        __asm volatile
 8002ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ad8:	f383 8811 	msr	BASEPRI, r3
 8002adc:	f3bf 8f6f 	isb	sy
 8002ae0:	f3bf 8f4f 	dsb	sy
 8002ae4:	613b      	str	r3, [r7, #16]
    }
 8002ae6:	bf00      	nop
 8002ae8:	e7fe      	b.n	8002ae8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002aea:	4b3e      	ldr	r3, [pc, #248]	; (8002be4 <xPortStartScheduler+0x120>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a3f      	ldr	r2, [pc, #252]	; (8002bec <xPortStartScheduler+0x128>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d10a      	bne.n	8002b0a <xPortStartScheduler+0x46>
        __asm volatile
 8002af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af8:	f383 8811 	msr	BASEPRI, r3
 8002afc:	f3bf 8f6f 	isb	sy
 8002b00:	f3bf 8f4f 	dsb	sy
 8002b04:	60fb      	str	r3, [r7, #12]
    }
 8002b06:	bf00      	nop
 8002b08:	e7fe      	b.n	8002b08 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002b0a:	4b39      	ldr	r3, [pc, #228]	; (8002bf0 <xPortStartScheduler+0x12c>)
 8002b0c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	22ff      	movs	r2, #255	; 0xff
 8002b1a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002b24:	78fb      	ldrb	r3, [r7, #3]
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002b2c:	b2da      	uxtb	r2, r3
 8002b2e:	4b31      	ldr	r3, [pc, #196]	; (8002bf4 <xPortStartScheduler+0x130>)
 8002b30:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002b32:	4b31      	ldr	r3, [pc, #196]	; (8002bf8 <xPortStartScheduler+0x134>)
 8002b34:	2207      	movs	r2, #7
 8002b36:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002b38:	e009      	b.n	8002b4e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002b3a:	4b2f      	ldr	r3, [pc, #188]	; (8002bf8 <xPortStartScheduler+0x134>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	4a2d      	ldr	r2, [pc, #180]	; (8002bf8 <xPortStartScheduler+0x134>)
 8002b42:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002b44:	78fb      	ldrb	r3, [r7, #3]
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002b4e:	78fb      	ldrb	r3, [r7, #3]
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b56:	2b80      	cmp	r3, #128	; 0x80
 8002b58:	d0ef      	beq.n	8002b3a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002b5a:	4b27      	ldr	r3, [pc, #156]	; (8002bf8 <xPortStartScheduler+0x134>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f1c3 0307 	rsb	r3, r3, #7
 8002b62:	2b04      	cmp	r3, #4
 8002b64:	d00a      	beq.n	8002b7c <xPortStartScheduler+0xb8>
        __asm volatile
 8002b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b6a:	f383 8811 	msr	BASEPRI, r3
 8002b6e:	f3bf 8f6f 	isb	sy
 8002b72:	f3bf 8f4f 	dsb	sy
 8002b76:	60bb      	str	r3, [r7, #8]
    }
 8002b78:	bf00      	nop
 8002b7a:	e7fe      	b.n	8002b7a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002b7c:	4b1e      	ldr	r3, [pc, #120]	; (8002bf8 <xPortStartScheduler+0x134>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	021b      	lsls	r3, r3, #8
 8002b82:	4a1d      	ldr	r2, [pc, #116]	; (8002bf8 <xPortStartScheduler+0x134>)
 8002b84:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002b86:	4b1c      	ldr	r3, [pc, #112]	; (8002bf8 <xPortStartScheduler+0x134>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002b8e:	4a1a      	ldr	r2, [pc, #104]	; (8002bf8 <xPortStartScheduler+0x134>)
 8002b90:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	b2da      	uxtb	r2, r3
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002b9a:	4b18      	ldr	r3, [pc, #96]	; (8002bfc <xPortStartScheduler+0x138>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a17      	ldr	r2, [pc, #92]	; (8002bfc <xPortStartScheduler+0x138>)
 8002ba0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ba4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002ba6:	4b15      	ldr	r3, [pc, #84]	; (8002bfc <xPortStartScheduler+0x138>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a14      	ldr	r2, [pc, #80]	; (8002bfc <xPortStartScheduler+0x138>)
 8002bac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002bb0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002bb2:	f000 f963 	bl	8002e7c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002bb6:	4b12      	ldr	r3, [pc, #72]	; (8002c00 <xPortStartScheduler+0x13c>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002bbc:	f000 f982 	bl	8002ec4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002bc0:	4b10      	ldr	r3, [pc, #64]	; (8002c04 <xPortStartScheduler+0x140>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a0f      	ldr	r2, [pc, #60]	; (8002c04 <xPortStartScheduler+0x140>)
 8002bc6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002bca:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002bcc:	f7ff ff64 	bl	8002a98 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002bd0:	f7ff fdd6 	bl	8002780 <vTaskSwitchContext>
    prvTaskExitError();
 8002bd4:	f7ff ff1e 	bl	8002a14 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3718      	adds	r7, #24
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	e000ed00 	.word	0xe000ed00
 8002be8:	410fc271 	.word	0x410fc271
 8002bec:	410fc270 	.word	0x410fc270
 8002bf0:	e000e400 	.word	0xe000e400
 8002bf4:	200001d4 	.word	0x200001d4
 8002bf8:	200001d8 	.word	0x200001d8
 8002bfc:	e000ed20 	.word	0xe000ed20
 8002c00:	20000010 	.word	0x20000010
 8002c04:	e000ef34 	.word	0xe000ef34

08002c08 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b087      	sub	sp, #28
 8002c0c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002c0e:	4b37      	ldr	r3, [pc, #220]	; (8002cec <vInitPrioGroupValue+0xe4>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a37      	ldr	r2, [pc, #220]	; (8002cf0 <vInitPrioGroupValue+0xe8>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d10a      	bne.n	8002c2e <vInitPrioGroupValue+0x26>
        __asm volatile
 8002c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c1c:	f383 8811 	msr	BASEPRI, r3
 8002c20:	f3bf 8f6f 	isb	sy
 8002c24:	f3bf 8f4f 	dsb	sy
 8002c28:	613b      	str	r3, [r7, #16]
    }
 8002c2a:	bf00      	nop
 8002c2c:	e7fe      	b.n	8002c2c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002c2e:	4b2f      	ldr	r3, [pc, #188]	; (8002cec <vInitPrioGroupValue+0xe4>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a30      	ldr	r2, [pc, #192]	; (8002cf4 <vInitPrioGroupValue+0xec>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d10a      	bne.n	8002c4e <vInitPrioGroupValue+0x46>
        __asm volatile
 8002c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c3c:	f383 8811 	msr	BASEPRI, r3
 8002c40:	f3bf 8f6f 	isb	sy
 8002c44:	f3bf 8f4f 	dsb	sy
 8002c48:	60fb      	str	r3, [r7, #12]
    }
 8002c4a:	bf00      	nop
 8002c4c:	e7fe      	b.n	8002c4c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002c4e:	4b2a      	ldr	r3, [pc, #168]	; (8002cf8 <vInitPrioGroupValue+0xf0>)
 8002c50:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	22ff      	movs	r2, #255	; 0xff
 8002c5e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002c68:	78fb      	ldrb	r3, [r7, #3]
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002c70:	b2da      	uxtb	r2, r3
 8002c72:	4b22      	ldr	r3, [pc, #136]	; (8002cfc <vInitPrioGroupValue+0xf4>)
 8002c74:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002c76:	4b22      	ldr	r3, [pc, #136]	; (8002d00 <vInitPrioGroupValue+0xf8>)
 8002c78:	2207      	movs	r2, #7
 8002c7a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002c7c:	e009      	b.n	8002c92 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002c7e:	4b20      	ldr	r3, [pc, #128]	; (8002d00 <vInitPrioGroupValue+0xf8>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	3b01      	subs	r3, #1
 8002c84:	4a1e      	ldr	r2, [pc, #120]	; (8002d00 <vInitPrioGroupValue+0xf8>)
 8002c86:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002c88:	78fb      	ldrb	r3, [r7, #3]
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002c92:	78fb      	ldrb	r3, [r7, #3]
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c9a:	2b80      	cmp	r3, #128	; 0x80
 8002c9c:	d0ef      	beq.n	8002c7e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002c9e:	4b18      	ldr	r3, [pc, #96]	; (8002d00 <vInitPrioGroupValue+0xf8>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f1c3 0307 	rsb	r3, r3, #7
 8002ca6:	2b04      	cmp	r3, #4
 8002ca8:	d00a      	beq.n	8002cc0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8002caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cae:	f383 8811 	msr	BASEPRI, r3
 8002cb2:	f3bf 8f6f 	isb	sy
 8002cb6:	f3bf 8f4f 	dsb	sy
 8002cba:	60bb      	str	r3, [r7, #8]
    }
 8002cbc:	bf00      	nop
 8002cbe:	e7fe      	b.n	8002cbe <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002cc0:	4b0f      	ldr	r3, [pc, #60]	; (8002d00 <vInitPrioGroupValue+0xf8>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	021b      	lsls	r3, r3, #8
 8002cc6:	4a0e      	ldr	r2, [pc, #56]	; (8002d00 <vInitPrioGroupValue+0xf8>)
 8002cc8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002cca:	4b0d      	ldr	r3, [pc, #52]	; (8002d00 <vInitPrioGroupValue+0xf8>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002cd2:	4a0b      	ldr	r2, [pc, #44]	; (8002d00 <vInitPrioGroupValue+0xf8>)
 8002cd4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	b2da      	uxtb	r2, r3
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8002cde:	bf00      	nop
 8002ce0:	371c      	adds	r7, #28
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	e000ed00 	.word	0xe000ed00
 8002cf0:	410fc271 	.word	0x410fc271
 8002cf4:	410fc270 	.word	0x410fc270
 8002cf8:	e000e400 	.word	0xe000e400
 8002cfc:	200001d4 	.word	0x200001d4
 8002d00:	200001d8 	.word	0x200001d8

08002d04 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
        __asm volatile
 8002d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d0e:	f383 8811 	msr	BASEPRI, r3
 8002d12:	f3bf 8f6f 	isb	sy
 8002d16:	f3bf 8f4f 	dsb	sy
 8002d1a:	607b      	str	r3, [r7, #4]
    }
 8002d1c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002d1e:	4b0f      	ldr	r3, [pc, #60]	; (8002d5c <vPortEnterCritical+0x58>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	3301      	adds	r3, #1
 8002d24:	4a0d      	ldr	r2, [pc, #52]	; (8002d5c <vPortEnterCritical+0x58>)
 8002d26:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002d28:	4b0c      	ldr	r3, [pc, #48]	; (8002d5c <vPortEnterCritical+0x58>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d10f      	bne.n	8002d50 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002d30:	4b0b      	ldr	r3, [pc, #44]	; (8002d60 <vPortEnterCritical+0x5c>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00a      	beq.n	8002d50 <vPortEnterCritical+0x4c>
        __asm volatile
 8002d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d3e:	f383 8811 	msr	BASEPRI, r3
 8002d42:	f3bf 8f6f 	isb	sy
 8002d46:	f3bf 8f4f 	dsb	sy
 8002d4a:	603b      	str	r3, [r7, #0]
    }
 8002d4c:	bf00      	nop
 8002d4e:	e7fe      	b.n	8002d4e <vPortEnterCritical+0x4a>
    }
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr
 8002d5c:	20000010 	.word	0x20000010
 8002d60:	e000ed04 	.word	0xe000ed04

08002d64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002d6a:	4b12      	ldr	r3, [pc, #72]	; (8002db4 <vPortExitCritical+0x50>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d10a      	bne.n	8002d88 <vPortExitCritical+0x24>
        __asm volatile
 8002d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d76:	f383 8811 	msr	BASEPRI, r3
 8002d7a:	f3bf 8f6f 	isb	sy
 8002d7e:	f3bf 8f4f 	dsb	sy
 8002d82:	607b      	str	r3, [r7, #4]
    }
 8002d84:	bf00      	nop
 8002d86:	e7fe      	b.n	8002d86 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002d88:	4b0a      	ldr	r3, [pc, #40]	; (8002db4 <vPortExitCritical+0x50>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	4a09      	ldr	r2, [pc, #36]	; (8002db4 <vPortExitCritical+0x50>)
 8002d90:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002d92:	4b08      	ldr	r3, [pc, #32]	; (8002db4 <vPortExitCritical+0x50>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d105      	bne.n	8002da6 <vPortExitCritical+0x42>
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002da4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002da6:	bf00      	nop
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	20000010 	.word	0x20000010
	...

08002dc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002dc0:	f3ef 8009 	mrs	r0, PSP
 8002dc4:	f3bf 8f6f 	isb	sy
 8002dc8:	4b15      	ldr	r3, [pc, #84]	; (8002e20 <pxCurrentTCBConst>)
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	f01e 0f10 	tst.w	lr, #16
 8002dd0:	bf08      	it	eq
 8002dd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002dd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dda:	6010      	str	r0, [r2, #0]
 8002ddc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002de0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002de4:	f380 8811 	msr	BASEPRI, r0
 8002de8:	f3bf 8f4f 	dsb	sy
 8002dec:	f3bf 8f6f 	isb	sy
 8002df0:	f7ff fcc6 	bl	8002780 <vTaskSwitchContext>
 8002df4:	f04f 0000 	mov.w	r0, #0
 8002df8:	f380 8811 	msr	BASEPRI, r0
 8002dfc:	bc09      	pop	{r0, r3}
 8002dfe:	6819      	ldr	r1, [r3, #0]
 8002e00:	6808      	ldr	r0, [r1, #0]
 8002e02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e06:	f01e 0f10 	tst.w	lr, #16
 8002e0a:	bf08      	it	eq
 8002e0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002e10:	f380 8809 	msr	PSP, r0
 8002e14:	f3bf 8f6f 	isb	sy
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	f3af 8000 	nop.w

08002e20 <pxCurrentTCBConst>:
 8002e20:	200000d0 	.word	0x200000d0
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002e24:	bf00      	nop
 8002e26:	bf00      	nop

08002e28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
        __asm volatile
 8002e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e32:	f383 8811 	msr	BASEPRI, r3
 8002e36:	f3bf 8f6f 	isb	sy
 8002e3a:	f3bf 8f4f 	dsb	sy
 8002e3e:	607b      	str	r3, [r7, #4]
    }
 8002e40:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8002e42:	f001 fcc5 	bl	80047d0 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002e46:	f7ff fc01 	bl	800264c <xTaskIncrementTick>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d006      	beq.n	8002e5e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8002e50:	f001 fd1c 	bl	800488c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002e54:	4b08      	ldr	r3, [pc, #32]	; (8002e78 <SysTick_Handler+0x50>)
 8002e56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e5a:	601a      	str	r2, [r3, #0]
 8002e5c:	e001      	b.n	8002e62 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8002e5e:	f001 fcf9 	bl	8004854 <SEGGER_SYSVIEW_RecordExitISR>
 8002e62:	2300      	movs	r3, #0
 8002e64:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	f383 8811 	msr	BASEPRI, r3
    }
 8002e6c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8002e6e:	bf00      	nop
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	e000ed04 	.word	0xe000ed04

08002e7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002e80:	4b0b      	ldr	r3, [pc, #44]	; (8002eb0 <vPortSetupTimerInterrupt+0x34>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002e86:	4b0b      	ldr	r3, [pc, #44]	; (8002eb4 <vPortSetupTimerInterrupt+0x38>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002e8c:	4b0a      	ldr	r3, [pc, #40]	; (8002eb8 <vPortSetupTimerInterrupt+0x3c>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a0a      	ldr	r2, [pc, #40]	; (8002ebc <vPortSetupTimerInterrupt+0x40>)
 8002e92:	fba2 2303 	umull	r2, r3, r2, r3
 8002e96:	099b      	lsrs	r3, r3, #6
 8002e98:	4a09      	ldr	r2, [pc, #36]	; (8002ec0 <vPortSetupTimerInterrupt+0x44>)
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002e9e:	4b04      	ldr	r3, [pc, #16]	; (8002eb0 <vPortSetupTimerInterrupt+0x34>)
 8002ea0:	2207      	movs	r2, #7
 8002ea2:	601a      	str	r2, [r3, #0]
}
 8002ea4:	bf00      	nop
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	e000e010 	.word	0xe000e010
 8002eb4:	e000e018 	.word	0xe000e018
 8002eb8:	20000000 	.word	0x20000000
 8002ebc:	10624dd3 	.word	0x10624dd3
 8002ec0:	e000e014 	.word	0xe000e014

08002ec4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002ec4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002ed4 <vPortEnableVFP+0x10>
 8002ec8:	6801      	ldr	r1, [r0, #0]
 8002eca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002ece:	6001      	str	r1, [r0, #0]
 8002ed0:	4770      	bx	lr
 8002ed2:	0000      	.short	0x0000
 8002ed4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002ed8:	bf00      	nop
 8002eda:	bf00      	nop

08002edc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b08a      	sub	sp, #40	; 0x28
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8002ee8:	f7ff fb10 	bl	800250c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002eec:	4b65      	ldr	r3, [pc, #404]	; (8003084 <pvPortMalloc+0x1a8>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d101      	bne.n	8002ef8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002ef4:	f000 f934 	bl	8003160 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002ef8:	4b63      	ldr	r3, [pc, #396]	; (8003088 <pvPortMalloc+0x1ac>)
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4013      	ands	r3, r2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	f040 80a7 	bne.w	8003054 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d02d      	beq.n	8002f68 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8002f0c:	2208      	movs	r2, #8
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d227      	bcs.n	8002f68 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8002f18:	2208      	movs	r2, #8
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f003 0307 	and.w	r3, r3, #7
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d021      	beq.n	8002f6e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f023 0307 	bic.w	r3, r3, #7
 8002f30:	3308      	adds	r3, #8
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d214      	bcs.n	8002f62 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f023 0307 	bic.w	r3, r3, #7
 8002f3e:	3308      	adds	r3, #8
 8002f40:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f003 0307 	and.w	r3, r3, #7
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d010      	beq.n	8002f6e <pvPortMalloc+0x92>
        __asm volatile
 8002f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f50:	f383 8811 	msr	BASEPRI, r3
 8002f54:	f3bf 8f6f 	isb	sy
 8002f58:	f3bf 8f4f 	dsb	sy
 8002f5c:	617b      	str	r3, [r7, #20]
    }
 8002f5e:	bf00      	nop
 8002f60:	e7fe      	b.n	8002f60 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8002f62:	2300      	movs	r3, #0
 8002f64:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002f66:	e002      	b.n	8002f6e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	607b      	str	r3, [r7, #4]
 8002f6c:	e000      	b.n	8002f70 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002f6e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d06e      	beq.n	8003054 <pvPortMalloc+0x178>
 8002f76:	4b45      	ldr	r3, [pc, #276]	; (800308c <pvPortMalloc+0x1b0>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d869      	bhi.n	8003054 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002f80:	4b43      	ldr	r3, [pc, #268]	; (8003090 <pvPortMalloc+0x1b4>)
 8002f82:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8002f84:	4b42      	ldr	r3, [pc, #264]	; (8003090 <pvPortMalloc+0x1b4>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002f8a:	e004      	b.n	8002f96 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8002f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d903      	bls.n	8002fa8 <pvPortMalloc+0xcc>
 8002fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1f1      	bne.n	8002f8c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002fa8:	4b36      	ldr	r3, [pc, #216]	; (8003084 <pvPortMalloc+0x1a8>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d050      	beq.n	8003054 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002fb2:	6a3b      	ldr	r3, [r7, #32]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2208      	movs	r2, #8
 8002fb8:	4413      	add	r3, r2
 8002fba:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	6a3b      	ldr	r3, [r7, #32]
 8002fc2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc6:	685a      	ldr	r2, [r3, #4]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	1ad2      	subs	r2, r2, r3
 8002fcc:	2308      	movs	r3, #8
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d91f      	bls.n	8003014 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002fd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4413      	add	r3, r2
 8002fda:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	f003 0307 	and.w	r3, r3, #7
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00a      	beq.n	8002ffc <pvPortMalloc+0x120>
        __asm volatile
 8002fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fea:	f383 8811 	msr	BASEPRI, r3
 8002fee:	f3bf 8f6f 	isb	sy
 8002ff2:	f3bf 8f4f 	dsb	sy
 8002ff6:	613b      	str	r3, [r7, #16]
    }
 8002ff8:	bf00      	nop
 8002ffa:	e7fe      	b.n	8002ffa <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffe:	685a      	ldr	r2, [r3, #4]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	1ad2      	subs	r2, r2, r3
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800300e:	69b8      	ldr	r0, [r7, #24]
 8003010:	f000 f908 	bl	8003224 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003014:	4b1d      	ldr	r3, [pc, #116]	; (800308c <pvPortMalloc+0x1b0>)
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	4a1b      	ldr	r2, [pc, #108]	; (800308c <pvPortMalloc+0x1b0>)
 8003020:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003022:	4b1a      	ldr	r3, [pc, #104]	; (800308c <pvPortMalloc+0x1b0>)
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	4b1b      	ldr	r3, [pc, #108]	; (8003094 <pvPortMalloc+0x1b8>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	429a      	cmp	r2, r3
 800302c:	d203      	bcs.n	8003036 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800302e:	4b17      	ldr	r3, [pc, #92]	; (800308c <pvPortMalloc+0x1b0>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a18      	ldr	r2, [pc, #96]	; (8003094 <pvPortMalloc+0x1b8>)
 8003034:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003038:	685a      	ldr	r2, [r3, #4]
 800303a:	4b13      	ldr	r3, [pc, #76]	; (8003088 <pvPortMalloc+0x1ac>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	431a      	orrs	r2, r3
 8003040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003042:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003046:	2200      	movs	r2, #0
 8003048:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800304a:	4b13      	ldr	r3, [pc, #76]	; (8003098 <pvPortMalloc+0x1bc>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	3301      	adds	r3, #1
 8003050:	4a11      	ldr	r2, [pc, #68]	; (8003098 <pvPortMalloc+0x1bc>)
 8003052:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003054:	f7ff fa68 	bl	8002528 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	f003 0307 	and.w	r3, r3, #7
 800305e:	2b00      	cmp	r3, #0
 8003060:	d00a      	beq.n	8003078 <pvPortMalloc+0x19c>
        __asm volatile
 8003062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003066:	f383 8811 	msr	BASEPRI, r3
 800306a:	f3bf 8f6f 	isb	sy
 800306e:	f3bf 8f4f 	dsb	sy
 8003072:	60fb      	str	r3, [r7, #12]
    }
 8003074:	bf00      	nop
 8003076:	e7fe      	b.n	8003076 <pvPortMalloc+0x19a>
    return pvReturn;
 8003078:	69fb      	ldr	r3, [r7, #28]
}
 800307a:	4618      	mov	r0, r3
 800307c:	3728      	adds	r7, #40	; 0x28
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	20012de4 	.word	0x20012de4
 8003088:	20012df8 	.word	0x20012df8
 800308c:	20012de8 	.word	0x20012de8
 8003090:	20012ddc 	.word	0x20012ddc
 8003094:	20012dec 	.word	0x20012dec
 8003098:	20012df0 	.word	0x20012df0

0800309c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b086      	sub	sp, #24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d04d      	beq.n	800314a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80030ae:	2308      	movs	r3, #8
 80030b0:	425b      	negs	r3, r3
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	4413      	add	r3, r2
 80030b6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	685a      	ldr	r2, [r3, #4]
 80030c0:	4b24      	ldr	r3, [pc, #144]	; (8003154 <vPortFree+0xb8>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4013      	ands	r3, r2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10a      	bne.n	80030e0 <vPortFree+0x44>
        __asm volatile
 80030ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ce:	f383 8811 	msr	BASEPRI, r3
 80030d2:	f3bf 8f6f 	isb	sy
 80030d6:	f3bf 8f4f 	dsb	sy
 80030da:	60fb      	str	r3, [r7, #12]
    }
 80030dc:	bf00      	nop
 80030de:	e7fe      	b.n	80030de <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d00a      	beq.n	80030fe <vPortFree+0x62>
        __asm volatile
 80030e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ec:	f383 8811 	msr	BASEPRI, r3
 80030f0:	f3bf 8f6f 	isb	sy
 80030f4:	f3bf 8f4f 	dsb	sy
 80030f8:	60bb      	str	r3, [r7, #8]
    }
 80030fa:	bf00      	nop
 80030fc:	e7fe      	b.n	80030fc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	685a      	ldr	r2, [r3, #4]
 8003102:	4b14      	ldr	r3, [pc, #80]	; (8003154 <vPortFree+0xb8>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4013      	ands	r3, r2
 8003108:	2b00      	cmp	r3, #0
 800310a:	d01e      	beq.n	800314a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d11a      	bne.n	800314a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	685a      	ldr	r2, [r3, #4]
 8003118:	4b0e      	ldr	r3, [pc, #56]	; (8003154 <vPortFree+0xb8>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	43db      	mvns	r3, r3
 800311e:	401a      	ands	r2, r3
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003124:	f7ff f9f2 	bl	800250c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	4b0a      	ldr	r3, [pc, #40]	; (8003158 <vPortFree+0xbc>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4413      	add	r3, r2
 8003132:	4a09      	ldr	r2, [pc, #36]	; (8003158 <vPortFree+0xbc>)
 8003134:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003136:	6938      	ldr	r0, [r7, #16]
 8003138:	f000 f874 	bl	8003224 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800313c:	4b07      	ldr	r3, [pc, #28]	; (800315c <vPortFree+0xc0>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	3301      	adds	r3, #1
 8003142:	4a06      	ldr	r2, [pc, #24]	; (800315c <vPortFree+0xc0>)
 8003144:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003146:	f7ff f9ef 	bl	8002528 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800314a:	bf00      	nop
 800314c:	3718      	adds	r7, #24
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	20012df8 	.word	0x20012df8
 8003158:	20012de8 	.word	0x20012de8
 800315c:	20012df4 	.word	0x20012df4

08003160 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003160:	b480      	push	{r7}
 8003162:	b085      	sub	sp, #20
 8003164:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003166:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800316a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800316c:	4b27      	ldr	r3, [pc, #156]	; (800320c <prvHeapInit+0xac>)
 800316e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f003 0307 	and.w	r3, r3, #7
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00c      	beq.n	8003194 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	3307      	adds	r3, #7
 800317e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f023 0307 	bic.w	r3, r3, #7
 8003186:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003188:	68ba      	ldr	r2, [r7, #8]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	4a1f      	ldr	r2, [pc, #124]	; (800320c <prvHeapInit+0xac>)
 8003190:	4413      	add	r3, r2
 8003192:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003198:	4a1d      	ldr	r2, [pc, #116]	; (8003210 <prvHeapInit+0xb0>)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800319e:	4b1c      	ldr	r3, [pc, #112]	; (8003210 <prvHeapInit+0xb0>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	68ba      	ldr	r2, [r7, #8]
 80031a8:	4413      	add	r3, r2
 80031aa:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80031ac:	2208      	movs	r2, #8
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	1a9b      	subs	r3, r3, r2
 80031b2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f023 0307 	bic.w	r3, r3, #7
 80031ba:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	4a15      	ldr	r2, [pc, #84]	; (8003214 <prvHeapInit+0xb4>)
 80031c0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80031c2:	4b14      	ldr	r3, [pc, #80]	; (8003214 <prvHeapInit+0xb4>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2200      	movs	r2, #0
 80031c8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80031ca:	4b12      	ldr	r3, [pc, #72]	; (8003214 <prvHeapInit+0xb4>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2200      	movs	r2, #0
 80031d0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	1ad2      	subs	r2, r2, r3
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80031e0:	4b0c      	ldr	r3, [pc, #48]	; (8003214 <prvHeapInit+0xb4>)
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	4a0a      	ldr	r2, [pc, #40]	; (8003218 <prvHeapInit+0xb8>)
 80031ee:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	4a09      	ldr	r2, [pc, #36]	; (800321c <prvHeapInit+0xbc>)
 80031f6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80031f8:	4b09      	ldr	r3, [pc, #36]	; (8003220 <prvHeapInit+0xc0>)
 80031fa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80031fe:	601a      	str	r2, [r3, #0]
}
 8003200:	bf00      	nop
 8003202:	3714      	adds	r7, #20
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr
 800320c:	200001dc 	.word	0x200001dc
 8003210:	20012ddc 	.word	0x20012ddc
 8003214:	20012de4 	.word	0x20012de4
 8003218:	20012dec 	.word	0x20012dec
 800321c:	20012de8 	.word	0x20012de8
 8003220:	20012df8 	.word	0x20012df8

08003224 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800322c:	4b28      	ldr	r3, [pc, #160]	; (80032d0 <prvInsertBlockIntoFreeList+0xac>)
 800322e:	60fb      	str	r3, [r7, #12]
 8003230:	e002      	b.n	8003238 <prvInsertBlockIntoFreeList+0x14>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	60fb      	str	r3, [r7, #12]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	429a      	cmp	r2, r3
 8003240:	d8f7      	bhi.n	8003232 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	68ba      	ldr	r2, [r7, #8]
 800324c:	4413      	add	r3, r2
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	429a      	cmp	r2, r3
 8003252:	d108      	bne.n	8003266 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	685a      	ldr	r2, [r3, #4]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	441a      	add	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	68ba      	ldr	r2, [r7, #8]
 8003270:	441a      	add	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	429a      	cmp	r2, r3
 8003278:	d118      	bne.n	80032ac <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	4b15      	ldr	r3, [pc, #84]	; (80032d4 <prvInsertBlockIntoFreeList+0xb0>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	429a      	cmp	r2, r3
 8003284:	d00d      	beq.n	80032a2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685a      	ldr	r2, [r3, #4]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	441a      	add	r2, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	601a      	str	r2, [r3, #0]
 80032a0:	e008      	b.n	80032b4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80032a2:	4b0c      	ldr	r3, [pc, #48]	; (80032d4 <prvInsertBlockIntoFreeList+0xb0>)
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	601a      	str	r2, [r3, #0]
 80032aa:	e003      	b.n	80032b4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80032b4:	68fa      	ldr	r2, [r7, #12]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d002      	beq.n	80032c2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80032c2:	bf00      	nop
 80032c4:	3714      	adds	r7, #20
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	20012ddc 	.word	0x20012ddc
 80032d4:	20012de4 	.word	0x20012de4

080032d8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80032d8:	b580      	push	{r7, lr}
 80032da:	b086      	sub	sp, #24
 80032dc:	af02      	add	r7, sp, #8
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
 80032e4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80032e6:	2205      	movs	r2, #5
 80032e8:	492b      	ldr	r1, [pc, #172]	; (8003398 <SYSVIEW_AddTask+0xc0>)
 80032ea:	68b8      	ldr	r0, [r7, #8]
 80032ec:	f001 fd4c 	bl	8004d88 <memcmp>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d04b      	beq.n	800338e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80032f6:	4b29      	ldr	r3, [pc, #164]	; (800339c <SYSVIEW_AddTask+0xc4>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2b07      	cmp	r3, #7
 80032fc:	d903      	bls.n	8003306 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80032fe:	4828      	ldr	r0, [pc, #160]	; (80033a0 <SYSVIEW_AddTask+0xc8>)
 8003300:	f001 fcb2 	bl	8004c68 <SEGGER_SYSVIEW_Warn>
    return;
 8003304:	e044      	b.n	8003390 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003306:	4b25      	ldr	r3, [pc, #148]	; (800339c <SYSVIEW_AddTask+0xc4>)
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	4926      	ldr	r1, [pc, #152]	; (80033a4 <SYSVIEW_AddTask+0xcc>)
 800330c:	4613      	mov	r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	4413      	add	r3, r2
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	440b      	add	r3, r1
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800331a:	4b20      	ldr	r3, [pc, #128]	; (800339c <SYSVIEW_AddTask+0xc4>)
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	4921      	ldr	r1, [pc, #132]	; (80033a4 <SYSVIEW_AddTask+0xcc>)
 8003320:	4613      	mov	r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	4413      	add	r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	440b      	add	r3, r1
 800332a:	3304      	adds	r3, #4
 800332c:	68ba      	ldr	r2, [r7, #8]
 800332e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003330:	4b1a      	ldr	r3, [pc, #104]	; (800339c <SYSVIEW_AddTask+0xc4>)
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	491b      	ldr	r1, [pc, #108]	; (80033a4 <SYSVIEW_AddTask+0xcc>)
 8003336:	4613      	mov	r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	4413      	add	r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	440b      	add	r3, r1
 8003340:	3308      	adds	r3, #8
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003346:	4b15      	ldr	r3, [pc, #84]	; (800339c <SYSVIEW_AddTask+0xc4>)
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	4916      	ldr	r1, [pc, #88]	; (80033a4 <SYSVIEW_AddTask+0xcc>)
 800334c:	4613      	mov	r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	4413      	add	r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	440b      	add	r3, r1
 8003356:	330c      	adds	r3, #12
 8003358:	683a      	ldr	r2, [r7, #0]
 800335a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800335c:	4b0f      	ldr	r3, [pc, #60]	; (800339c <SYSVIEW_AddTask+0xc4>)
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	4910      	ldr	r1, [pc, #64]	; (80033a4 <SYSVIEW_AddTask+0xcc>)
 8003362:	4613      	mov	r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	4413      	add	r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	440b      	add	r3, r1
 800336c:	3310      	adds	r3, #16
 800336e:	69ba      	ldr	r2, [r7, #24]
 8003370:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003372:	4b0a      	ldr	r3, [pc, #40]	; (800339c <SYSVIEW_AddTask+0xc4>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	3301      	adds	r3, #1
 8003378:	4a08      	ldr	r2, [pc, #32]	; (800339c <SYSVIEW_AddTask+0xc4>)
 800337a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	9300      	str	r3, [sp, #0]
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	68b9      	ldr	r1, [r7, #8]
 8003386:	68f8      	ldr	r0, [r7, #12]
 8003388:	f000 f80e 	bl	80033a8 <SYSVIEW_SendTaskInfo>
 800338c:	e000      	b.n	8003390 <SYSVIEW_AddTask+0xb8>
    return;
 800338e:	bf00      	nop

}
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	0800572c 	.word	0x0800572c
 800339c:	20012e9c 	.word	0x20012e9c
 80033a0:	08005734 	.word	0x08005734
 80033a4:	20012dfc 	.word	0x20012dfc

080033a8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b08a      	sub	sp, #40	; 0x28
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
 80033b4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80033b6:	f107 0314 	add.w	r3, r7, #20
 80033ba:	2214      	movs	r2, #20
 80033bc:	2100      	movs	r1, #0
 80033be:	4618      	mov	r0, r3
 80033c0:	f001 fcf2 	bl	8004da8 <memset>
  TaskInfo.TaskID     = TaskID;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80033d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80033d8:	f107 0314 	add.w	r3, r7, #20
 80033dc:	4618      	mov	r0, r3
 80033de:	f001 f8cd 	bl	800457c <SEGGER_SYSVIEW_SendTaskInfo>
}
 80033e2:	bf00      	nop
 80033e4:	3728      	adds	r7, #40	; 0x28
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
	...

080033ec <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80033f2:	4b24      	ldr	r3, [pc, #144]	; (8003484 <_DoInit+0x98>)
 80033f4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2203      	movs	r2, #3
 80033fa:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2203      	movs	r2, #3
 8003400:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a20      	ldr	r2, [pc, #128]	; (8003488 <_DoInit+0x9c>)
 8003406:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a20      	ldr	r2, [pc, #128]	; (800348c <_DoInit+0xa0>)
 800340c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003414:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4a17      	ldr	r2, [pc, #92]	; (8003488 <_DoInit+0x9c>)
 800342c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a17      	ldr	r2, [pc, #92]	; (8003490 <_DoInit+0xa4>)
 8003432:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2210      	movs	r2, #16
 8003438:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	3307      	adds	r3, #7
 8003450:	4a10      	ldr	r2, [pc, #64]	; (8003494 <_DoInit+0xa8>)
 8003452:	6810      	ldr	r0, [r2, #0]
 8003454:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003456:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a0e      	ldr	r2, [pc, #56]	; (8003498 <_DoInit+0xac>)
 800345e:	6810      	ldr	r0, [r2, #0]
 8003460:	6018      	str	r0, [r3, #0]
 8003462:	8891      	ldrh	r1, [r2, #4]
 8003464:	7992      	ldrb	r2, [r2, #6]
 8003466:	8099      	strh	r1, [r3, #4]
 8003468:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800346a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2220      	movs	r2, #32
 8003472:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003474:	f3bf 8f5f 	dmb	sy
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr
 8003484:	20012ea0 	.word	0x20012ea0
 8003488:	08005784 	.word	0x08005784
 800348c:	20012f48 	.word	0x20012f48
 8003490:	20013348 	.word	0x20013348
 8003494:	08005790 	.word	0x08005790
 8003498:	08005794 	.word	0x08005794

0800349c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800349c:	b580      	push	{r7, lr}
 800349e:	b08c      	sub	sp, #48	; 0x30
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80034a8:	4b3e      	ldr	r3, [pc, #248]	; (80035a4 <SEGGER_RTT_ReadNoLock+0x108>)
 80034aa:	623b      	str	r3, [r7, #32]
 80034ac:	6a3b      	ldr	r3, [r7, #32]
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d101      	bne.n	80034ba <SEGGER_RTT_ReadNoLock+0x1e>
 80034b6:	f7ff ff99 	bl	80033ec <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	4613      	mov	r3, r2
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	4413      	add	r3, r2
 80034c2:	00db      	lsls	r3, r3, #3
 80034c4:	3360      	adds	r3, #96	; 0x60
 80034c6:	4a37      	ldr	r2, [pc, #220]	; (80035a4 <SEGGER_RTT_ReadNoLock+0x108>)
 80034c8:	4413      	add	r3, r2
 80034ca:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80034dc:	2300      	movs	r3, #0
 80034de:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80034e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d92b      	bls.n	8003540 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	689a      	ldr	r2, [r3, #8]
 80034ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80034f2:	697a      	ldr	r2, [r7, #20]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4293      	cmp	r3, r2
 80034f8:	bf28      	it	cs
 80034fa:	4613      	movcs	r3, r2
 80034fc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	685a      	ldr	r2, [r3, #4]
 8003502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003504:	4413      	add	r3, r2
 8003506:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003508:	697a      	ldr	r2, [r7, #20]
 800350a:	6939      	ldr	r1, [r7, #16]
 800350c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800350e:	f001 fc79 	bl	8004e04 <memcpy>
    NumBytesRead += NumBytesRem;
 8003512:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	4413      	add	r3, r2
 8003518:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800351a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	4413      	add	r3, r2
 8003520:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800352a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	4413      	add	r3, r2
 8003530:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003538:	429a      	cmp	r2, r3
 800353a:	d101      	bne.n	8003540 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800353c:	2300      	movs	r3, #0
 800353e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003548:	697a      	ldr	r2, [r7, #20]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4293      	cmp	r3, r2
 800354e:	bf28      	it	cs
 8003550:	4613      	movcs	r3, r2
 8003552:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d019      	beq.n	800358e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	685a      	ldr	r2, [r3, #4]
 800355e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003560:	4413      	add	r3, r2
 8003562:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003564:	697a      	ldr	r2, [r7, #20]
 8003566:	6939      	ldr	r1, [r7, #16]
 8003568:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800356a:	f001 fc4b 	bl	8004e04 <memcpy>
    NumBytesRead += NumBytesRem;
 800356e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	4413      	add	r3, r2
 8003574:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	4413      	add	r3, r2
 800357c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003586:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	4413      	add	r3, r2
 800358c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800358e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003590:	2b00      	cmp	r3, #0
 8003592:	d002      	beq.n	800359a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003598:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800359a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800359c:	4618      	mov	r0, r3
 800359e:	3730      	adds	r7, #48	; 0x30
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	20012ea0 	.word	0x20012ea0

080035a8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80035a8:	b480      	push	{r7}
 80035aa:	b087      	sub	sp, #28
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80035b4:	2300      	movs	r3, #0
 80035b6:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80035b8:	e002      	b.n	80035c0 <_EncodeStr+0x18>
    Len++;
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	3301      	adds	r3, #1
 80035be:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80035c0:	68ba      	ldr	r2, [r7, #8]
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	4413      	add	r3, r2
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d1f6      	bne.n	80035ba <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d901      	bls.n	80035d8 <_EncodeStr+0x30>
    Len = Limit;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	2bfe      	cmp	r3, #254	; 0xfe
 80035dc:	d806      	bhi.n	80035ec <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	1c5a      	adds	r2, r3, #1
 80035e2:	60fa      	str	r2, [r7, #12]
 80035e4:	693a      	ldr	r2, [r7, #16]
 80035e6:	b2d2      	uxtb	r2, r2
 80035e8:	701a      	strb	r2, [r3, #0]
 80035ea:	e011      	b.n	8003610 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	1c5a      	adds	r2, r3, #1
 80035f0:	60fa      	str	r2, [r7, #12]
 80035f2:	22ff      	movs	r2, #255	; 0xff
 80035f4:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	1c5a      	adds	r2, r3, #1
 80035fa:	60fa      	str	r2, [r7, #12]
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	b2d2      	uxtb	r2, r2
 8003600:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	0a19      	lsrs	r1, r3, #8
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	1c5a      	adds	r2, r3, #1
 800360a:	60fa      	str	r2, [r7, #12]
 800360c:	b2ca      	uxtb	r2, r1
 800360e:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8003610:	2300      	movs	r3, #0
 8003612:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003614:	e00a      	b.n	800362c <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8003616:	68ba      	ldr	r2, [r7, #8]
 8003618:	1c53      	adds	r3, r2, #1
 800361a:	60bb      	str	r3, [r7, #8]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	1c59      	adds	r1, r3, #1
 8003620:	60f9      	str	r1, [r7, #12]
 8003622:	7812      	ldrb	r2, [r2, #0]
 8003624:	701a      	strb	r2, [r3, #0]
    n++;
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	3301      	adds	r3, #1
 800362a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800362c:	697a      	ldr	r2, [r7, #20]
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	429a      	cmp	r2, r3
 8003632:	d3f0      	bcc.n	8003616 <_EncodeStr+0x6e>
  }
  return pPayload;
 8003634:	68fb      	ldr	r3, [r7, #12]
}
 8003636:	4618      	mov	r0, r3
 8003638:	371c      	adds	r7, #28
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr

08003642 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8003642:	b480      	push	{r7}
 8003644:	b083      	sub	sp, #12
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	3304      	adds	r3, #4
}
 800364e:	4618      	mov	r0, r3
 8003650:	370c      	adds	r7, #12
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
	...

0800365c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003662:	4b35      	ldr	r3, [pc, #212]	; (8003738 <_HandleIncomingPacket+0xdc>)
 8003664:	7e1b      	ldrb	r3, [r3, #24]
 8003666:	4618      	mov	r0, r3
 8003668:	1cfb      	adds	r3, r7, #3
 800366a:	2201      	movs	r2, #1
 800366c:	4619      	mov	r1, r3
 800366e:	f7ff ff15 	bl	800349c <SEGGER_RTT_ReadNoLock>
 8003672:	4603      	mov	r3, r0
 8003674:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2b00      	cmp	r3, #0
 800367a:	dd59      	ble.n	8003730 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 800367c:	78fb      	ldrb	r3, [r7, #3]
 800367e:	2b80      	cmp	r3, #128	; 0x80
 8003680:	d032      	beq.n	80036e8 <_HandleIncomingPacket+0x8c>
 8003682:	2b80      	cmp	r3, #128	; 0x80
 8003684:	dc42      	bgt.n	800370c <_HandleIncomingPacket+0xb0>
 8003686:	2b07      	cmp	r3, #7
 8003688:	dc16      	bgt.n	80036b8 <_HandleIncomingPacket+0x5c>
 800368a:	2b00      	cmp	r3, #0
 800368c:	dd3e      	ble.n	800370c <_HandleIncomingPacket+0xb0>
 800368e:	3b01      	subs	r3, #1
 8003690:	2b06      	cmp	r3, #6
 8003692:	d83b      	bhi.n	800370c <_HandleIncomingPacket+0xb0>
 8003694:	a201      	add	r2, pc, #4	; (adr r2, 800369c <_HandleIncomingPacket+0x40>)
 8003696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800369a:	bf00      	nop
 800369c:	080036bf 	.word	0x080036bf
 80036a0:	080036c5 	.word	0x080036c5
 80036a4:	080036cb 	.word	0x080036cb
 80036a8:	080036d1 	.word	0x080036d1
 80036ac:	080036d7 	.word	0x080036d7
 80036b0:	080036dd 	.word	0x080036dd
 80036b4:	080036e3 	.word	0x080036e3
 80036b8:	2b7f      	cmp	r3, #127	; 0x7f
 80036ba:	d034      	beq.n	8003726 <_HandleIncomingPacket+0xca>
 80036bc:	e026      	b.n	800370c <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80036be:	f000 fde3 	bl	8004288 <SEGGER_SYSVIEW_Start>
      break;
 80036c2:	e035      	b.n	8003730 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80036c4:	f000 fe9a 	bl	80043fc <SEGGER_SYSVIEW_Stop>
      break;
 80036c8:	e032      	b.n	8003730 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80036ca:	f001 f84f 	bl	800476c <SEGGER_SYSVIEW_RecordSystime>
      break;
 80036ce:	e02f      	b.n	8003730 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80036d0:	f001 f838 	bl	8004744 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80036d4:	e02c      	b.n	8003730 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80036d6:	f000 feb7 	bl	8004448 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80036da:	e029      	b.n	8003730 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80036dc:	f001 fa72 	bl	8004bc4 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80036e0:	e026      	b.n	8003730 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80036e2:	f001 fa51 	bl	8004b88 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80036e6:	e023      	b.n	8003730 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80036e8:	4b13      	ldr	r3, [pc, #76]	; (8003738 <_HandleIncomingPacket+0xdc>)
 80036ea:	7e1b      	ldrb	r3, [r3, #24]
 80036ec:	4618      	mov	r0, r3
 80036ee:	1cfb      	adds	r3, r7, #3
 80036f0:	2201      	movs	r2, #1
 80036f2:	4619      	mov	r1, r3
 80036f4:	f7ff fed2 	bl	800349c <SEGGER_RTT_ReadNoLock>
 80036f8:	4603      	mov	r3, r0
 80036fa:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	dd13      	ble.n	800372a <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8003702:	78fb      	ldrb	r3, [r7, #3]
 8003704:	4618      	mov	r0, r3
 8003706:	f001 f9bf 	bl	8004a88 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800370a:	e00e      	b.n	800372a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800370c:	78fb      	ldrb	r3, [r7, #3]
 800370e:	b25b      	sxtb	r3, r3
 8003710:	2b00      	cmp	r3, #0
 8003712:	da0c      	bge.n	800372e <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003714:	4b08      	ldr	r3, [pc, #32]	; (8003738 <_HandleIncomingPacket+0xdc>)
 8003716:	7e1b      	ldrb	r3, [r3, #24]
 8003718:	4618      	mov	r0, r3
 800371a:	1cfb      	adds	r3, r7, #3
 800371c:	2201      	movs	r2, #1
 800371e:	4619      	mov	r1, r3
 8003720:	f7ff febc 	bl	800349c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8003724:	e003      	b.n	800372e <_HandleIncomingPacket+0xd2>
      break;
 8003726:	bf00      	nop
 8003728:	e002      	b.n	8003730 <_HandleIncomingPacket+0xd4>
      break;
 800372a:	bf00      	nop
 800372c:	e000      	b.n	8003730 <_HandleIncomingPacket+0xd4>
      break;
 800372e:	bf00      	nop
    }
  }
}
 8003730:	bf00      	nop
 8003732:	3708      	adds	r7, #8
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	20013358 	.word	0x20013358

0800373c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800373c:	b580      	push	{r7, lr}
 800373e:	b08c      	sub	sp, #48	; 0x30
 8003740:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8003742:	2301      	movs	r3, #1
 8003744:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8003746:	1d3b      	adds	r3, r7, #4
 8003748:	3301      	adds	r3, #1
 800374a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003750:	4b31      	ldr	r3, [pc, #196]	; (8003818 <_TrySendOverflowPacket+0xdc>)
 8003752:	695b      	ldr	r3, [r3, #20]
 8003754:	62bb      	str	r3, [r7, #40]	; 0x28
 8003756:	e00b      	b.n	8003770 <_TrySendOverflowPacket+0x34>
 8003758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800375a:	b2da      	uxtb	r2, r3
 800375c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800375e:	1c59      	adds	r1, r3, #1
 8003760:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003762:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003766:	b2d2      	uxtb	r2, r2
 8003768:	701a      	strb	r2, [r3, #0]
 800376a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800376c:	09db      	lsrs	r3, r3, #7
 800376e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003772:	2b7f      	cmp	r3, #127	; 0x7f
 8003774:	d8f0      	bhi.n	8003758 <_TrySendOverflowPacket+0x1c>
 8003776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003778:	1c5a      	adds	r2, r3, #1
 800377a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800377c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800377e:	b2d2      	uxtb	r2, r2
 8003780:	701a      	strb	r2, [r3, #0]
 8003782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003784:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003786:	4b25      	ldr	r3, [pc, #148]	; (800381c <_TrySendOverflowPacket+0xe0>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800378c:	4b22      	ldr	r3, [pc, #136]	; (8003818 <_TrySendOverflowPacket+0xdc>)
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	69ba      	ldr	r2, [r7, #24]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	627b      	str	r3, [r7, #36]	; 0x24
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	623b      	str	r3, [r7, #32]
 800379e:	e00b      	b.n	80037b8 <_TrySendOverflowPacket+0x7c>
 80037a0:	6a3b      	ldr	r3, [r7, #32]
 80037a2:	b2da      	uxtb	r2, r3
 80037a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a6:	1c59      	adds	r1, r3, #1
 80037a8:	6279      	str	r1, [r7, #36]	; 0x24
 80037aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80037ae:	b2d2      	uxtb	r2, r2
 80037b0:	701a      	strb	r2, [r3, #0]
 80037b2:	6a3b      	ldr	r3, [r7, #32]
 80037b4:	09db      	lsrs	r3, r3, #7
 80037b6:	623b      	str	r3, [r7, #32]
 80037b8:	6a3b      	ldr	r3, [r7, #32]
 80037ba:	2b7f      	cmp	r3, #127	; 0x7f
 80037bc:	d8f0      	bhi.n	80037a0 <_TrySendOverflowPacket+0x64>
 80037be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c0:	1c5a      	adds	r2, r3, #1
 80037c2:	627a      	str	r2, [r7, #36]	; 0x24
 80037c4:	6a3a      	ldr	r2, [r7, #32]
 80037c6:	b2d2      	uxtb	r2, r2
 80037c8:	701a      	strb	r2, [r3, #0]
 80037ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037cc:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80037ce:	4b12      	ldr	r3, [pc, #72]	; (8003818 <_TrySendOverflowPacket+0xdc>)
 80037d0:	785b      	ldrb	r3, [r3, #1]
 80037d2:	4618      	mov	r0, r3
 80037d4:	1d3b      	adds	r3, r7, #4
 80037d6:	69fa      	ldr	r2, [r7, #28]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	461a      	mov	r2, r3
 80037dc:	1d3b      	adds	r3, r7, #4
 80037de:	4619      	mov	r1, r3
 80037e0:	f7fc fd1e 	bl	8000220 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80037e4:	4603      	mov	r3, r0
 80037e6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d009      	beq.n	8003802 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80037ee:	4a0a      	ldr	r2, [pc, #40]	; (8003818 <_TrySendOverflowPacket+0xdc>)
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80037f4:	4b08      	ldr	r3, [pc, #32]	; (8003818 <_TrySendOverflowPacket+0xdc>)
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	3b01      	subs	r3, #1
 80037fa:	b2da      	uxtb	r2, r3
 80037fc:	4b06      	ldr	r3, [pc, #24]	; (8003818 <_TrySendOverflowPacket+0xdc>)
 80037fe:	701a      	strb	r2, [r3, #0]
 8003800:	e004      	b.n	800380c <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8003802:	4b05      	ldr	r3, [pc, #20]	; (8003818 <_TrySendOverflowPacket+0xdc>)
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	3301      	adds	r3, #1
 8003808:	4a03      	ldr	r2, [pc, #12]	; (8003818 <_TrySendOverflowPacket+0xdc>)
 800380a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800380c:	693b      	ldr	r3, [r7, #16]
}
 800380e:	4618      	mov	r0, r3
 8003810:	3730      	adds	r7, #48	; 0x30
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	20013358 	.word	0x20013358
 800381c:	e0001004 	.word	0xe0001004

08003820 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8003820:	b580      	push	{r7, lr}
 8003822:	b08a      	sub	sp, #40	; 0x28
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800382c:	4b6c      	ldr	r3, [pc, #432]	; (80039e0 <_SendPacket+0x1c0>)
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	2b01      	cmp	r3, #1
 8003832:	d010      	beq.n	8003856 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003834:	4b6a      	ldr	r3, [pc, #424]	; (80039e0 <_SendPacket+0x1c0>)
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	2b00      	cmp	r3, #0
 800383a:	f000 80a3 	beq.w	8003984 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800383e:	4b68      	ldr	r3, [pc, #416]	; (80039e0 <_SendPacket+0x1c0>)
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	2b02      	cmp	r3, #2
 8003844:	d109      	bne.n	800385a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8003846:	f7ff ff79 	bl	800373c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800384a:	4b65      	ldr	r3, [pc, #404]	; (80039e0 <_SendPacket+0x1c0>)
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	2b01      	cmp	r3, #1
 8003850:	f040 809a 	bne.w	8003988 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8003854:	e001      	b.n	800385a <_SendPacket+0x3a>
    goto Send;
 8003856:	bf00      	nop
 8003858:	e000      	b.n	800385c <_SendPacket+0x3c>
Send:
 800385a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2b1f      	cmp	r3, #31
 8003860:	d809      	bhi.n	8003876 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8003862:	4b5f      	ldr	r3, [pc, #380]	; (80039e0 <_SendPacket+0x1c0>)
 8003864:	69da      	ldr	r2, [r3, #28]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	fa22 f303 	lsr.w	r3, r2, r3
 800386c:	f003 0301 	and.w	r3, r3, #1
 8003870:	2b00      	cmp	r3, #0
 8003872:	f040 808b 	bne.w	800398c <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2b17      	cmp	r3, #23
 800387a:	d807      	bhi.n	800388c <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	3b01      	subs	r3, #1
 8003880:	60fb      	str	r3, [r7, #12]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	b2da      	uxtb	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	701a      	strb	r2, [r3, #0]
 800388a:	e03d      	b.n	8003908 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 800388c:	68ba      	ldr	r2, [r7, #8]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	2b7f      	cmp	r3, #127	; 0x7f
 8003898:	d912      	bls.n	80038c0 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	09da      	lsrs	r2, r3, #7
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	3b01      	subs	r3, #1
 80038a2:	60fb      	str	r3, [r7, #12]
 80038a4:	b2d2      	uxtb	r2, r2
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	3a01      	subs	r2, #1
 80038b2:	60fa      	str	r2, [r7, #12]
 80038b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80038b8:	b2da      	uxtb	r2, r3
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	701a      	strb	r2, [r3, #0]
 80038be:	e006      	b.n	80038ce <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	3b01      	subs	r3, #1
 80038c4:	60fb      	str	r3, [r7, #12]
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	b2da      	uxtb	r2, r3
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2b7f      	cmp	r3, #127	; 0x7f
 80038d2:	d912      	bls.n	80038fa <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	09da      	lsrs	r2, r3, #7
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	3b01      	subs	r3, #1
 80038dc:	60fb      	str	r3, [r7, #12]
 80038de:	b2d2      	uxtb	r2, r2
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	3a01      	subs	r2, #1
 80038ec:	60fa      	str	r2, [r7, #12]
 80038ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80038f2:	b2da      	uxtb	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	701a      	strb	r2, [r3, #0]
 80038f8:	e006      	b.n	8003908 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	3b01      	subs	r3, #1
 80038fe:	60fb      	str	r3, [r7, #12]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	b2da      	uxtb	r2, r3
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003908:	4b36      	ldr	r3, [pc, #216]	; (80039e4 <_SendPacket+0x1c4>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800390e:	4b34      	ldr	r3, [pc, #208]	; (80039e0 <_SendPacket+0x1c0>)
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	69ba      	ldr	r2, [r7, #24]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	627b      	str	r3, [r7, #36]	; 0x24
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	623b      	str	r3, [r7, #32]
 8003920:	e00b      	b.n	800393a <_SendPacket+0x11a>
 8003922:	6a3b      	ldr	r3, [r7, #32]
 8003924:	b2da      	uxtb	r2, r3
 8003926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003928:	1c59      	adds	r1, r3, #1
 800392a:	6279      	str	r1, [r7, #36]	; 0x24
 800392c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003930:	b2d2      	uxtb	r2, r2
 8003932:	701a      	strb	r2, [r3, #0]
 8003934:	6a3b      	ldr	r3, [r7, #32]
 8003936:	09db      	lsrs	r3, r3, #7
 8003938:	623b      	str	r3, [r7, #32]
 800393a:	6a3b      	ldr	r3, [r7, #32]
 800393c:	2b7f      	cmp	r3, #127	; 0x7f
 800393e:	d8f0      	bhi.n	8003922 <_SendPacket+0x102>
 8003940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003942:	1c5a      	adds	r2, r3, #1
 8003944:	627a      	str	r2, [r7, #36]	; 0x24
 8003946:	6a3a      	ldr	r2, [r7, #32]
 8003948:	b2d2      	uxtb	r2, r2
 800394a:	701a      	strb	r2, [r3, #0]
 800394c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394e:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8003950:	4b23      	ldr	r3, [pc, #140]	; (80039e0 <_SendPacket+0x1c0>)
 8003952:	785b      	ldrb	r3, [r3, #1]
 8003954:	4618      	mov	r0, r3
 8003956:	68ba      	ldr	r2, [r7, #8]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	461a      	mov	r2, r3
 800395e:	68f9      	ldr	r1, [r7, #12]
 8003960:	f7fc fc5e 	bl	8000220 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003964:	4603      	mov	r3, r0
 8003966:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d003      	beq.n	8003976 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800396e:	4a1c      	ldr	r2, [pc, #112]	; (80039e0 <_SendPacket+0x1c0>)
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	60d3      	str	r3, [r2, #12]
 8003974:	e00b      	b.n	800398e <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8003976:	4b1a      	ldr	r3, [pc, #104]	; (80039e0 <_SendPacket+0x1c0>)
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	3301      	adds	r3, #1
 800397c:	b2da      	uxtb	r2, r3
 800397e:	4b18      	ldr	r3, [pc, #96]	; (80039e0 <_SendPacket+0x1c0>)
 8003980:	701a      	strb	r2, [r3, #0]
 8003982:	e004      	b.n	800398e <_SendPacket+0x16e>
    goto SendDone;
 8003984:	bf00      	nop
 8003986:	e002      	b.n	800398e <_SendPacket+0x16e>
      goto SendDone;
 8003988:	bf00      	nop
 800398a:	e000      	b.n	800398e <_SendPacket+0x16e>
      goto SendDone;
 800398c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800398e:	4b14      	ldr	r3, [pc, #80]	; (80039e0 <_SendPacket+0x1c0>)
 8003990:	7e1b      	ldrb	r3, [r3, #24]
 8003992:	4619      	mov	r1, r3
 8003994:	4a14      	ldr	r2, [pc, #80]	; (80039e8 <_SendPacket+0x1c8>)
 8003996:	460b      	mov	r3, r1
 8003998:	005b      	lsls	r3, r3, #1
 800399a:	440b      	add	r3, r1
 800399c:	00db      	lsls	r3, r3, #3
 800399e:	4413      	add	r3, r2
 80039a0:	336c      	adds	r3, #108	; 0x6c
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	4b0e      	ldr	r3, [pc, #56]	; (80039e0 <_SendPacket+0x1c0>)
 80039a6:	7e1b      	ldrb	r3, [r3, #24]
 80039a8:	4618      	mov	r0, r3
 80039aa:	490f      	ldr	r1, [pc, #60]	; (80039e8 <_SendPacket+0x1c8>)
 80039ac:	4603      	mov	r3, r0
 80039ae:	005b      	lsls	r3, r3, #1
 80039b0:	4403      	add	r3, r0
 80039b2:	00db      	lsls	r3, r3, #3
 80039b4:	440b      	add	r3, r1
 80039b6:	3370      	adds	r3, #112	; 0x70
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d00b      	beq.n	80039d6 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80039be:	4b08      	ldr	r3, [pc, #32]	; (80039e0 <_SendPacket+0x1c0>)
 80039c0:	789b      	ldrb	r3, [r3, #2]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d107      	bne.n	80039d6 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80039c6:	4b06      	ldr	r3, [pc, #24]	; (80039e0 <_SendPacket+0x1c0>)
 80039c8:	2201      	movs	r2, #1
 80039ca:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80039cc:	f7ff fe46 	bl	800365c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80039d0:	4b03      	ldr	r3, [pc, #12]	; (80039e0 <_SendPacket+0x1c0>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80039d6:	bf00      	nop
 80039d8:	3728      	adds	r7, #40	; 0x28
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	20013358 	.word	0x20013358
 80039e4:	e0001004 	.word	0xe0001004
 80039e8:	20012ea0 	.word	0x20012ea0

080039ec <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b08a      	sub	sp, #40	; 0x28
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	460b      	mov	r3, r1
 80039f6:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	691b      	ldr	r3, [r3, #16]
 80039fc:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	3301      	adds	r3, #1
 8003a02:	2b80      	cmp	r3, #128	; 0x80
 8003a04:	d80a      	bhi.n	8003a1c <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	1c59      	adds	r1, r3, #1
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	6051      	str	r1, [r2, #4]
 8003a10:	78fa      	ldrb	r2, [r7, #3]
 8003a12:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	1c5a      	adds	r2, r3, #1
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	2b80      	cmp	r3, #128	; 0x80
 8003a22:	d15a      	bne.n	8003ada <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	691a      	ldr	r2, [r3, #16]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	b2d2      	uxtb	r2, r2
 8003a2e:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	627b      	str	r3, [r7, #36]	; 0x24
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	623b      	str	r3, [r7, #32]
 8003a44:	e00b      	b.n	8003a5e <_StoreChar+0x72>
 8003a46:	6a3b      	ldr	r3, [r7, #32]
 8003a48:	b2da      	uxtb	r2, r3
 8003a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4c:	1c59      	adds	r1, r3, #1
 8003a4e:	6279      	str	r1, [r7, #36]	; 0x24
 8003a50:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a54:	b2d2      	uxtb	r2, r2
 8003a56:	701a      	strb	r2, [r3, #0]
 8003a58:	6a3b      	ldr	r3, [r7, #32]
 8003a5a:	09db      	lsrs	r3, r3, #7
 8003a5c:	623b      	str	r3, [r7, #32]
 8003a5e:	6a3b      	ldr	r3, [r7, #32]
 8003a60:	2b7f      	cmp	r3, #127	; 0x7f
 8003a62:	d8f0      	bhi.n	8003a46 <_StoreChar+0x5a>
 8003a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a66:	1c5a      	adds	r2, r3, #1
 8003a68:	627a      	str	r2, [r7, #36]	; 0x24
 8003a6a:	6a3a      	ldr	r2, [r7, #32]
 8003a6c:	b2d2      	uxtb	r2, r2
 8003a6e:	701a      	strb	r2, [r3, #0]
 8003a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a72:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	61fb      	str	r3, [r7, #28]
 8003a78:	2300      	movs	r3, #0
 8003a7a:	61bb      	str	r3, [r7, #24]
 8003a7c:	e00b      	b.n	8003a96 <_StoreChar+0xaa>
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	b2da      	uxtb	r2, r3
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	1c59      	adds	r1, r3, #1
 8003a86:	61f9      	str	r1, [r7, #28]
 8003a88:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a8c:	b2d2      	uxtb	r2, r2
 8003a8e:	701a      	strb	r2, [r3, #0]
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	09db      	lsrs	r3, r3, #7
 8003a94:	61bb      	str	r3, [r7, #24]
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	2b7f      	cmp	r3, #127	; 0x7f
 8003a9a:	d8f0      	bhi.n	8003a7e <_StoreChar+0x92>
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	1c5a      	adds	r2, r3, #1
 8003aa0:	61fa      	str	r2, [r7, #28]
 8003aa2:	69ba      	ldr	r2, [r7, #24]
 8003aa4:	b2d2      	uxtb	r2, r2
 8003aa6:	701a      	strb	r2, [r3, #0]
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	221a      	movs	r2, #26
 8003ab2:	6939      	ldr	r1, [r7, #16]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7ff feb3 	bl	8003820 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7ff fdbf 	bl	8003642 <_PreparePacket>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	1c5a      	adds	r2, r3, #1
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	611a      	str	r2, [r3, #16]
  }
}
 8003ada:	bf00      	nop
 8003adc:	3728      	adds	r7, #40	; 0x28
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
	...

08003ae4 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b08a      	sub	sp, #40	; 0x28
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]
 8003af0:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8003af6:	2301      	movs	r3, #1
 8003af8:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8003afa:	2301      	movs	r3, #1
 8003afc:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8003afe:	e007      	b.n	8003b10 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8003b00:	6a3a      	ldr	r2, [r7, #32]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b08:	623b      	str	r3, [r7, #32]
    Width++;
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8003b10:	6a3a      	ldr	r2, [r7, #32]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d2f3      	bcs.n	8003b00 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8003b18:	683a      	ldr	r2, [r7, #0]
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d901      	bls.n	8003b24 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8003b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d11f      	bne.n	8003b6e <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8003b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d01c      	beq.n	8003b6e <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8003b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d005      	beq.n	8003b4a <_PrintUnsigned+0x66>
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d102      	bne.n	8003b4a <_PrintUnsigned+0x66>
        c = '0';
 8003b44:	2330      	movs	r3, #48	; 0x30
 8003b46:	76fb      	strb	r3, [r7, #27]
 8003b48:	e001      	b.n	8003b4e <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8003b4a:	2320      	movs	r3, #32
 8003b4c:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003b4e:	e007      	b.n	8003b60 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8003b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b52:	3b01      	subs	r3, #1
 8003b54:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8003b56:	7efb      	ldrb	r3, [r7, #27]
 8003b58:	4619      	mov	r1, r3
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	f7ff ff46 	bl	80039ec <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d003      	beq.n	8003b6e <_PrintUnsigned+0x8a>
 8003b66:	69fa      	ldr	r2, [r7, #28]
 8003b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d3f0      	bcc.n	8003b50 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d903      	bls.n	8003b7c <_PrintUnsigned+0x98>
      NumDigits--;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	3b01      	subs	r3, #1
 8003b78:	603b      	str	r3, [r7, #0]
 8003b7a:	e009      	b.n	8003b90 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8003b7c:	68ba      	ldr	r2, [r7, #8]
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b84:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8003b86:	697a      	ldr	r2, [r7, #20]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d200      	bcs.n	8003b90 <_PrintUnsigned+0xac>
        break;
 8003b8e:	e005      	b.n	8003b9c <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8003b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	fb02 f303 	mul.w	r3, r2, r3
 8003b98:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8003b9a:	e7e8      	b.n	8003b6e <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8003b9c:	68ba      	ldr	r2, [r7, #8]
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba4:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003baa:	fb02 f303 	mul.w	r3, r2, r3
 8003bae:	68ba      	ldr	r2, [r7, #8]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8003bb4:	4a15      	ldr	r2, [pc, #84]	; (8003c0c <_PrintUnsigned+0x128>)
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	4413      	add	r3, r2
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	68f8      	ldr	r0, [r7, #12]
 8003bc0:	f7ff ff14 	bl	80039ec <_StoreChar>
    Digit /= Base;
 8003bc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bcc:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8003bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1e3      	bne.n	8003b9c <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8003bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bd6:	f003 0301 	and.w	r3, r3, #1
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d011      	beq.n	8003c02 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8003bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d00e      	beq.n	8003c02 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003be4:	e006      	b.n	8003bf4 <_PrintUnsigned+0x110>
        FieldWidth--;
 8003be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be8:	3b01      	subs	r3, #1
 8003bea:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8003bec:	2120      	movs	r1, #32
 8003bee:	68f8      	ldr	r0, [r7, #12]
 8003bf0:	f7ff fefc 	bl	80039ec <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d003      	beq.n	8003c02 <_PrintUnsigned+0x11e>
 8003bfa:	69fa      	ldr	r2, [r7, #28]
 8003bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d3f1      	bcc.n	8003be6 <_PrintUnsigned+0x102>
      }
    }
  }
}
 8003c02:	bf00      	nop
 8003c04:	3728      	adds	r7, #40	; 0x28
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	080057c0 	.word	0x080057c0

08003c10 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b088      	sub	sp, #32
 8003c14:	af02      	add	r7, sp, #8
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	607a      	str	r2, [r7, #4]
 8003c1c:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	bfb8      	it	lt
 8003c24:	425b      	neglt	r3, r3
 8003c26:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8003c2c:	e007      	b.n	8003c3e <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	fb92 f3f3 	sdiv	r3, r2, r3
 8003c36:	613b      	str	r3, [r7, #16]
    Width++;
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	daf3      	bge.n	8003c2e <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8003c46:	683a      	ldr	r2, [r7, #0]
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d901      	bls.n	8003c52 <_PrintInt+0x42>
    Width = NumDigits;
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8003c52:	6a3b      	ldr	r3, [r7, #32]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d00a      	beq.n	8003c6e <_PrintInt+0x5e>
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	db04      	blt.n	8003c68 <_PrintInt+0x58>
 8003c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c60:	f003 0304 	and.w	r3, r3, #4
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d002      	beq.n	8003c6e <_PrintInt+0x5e>
    FieldWidth--;
 8003c68:	6a3b      	ldr	r3, [r7, #32]
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c70:	f003 0302 	and.w	r3, r3, #2
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d002      	beq.n	8003c7e <_PrintInt+0x6e>
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d016      	beq.n	8003cac <_PrintInt+0x9c>
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c80:	f003 0301 	and.w	r3, r3, #1
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d111      	bne.n	8003cac <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8003c88:	6a3b      	ldr	r3, [r7, #32]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00e      	beq.n	8003cac <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003c8e:	e006      	b.n	8003c9e <_PrintInt+0x8e>
        FieldWidth--;
 8003c90:	6a3b      	ldr	r3, [r7, #32]
 8003c92:	3b01      	subs	r3, #1
 8003c94:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8003c96:	2120      	movs	r1, #32
 8003c98:	68f8      	ldr	r0, [r7, #12]
 8003c9a:	f7ff fea7 	bl	80039ec <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003c9e:	6a3b      	ldr	r3, [r7, #32]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d003      	beq.n	8003cac <_PrintInt+0x9c>
 8003ca4:	697a      	ldr	r2, [r7, #20]
 8003ca6:	6a3b      	ldr	r3, [r7, #32]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d3f1      	bcc.n	8003c90 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	da07      	bge.n	8003cc2 <_PrintInt+0xb2>
    v = -v;
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	425b      	negs	r3, r3
 8003cb6:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8003cb8:	212d      	movs	r1, #45	; 0x2d
 8003cba:	68f8      	ldr	r0, [r7, #12]
 8003cbc:	f7ff fe96 	bl	80039ec <_StoreChar>
 8003cc0:	e008      	b.n	8003cd4 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8003cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc4:	f003 0304 	and.w	r3, r3, #4
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d003      	beq.n	8003cd4 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8003ccc:	212b      	movs	r1, #43	; 0x2b
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	f7ff fe8c 	bl	80039ec <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8003cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d019      	beq.n	8003d12 <_PrintInt+0x102>
 8003cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce0:	f003 0301 	and.w	r3, r3, #1
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d114      	bne.n	8003d12 <_PrintInt+0x102>
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d111      	bne.n	8003d12 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8003cee:	6a3b      	ldr	r3, [r7, #32]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00e      	beq.n	8003d12 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003cf4:	e006      	b.n	8003d04 <_PrintInt+0xf4>
        FieldWidth--;
 8003cf6:	6a3b      	ldr	r3, [r7, #32]
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8003cfc:	2130      	movs	r1, #48	; 0x30
 8003cfe:	68f8      	ldr	r0, [r7, #12]
 8003d00:	f7ff fe74 	bl	80039ec <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003d04:	6a3b      	ldr	r3, [r7, #32]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d003      	beq.n	8003d12 <_PrintInt+0x102>
 8003d0a:	697a      	ldr	r2, [r7, #20]
 8003d0c:	6a3b      	ldr	r3, [r7, #32]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d3f1      	bcc.n	8003cf6 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8003d12:	68b9      	ldr	r1, [r7, #8]
 8003d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d16:	9301      	str	r3, [sp, #4]
 8003d18:	6a3b      	ldr	r3, [r7, #32]
 8003d1a:	9300      	str	r3, [sp, #0]
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f7ff fedf 	bl	8003ae4 <_PrintUnsigned>
}
 8003d26:	bf00      	nop
 8003d28:	3718      	adds	r7, #24
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
	...

08003d30 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b098      	sub	sp, #96	; 0x60
 8003d34:	af02      	add	r7, sp, #8
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8003d3c:	f3ef 8311 	mrs	r3, BASEPRI
 8003d40:	f04f 0120 	mov.w	r1, #32
 8003d44:	f381 8811 	msr	BASEPRI, r1
 8003d48:	633b      	str	r3, [r7, #48]	; 0x30
 8003d4a:	48b7      	ldr	r0, [pc, #732]	; (8004028 <_VPrintTarget+0x2f8>)
 8003d4c:	f7ff fc79 	bl	8003642 <_PreparePacket>
 8003d50:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8003d52:	4bb5      	ldr	r3, [pc, #724]	; (8004028 <_VPrintTarget+0x2f8>)
 8003d54:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8003d56:	2300      	movs	r3, #0
 8003d58:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8003d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d5c:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	3301      	adds	r3, #1
 8003d62:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	3301      	adds	r3, #1
 8003d74:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8003d76:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	f000 8183 	beq.w	8004086 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8003d80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003d84:	2b25      	cmp	r3, #37	; 0x25
 8003d86:	f040 8170 	bne.w	800406a <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8003d9a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003d9e:	3b23      	subs	r3, #35	; 0x23
 8003da0:	2b0d      	cmp	r3, #13
 8003da2:	d83f      	bhi.n	8003e24 <_VPrintTarget+0xf4>
 8003da4:	a201      	add	r2, pc, #4	; (adr r2, 8003dac <_VPrintTarget+0x7c>)
 8003da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003daa:	bf00      	nop
 8003dac:	08003e15 	.word	0x08003e15
 8003db0:	08003e25 	.word	0x08003e25
 8003db4:	08003e25 	.word	0x08003e25
 8003db8:	08003e25 	.word	0x08003e25
 8003dbc:	08003e25 	.word	0x08003e25
 8003dc0:	08003e25 	.word	0x08003e25
 8003dc4:	08003e25 	.word	0x08003e25
 8003dc8:	08003e25 	.word	0x08003e25
 8003dcc:	08003e05 	.word	0x08003e05
 8003dd0:	08003e25 	.word	0x08003e25
 8003dd4:	08003de5 	.word	0x08003de5
 8003dd8:	08003e25 	.word	0x08003e25
 8003ddc:	08003e25 	.word	0x08003e25
 8003de0:	08003df5 	.word	0x08003df5
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8003de4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003de6:	f043 0301 	orr.w	r3, r3, #1
 8003dea:	64bb      	str	r3, [r7, #72]	; 0x48
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	3301      	adds	r3, #1
 8003df0:	60fb      	str	r3, [r7, #12]
 8003df2:	e01a      	b.n	8003e2a <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8003df4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003df6:	f043 0302 	orr.w	r3, r3, #2
 8003dfa:	64bb      	str	r3, [r7, #72]	; 0x48
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	3301      	adds	r3, #1
 8003e00:	60fb      	str	r3, [r7, #12]
 8003e02:	e012      	b.n	8003e2a <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8003e04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e06:	f043 0304 	orr.w	r3, r3, #4
 8003e0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	3301      	adds	r3, #1
 8003e10:	60fb      	str	r3, [r7, #12]
 8003e12:	e00a      	b.n	8003e2a <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8003e14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e16:	f043 0308 	orr.w	r3, r3, #8
 8003e1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	3301      	adds	r3, #1
 8003e20:	60fb      	str	r3, [r7, #12]
 8003e22:	e002      	b.n	8003e2a <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8003e24:	2300      	movs	r3, #0
 8003e26:	653b      	str	r3, [r7, #80]	; 0x50
 8003e28:	bf00      	nop
        }
      } while (v);
 8003e2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1b0      	bne.n	8003d92 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8003e30:	2300      	movs	r3, #0
 8003e32:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8003e3c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003e40:	2b2f      	cmp	r3, #47	; 0x2f
 8003e42:	d912      	bls.n	8003e6a <_VPrintTarget+0x13a>
 8003e44:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003e48:	2b39      	cmp	r3, #57	; 0x39
 8003e4a:	d80e      	bhi.n	8003e6a <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	3301      	adds	r3, #1
 8003e50:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8003e52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e54:	4613      	mov	r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	4413      	add	r3, r2
 8003e5a:	005b      	lsls	r3, r3, #1
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003e62:	4413      	add	r3, r2
 8003e64:	3b30      	subs	r3, #48	; 0x30
 8003e66:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8003e68:	e7e4      	b.n	8003e34 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8003e76:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003e7a:	2b2e      	cmp	r3, #46	; 0x2e
 8003e7c:	d11d      	bne.n	8003eba <_VPrintTarget+0x18a>
        sFormat++;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	3301      	adds	r3, #1
 8003e82:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8003e8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003e90:	2b2f      	cmp	r3, #47	; 0x2f
 8003e92:	d912      	bls.n	8003eba <_VPrintTarget+0x18a>
 8003e94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003e98:	2b39      	cmp	r3, #57	; 0x39
 8003e9a:	d80e      	bhi.n	8003eba <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8003ea2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	4413      	add	r3, r2
 8003eaa:	005b      	lsls	r3, r3, #1
 8003eac:	461a      	mov	r2, r3
 8003eae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003eb2:	4413      	add	r3, r2
 8003eb4:	3b30      	subs	r3, #48	; 0x30
 8003eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8003eb8:	e7e4      	b.n	8003e84 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8003ec2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003ec6:	2b6c      	cmp	r3, #108	; 0x6c
 8003ec8:	d003      	beq.n	8003ed2 <_VPrintTarget+0x1a2>
 8003eca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003ece:	2b68      	cmp	r3, #104	; 0x68
 8003ed0:	d107      	bne.n	8003ee2 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	3301      	adds	r3, #1
 8003ede:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8003ee0:	e7ef      	b.n	8003ec2 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8003ee2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003ee6:	2b25      	cmp	r3, #37	; 0x25
 8003ee8:	f000 80b3 	beq.w	8004052 <_VPrintTarget+0x322>
 8003eec:	2b25      	cmp	r3, #37	; 0x25
 8003eee:	f2c0 80b7 	blt.w	8004060 <_VPrintTarget+0x330>
 8003ef2:	2b78      	cmp	r3, #120	; 0x78
 8003ef4:	f300 80b4 	bgt.w	8004060 <_VPrintTarget+0x330>
 8003ef8:	2b58      	cmp	r3, #88	; 0x58
 8003efa:	f2c0 80b1 	blt.w	8004060 <_VPrintTarget+0x330>
 8003efe:	3b58      	subs	r3, #88	; 0x58
 8003f00:	2b20      	cmp	r3, #32
 8003f02:	f200 80ad 	bhi.w	8004060 <_VPrintTarget+0x330>
 8003f06:	a201      	add	r2, pc, #4	; (adr r2, 8003f0c <_VPrintTarget+0x1dc>)
 8003f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f0c:	08004003 	.word	0x08004003
 8003f10:	08004061 	.word	0x08004061
 8003f14:	08004061 	.word	0x08004061
 8003f18:	08004061 	.word	0x08004061
 8003f1c:	08004061 	.word	0x08004061
 8003f20:	08004061 	.word	0x08004061
 8003f24:	08004061 	.word	0x08004061
 8003f28:	08004061 	.word	0x08004061
 8003f2c:	08004061 	.word	0x08004061
 8003f30:	08004061 	.word	0x08004061
 8003f34:	08004061 	.word	0x08004061
 8003f38:	08003f91 	.word	0x08003f91
 8003f3c:	08003fb7 	.word	0x08003fb7
 8003f40:	08004061 	.word	0x08004061
 8003f44:	08004061 	.word	0x08004061
 8003f48:	08004061 	.word	0x08004061
 8003f4c:	08004061 	.word	0x08004061
 8003f50:	08004061 	.word	0x08004061
 8003f54:	08004061 	.word	0x08004061
 8003f58:	08004061 	.word	0x08004061
 8003f5c:	08004061 	.word	0x08004061
 8003f60:	08004061 	.word	0x08004061
 8003f64:	08004061 	.word	0x08004061
 8003f68:	08004061 	.word	0x08004061
 8003f6c:	0800402d 	.word	0x0800402d
 8003f70:	08004061 	.word	0x08004061
 8003f74:	08004061 	.word	0x08004061
 8003f78:	08004061 	.word	0x08004061
 8003f7c:	08004061 	.word	0x08004061
 8003f80:	08003fdd 	.word	0x08003fdd
 8003f84:	08004061 	.word	0x08004061
 8003f88:	08004061 	.word	0x08004061
 8003f8c:	08004003 	.word	0x08004003
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	1d19      	adds	r1, r3, #4
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	6011      	str	r1, [r2, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8003f9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fa0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8003fa4:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8003fa8:	f107 0314 	add.w	r3, r7, #20
 8003fac:	4611      	mov	r1, r2
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7ff fd1c 	bl	80039ec <_StoreChar>
        break;
 8003fb4:	e055      	b.n	8004062 <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	1d19      	adds	r1, r3, #4
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	6011      	str	r1, [r2, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8003fc4:	f107 0014 	add.w	r0, r7, #20
 8003fc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fca:	9301      	str	r3, [sp, #4]
 8003fcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fce:	9300      	str	r3, [sp, #0]
 8003fd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fd2:	220a      	movs	r2, #10
 8003fd4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003fd6:	f7ff fe1b 	bl	8003c10 <_PrintInt>
        break;
 8003fda:	e042      	b.n	8004062 <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	1d19      	adds	r1, r3, #4
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	6011      	str	r1, [r2, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8003fea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003fec:	f107 0014 	add.w	r0, r7, #20
 8003ff0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ff2:	9301      	str	r3, [sp, #4]
 8003ff4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ff6:	9300      	str	r3, [sp, #0]
 8003ff8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ffa:	220a      	movs	r2, #10
 8003ffc:	f7ff fd72 	bl	8003ae4 <_PrintUnsigned>
        break;
 8004000:	e02f      	b.n	8004062 <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	1d19      	adds	r1, r3, #4
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	6011      	str	r1, [r2, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8004010:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004012:	f107 0014 	add.w	r0, r7, #20
 8004016:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004018:	9301      	str	r3, [sp, #4]
 800401a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800401c:	9300      	str	r3, [sp, #0]
 800401e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004020:	2210      	movs	r2, #16
 8004022:	f7ff fd5f 	bl	8003ae4 <_PrintUnsigned>
        break;
 8004026:	e01c      	b.n	8004062 <_VPrintTarget+0x332>
 8004028:	20013388 	.word	0x20013388
      case 'p':
        v = va_arg(*pParamList, int);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	1d19      	adds	r1, r3, #4
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	6011      	str	r1, [r2, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 800403a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800403c:	f107 0014 	add.w	r0, r7, #20
 8004040:	2300      	movs	r3, #0
 8004042:	9301      	str	r3, [sp, #4]
 8004044:	2308      	movs	r3, #8
 8004046:	9300      	str	r3, [sp, #0]
 8004048:	2308      	movs	r3, #8
 800404a:	2210      	movs	r2, #16
 800404c:	f7ff fd4a 	bl	8003ae4 <_PrintUnsigned>
        break;
 8004050:	e007      	b.n	8004062 <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8004052:	f107 0314 	add.w	r3, r7, #20
 8004056:	2125      	movs	r1, #37	; 0x25
 8004058:	4618      	mov	r0, r3
 800405a:	f7ff fcc7 	bl	80039ec <_StoreChar>
        break;
 800405e:	e000      	b.n	8004062 <_VPrintTarget+0x332>
      default:
        break;
 8004060:	bf00      	nop
      }
      sFormat++;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	3301      	adds	r3, #1
 8004066:	60fb      	str	r3, [r7, #12]
 8004068:	e007      	b.n	800407a <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 800406a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800406e:	f107 0314 	add.w	r3, r7, #20
 8004072:	4611      	mov	r1, r2
 8004074:	4618      	mov	r0, r3
 8004076:	f7ff fcb9 	bl	80039ec <_StoreChar>
    }
  } while (*sFormat);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	2b00      	cmp	r3, #0
 8004080:	f47f ae72 	bne.w	8003d68 <_VPrintTarget+0x38>
 8004084:	e000      	b.n	8004088 <_VPrintTarget+0x358>
      break;
 8004086:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8004088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408a:	2b00      	cmp	r3, #0
 800408c:	d041      	beq.n	8004112 <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 800408e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	b2d2      	uxtb	r2, r2
 8004094:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	643b      	str	r3, [r7, #64]	; 0x40
 800409a:	6a3b      	ldr	r3, [r7, #32]
 800409c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800409e:	e00b      	b.n	80040b8 <_VPrintTarget+0x388>
 80040a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040a2:	b2da      	uxtb	r2, r3
 80040a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040a6:	1c59      	adds	r1, r3, #1
 80040a8:	6439      	str	r1, [r7, #64]	; 0x40
 80040aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80040ae:	b2d2      	uxtb	r2, r2
 80040b0:	701a      	strb	r2, [r3, #0]
 80040b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040b4:	09db      	lsrs	r3, r3, #7
 80040b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040ba:	2b7f      	cmp	r3, #127	; 0x7f
 80040bc:	d8f0      	bhi.n	80040a0 <_VPrintTarget+0x370>
 80040be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040c0:	1c5a      	adds	r2, r3, #1
 80040c2:	643a      	str	r2, [r7, #64]	; 0x40
 80040c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80040c6:	b2d2      	uxtb	r2, r2
 80040c8:	701a      	strb	r2, [r3, #0]
 80040ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040cc:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80040d2:	2300      	movs	r3, #0
 80040d4:	637b      	str	r3, [r7, #52]	; 0x34
 80040d6:	e00b      	b.n	80040f0 <_VPrintTarget+0x3c0>
 80040d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040da:	b2da      	uxtb	r2, r3
 80040dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040de:	1c59      	adds	r1, r3, #1
 80040e0:	63b9      	str	r1, [r7, #56]	; 0x38
 80040e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80040e6:	b2d2      	uxtb	r2, r2
 80040e8:	701a      	strb	r2, [r3, #0]
 80040ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040ec:	09db      	lsrs	r3, r3, #7
 80040ee:	637b      	str	r3, [r7, #52]	; 0x34
 80040f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040f2:	2b7f      	cmp	r3, #127	; 0x7f
 80040f4:	d8f0      	bhi.n	80040d8 <_VPrintTarget+0x3a8>
 80040f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f8:	1c5a      	adds	r2, r3, #1
 80040fa:	63ba      	str	r2, [r7, #56]	; 0x38
 80040fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040fe:	b2d2      	uxtb	r2, r2
 8004100:	701a      	strb	r2, [r3, #0]
 8004102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004104:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	69b9      	ldr	r1, [r7, #24]
 800410a:	221a      	movs	r2, #26
 800410c:	4618      	mov	r0, r3
 800410e:	f7ff fb87 	bl	8003820 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8004112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004114:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8004118:	bf00      	nop
 800411a:	3758      	adds	r7, #88	; 0x58
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004128:	f3ef 8311 	mrs	r3, BASEPRI
 800412c:	f04f 0120 	mov.w	r1, #32
 8004130:	f381 8811 	msr	BASEPRI, r1
 8004134:	60fb      	str	r3, [r7, #12]
 8004136:	4808      	ldr	r0, [pc, #32]	; (8004158 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004138:	f7ff fa83 	bl	8003642 <_PreparePacket>
 800413c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	68b9      	ldr	r1, [r7, #8]
 8004142:	68b8      	ldr	r0, [r7, #8]
 8004144:	f7ff fb6c 	bl	8003820 <_SendPacket>
  RECORD_END();
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f383 8811 	msr	BASEPRI, r3
}
 800414e:	bf00      	nop
 8004150:	3710      	adds	r7, #16
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	20013388 	.word	0x20013388

0800415c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800415c:	b580      	push	{r7, lr}
 800415e:	b088      	sub	sp, #32
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004166:	f3ef 8311 	mrs	r3, BASEPRI
 800416a:	f04f 0120 	mov.w	r1, #32
 800416e:	f381 8811 	msr	BASEPRI, r1
 8004172:	617b      	str	r3, [r7, #20]
 8004174:	4816      	ldr	r0, [pc, #88]	; (80041d0 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004176:	f7ff fa64 	bl	8003642 <_PreparePacket>
 800417a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	61fb      	str	r3, [r7, #28]
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	61bb      	str	r3, [r7, #24]
 8004188:	e00b      	b.n	80041a2 <SEGGER_SYSVIEW_RecordU32+0x46>
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	b2da      	uxtb	r2, r3
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	1c59      	adds	r1, r3, #1
 8004192:	61f9      	str	r1, [r7, #28]
 8004194:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004198:	b2d2      	uxtb	r2, r2
 800419a:	701a      	strb	r2, [r3, #0]
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	09db      	lsrs	r3, r3, #7
 80041a0:	61bb      	str	r3, [r7, #24]
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	2b7f      	cmp	r3, #127	; 0x7f
 80041a6:	d8f0      	bhi.n	800418a <SEGGER_SYSVIEW_RecordU32+0x2e>
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	1c5a      	adds	r2, r3, #1
 80041ac:	61fa      	str	r2, [r7, #28]
 80041ae:	69ba      	ldr	r2, [r7, #24]
 80041b0:	b2d2      	uxtb	r2, r2
 80041b2:	701a      	strb	r2, [r3, #0]
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	68f9      	ldr	r1, [r7, #12]
 80041bc:	6938      	ldr	r0, [r7, #16]
 80041be:	f7ff fb2f 	bl	8003820 <_SendPacket>
  RECORD_END();
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	f383 8811 	msr	BASEPRI, r3
}
 80041c8:	bf00      	nop
 80041ca:	3720      	adds	r7, #32
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	20013388 	.word	0x20013388

080041d4 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b08c      	sub	sp, #48	; 0x30
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80041e0:	f3ef 8311 	mrs	r3, BASEPRI
 80041e4:	f04f 0120 	mov.w	r1, #32
 80041e8:	f381 8811 	msr	BASEPRI, r1
 80041ec:	61fb      	str	r3, [r7, #28]
 80041ee:	4825      	ldr	r0, [pc, #148]	; (8004284 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80041f0:	f7ff fa27 	bl	8003642 <_PreparePacket>
 80041f4:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	62bb      	str	r3, [r7, #40]	; 0x28
 8004202:	e00b      	b.n	800421c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004206:	b2da      	uxtb	r2, r3
 8004208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800420a:	1c59      	adds	r1, r3, #1
 800420c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800420e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004212:	b2d2      	uxtb	r2, r2
 8004214:	701a      	strb	r2, [r3, #0]
 8004216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004218:	09db      	lsrs	r3, r3, #7
 800421a:	62bb      	str	r3, [r7, #40]	; 0x28
 800421c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800421e:	2b7f      	cmp	r3, #127	; 0x7f
 8004220:	d8f0      	bhi.n	8004204 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004224:	1c5a      	adds	r2, r3, #1
 8004226:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004228:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800422a:	b2d2      	uxtb	r2, r2
 800422c:	701a      	strb	r2, [r3, #0]
 800422e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004230:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	627b      	str	r3, [r7, #36]	; 0x24
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	623b      	str	r3, [r7, #32]
 800423a:	e00b      	b.n	8004254 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800423c:	6a3b      	ldr	r3, [r7, #32]
 800423e:	b2da      	uxtb	r2, r3
 8004240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004242:	1c59      	adds	r1, r3, #1
 8004244:	6279      	str	r1, [r7, #36]	; 0x24
 8004246:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800424a:	b2d2      	uxtb	r2, r2
 800424c:	701a      	strb	r2, [r3, #0]
 800424e:	6a3b      	ldr	r3, [r7, #32]
 8004250:	09db      	lsrs	r3, r3, #7
 8004252:	623b      	str	r3, [r7, #32]
 8004254:	6a3b      	ldr	r3, [r7, #32]
 8004256:	2b7f      	cmp	r3, #127	; 0x7f
 8004258:	d8f0      	bhi.n	800423c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800425a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425c:	1c5a      	adds	r2, r3, #1
 800425e:	627a      	str	r2, [r7, #36]	; 0x24
 8004260:	6a3a      	ldr	r2, [r7, #32]
 8004262:	b2d2      	uxtb	r2, r2
 8004264:	701a      	strb	r2, [r3, #0]
 8004266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004268:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800426a:	68fa      	ldr	r2, [r7, #12]
 800426c:	6979      	ldr	r1, [r7, #20]
 800426e:	69b8      	ldr	r0, [r7, #24]
 8004270:	f7ff fad6 	bl	8003820 <_SendPacket>
  RECORD_END();
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	f383 8811 	msr	BASEPRI, r3
}
 800427a:	bf00      	nop
 800427c:	3730      	adds	r7, #48	; 0x30
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	20013388 	.word	0x20013388

08004288 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004288:	b580      	push	{r7, lr}
 800428a:	b08c      	sub	sp, #48	; 0x30
 800428c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800428e:	4b58      	ldr	r3, [pc, #352]	; (80043f0 <SEGGER_SYSVIEW_Start+0x168>)
 8004290:	2201      	movs	r2, #1
 8004292:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004294:	f3ef 8311 	mrs	r3, BASEPRI
 8004298:	f04f 0120 	mov.w	r1, #32
 800429c:	f381 8811 	msr	BASEPRI, r1
 80042a0:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80042a2:	4b53      	ldr	r3, [pc, #332]	; (80043f0 <SEGGER_SYSVIEW_Start+0x168>)
 80042a4:	785b      	ldrb	r3, [r3, #1]
 80042a6:	220a      	movs	r2, #10
 80042a8:	4952      	ldr	r1, [pc, #328]	; (80043f4 <SEGGER_SYSVIEW_Start+0x16c>)
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7fb ffb8 	bl	8000220 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80042b6:	200a      	movs	r0, #10
 80042b8:	f7ff ff32 	bl	8004120 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80042bc:	f3ef 8311 	mrs	r3, BASEPRI
 80042c0:	f04f 0120 	mov.w	r1, #32
 80042c4:	f381 8811 	msr	BASEPRI, r1
 80042c8:	60bb      	str	r3, [r7, #8]
 80042ca:	484b      	ldr	r0, [pc, #300]	; (80043f8 <SEGGER_SYSVIEW_Start+0x170>)
 80042cc:	f7ff f9b9 	bl	8003642 <_PreparePacket>
 80042d0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042da:	4b45      	ldr	r3, [pc, #276]	; (80043f0 <SEGGER_SYSVIEW_Start+0x168>)
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	62bb      	str	r3, [r7, #40]	; 0x28
 80042e0:	e00b      	b.n	80042fa <SEGGER_SYSVIEW_Start+0x72>
 80042e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e4:	b2da      	uxtb	r2, r3
 80042e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e8:	1c59      	adds	r1, r3, #1
 80042ea:	62f9      	str	r1, [r7, #44]	; 0x2c
 80042ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80042f0:	b2d2      	uxtb	r2, r2
 80042f2:	701a      	strb	r2, [r3, #0]
 80042f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f6:	09db      	lsrs	r3, r3, #7
 80042f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80042fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042fc:	2b7f      	cmp	r3, #127	; 0x7f
 80042fe:	d8f0      	bhi.n	80042e2 <SEGGER_SYSVIEW_Start+0x5a>
 8004300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004302:	1c5a      	adds	r2, r3, #1
 8004304:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004306:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004308:	b2d2      	uxtb	r2, r2
 800430a:	701a      	strb	r2, [r3, #0]
 800430c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800430e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	627b      	str	r3, [r7, #36]	; 0x24
 8004314:	4b36      	ldr	r3, [pc, #216]	; (80043f0 <SEGGER_SYSVIEW_Start+0x168>)
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	623b      	str	r3, [r7, #32]
 800431a:	e00b      	b.n	8004334 <SEGGER_SYSVIEW_Start+0xac>
 800431c:	6a3b      	ldr	r3, [r7, #32]
 800431e:	b2da      	uxtb	r2, r3
 8004320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004322:	1c59      	adds	r1, r3, #1
 8004324:	6279      	str	r1, [r7, #36]	; 0x24
 8004326:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800432a:	b2d2      	uxtb	r2, r2
 800432c:	701a      	strb	r2, [r3, #0]
 800432e:	6a3b      	ldr	r3, [r7, #32]
 8004330:	09db      	lsrs	r3, r3, #7
 8004332:	623b      	str	r3, [r7, #32]
 8004334:	6a3b      	ldr	r3, [r7, #32]
 8004336:	2b7f      	cmp	r3, #127	; 0x7f
 8004338:	d8f0      	bhi.n	800431c <SEGGER_SYSVIEW_Start+0x94>
 800433a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433c:	1c5a      	adds	r2, r3, #1
 800433e:	627a      	str	r2, [r7, #36]	; 0x24
 8004340:	6a3a      	ldr	r2, [r7, #32]
 8004342:	b2d2      	uxtb	r2, r2
 8004344:	701a      	strb	r2, [r3, #0]
 8004346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004348:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	61fb      	str	r3, [r7, #28]
 800434e:	4b28      	ldr	r3, [pc, #160]	; (80043f0 <SEGGER_SYSVIEW_Start+0x168>)
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	61bb      	str	r3, [r7, #24]
 8004354:	e00b      	b.n	800436e <SEGGER_SYSVIEW_Start+0xe6>
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	b2da      	uxtb	r2, r3
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	1c59      	adds	r1, r3, #1
 800435e:	61f9      	str	r1, [r7, #28]
 8004360:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004364:	b2d2      	uxtb	r2, r2
 8004366:	701a      	strb	r2, [r3, #0]
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	09db      	lsrs	r3, r3, #7
 800436c:	61bb      	str	r3, [r7, #24]
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	2b7f      	cmp	r3, #127	; 0x7f
 8004372:	d8f0      	bhi.n	8004356 <SEGGER_SYSVIEW_Start+0xce>
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	1c5a      	adds	r2, r3, #1
 8004378:	61fa      	str	r2, [r7, #28]
 800437a:	69ba      	ldr	r2, [r7, #24]
 800437c:	b2d2      	uxtb	r2, r2
 800437e:	701a      	strb	r2, [r3, #0]
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	617b      	str	r3, [r7, #20]
 8004388:	2300      	movs	r3, #0
 800438a:	613b      	str	r3, [r7, #16]
 800438c:	e00b      	b.n	80043a6 <SEGGER_SYSVIEW_Start+0x11e>
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	b2da      	uxtb	r2, r3
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	1c59      	adds	r1, r3, #1
 8004396:	6179      	str	r1, [r7, #20]
 8004398:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800439c:	b2d2      	uxtb	r2, r2
 800439e:	701a      	strb	r2, [r3, #0]
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	09db      	lsrs	r3, r3, #7
 80043a4:	613b      	str	r3, [r7, #16]
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	2b7f      	cmp	r3, #127	; 0x7f
 80043aa:	d8f0      	bhi.n	800438e <SEGGER_SYSVIEW_Start+0x106>
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	1c5a      	adds	r2, r3, #1
 80043b0:	617a      	str	r2, [r7, #20]
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	b2d2      	uxtb	r2, r2
 80043b6:	701a      	strb	r2, [r3, #0]
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80043bc:	2218      	movs	r2, #24
 80043be:	6839      	ldr	r1, [r7, #0]
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f7ff fa2d 	bl	8003820 <_SendPacket>
      RECORD_END();
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80043cc:	4b08      	ldr	r3, [pc, #32]	; (80043f0 <SEGGER_SYSVIEW_Start+0x168>)
 80043ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d002      	beq.n	80043da <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80043d4:	4b06      	ldr	r3, [pc, #24]	; (80043f0 <SEGGER_SYSVIEW_Start+0x168>)
 80043d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80043da:	f000 f9c7 	bl	800476c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80043de:	f000 f9b1 	bl	8004744 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80043e2:	f000 fbef 	bl	8004bc4 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80043e6:	bf00      	nop
 80043e8:	3730      	adds	r7, #48	; 0x30
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	20013358 	.word	0x20013358
 80043f4:	080057b4 	.word	0x080057b4
 80043f8:	20013388 	.word	0x20013388

080043fc <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004402:	f3ef 8311 	mrs	r3, BASEPRI
 8004406:	f04f 0120 	mov.w	r1, #32
 800440a:	f381 8811 	msr	BASEPRI, r1
 800440e:	607b      	str	r3, [r7, #4]
 8004410:	480b      	ldr	r0, [pc, #44]	; (8004440 <SEGGER_SYSVIEW_Stop+0x44>)
 8004412:	f7ff f916 	bl	8003642 <_PreparePacket>
 8004416:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004418:	4b0a      	ldr	r3, [pc, #40]	; (8004444 <SEGGER_SYSVIEW_Stop+0x48>)
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d007      	beq.n	8004430 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004420:	220b      	movs	r2, #11
 8004422:	6839      	ldr	r1, [r7, #0]
 8004424:	6838      	ldr	r0, [r7, #0]
 8004426:	f7ff f9fb 	bl	8003820 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800442a:	4b06      	ldr	r3, [pc, #24]	; (8004444 <SEGGER_SYSVIEW_Stop+0x48>)
 800442c:	2200      	movs	r2, #0
 800442e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f383 8811 	msr	BASEPRI, r3
}
 8004436:	bf00      	nop
 8004438:	3708      	adds	r7, #8
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	20013388 	.word	0x20013388
 8004444:	20013358 	.word	0x20013358

08004448 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004448:	b580      	push	{r7, lr}
 800444a:	b08c      	sub	sp, #48	; 0x30
 800444c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800444e:	f3ef 8311 	mrs	r3, BASEPRI
 8004452:	f04f 0120 	mov.w	r1, #32
 8004456:	f381 8811 	msr	BASEPRI, r1
 800445a:	60fb      	str	r3, [r7, #12]
 800445c:	4845      	ldr	r0, [pc, #276]	; (8004574 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800445e:	f7ff f8f0 	bl	8003642 <_PreparePacket>
 8004462:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800446c:	4b42      	ldr	r3, [pc, #264]	; (8004578 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	62bb      	str	r3, [r7, #40]	; 0x28
 8004472:	e00b      	b.n	800448c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004476:	b2da      	uxtb	r2, r3
 8004478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800447a:	1c59      	adds	r1, r3, #1
 800447c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800447e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004482:	b2d2      	uxtb	r2, r2
 8004484:	701a      	strb	r2, [r3, #0]
 8004486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004488:	09db      	lsrs	r3, r3, #7
 800448a:	62bb      	str	r3, [r7, #40]	; 0x28
 800448c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448e:	2b7f      	cmp	r3, #127	; 0x7f
 8004490:	d8f0      	bhi.n	8004474 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004494:	1c5a      	adds	r2, r3, #1
 8004496:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004498:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800449a:	b2d2      	uxtb	r2, r2
 800449c:	701a      	strb	r2, [r3, #0]
 800449e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044a0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	627b      	str	r3, [r7, #36]	; 0x24
 80044a6:	4b34      	ldr	r3, [pc, #208]	; (8004578 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	623b      	str	r3, [r7, #32]
 80044ac:	e00b      	b.n	80044c6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80044ae:	6a3b      	ldr	r3, [r7, #32]
 80044b0:	b2da      	uxtb	r2, r3
 80044b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b4:	1c59      	adds	r1, r3, #1
 80044b6:	6279      	str	r1, [r7, #36]	; 0x24
 80044b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80044bc:	b2d2      	uxtb	r2, r2
 80044be:	701a      	strb	r2, [r3, #0]
 80044c0:	6a3b      	ldr	r3, [r7, #32]
 80044c2:	09db      	lsrs	r3, r3, #7
 80044c4:	623b      	str	r3, [r7, #32]
 80044c6:	6a3b      	ldr	r3, [r7, #32]
 80044c8:	2b7f      	cmp	r3, #127	; 0x7f
 80044ca:	d8f0      	bhi.n	80044ae <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80044cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ce:	1c5a      	adds	r2, r3, #1
 80044d0:	627a      	str	r2, [r7, #36]	; 0x24
 80044d2:	6a3a      	ldr	r2, [r7, #32]
 80044d4:	b2d2      	uxtb	r2, r2
 80044d6:	701a      	strb	r2, [r3, #0]
 80044d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044da:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	61fb      	str	r3, [r7, #28]
 80044e0:	4b25      	ldr	r3, [pc, #148]	; (8004578 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	61bb      	str	r3, [r7, #24]
 80044e6:	e00b      	b.n	8004500 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	b2da      	uxtb	r2, r3
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	1c59      	adds	r1, r3, #1
 80044f0:	61f9      	str	r1, [r7, #28]
 80044f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80044f6:	b2d2      	uxtb	r2, r2
 80044f8:	701a      	strb	r2, [r3, #0]
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	09db      	lsrs	r3, r3, #7
 80044fe:	61bb      	str	r3, [r7, #24]
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	2b7f      	cmp	r3, #127	; 0x7f
 8004504:	d8f0      	bhi.n	80044e8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	1c5a      	adds	r2, r3, #1
 800450a:	61fa      	str	r2, [r7, #28]
 800450c:	69ba      	ldr	r2, [r7, #24]
 800450e:	b2d2      	uxtb	r2, r2
 8004510:	701a      	strb	r2, [r3, #0]
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	617b      	str	r3, [r7, #20]
 800451a:	2300      	movs	r3, #0
 800451c:	613b      	str	r3, [r7, #16]
 800451e:	e00b      	b.n	8004538 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	b2da      	uxtb	r2, r3
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	1c59      	adds	r1, r3, #1
 8004528:	6179      	str	r1, [r7, #20]
 800452a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800452e:	b2d2      	uxtb	r2, r2
 8004530:	701a      	strb	r2, [r3, #0]
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	09db      	lsrs	r3, r3, #7
 8004536:	613b      	str	r3, [r7, #16]
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	2b7f      	cmp	r3, #127	; 0x7f
 800453c:	d8f0      	bhi.n	8004520 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	1c5a      	adds	r2, r3, #1
 8004542:	617a      	str	r2, [r7, #20]
 8004544:	693a      	ldr	r2, [r7, #16]
 8004546:	b2d2      	uxtb	r2, r2
 8004548:	701a      	strb	r2, [r3, #0]
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800454e:	2218      	movs	r2, #24
 8004550:	6879      	ldr	r1, [r7, #4]
 8004552:	68b8      	ldr	r0, [r7, #8]
 8004554:	f7ff f964 	bl	8003820 <_SendPacket>
  RECORD_END();
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800455e:	4b06      	ldr	r3, [pc, #24]	; (8004578 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004562:	2b00      	cmp	r3, #0
 8004564:	d002      	beq.n	800456c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8004566:	4b04      	ldr	r3, [pc, #16]	; (8004578 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456a:	4798      	blx	r3
  }
}
 800456c:	bf00      	nop
 800456e:	3730      	adds	r7, #48	; 0x30
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	20013388 	.word	0x20013388
 8004578:	20013358 	.word	0x20013358

0800457c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800457c:	b580      	push	{r7, lr}
 800457e:	b092      	sub	sp, #72	; 0x48
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004584:	f3ef 8311 	mrs	r3, BASEPRI
 8004588:	f04f 0120 	mov.w	r1, #32
 800458c:	f381 8811 	msr	BASEPRI, r1
 8004590:	617b      	str	r3, [r7, #20]
 8004592:	486a      	ldr	r0, [pc, #424]	; (800473c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8004594:	f7ff f855 	bl	8003642 <_PreparePacket>
 8004598:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	647b      	str	r3, [r7, #68]	; 0x44
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	4b66      	ldr	r3, [pc, #408]	; (8004740 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	643b      	str	r3, [r7, #64]	; 0x40
 80045ae:	e00b      	b.n	80045c8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80045b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045b2:	b2da      	uxtb	r2, r3
 80045b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045b6:	1c59      	adds	r1, r3, #1
 80045b8:	6479      	str	r1, [r7, #68]	; 0x44
 80045ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80045be:	b2d2      	uxtb	r2, r2
 80045c0:	701a      	strb	r2, [r3, #0]
 80045c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045c4:	09db      	lsrs	r3, r3, #7
 80045c6:	643b      	str	r3, [r7, #64]	; 0x40
 80045c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045ca:	2b7f      	cmp	r3, #127	; 0x7f
 80045cc:	d8f0      	bhi.n	80045b0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80045ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045d0:	1c5a      	adds	r2, r3, #1
 80045d2:	647a      	str	r2, [r7, #68]	; 0x44
 80045d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045d6:	b2d2      	uxtb	r2, r2
 80045d8:	701a      	strb	r2, [r3, #0]
 80045da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045dc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80045e8:	e00b      	b.n	8004602 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80045ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ec:	b2da      	uxtb	r2, r3
 80045ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045f0:	1c59      	adds	r1, r3, #1
 80045f2:	63f9      	str	r1, [r7, #60]	; 0x3c
 80045f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80045f8:	b2d2      	uxtb	r2, r2
 80045fa:	701a      	strb	r2, [r3, #0]
 80045fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045fe:	09db      	lsrs	r3, r3, #7
 8004600:	63bb      	str	r3, [r7, #56]	; 0x38
 8004602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004604:	2b7f      	cmp	r3, #127	; 0x7f
 8004606:	d8f0      	bhi.n	80045ea <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8004608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800460a:	1c5a      	adds	r2, r3, #1
 800460c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800460e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004610:	b2d2      	uxtb	r2, r2
 8004612:	701a      	strb	r2, [r3, #0]
 8004614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004616:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	2220      	movs	r2, #32
 800461e:	4619      	mov	r1, r3
 8004620:	68f8      	ldr	r0, [r7, #12]
 8004622:	f7fe ffc1 	bl	80035a8 <_EncodeStr>
 8004626:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8004628:	2209      	movs	r2, #9
 800462a:	68f9      	ldr	r1, [r7, #12]
 800462c:	6938      	ldr	r0, [r7, #16]
 800462e:	f7ff f8f7 	bl	8003820 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	637b      	str	r3, [r7, #52]	; 0x34
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	4b40      	ldr	r3, [pc, #256]	; (8004740 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	633b      	str	r3, [r7, #48]	; 0x30
 8004646:	e00b      	b.n	8004660 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8004648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800464a:	b2da      	uxtb	r2, r3
 800464c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800464e:	1c59      	adds	r1, r3, #1
 8004650:	6379      	str	r1, [r7, #52]	; 0x34
 8004652:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004656:	b2d2      	uxtb	r2, r2
 8004658:	701a      	strb	r2, [r3, #0]
 800465a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800465c:	09db      	lsrs	r3, r3, #7
 800465e:	633b      	str	r3, [r7, #48]	; 0x30
 8004660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004662:	2b7f      	cmp	r3, #127	; 0x7f
 8004664:	d8f0      	bhi.n	8004648 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8004666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004668:	1c5a      	adds	r2, r3, #1
 800466a:	637a      	str	r2, [r7, #52]	; 0x34
 800466c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800466e:	b2d2      	uxtb	r2, r2
 8004670:	701a      	strb	r2, [r3, #0]
 8004672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004674:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	62fb      	str	r3, [r7, #44]	; 0x2c
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004680:	e00b      	b.n	800469a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8004682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004684:	b2da      	uxtb	r2, r3
 8004686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004688:	1c59      	adds	r1, r3, #1
 800468a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800468c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004690:	b2d2      	uxtb	r2, r2
 8004692:	701a      	strb	r2, [r3, #0]
 8004694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004696:	09db      	lsrs	r3, r3, #7
 8004698:	62bb      	str	r3, [r7, #40]	; 0x28
 800469a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800469c:	2b7f      	cmp	r3, #127	; 0x7f
 800469e:	d8f0      	bhi.n	8004682 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80046a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a2:	1c5a      	adds	r2, r3, #1
 80046a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046a8:	b2d2      	uxtb	r2, r2
 80046aa:	701a      	strb	r2, [r3, #0]
 80046ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ae:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	627b      	str	r3, [r7, #36]	; 0x24
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	623b      	str	r3, [r7, #32]
 80046ba:	e00b      	b.n	80046d4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80046bc:	6a3b      	ldr	r3, [r7, #32]
 80046be:	b2da      	uxtb	r2, r3
 80046c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c2:	1c59      	adds	r1, r3, #1
 80046c4:	6279      	str	r1, [r7, #36]	; 0x24
 80046c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046ca:	b2d2      	uxtb	r2, r2
 80046cc:	701a      	strb	r2, [r3, #0]
 80046ce:	6a3b      	ldr	r3, [r7, #32]
 80046d0:	09db      	lsrs	r3, r3, #7
 80046d2:	623b      	str	r3, [r7, #32]
 80046d4:	6a3b      	ldr	r3, [r7, #32]
 80046d6:	2b7f      	cmp	r3, #127	; 0x7f
 80046d8:	d8f0      	bhi.n	80046bc <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80046da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046dc:	1c5a      	adds	r2, r3, #1
 80046de:	627a      	str	r2, [r7, #36]	; 0x24
 80046e0:	6a3a      	ldr	r2, [r7, #32]
 80046e2:	b2d2      	uxtb	r2, r2
 80046e4:	701a      	strb	r2, [r3, #0]
 80046e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	61fb      	str	r3, [r7, #28]
 80046ee:	2300      	movs	r3, #0
 80046f0:	61bb      	str	r3, [r7, #24]
 80046f2:	e00b      	b.n	800470c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	b2da      	uxtb	r2, r3
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	1c59      	adds	r1, r3, #1
 80046fc:	61f9      	str	r1, [r7, #28]
 80046fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004702:	b2d2      	uxtb	r2, r2
 8004704:	701a      	strb	r2, [r3, #0]
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	09db      	lsrs	r3, r3, #7
 800470a:	61bb      	str	r3, [r7, #24]
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	2b7f      	cmp	r3, #127	; 0x7f
 8004710:	d8f0      	bhi.n	80046f4 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	1c5a      	adds	r2, r3, #1
 8004716:	61fa      	str	r2, [r7, #28]
 8004718:	69ba      	ldr	r2, [r7, #24]
 800471a:	b2d2      	uxtb	r2, r2
 800471c:	701a      	strb	r2, [r3, #0]
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004722:	2215      	movs	r2, #21
 8004724:	68f9      	ldr	r1, [r7, #12]
 8004726:	6938      	ldr	r0, [r7, #16]
 8004728:	f7ff f87a 	bl	8003820 <_SendPacket>
  RECORD_END();
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	f383 8811 	msr	BASEPRI, r3
}
 8004732:	bf00      	nop
 8004734:	3748      	adds	r7, #72	; 0x48
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	20013388 	.word	0x20013388
 8004740:	20013358 	.word	0x20013358

08004744 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004744:	b580      	push	{r7, lr}
 8004746:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004748:	4b07      	ldr	r3, [pc, #28]	; (8004768 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800474a:	6a1b      	ldr	r3, [r3, #32]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d008      	beq.n	8004762 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004750:	4b05      	ldr	r3, [pc, #20]	; (8004768 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004752:	6a1b      	ldr	r3, [r3, #32]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d003      	beq.n	8004762 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800475a:	4b03      	ldr	r3, [pc, #12]	; (8004768 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800475c:	6a1b      	ldr	r3, [r3, #32]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	4798      	blx	r3
  }
}
 8004762:	bf00      	nop
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	20013358 	.word	0x20013358

0800476c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800476c:	b590      	push	{r4, r7, lr}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004772:	4b15      	ldr	r3, [pc, #84]	; (80047c8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004774:	6a1b      	ldr	r3, [r3, #32]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d01a      	beq.n	80047b0 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800477a:	4b13      	ldr	r3, [pc, #76]	; (80047c8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800477c:	6a1b      	ldr	r3, [r3, #32]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d015      	beq.n	80047b0 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004784:	4b10      	ldr	r3, [pc, #64]	; (80047c8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004786:	6a1b      	ldr	r3, [r3, #32]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4798      	blx	r3
 800478c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004790:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004792:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004796:	f04f 0200 	mov.w	r2, #0
 800479a:	f04f 0300 	mov.w	r3, #0
 800479e:	000a      	movs	r2, r1
 80047a0:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80047a2:	4613      	mov	r3, r2
 80047a4:	461a      	mov	r2, r3
 80047a6:	4621      	mov	r1, r4
 80047a8:	200d      	movs	r0, #13
 80047aa:	f7ff fd13 	bl	80041d4 <SEGGER_SYSVIEW_RecordU32x2>
 80047ae:	e006      	b.n	80047be <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80047b0:	4b06      	ldr	r3, [pc, #24]	; (80047cc <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4619      	mov	r1, r3
 80047b6:	200c      	movs	r0, #12
 80047b8:	f7ff fcd0 	bl	800415c <SEGGER_SYSVIEW_RecordU32>
  }
}
 80047bc:	bf00      	nop
 80047be:	bf00      	nop
 80047c0:	370c      	adds	r7, #12
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd90      	pop	{r4, r7, pc}
 80047c6:	bf00      	nop
 80047c8:	20013358 	.word	0x20013358
 80047cc:	e0001004 	.word	0xe0001004

080047d0 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b086      	sub	sp, #24
 80047d4:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80047d6:	f3ef 8311 	mrs	r3, BASEPRI
 80047da:	f04f 0120 	mov.w	r1, #32
 80047de:	f381 8811 	msr	BASEPRI, r1
 80047e2:	60fb      	str	r3, [r7, #12]
 80047e4:	4819      	ldr	r0, [pc, #100]	; (800484c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80047e6:	f7fe ff2c 	bl	8003642 <_PreparePacket>
 80047ea:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80047f0:	4b17      	ldr	r3, [pc, #92]	; (8004850 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047f8:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	617b      	str	r3, [r7, #20]
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	613b      	str	r3, [r7, #16]
 8004802:	e00b      	b.n	800481c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	b2da      	uxtb	r2, r3
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	1c59      	adds	r1, r3, #1
 800480c:	6179      	str	r1, [r7, #20]
 800480e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004812:	b2d2      	uxtb	r2, r2
 8004814:	701a      	strb	r2, [r3, #0]
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	09db      	lsrs	r3, r3, #7
 800481a:	613b      	str	r3, [r7, #16]
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	2b7f      	cmp	r3, #127	; 0x7f
 8004820:	d8f0      	bhi.n	8004804 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	1c5a      	adds	r2, r3, #1
 8004826:	617a      	str	r2, [r7, #20]
 8004828:	693a      	ldr	r2, [r7, #16]
 800482a:	b2d2      	uxtb	r2, r2
 800482c:	701a      	strb	r2, [r3, #0]
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8004832:	2202      	movs	r2, #2
 8004834:	6879      	ldr	r1, [r7, #4]
 8004836:	68b8      	ldr	r0, [r7, #8]
 8004838:	f7fe fff2 	bl	8003820 <_SendPacket>
  RECORD_END();
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f383 8811 	msr	BASEPRI, r3
}
 8004842:	bf00      	nop
 8004844:	3718      	adds	r7, #24
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	20013388 	.word	0x20013388
 8004850:	e000ed04 	.word	0xe000ed04

08004854 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004854:	b580      	push	{r7, lr}
 8004856:	b082      	sub	sp, #8
 8004858:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800485a:	f3ef 8311 	mrs	r3, BASEPRI
 800485e:	f04f 0120 	mov.w	r1, #32
 8004862:	f381 8811 	msr	BASEPRI, r1
 8004866:	607b      	str	r3, [r7, #4]
 8004868:	4807      	ldr	r0, [pc, #28]	; (8004888 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800486a:	f7fe feea 	bl	8003642 <_PreparePacket>
 800486e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004870:	2203      	movs	r2, #3
 8004872:	6839      	ldr	r1, [r7, #0]
 8004874:	6838      	ldr	r0, [r7, #0]
 8004876:	f7fe ffd3 	bl	8003820 <_SendPacket>
  RECORD_END();
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f383 8811 	msr	BASEPRI, r3
}
 8004880:	bf00      	nop
 8004882:	3708      	adds	r7, #8
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}
 8004888:	20013388 	.word	0x20013388

0800488c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004892:	f3ef 8311 	mrs	r3, BASEPRI
 8004896:	f04f 0120 	mov.w	r1, #32
 800489a:	f381 8811 	msr	BASEPRI, r1
 800489e:	607b      	str	r3, [r7, #4]
 80048a0:	4807      	ldr	r0, [pc, #28]	; (80048c0 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80048a2:	f7fe fece 	bl	8003642 <_PreparePacket>
 80048a6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80048a8:	2212      	movs	r2, #18
 80048aa:	6839      	ldr	r1, [r7, #0]
 80048ac:	6838      	ldr	r0, [r7, #0]
 80048ae:	f7fe ffb7 	bl	8003820 <_SendPacket>
  RECORD_END();
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f383 8811 	msr	BASEPRI, r3
}
 80048b8:	bf00      	nop
 80048ba:	3708      	adds	r7, #8
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	20013388 	.word	0x20013388

080048c4 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80048ca:	f3ef 8311 	mrs	r3, BASEPRI
 80048ce:	f04f 0120 	mov.w	r1, #32
 80048d2:	f381 8811 	msr	BASEPRI, r1
 80048d6:	607b      	str	r3, [r7, #4]
 80048d8:	4807      	ldr	r0, [pc, #28]	; (80048f8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80048da:	f7fe feb2 	bl	8003642 <_PreparePacket>
 80048de:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80048e0:	2211      	movs	r2, #17
 80048e2:	6839      	ldr	r1, [r7, #0]
 80048e4:	6838      	ldr	r0, [r7, #0]
 80048e6:	f7fe ff9b 	bl	8003820 <_SendPacket>
  RECORD_END();
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f383 8811 	msr	BASEPRI, r3
}
 80048f0:	bf00      	nop
 80048f2:	3708      	adds	r7, #8
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	20013388 	.word	0x20013388

080048fc <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b088      	sub	sp, #32
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004904:	f3ef 8311 	mrs	r3, BASEPRI
 8004908:	f04f 0120 	mov.w	r1, #32
 800490c:	f381 8811 	msr	BASEPRI, r1
 8004910:	617b      	str	r3, [r7, #20]
 8004912:	4819      	ldr	r0, [pc, #100]	; (8004978 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8004914:	f7fe fe95 	bl	8003642 <_PreparePacket>
 8004918:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800491e:	4b17      	ldr	r3, [pc, #92]	; (800497c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	61fb      	str	r3, [r7, #28]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	61bb      	str	r3, [r7, #24]
 8004930:	e00b      	b.n	800494a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	b2da      	uxtb	r2, r3
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	1c59      	adds	r1, r3, #1
 800493a:	61f9      	str	r1, [r7, #28]
 800493c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004940:	b2d2      	uxtb	r2, r2
 8004942:	701a      	strb	r2, [r3, #0]
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	09db      	lsrs	r3, r3, #7
 8004948:	61bb      	str	r3, [r7, #24]
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	2b7f      	cmp	r3, #127	; 0x7f
 800494e:	d8f0      	bhi.n	8004932 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	1c5a      	adds	r2, r3, #1
 8004954:	61fa      	str	r2, [r7, #28]
 8004956:	69ba      	ldr	r2, [r7, #24]
 8004958:	b2d2      	uxtb	r2, r2
 800495a:	701a      	strb	r2, [r3, #0]
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8004960:	2208      	movs	r2, #8
 8004962:	68f9      	ldr	r1, [r7, #12]
 8004964:	6938      	ldr	r0, [r7, #16]
 8004966:	f7fe ff5b 	bl	8003820 <_SendPacket>
  RECORD_END();
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	f383 8811 	msr	BASEPRI, r3
}
 8004970:	bf00      	nop
 8004972:	3720      	adds	r7, #32
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}
 8004978:	20013388 	.word	0x20013388
 800497c:	20013358 	.word	0x20013358

08004980 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8004980:	b580      	push	{r7, lr}
 8004982:	b088      	sub	sp, #32
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004988:	f3ef 8311 	mrs	r3, BASEPRI
 800498c:	f04f 0120 	mov.w	r1, #32
 8004990:	f381 8811 	msr	BASEPRI, r1
 8004994:	617b      	str	r3, [r7, #20]
 8004996:	4819      	ldr	r0, [pc, #100]	; (80049fc <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8004998:	f7fe fe53 	bl	8003642 <_PreparePacket>
 800499c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80049a2:	4b17      	ldr	r3, [pc, #92]	; (8004a00 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	61fb      	str	r3, [r7, #28]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	61bb      	str	r3, [r7, #24]
 80049b4:	e00b      	b.n	80049ce <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	b2da      	uxtb	r2, r3
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	1c59      	adds	r1, r3, #1
 80049be:	61f9      	str	r1, [r7, #28]
 80049c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049c4:	b2d2      	uxtb	r2, r2
 80049c6:	701a      	strb	r2, [r3, #0]
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	09db      	lsrs	r3, r3, #7
 80049cc:	61bb      	str	r3, [r7, #24]
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	2b7f      	cmp	r3, #127	; 0x7f
 80049d2:	d8f0      	bhi.n	80049b6 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	1c5a      	adds	r2, r3, #1
 80049d8:	61fa      	str	r2, [r7, #28]
 80049da:	69ba      	ldr	r2, [r7, #24]
 80049dc:	b2d2      	uxtb	r2, r2
 80049de:	701a      	strb	r2, [r3, #0]
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80049e4:	2204      	movs	r2, #4
 80049e6:	68f9      	ldr	r1, [r7, #12]
 80049e8:	6938      	ldr	r0, [r7, #16]
 80049ea:	f7fe ff19 	bl	8003820 <_SendPacket>
  RECORD_END();
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	f383 8811 	msr	BASEPRI, r3
}
 80049f4:	bf00      	nop
 80049f6:	3720      	adds	r7, #32
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	20013388 	.word	0x20013388
 8004a00:	20013358 	.word	0x20013358

08004a04 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b088      	sub	sp, #32
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004a0c:	f3ef 8311 	mrs	r3, BASEPRI
 8004a10:	f04f 0120 	mov.w	r1, #32
 8004a14:	f381 8811 	msr	BASEPRI, r1
 8004a18:	617b      	str	r3, [r7, #20]
 8004a1a:	4819      	ldr	r0, [pc, #100]	; (8004a80 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8004a1c:	f7fe fe11 	bl	8003642 <_PreparePacket>
 8004a20:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004a26:	4b17      	ldr	r3, [pc, #92]	; (8004a84 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	61fb      	str	r3, [r7, #28]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	61bb      	str	r3, [r7, #24]
 8004a38:	e00b      	b.n	8004a52 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	b2da      	uxtb	r2, r3
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	1c59      	adds	r1, r3, #1
 8004a42:	61f9      	str	r1, [r7, #28]
 8004a44:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a48:	b2d2      	uxtb	r2, r2
 8004a4a:	701a      	strb	r2, [r3, #0]
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	09db      	lsrs	r3, r3, #7
 8004a50:	61bb      	str	r3, [r7, #24]
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	2b7f      	cmp	r3, #127	; 0x7f
 8004a56:	d8f0      	bhi.n	8004a3a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	1c5a      	adds	r2, r3, #1
 8004a5c:	61fa      	str	r2, [r7, #28]
 8004a5e:	69ba      	ldr	r2, [r7, #24]
 8004a60:	b2d2      	uxtb	r2, r2
 8004a62:	701a      	strb	r2, [r3, #0]
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8004a68:	2206      	movs	r2, #6
 8004a6a:	68f9      	ldr	r1, [r7, #12]
 8004a6c:	6938      	ldr	r0, [r7, #16]
 8004a6e:	f7fe fed7 	bl	8003820 <_SendPacket>
  RECORD_END();
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	f383 8811 	msr	BASEPRI, r3
}
 8004a78:	bf00      	nop
 8004a7a:	3720      	adds	r7, #32
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	20013388 	.word	0x20013388
 8004a84:	20013358 	.word	0x20013358

08004a88 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b08c      	sub	sp, #48	; 0x30
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	4603      	mov	r3, r0
 8004a90:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8004a92:	4b3b      	ldr	r3, [pc, #236]	; (8004b80 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d06d      	beq.n	8004b76 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8004a9a:	4b39      	ldr	r3, [pc, #228]	; (8004b80 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004aa4:	e008      	b.n	8004ab8 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8004aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8004aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d007      	beq.n	8004ac2 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8004ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ab8:	79fb      	ldrb	r3, [r7, #7]
 8004aba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d3f2      	bcc.n	8004aa6 <SEGGER_SYSVIEW_SendModule+0x1e>
 8004ac0:	e000      	b.n	8004ac4 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8004ac2:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8004ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d055      	beq.n	8004b76 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004aca:	f3ef 8311 	mrs	r3, BASEPRI
 8004ace:	f04f 0120 	mov.w	r1, #32
 8004ad2:	f381 8811 	msr	BASEPRI, r1
 8004ad6:	617b      	str	r3, [r7, #20]
 8004ad8:	482a      	ldr	r0, [pc, #168]	; (8004b84 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8004ada:	f7fe fdb2 	bl	8003642 <_PreparePacket>
 8004ade:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ae8:	79fb      	ldrb	r3, [r7, #7]
 8004aea:	623b      	str	r3, [r7, #32]
 8004aec:	e00b      	b.n	8004b06 <SEGGER_SYSVIEW_SendModule+0x7e>
 8004aee:	6a3b      	ldr	r3, [r7, #32]
 8004af0:	b2da      	uxtb	r2, r3
 8004af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af4:	1c59      	adds	r1, r3, #1
 8004af6:	6279      	str	r1, [r7, #36]	; 0x24
 8004af8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004afc:	b2d2      	uxtb	r2, r2
 8004afe:	701a      	strb	r2, [r3, #0]
 8004b00:	6a3b      	ldr	r3, [r7, #32]
 8004b02:	09db      	lsrs	r3, r3, #7
 8004b04:	623b      	str	r3, [r7, #32]
 8004b06:	6a3b      	ldr	r3, [r7, #32]
 8004b08:	2b7f      	cmp	r3, #127	; 0x7f
 8004b0a:	d8f0      	bhi.n	8004aee <SEGGER_SYSVIEW_SendModule+0x66>
 8004b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0e:	1c5a      	adds	r2, r3, #1
 8004b10:	627a      	str	r2, [r7, #36]	; 0x24
 8004b12:	6a3a      	ldr	r2, [r7, #32]
 8004b14:	b2d2      	uxtb	r2, r2
 8004b16:	701a      	strb	r2, [r3, #0]
 8004b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	61fb      	str	r3, [r7, #28]
 8004b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	61bb      	str	r3, [r7, #24]
 8004b26:	e00b      	b.n	8004b40 <SEGGER_SYSVIEW_SendModule+0xb8>
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	b2da      	uxtb	r2, r3
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	1c59      	adds	r1, r3, #1
 8004b30:	61f9      	str	r1, [r7, #28]
 8004b32:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b36:	b2d2      	uxtb	r2, r2
 8004b38:	701a      	strb	r2, [r3, #0]
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	09db      	lsrs	r3, r3, #7
 8004b3e:	61bb      	str	r3, [r7, #24]
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	2b7f      	cmp	r3, #127	; 0x7f
 8004b44:	d8f0      	bhi.n	8004b28 <SEGGER_SYSVIEW_SendModule+0xa0>
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	1c5a      	adds	r2, r3, #1
 8004b4a:	61fa      	str	r2, [r7, #28]
 8004b4c:	69ba      	ldr	r2, [r7, #24]
 8004b4e:	b2d2      	uxtb	r2, r2
 8004b50:	701a      	strb	r2, [r3, #0]
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2280      	movs	r2, #128	; 0x80
 8004b5c:	4619      	mov	r1, r3
 8004b5e:	68f8      	ldr	r0, [r7, #12]
 8004b60:	f7fe fd22 	bl	80035a8 <_EncodeStr>
 8004b64:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8004b66:	2216      	movs	r2, #22
 8004b68:	68f9      	ldr	r1, [r7, #12]
 8004b6a:	6938      	ldr	r0, [r7, #16]
 8004b6c:	f7fe fe58 	bl	8003820 <_SendPacket>
      RECORD_END();
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8004b76:	bf00      	nop
 8004b78:	3730      	adds	r7, #48	; 0x30
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	20013380 	.word	0x20013380
 8004b84:	20013388 	.word	0x20013388

08004b88 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8004b8e:	4b0c      	ldr	r3, [pc, #48]	; (8004bc0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d00f      	beq.n	8004bb6 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8004b96:	4b0a      	ldr	r3, [pc, #40]	; (8004bc0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d002      	beq.n	8004baa <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d1f2      	bne.n	8004b9c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8004bb6:	bf00      	nop
 8004bb8:	3708      	adds	r7, #8
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	20013380 	.word	0x20013380

08004bc4 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b086      	sub	sp, #24
 8004bc8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8004bca:	f3ef 8311 	mrs	r3, BASEPRI
 8004bce:	f04f 0120 	mov.w	r1, #32
 8004bd2:	f381 8811 	msr	BASEPRI, r1
 8004bd6:	60fb      	str	r3, [r7, #12]
 8004bd8:	4817      	ldr	r0, [pc, #92]	; (8004c38 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8004bda:	f7fe fd32 	bl	8003642 <_PreparePacket>
 8004bde:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	617b      	str	r3, [r7, #20]
 8004be8:	4b14      	ldr	r3, [pc, #80]	; (8004c3c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	613b      	str	r3, [r7, #16]
 8004bee:	e00b      	b.n	8004c08 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	b2da      	uxtb	r2, r3
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	1c59      	adds	r1, r3, #1
 8004bf8:	6179      	str	r1, [r7, #20]
 8004bfa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004bfe:	b2d2      	uxtb	r2, r2
 8004c00:	701a      	strb	r2, [r3, #0]
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	09db      	lsrs	r3, r3, #7
 8004c06:	613b      	str	r3, [r7, #16]
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	2b7f      	cmp	r3, #127	; 0x7f
 8004c0c:	d8f0      	bhi.n	8004bf0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	1c5a      	adds	r2, r3, #1
 8004c12:	617a      	str	r2, [r7, #20]
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	b2d2      	uxtb	r2, r2
 8004c18:	701a      	strb	r2, [r3, #0]
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8004c1e:	221b      	movs	r2, #27
 8004c20:	6879      	ldr	r1, [r7, #4]
 8004c22:	68b8      	ldr	r0, [r7, #8]
 8004c24:	f7fe fdfc 	bl	8003820 <_SendPacket>
  RECORD_END();
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f383 8811 	msr	BASEPRI, r3
}
 8004c2e:	bf00      	nop
 8004c30:	3718      	adds	r7, #24
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	20013388 	.word	0x20013388
 8004c3c:	20013384 	.word	0x20013384

08004c40 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8004c40:	b40f      	push	{r0, r1, r2, r3}
 8004c42:	b580      	push	{r7, lr}
 8004c44:	b082      	sub	sp, #8
 8004c46:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8004c48:	f107 0314 	add.w	r3, r7, #20
 8004c4c:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8004c4e:	1d3b      	adds	r3, r7, #4
 8004c50:	461a      	mov	r2, r3
 8004c52:	2100      	movs	r1, #0
 8004c54:	6938      	ldr	r0, [r7, #16]
 8004c56:	f7ff f86b 	bl	8003d30 <_VPrintTarget>
  va_end(ParamList);
}
 8004c5a:	bf00      	nop
 8004c5c:	3708      	adds	r7, #8
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c64:	b004      	add	sp, #16
 8004c66:	4770      	bx	lr

08004c68 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b08a      	sub	sp, #40	; 0x28
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004c70:	f3ef 8311 	mrs	r3, BASEPRI
 8004c74:	f04f 0120 	mov.w	r1, #32
 8004c78:	f381 8811 	msr	BASEPRI, r1
 8004c7c:	617b      	str	r3, [r7, #20]
 8004c7e:	4827      	ldr	r0, [pc, #156]	; (8004d1c <SEGGER_SYSVIEW_Warn+0xb4>)
 8004c80:	f7fe fcdf 	bl	8003642 <_PreparePacket>
 8004c84:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004c86:	2280      	movs	r2, #128	; 0x80
 8004c88:	6879      	ldr	r1, [r7, #4]
 8004c8a:	6938      	ldr	r0, [r7, #16]
 8004c8c:	f7fe fc8c 	bl	80035a8 <_EncodeStr>
 8004c90:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	627b      	str	r3, [r7, #36]	; 0x24
 8004c96:	2301      	movs	r3, #1
 8004c98:	623b      	str	r3, [r7, #32]
 8004c9a:	e00b      	b.n	8004cb4 <SEGGER_SYSVIEW_Warn+0x4c>
 8004c9c:	6a3b      	ldr	r3, [r7, #32]
 8004c9e:	b2da      	uxtb	r2, r3
 8004ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca2:	1c59      	adds	r1, r3, #1
 8004ca4:	6279      	str	r1, [r7, #36]	; 0x24
 8004ca6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004caa:	b2d2      	uxtb	r2, r2
 8004cac:	701a      	strb	r2, [r3, #0]
 8004cae:	6a3b      	ldr	r3, [r7, #32]
 8004cb0:	09db      	lsrs	r3, r3, #7
 8004cb2:	623b      	str	r3, [r7, #32]
 8004cb4:	6a3b      	ldr	r3, [r7, #32]
 8004cb6:	2b7f      	cmp	r3, #127	; 0x7f
 8004cb8:	d8f0      	bhi.n	8004c9c <SEGGER_SYSVIEW_Warn+0x34>
 8004cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbc:	1c5a      	adds	r2, r3, #1
 8004cbe:	627a      	str	r2, [r7, #36]	; 0x24
 8004cc0:	6a3a      	ldr	r2, [r7, #32]
 8004cc2:	b2d2      	uxtb	r2, r2
 8004cc4:	701a      	strb	r2, [r3, #0]
 8004cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	61fb      	str	r3, [r7, #28]
 8004cce:	2300      	movs	r3, #0
 8004cd0:	61bb      	str	r3, [r7, #24]
 8004cd2:	e00b      	b.n	8004cec <SEGGER_SYSVIEW_Warn+0x84>
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	b2da      	uxtb	r2, r3
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	1c59      	adds	r1, r3, #1
 8004cdc:	61f9      	str	r1, [r7, #28]
 8004cde:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ce2:	b2d2      	uxtb	r2, r2
 8004ce4:	701a      	strb	r2, [r3, #0]
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	09db      	lsrs	r3, r3, #7
 8004cea:	61bb      	str	r3, [r7, #24]
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	2b7f      	cmp	r3, #127	; 0x7f
 8004cf0:	d8f0      	bhi.n	8004cd4 <SEGGER_SYSVIEW_Warn+0x6c>
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	1c5a      	adds	r2, r3, #1
 8004cf6:	61fa      	str	r2, [r7, #28]
 8004cf8:	69ba      	ldr	r2, [r7, #24]
 8004cfa:	b2d2      	uxtb	r2, r2
 8004cfc:	701a      	strb	r2, [r3, #0]
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004d02:	221a      	movs	r2, #26
 8004d04:	68f9      	ldr	r1, [r7, #12]
 8004d06:	6938      	ldr	r0, [r7, #16]
 8004d08:	f7fe fd8a 	bl	8003820 <_SendPacket>
  RECORD_END();
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	f383 8811 	msr	BASEPRI, r3
}
 8004d12:	bf00      	nop
 8004d14:	3728      	adds	r7, #40	; 0x28
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	20013388 	.word	0x20013388

08004d20 <sniprintf>:
 8004d20:	b40c      	push	{r2, r3}
 8004d22:	b530      	push	{r4, r5, lr}
 8004d24:	4b17      	ldr	r3, [pc, #92]	; (8004d84 <sniprintf+0x64>)
 8004d26:	1e0c      	subs	r4, r1, #0
 8004d28:	681d      	ldr	r5, [r3, #0]
 8004d2a:	b09d      	sub	sp, #116	; 0x74
 8004d2c:	da08      	bge.n	8004d40 <sniprintf+0x20>
 8004d2e:	238b      	movs	r3, #139	; 0x8b
 8004d30:	602b      	str	r3, [r5, #0]
 8004d32:	f04f 30ff 	mov.w	r0, #4294967295
 8004d36:	b01d      	add	sp, #116	; 0x74
 8004d38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d3c:	b002      	add	sp, #8
 8004d3e:	4770      	bx	lr
 8004d40:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004d44:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004d48:	bf14      	ite	ne
 8004d4a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004d4e:	4623      	moveq	r3, r4
 8004d50:	9304      	str	r3, [sp, #16]
 8004d52:	9307      	str	r3, [sp, #28]
 8004d54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004d58:	9002      	str	r0, [sp, #8]
 8004d5a:	9006      	str	r0, [sp, #24]
 8004d5c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004d60:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004d62:	ab21      	add	r3, sp, #132	; 0x84
 8004d64:	a902      	add	r1, sp, #8
 8004d66:	4628      	mov	r0, r5
 8004d68:	9301      	str	r3, [sp, #4]
 8004d6a:	f000 f9ab 	bl	80050c4 <_svfiprintf_r>
 8004d6e:	1c43      	adds	r3, r0, #1
 8004d70:	bfbc      	itt	lt
 8004d72:	238b      	movlt	r3, #139	; 0x8b
 8004d74:	602b      	strlt	r3, [r5, #0]
 8004d76:	2c00      	cmp	r4, #0
 8004d78:	d0dd      	beq.n	8004d36 <sniprintf+0x16>
 8004d7a:	9b02      	ldr	r3, [sp, #8]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	701a      	strb	r2, [r3, #0]
 8004d80:	e7d9      	b.n	8004d36 <sniprintf+0x16>
 8004d82:	bf00      	nop
 8004d84:	20000060 	.word	0x20000060

08004d88 <memcmp>:
 8004d88:	b510      	push	{r4, lr}
 8004d8a:	3901      	subs	r1, #1
 8004d8c:	4402      	add	r2, r0
 8004d8e:	4290      	cmp	r0, r2
 8004d90:	d101      	bne.n	8004d96 <memcmp+0xe>
 8004d92:	2000      	movs	r0, #0
 8004d94:	e005      	b.n	8004da2 <memcmp+0x1a>
 8004d96:	7803      	ldrb	r3, [r0, #0]
 8004d98:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004d9c:	42a3      	cmp	r3, r4
 8004d9e:	d001      	beq.n	8004da4 <memcmp+0x1c>
 8004da0:	1b18      	subs	r0, r3, r4
 8004da2:	bd10      	pop	{r4, pc}
 8004da4:	3001      	adds	r0, #1
 8004da6:	e7f2      	b.n	8004d8e <memcmp+0x6>

08004da8 <memset>:
 8004da8:	4402      	add	r2, r0
 8004daa:	4603      	mov	r3, r0
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d100      	bne.n	8004db2 <memset+0xa>
 8004db0:	4770      	bx	lr
 8004db2:	f803 1b01 	strb.w	r1, [r3], #1
 8004db6:	e7f9      	b.n	8004dac <memset+0x4>

08004db8 <__libc_init_array>:
 8004db8:	b570      	push	{r4, r5, r6, lr}
 8004dba:	4d0d      	ldr	r5, [pc, #52]	; (8004df0 <__libc_init_array+0x38>)
 8004dbc:	4c0d      	ldr	r4, [pc, #52]	; (8004df4 <__libc_init_array+0x3c>)
 8004dbe:	1b64      	subs	r4, r4, r5
 8004dc0:	10a4      	asrs	r4, r4, #2
 8004dc2:	2600      	movs	r6, #0
 8004dc4:	42a6      	cmp	r6, r4
 8004dc6:	d109      	bne.n	8004ddc <__libc_init_array+0x24>
 8004dc8:	4d0b      	ldr	r5, [pc, #44]	; (8004df8 <__libc_init_array+0x40>)
 8004dca:	4c0c      	ldr	r4, [pc, #48]	; (8004dfc <__libc_init_array+0x44>)
 8004dcc:	f000 fc78 	bl	80056c0 <_init>
 8004dd0:	1b64      	subs	r4, r4, r5
 8004dd2:	10a4      	asrs	r4, r4, #2
 8004dd4:	2600      	movs	r6, #0
 8004dd6:	42a6      	cmp	r6, r4
 8004dd8:	d105      	bne.n	8004de6 <__libc_init_array+0x2e>
 8004dda:	bd70      	pop	{r4, r5, r6, pc}
 8004ddc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004de0:	4798      	blx	r3
 8004de2:	3601      	adds	r6, #1
 8004de4:	e7ee      	b.n	8004dc4 <__libc_init_array+0xc>
 8004de6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dea:	4798      	blx	r3
 8004dec:	3601      	adds	r6, #1
 8004dee:	e7f2      	b.n	8004dd6 <__libc_init_array+0x1e>
 8004df0:	08005804 	.word	0x08005804
 8004df4:	08005804 	.word	0x08005804
 8004df8:	08005804 	.word	0x08005804
 8004dfc:	08005808 	.word	0x08005808

08004e00 <__retarget_lock_acquire_recursive>:
 8004e00:	4770      	bx	lr

08004e02 <__retarget_lock_release_recursive>:
 8004e02:	4770      	bx	lr

08004e04 <memcpy>:
 8004e04:	440a      	add	r2, r1
 8004e06:	4291      	cmp	r1, r2
 8004e08:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e0c:	d100      	bne.n	8004e10 <memcpy+0xc>
 8004e0e:	4770      	bx	lr
 8004e10:	b510      	push	{r4, lr}
 8004e12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e1a:	4291      	cmp	r1, r2
 8004e1c:	d1f9      	bne.n	8004e12 <memcpy+0xe>
 8004e1e:	bd10      	pop	{r4, pc}

08004e20 <_free_r>:
 8004e20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e22:	2900      	cmp	r1, #0
 8004e24:	d044      	beq.n	8004eb0 <_free_r+0x90>
 8004e26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e2a:	9001      	str	r0, [sp, #4]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	f1a1 0404 	sub.w	r4, r1, #4
 8004e32:	bfb8      	it	lt
 8004e34:	18e4      	addlt	r4, r4, r3
 8004e36:	f000 f8df 	bl	8004ff8 <__malloc_lock>
 8004e3a:	4a1e      	ldr	r2, [pc, #120]	; (8004eb4 <_free_r+0x94>)
 8004e3c:	9801      	ldr	r0, [sp, #4]
 8004e3e:	6813      	ldr	r3, [r2, #0]
 8004e40:	b933      	cbnz	r3, 8004e50 <_free_r+0x30>
 8004e42:	6063      	str	r3, [r4, #4]
 8004e44:	6014      	str	r4, [r2, #0]
 8004e46:	b003      	add	sp, #12
 8004e48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e4c:	f000 b8da 	b.w	8005004 <__malloc_unlock>
 8004e50:	42a3      	cmp	r3, r4
 8004e52:	d908      	bls.n	8004e66 <_free_r+0x46>
 8004e54:	6825      	ldr	r5, [r4, #0]
 8004e56:	1961      	adds	r1, r4, r5
 8004e58:	428b      	cmp	r3, r1
 8004e5a:	bf01      	itttt	eq
 8004e5c:	6819      	ldreq	r1, [r3, #0]
 8004e5e:	685b      	ldreq	r3, [r3, #4]
 8004e60:	1949      	addeq	r1, r1, r5
 8004e62:	6021      	streq	r1, [r4, #0]
 8004e64:	e7ed      	b.n	8004e42 <_free_r+0x22>
 8004e66:	461a      	mov	r2, r3
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	b10b      	cbz	r3, 8004e70 <_free_r+0x50>
 8004e6c:	42a3      	cmp	r3, r4
 8004e6e:	d9fa      	bls.n	8004e66 <_free_r+0x46>
 8004e70:	6811      	ldr	r1, [r2, #0]
 8004e72:	1855      	adds	r5, r2, r1
 8004e74:	42a5      	cmp	r5, r4
 8004e76:	d10b      	bne.n	8004e90 <_free_r+0x70>
 8004e78:	6824      	ldr	r4, [r4, #0]
 8004e7a:	4421      	add	r1, r4
 8004e7c:	1854      	adds	r4, r2, r1
 8004e7e:	42a3      	cmp	r3, r4
 8004e80:	6011      	str	r1, [r2, #0]
 8004e82:	d1e0      	bne.n	8004e46 <_free_r+0x26>
 8004e84:	681c      	ldr	r4, [r3, #0]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	6053      	str	r3, [r2, #4]
 8004e8a:	440c      	add	r4, r1
 8004e8c:	6014      	str	r4, [r2, #0]
 8004e8e:	e7da      	b.n	8004e46 <_free_r+0x26>
 8004e90:	d902      	bls.n	8004e98 <_free_r+0x78>
 8004e92:	230c      	movs	r3, #12
 8004e94:	6003      	str	r3, [r0, #0]
 8004e96:	e7d6      	b.n	8004e46 <_free_r+0x26>
 8004e98:	6825      	ldr	r5, [r4, #0]
 8004e9a:	1961      	adds	r1, r4, r5
 8004e9c:	428b      	cmp	r3, r1
 8004e9e:	bf04      	itt	eq
 8004ea0:	6819      	ldreq	r1, [r3, #0]
 8004ea2:	685b      	ldreq	r3, [r3, #4]
 8004ea4:	6063      	str	r3, [r4, #4]
 8004ea6:	bf04      	itt	eq
 8004ea8:	1949      	addeq	r1, r1, r5
 8004eaa:	6021      	streq	r1, [r4, #0]
 8004eac:	6054      	str	r4, [r2, #4]
 8004eae:	e7ca      	b.n	8004e46 <_free_r+0x26>
 8004eb0:	b003      	add	sp, #12
 8004eb2:	bd30      	pop	{r4, r5, pc}
 8004eb4:	200135ac 	.word	0x200135ac

08004eb8 <sbrk_aligned>:
 8004eb8:	b570      	push	{r4, r5, r6, lr}
 8004eba:	4e0e      	ldr	r6, [pc, #56]	; (8004ef4 <sbrk_aligned+0x3c>)
 8004ebc:	460c      	mov	r4, r1
 8004ebe:	6831      	ldr	r1, [r6, #0]
 8004ec0:	4605      	mov	r5, r0
 8004ec2:	b911      	cbnz	r1, 8004eca <sbrk_aligned+0x12>
 8004ec4:	f000 fba6 	bl	8005614 <_sbrk_r>
 8004ec8:	6030      	str	r0, [r6, #0]
 8004eca:	4621      	mov	r1, r4
 8004ecc:	4628      	mov	r0, r5
 8004ece:	f000 fba1 	bl	8005614 <_sbrk_r>
 8004ed2:	1c43      	adds	r3, r0, #1
 8004ed4:	d00a      	beq.n	8004eec <sbrk_aligned+0x34>
 8004ed6:	1cc4      	adds	r4, r0, #3
 8004ed8:	f024 0403 	bic.w	r4, r4, #3
 8004edc:	42a0      	cmp	r0, r4
 8004ede:	d007      	beq.n	8004ef0 <sbrk_aligned+0x38>
 8004ee0:	1a21      	subs	r1, r4, r0
 8004ee2:	4628      	mov	r0, r5
 8004ee4:	f000 fb96 	bl	8005614 <_sbrk_r>
 8004ee8:	3001      	adds	r0, #1
 8004eea:	d101      	bne.n	8004ef0 <sbrk_aligned+0x38>
 8004eec:	f04f 34ff 	mov.w	r4, #4294967295
 8004ef0:	4620      	mov	r0, r4
 8004ef2:	bd70      	pop	{r4, r5, r6, pc}
 8004ef4:	200135b0 	.word	0x200135b0

08004ef8 <_malloc_r>:
 8004ef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004efc:	1ccd      	adds	r5, r1, #3
 8004efe:	f025 0503 	bic.w	r5, r5, #3
 8004f02:	3508      	adds	r5, #8
 8004f04:	2d0c      	cmp	r5, #12
 8004f06:	bf38      	it	cc
 8004f08:	250c      	movcc	r5, #12
 8004f0a:	2d00      	cmp	r5, #0
 8004f0c:	4607      	mov	r7, r0
 8004f0e:	db01      	blt.n	8004f14 <_malloc_r+0x1c>
 8004f10:	42a9      	cmp	r1, r5
 8004f12:	d905      	bls.n	8004f20 <_malloc_r+0x28>
 8004f14:	230c      	movs	r3, #12
 8004f16:	603b      	str	r3, [r7, #0]
 8004f18:	2600      	movs	r6, #0
 8004f1a:	4630      	mov	r0, r6
 8004f1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f20:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004ff4 <_malloc_r+0xfc>
 8004f24:	f000 f868 	bl	8004ff8 <__malloc_lock>
 8004f28:	f8d8 3000 	ldr.w	r3, [r8]
 8004f2c:	461c      	mov	r4, r3
 8004f2e:	bb5c      	cbnz	r4, 8004f88 <_malloc_r+0x90>
 8004f30:	4629      	mov	r1, r5
 8004f32:	4638      	mov	r0, r7
 8004f34:	f7ff ffc0 	bl	8004eb8 <sbrk_aligned>
 8004f38:	1c43      	adds	r3, r0, #1
 8004f3a:	4604      	mov	r4, r0
 8004f3c:	d155      	bne.n	8004fea <_malloc_r+0xf2>
 8004f3e:	f8d8 4000 	ldr.w	r4, [r8]
 8004f42:	4626      	mov	r6, r4
 8004f44:	2e00      	cmp	r6, #0
 8004f46:	d145      	bne.n	8004fd4 <_malloc_r+0xdc>
 8004f48:	2c00      	cmp	r4, #0
 8004f4a:	d048      	beq.n	8004fde <_malloc_r+0xe6>
 8004f4c:	6823      	ldr	r3, [r4, #0]
 8004f4e:	4631      	mov	r1, r6
 8004f50:	4638      	mov	r0, r7
 8004f52:	eb04 0903 	add.w	r9, r4, r3
 8004f56:	f000 fb5d 	bl	8005614 <_sbrk_r>
 8004f5a:	4581      	cmp	r9, r0
 8004f5c:	d13f      	bne.n	8004fde <_malloc_r+0xe6>
 8004f5e:	6821      	ldr	r1, [r4, #0]
 8004f60:	1a6d      	subs	r5, r5, r1
 8004f62:	4629      	mov	r1, r5
 8004f64:	4638      	mov	r0, r7
 8004f66:	f7ff ffa7 	bl	8004eb8 <sbrk_aligned>
 8004f6a:	3001      	adds	r0, #1
 8004f6c:	d037      	beq.n	8004fde <_malloc_r+0xe6>
 8004f6e:	6823      	ldr	r3, [r4, #0]
 8004f70:	442b      	add	r3, r5
 8004f72:	6023      	str	r3, [r4, #0]
 8004f74:	f8d8 3000 	ldr.w	r3, [r8]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d038      	beq.n	8004fee <_malloc_r+0xf6>
 8004f7c:	685a      	ldr	r2, [r3, #4]
 8004f7e:	42a2      	cmp	r2, r4
 8004f80:	d12b      	bne.n	8004fda <_malloc_r+0xe2>
 8004f82:	2200      	movs	r2, #0
 8004f84:	605a      	str	r2, [r3, #4]
 8004f86:	e00f      	b.n	8004fa8 <_malloc_r+0xb0>
 8004f88:	6822      	ldr	r2, [r4, #0]
 8004f8a:	1b52      	subs	r2, r2, r5
 8004f8c:	d41f      	bmi.n	8004fce <_malloc_r+0xd6>
 8004f8e:	2a0b      	cmp	r2, #11
 8004f90:	d917      	bls.n	8004fc2 <_malloc_r+0xca>
 8004f92:	1961      	adds	r1, r4, r5
 8004f94:	42a3      	cmp	r3, r4
 8004f96:	6025      	str	r5, [r4, #0]
 8004f98:	bf18      	it	ne
 8004f9a:	6059      	strne	r1, [r3, #4]
 8004f9c:	6863      	ldr	r3, [r4, #4]
 8004f9e:	bf08      	it	eq
 8004fa0:	f8c8 1000 	streq.w	r1, [r8]
 8004fa4:	5162      	str	r2, [r4, r5]
 8004fa6:	604b      	str	r3, [r1, #4]
 8004fa8:	4638      	mov	r0, r7
 8004faa:	f104 060b 	add.w	r6, r4, #11
 8004fae:	f000 f829 	bl	8005004 <__malloc_unlock>
 8004fb2:	f026 0607 	bic.w	r6, r6, #7
 8004fb6:	1d23      	adds	r3, r4, #4
 8004fb8:	1af2      	subs	r2, r6, r3
 8004fba:	d0ae      	beq.n	8004f1a <_malloc_r+0x22>
 8004fbc:	1b9b      	subs	r3, r3, r6
 8004fbe:	50a3      	str	r3, [r4, r2]
 8004fc0:	e7ab      	b.n	8004f1a <_malloc_r+0x22>
 8004fc2:	42a3      	cmp	r3, r4
 8004fc4:	6862      	ldr	r2, [r4, #4]
 8004fc6:	d1dd      	bne.n	8004f84 <_malloc_r+0x8c>
 8004fc8:	f8c8 2000 	str.w	r2, [r8]
 8004fcc:	e7ec      	b.n	8004fa8 <_malloc_r+0xb0>
 8004fce:	4623      	mov	r3, r4
 8004fd0:	6864      	ldr	r4, [r4, #4]
 8004fd2:	e7ac      	b.n	8004f2e <_malloc_r+0x36>
 8004fd4:	4634      	mov	r4, r6
 8004fd6:	6876      	ldr	r6, [r6, #4]
 8004fd8:	e7b4      	b.n	8004f44 <_malloc_r+0x4c>
 8004fda:	4613      	mov	r3, r2
 8004fdc:	e7cc      	b.n	8004f78 <_malloc_r+0x80>
 8004fde:	230c      	movs	r3, #12
 8004fe0:	603b      	str	r3, [r7, #0]
 8004fe2:	4638      	mov	r0, r7
 8004fe4:	f000 f80e 	bl	8005004 <__malloc_unlock>
 8004fe8:	e797      	b.n	8004f1a <_malloc_r+0x22>
 8004fea:	6025      	str	r5, [r4, #0]
 8004fec:	e7dc      	b.n	8004fa8 <_malloc_r+0xb0>
 8004fee:	605b      	str	r3, [r3, #4]
 8004ff0:	deff      	udf	#255	; 0xff
 8004ff2:	bf00      	nop
 8004ff4:	200135ac 	.word	0x200135ac

08004ff8 <__malloc_lock>:
 8004ff8:	4801      	ldr	r0, [pc, #4]	; (8005000 <__malloc_lock+0x8>)
 8004ffa:	f7ff bf01 	b.w	8004e00 <__retarget_lock_acquire_recursive>
 8004ffe:	bf00      	nop
 8005000:	200135a8 	.word	0x200135a8

08005004 <__malloc_unlock>:
 8005004:	4801      	ldr	r0, [pc, #4]	; (800500c <__malloc_unlock+0x8>)
 8005006:	f7ff befc 	b.w	8004e02 <__retarget_lock_release_recursive>
 800500a:	bf00      	nop
 800500c:	200135a8 	.word	0x200135a8

08005010 <__ssputs_r>:
 8005010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005014:	688e      	ldr	r6, [r1, #8]
 8005016:	461f      	mov	r7, r3
 8005018:	42be      	cmp	r6, r7
 800501a:	680b      	ldr	r3, [r1, #0]
 800501c:	4682      	mov	sl, r0
 800501e:	460c      	mov	r4, r1
 8005020:	4690      	mov	r8, r2
 8005022:	d82c      	bhi.n	800507e <__ssputs_r+0x6e>
 8005024:	898a      	ldrh	r2, [r1, #12]
 8005026:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800502a:	d026      	beq.n	800507a <__ssputs_r+0x6a>
 800502c:	6965      	ldr	r5, [r4, #20]
 800502e:	6909      	ldr	r1, [r1, #16]
 8005030:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005034:	eba3 0901 	sub.w	r9, r3, r1
 8005038:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800503c:	1c7b      	adds	r3, r7, #1
 800503e:	444b      	add	r3, r9
 8005040:	106d      	asrs	r5, r5, #1
 8005042:	429d      	cmp	r5, r3
 8005044:	bf38      	it	cc
 8005046:	461d      	movcc	r5, r3
 8005048:	0553      	lsls	r3, r2, #21
 800504a:	d527      	bpl.n	800509c <__ssputs_r+0x8c>
 800504c:	4629      	mov	r1, r5
 800504e:	f7ff ff53 	bl	8004ef8 <_malloc_r>
 8005052:	4606      	mov	r6, r0
 8005054:	b360      	cbz	r0, 80050b0 <__ssputs_r+0xa0>
 8005056:	6921      	ldr	r1, [r4, #16]
 8005058:	464a      	mov	r2, r9
 800505a:	f7ff fed3 	bl	8004e04 <memcpy>
 800505e:	89a3      	ldrh	r3, [r4, #12]
 8005060:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005068:	81a3      	strh	r3, [r4, #12]
 800506a:	6126      	str	r6, [r4, #16]
 800506c:	6165      	str	r5, [r4, #20]
 800506e:	444e      	add	r6, r9
 8005070:	eba5 0509 	sub.w	r5, r5, r9
 8005074:	6026      	str	r6, [r4, #0]
 8005076:	60a5      	str	r5, [r4, #8]
 8005078:	463e      	mov	r6, r7
 800507a:	42be      	cmp	r6, r7
 800507c:	d900      	bls.n	8005080 <__ssputs_r+0x70>
 800507e:	463e      	mov	r6, r7
 8005080:	6820      	ldr	r0, [r4, #0]
 8005082:	4632      	mov	r2, r6
 8005084:	4641      	mov	r1, r8
 8005086:	f000 faab 	bl	80055e0 <memmove>
 800508a:	68a3      	ldr	r3, [r4, #8]
 800508c:	1b9b      	subs	r3, r3, r6
 800508e:	60a3      	str	r3, [r4, #8]
 8005090:	6823      	ldr	r3, [r4, #0]
 8005092:	4433      	add	r3, r6
 8005094:	6023      	str	r3, [r4, #0]
 8005096:	2000      	movs	r0, #0
 8005098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800509c:	462a      	mov	r2, r5
 800509e:	f000 fac9 	bl	8005634 <_realloc_r>
 80050a2:	4606      	mov	r6, r0
 80050a4:	2800      	cmp	r0, #0
 80050a6:	d1e0      	bne.n	800506a <__ssputs_r+0x5a>
 80050a8:	6921      	ldr	r1, [r4, #16]
 80050aa:	4650      	mov	r0, sl
 80050ac:	f7ff feb8 	bl	8004e20 <_free_r>
 80050b0:	230c      	movs	r3, #12
 80050b2:	f8ca 3000 	str.w	r3, [sl]
 80050b6:	89a3      	ldrh	r3, [r4, #12]
 80050b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050bc:	81a3      	strh	r3, [r4, #12]
 80050be:	f04f 30ff 	mov.w	r0, #4294967295
 80050c2:	e7e9      	b.n	8005098 <__ssputs_r+0x88>

080050c4 <_svfiprintf_r>:
 80050c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050c8:	4698      	mov	r8, r3
 80050ca:	898b      	ldrh	r3, [r1, #12]
 80050cc:	061b      	lsls	r3, r3, #24
 80050ce:	b09d      	sub	sp, #116	; 0x74
 80050d0:	4607      	mov	r7, r0
 80050d2:	460d      	mov	r5, r1
 80050d4:	4614      	mov	r4, r2
 80050d6:	d50e      	bpl.n	80050f6 <_svfiprintf_r+0x32>
 80050d8:	690b      	ldr	r3, [r1, #16]
 80050da:	b963      	cbnz	r3, 80050f6 <_svfiprintf_r+0x32>
 80050dc:	2140      	movs	r1, #64	; 0x40
 80050de:	f7ff ff0b 	bl	8004ef8 <_malloc_r>
 80050e2:	6028      	str	r0, [r5, #0]
 80050e4:	6128      	str	r0, [r5, #16]
 80050e6:	b920      	cbnz	r0, 80050f2 <_svfiprintf_r+0x2e>
 80050e8:	230c      	movs	r3, #12
 80050ea:	603b      	str	r3, [r7, #0]
 80050ec:	f04f 30ff 	mov.w	r0, #4294967295
 80050f0:	e0d0      	b.n	8005294 <_svfiprintf_r+0x1d0>
 80050f2:	2340      	movs	r3, #64	; 0x40
 80050f4:	616b      	str	r3, [r5, #20]
 80050f6:	2300      	movs	r3, #0
 80050f8:	9309      	str	r3, [sp, #36]	; 0x24
 80050fa:	2320      	movs	r3, #32
 80050fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005100:	f8cd 800c 	str.w	r8, [sp, #12]
 8005104:	2330      	movs	r3, #48	; 0x30
 8005106:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80052ac <_svfiprintf_r+0x1e8>
 800510a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800510e:	f04f 0901 	mov.w	r9, #1
 8005112:	4623      	mov	r3, r4
 8005114:	469a      	mov	sl, r3
 8005116:	f813 2b01 	ldrb.w	r2, [r3], #1
 800511a:	b10a      	cbz	r2, 8005120 <_svfiprintf_r+0x5c>
 800511c:	2a25      	cmp	r2, #37	; 0x25
 800511e:	d1f9      	bne.n	8005114 <_svfiprintf_r+0x50>
 8005120:	ebba 0b04 	subs.w	fp, sl, r4
 8005124:	d00b      	beq.n	800513e <_svfiprintf_r+0x7a>
 8005126:	465b      	mov	r3, fp
 8005128:	4622      	mov	r2, r4
 800512a:	4629      	mov	r1, r5
 800512c:	4638      	mov	r0, r7
 800512e:	f7ff ff6f 	bl	8005010 <__ssputs_r>
 8005132:	3001      	adds	r0, #1
 8005134:	f000 80a9 	beq.w	800528a <_svfiprintf_r+0x1c6>
 8005138:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800513a:	445a      	add	r2, fp
 800513c:	9209      	str	r2, [sp, #36]	; 0x24
 800513e:	f89a 3000 	ldrb.w	r3, [sl]
 8005142:	2b00      	cmp	r3, #0
 8005144:	f000 80a1 	beq.w	800528a <_svfiprintf_r+0x1c6>
 8005148:	2300      	movs	r3, #0
 800514a:	f04f 32ff 	mov.w	r2, #4294967295
 800514e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005152:	f10a 0a01 	add.w	sl, sl, #1
 8005156:	9304      	str	r3, [sp, #16]
 8005158:	9307      	str	r3, [sp, #28]
 800515a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800515e:	931a      	str	r3, [sp, #104]	; 0x68
 8005160:	4654      	mov	r4, sl
 8005162:	2205      	movs	r2, #5
 8005164:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005168:	4850      	ldr	r0, [pc, #320]	; (80052ac <_svfiprintf_r+0x1e8>)
 800516a:	f7fb f8a9 	bl	80002c0 <memchr>
 800516e:	9a04      	ldr	r2, [sp, #16]
 8005170:	b9d8      	cbnz	r0, 80051aa <_svfiprintf_r+0xe6>
 8005172:	06d0      	lsls	r0, r2, #27
 8005174:	bf44      	itt	mi
 8005176:	2320      	movmi	r3, #32
 8005178:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800517c:	0711      	lsls	r1, r2, #28
 800517e:	bf44      	itt	mi
 8005180:	232b      	movmi	r3, #43	; 0x2b
 8005182:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005186:	f89a 3000 	ldrb.w	r3, [sl]
 800518a:	2b2a      	cmp	r3, #42	; 0x2a
 800518c:	d015      	beq.n	80051ba <_svfiprintf_r+0xf6>
 800518e:	9a07      	ldr	r2, [sp, #28]
 8005190:	4654      	mov	r4, sl
 8005192:	2000      	movs	r0, #0
 8005194:	f04f 0c0a 	mov.w	ip, #10
 8005198:	4621      	mov	r1, r4
 800519a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800519e:	3b30      	subs	r3, #48	; 0x30
 80051a0:	2b09      	cmp	r3, #9
 80051a2:	d94d      	bls.n	8005240 <_svfiprintf_r+0x17c>
 80051a4:	b1b0      	cbz	r0, 80051d4 <_svfiprintf_r+0x110>
 80051a6:	9207      	str	r2, [sp, #28]
 80051a8:	e014      	b.n	80051d4 <_svfiprintf_r+0x110>
 80051aa:	eba0 0308 	sub.w	r3, r0, r8
 80051ae:	fa09 f303 	lsl.w	r3, r9, r3
 80051b2:	4313      	orrs	r3, r2
 80051b4:	9304      	str	r3, [sp, #16]
 80051b6:	46a2      	mov	sl, r4
 80051b8:	e7d2      	b.n	8005160 <_svfiprintf_r+0x9c>
 80051ba:	9b03      	ldr	r3, [sp, #12]
 80051bc:	1d19      	adds	r1, r3, #4
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	9103      	str	r1, [sp, #12]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	bfbb      	ittet	lt
 80051c6:	425b      	neglt	r3, r3
 80051c8:	f042 0202 	orrlt.w	r2, r2, #2
 80051cc:	9307      	strge	r3, [sp, #28]
 80051ce:	9307      	strlt	r3, [sp, #28]
 80051d0:	bfb8      	it	lt
 80051d2:	9204      	strlt	r2, [sp, #16]
 80051d4:	7823      	ldrb	r3, [r4, #0]
 80051d6:	2b2e      	cmp	r3, #46	; 0x2e
 80051d8:	d10c      	bne.n	80051f4 <_svfiprintf_r+0x130>
 80051da:	7863      	ldrb	r3, [r4, #1]
 80051dc:	2b2a      	cmp	r3, #42	; 0x2a
 80051de:	d134      	bne.n	800524a <_svfiprintf_r+0x186>
 80051e0:	9b03      	ldr	r3, [sp, #12]
 80051e2:	1d1a      	adds	r2, r3, #4
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	9203      	str	r2, [sp, #12]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	bfb8      	it	lt
 80051ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80051f0:	3402      	adds	r4, #2
 80051f2:	9305      	str	r3, [sp, #20]
 80051f4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80052bc <_svfiprintf_r+0x1f8>
 80051f8:	7821      	ldrb	r1, [r4, #0]
 80051fa:	2203      	movs	r2, #3
 80051fc:	4650      	mov	r0, sl
 80051fe:	f7fb f85f 	bl	80002c0 <memchr>
 8005202:	b138      	cbz	r0, 8005214 <_svfiprintf_r+0x150>
 8005204:	9b04      	ldr	r3, [sp, #16]
 8005206:	eba0 000a 	sub.w	r0, r0, sl
 800520a:	2240      	movs	r2, #64	; 0x40
 800520c:	4082      	lsls	r2, r0
 800520e:	4313      	orrs	r3, r2
 8005210:	3401      	adds	r4, #1
 8005212:	9304      	str	r3, [sp, #16]
 8005214:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005218:	4825      	ldr	r0, [pc, #148]	; (80052b0 <_svfiprintf_r+0x1ec>)
 800521a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800521e:	2206      	movs	r2, #6
 8005220:	f7fb f84e 	bl	80002c0 <memchr>
 8005224:	2800      	cmp	r0, #0
 8005226:	d038      	beq.n	800529a <_svfiprintf_r+0x1d6>
 8005228:	4b22      	ldr	r3, [pc, #136]	; (80052b4 <_svfiprintf_r+0x1f0>)
 800522a:	bb1b      	cbnz	r3, 8005274 <_svfiprintf_r+0x1b0>
 800522c:	9b03      	ldr	r3, [sp, #12]
 800522e:	3307      	adds	r3, #7
 8005230:	f023 0307 	bic.w	r3, r3, #7
 8005234:	3308      	adds	r3, #8
 8005236:	9303      	str	r3, [sp, #12]
 8005238:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800523a:	4433      	add	r3, r6
 800523c:	9309      	str	r3, [sp, #36]	; 0x24
 800523e:	e768      	b.n	8005112 <_svfiprintf_r+0x4e>
 8005240:	fb0c 3202 	mla	r2, ip, r2, r3
 8005244:	460c      	mov	r4, r1
 8005246:	2001      	movs	r0, #1
 8005248:	e7a6      	b.n	8005198 <_svfiprintf_r+0xd4>
 800524a:	2300      	movs	r3, #0
 800524c:	3401      	adds	r4, #1
 800524e:	9305      	str	r3, [sp, #20]
 8005250:	4619      	mov	r1, r3
 8005252:	f04f 0c0a 	mov.w	ip, #10
 8005256:	4620      	mov	r0, r4
 8005258:	f810 2b01 	ldrb.w	r2, [r0], #1
 800525c:	3a30      	subs	r2, #48	; 0x30
 800525e:	2a09      	cmp	r2, #9
 8005260:	d903      	bls.n	800526a <_svfiprintf_r+0x1a6>
 8005262:	2b00      	cmp	r3, #0
 8005264:	d0c6      	beq.n	80051f4 <_svfiprintf_r+0x130>
 8005266:	9105      	str	r1, [sp, #20]
 8005268:	e7c4      	b.n	80051f4 <_svfiprintf_r+0x130>
 800526a:	fb0c 2101 	mla	r1, ip, r1, r2
 800526e:	4604      	mov	r4, r0
 8005270:	2301      	movs	r3, #1
 8005272:	e7f0      	b.n	8005256 <_svfiprintf_r+0x192>
 8005274:	ab03      	add	r3, sp, #12
 8005276:	9300      	str	r3, [sp, #0]
 8005278:	462a      	mov	r2, r5
 800527a:	4b0f      	ldr	r3, [pc, #60]	; (80052b8 <_svfiprintf_r+0x1f4>)
 800527c:	a904      	add	r1, sp, #16
 800527e:	4638      	mov	r0, r7
 8005280:	f3af 8000 	nop.w
 8005284:	1c42      	adds	r2, r0, #1
 8005286:	4606      	mov	r6, r0
 8005288:	d1d6      	bne.n	8005238 <_svfiprintf_r+0x174>
 800528a:	89ab      	ldrh	r3, [r5, #12]
 800528c:	065b      	lsls	r3, r3, #25
 800528e:	f53f af2d 	bmi.w	80050ec <_svfiprintf_r+0x28>
 8005292:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005294:	b01d      	add	sp, #116	; 0x74
 8005296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800529a:	ab03      	add	r3, sp, #12
 800529c:	9300      	str	r3, [sp, #0]
 800529e:	462a      	mov	r2, r5
 80052a0:	4b05      	ldr	r3, [pc, #20]	; (80052b8 <_svfiprintf_r+0x1f4>)
 80052a2:	a904      	add	r1, sp, #16
 80052a4:	4638      	mov	r0, r7
 80052a6:	f000 f879 	bl	800539c <_printf_i>
 80052aa:	e7eb      	b.n	8005284 <_svfiprintf_r+0x1c0>
 80052ac:	080057d0 	.word	0x080057d0
 80052b0:	080057da 	.word	0x080057da
 80052b4:	00000000 	.word	0x00000000
 80052b8:	08005011 	.word	0x08005011
 80052bc:	080057d6 	.word	0x080057d6

080052c0 <_printf_common>:
 80052c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052c4:	4616      	mov	r6, r2
 80052c6:	4699      	mov	r9, r3
 80052c8:	688a      	ldr	r2, [r1, #8]
 80052ca:	690b      	ldr	r3, [r1, #16]
 80052cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80052d0:	4293      	cmp	r3, r2
 80052d2:	bfb8      	it	lt
 80052d4:	4613      	movlt	r3, r2
 80052d6:	6033      	str	r3, [r6, #0]
 80052d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80052dc:	4607      	mov	r7, r0
 80052de:	460c      	mov	r4, r1
 80052e0:	b10a      	cbz	r2, 80052e6 <_printf_common+0x26>
 80052e2:	3301      	adds	r3, #1
 80052e4:	6033      	str	r3, [r6, #0]
 80052e6:	6823      	ldr	r3, [r4, #0]
 80052e8:	0699      	lsls	r1, r3, #26
 80052ea:	bf42      	ittt	mi
 80052ec:	6833      	ldrmi	r3, [r6, #0]
 80052ee:	3302      	addmi	r3, #2
 80052f0:	6033      	strmi	r3, [r6, #0]
 80052f2:	6825      	ldr	r5, [r4, #0]
 80052f4:	f015 0506 	ands.w	r5, r5, #6
 80052f8:	d106      	bne.n	8005308 <_printf_common+0x48>
 80052fa:	f104 0a19 	add.w	sl, r4, #25
 80052fe:	68e3      	ldr	r3, [r4, #12]
 8005300:	6832      	ldr	r2, [r6, #0]
 8005302:	1a9b      	subs	r3, r3, r2
 8005304:	42ab      	cmp	r3, r5
 8005306:	dc26      	bgt.n	8005356 <_printf_common+0x96>
 8005308:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800530c:	1e13      	subs	r3, r2, #0
 800530e:	6822      	ldr	r2, [r4, #0]
 8005310:	bf18      	it	ne
 8005312:	2301      	movne	r3, #1
 8005314:	0692      	lsls	r2, r2, #26
 8005316:	d42b      	bmi.n	8005370 <_printf_common+0xb0>
 8005318:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800531c:	4649      	mov	r1, r9
 800531e:	4638      	mov	r0, r7
 8005320:	47c0      	blx	r8
 8005322:	3001      	adds	r0, #1
 8005324:	d01e      	beq.n	8005364 <_printf_common+0xa4>
 8005326:	6823      	ldr	r3, [r4, #0]
 8005328:	6922      	ldr	r2, [r4, #16]
 800532a:	f003 0306 	and.w	r3, r3, #6
 800532e:	2b04      	cmp	r3, #4
 8005330:	bf02      	ittt	eq
 8005332:	68e5      	ldreq	r5, [r4, #12]
 8005334:	6833      	ldreq	r3, [r6, #0]
 8005336:	1aed      	subeq	r5, r5, r3
 8005338:	68a3      	ldr	r3, [r4, #8]
 800533a:	bf0c      	ite	eq
 800533c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005340:	2500      	movne	r5, #0
 8005342:	4293      	cmp	r3, r2
 8005344:	bfc4      	itt	gt
 8005346:	1a9b      	subgt	r3, r3, r2
 8005348:	18ed      	addgt	r5, r5, r3
 800534a:	2600      	movs	r6, #0
 800534c:	341a      	adds	r4, #26
 800534e:	42b5      	cmp	r5, r6
 8005350:	d11a      	bne.n	8005388 <_printf_common+0xc8>
 8005352:	2000      	movs	r0, #0
 8005354:	e008      	b.n	8005368 <_printf_common+0xa8>
 8005356:	2301      	movs	r3, #1
 8005358:	4652      	mov	r2, sl
 800535a:	4649      	mov	r1, r9
 800535c:	4638      	mov	r0, r7
 800535e:	47c0      	blx	r8
 8005360:	3001      	adds	r0, #1
 8005362:	d103      	bne.n	800536c <_printf_common+0xac>
 8005364:	f04f 30ff 	mov.w	r0, #4294967295
 8005368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800536c:	3501      	adds	r5, #1
 800536e:	e7c6      	b.n	80052fe <_printf_common+0x3e>
 8005370:	18e1      	adds	r1, r4, r3
 8005372:	1c5a      	adds	r2, r3, #1
 8005374:	2030      	movs	r0, #48	; 0x30
 8005376:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800537a:	4422      	add	r2, r4
 800537c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005380:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005384:	3302      	adds	r3, #2
 8005386:	e7c7      	b.n	8005318 <_printf_common+0x58>
 8005388:	2301      	movs	r3, #1
 800538a:	4622      	mov	r2, r4
 800538c:	4649      	mov	r1, r9
 800538e:	4638      	mov	r0, r7
 8005390:	47c0      	blx	r8
 8005392:	3001      	adds	r0, #1
 8005394:	d0e6      	beq.n	8005364 <_printf_common+0xa4>
 8005396:	3601      	adds	r6, #1
 8005398:	e7d9      	b.n	800534e <_printf_common+0x8e>
	...

0800539c <_printf_i>:
 800539c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053a0:	7e0f      	ldrb	r7, [r1, #24]
 80053a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80053a4:	2f78      	cmp	r7, #120	; 0x78
 80053a6:	4691      	mov	r9, r2
 80053a8:	4680      	mov	r8, r0
 80053aa:	460c      	mov	r4, r1
 80053ac:	469a      	mov	sl, r3
 80053ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80053b2:	d807      	bhi.n	80053c4 <_printf_i+0x28>
 80053b4:	2f62      	cmp	r7, #98	; 0x62
 80053b6:	d80a      	bhi.n	80053ce <_printf_i+0x32>
 80053b8:	2f00      	cmp	r7, #0
 80053ba:	f000 80d4 	beq.w	8005566 <_printf_i+0x1ca>
 80053be:	2f58      	cmp	r7, #88	; 0x58
 80053c0:	f000 80c0 	beq.w	8005544 <_printf_i+0x1a8>
 80053c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80053cc:	e03a      	b.n	8005444 <_printf_i+0xa8>
 80053ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80053d2:	2b15      	cmp	r3, #21
 80053d4:	d8f6      	bhi.n	80053c4 <_printf_i+0x28>
 80053d6:	a101      	add	r1, pc, #4	; (adr r1, 80053dc <_printf_i+0x40>)
 80053d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80053dc:	08005435 	.word	0x08005435
 80053e0:	08005449 	.word	0x08005449
 80053e4:	080053c5 	.word	0x080053c5
 80053e8:	080053c5 	.word	0x080053c5
 80053ec:	080053c5 	.word	0x080053c5
 80053f0:	080053c5 	.word	0x080053c5
 80053f4:	08005449 	.word	0x08005449
 80053f8:	080053c5 	.word	0x080053c5
 80053fc:	080053c5 	.word	0x080053c5
 8005400:	080053c5 	.word	0x080053c5
 8005404:	080053c5 	.word	0x080053c5
 8005408:	0800554d 	.word	0x0800554d
 800540c:	08005475 	.word	0x08005475
 8005410:	08005507 	.word	0x08005507
 8005414:	080053c5 	.word	0x080053c5
 8005418:	080053c5 	.word	0x080053c5
 800541c:	0800556f 	.word	0x0800556f
 8005420:	080053c5 	.word	0x080053c5
 8005424:	08005475 	.word	0x08005475
 8005428:	080053c5 	.word	0x080053c5
 800542c:	080053c5 	.word	0x080053c5
 8005430:	0800550f 	.word	0x0800550f
 8005434:	682b      	ldr	r3, [r5, #0]
 8005436:	1d1a      	adds	r2, r3, #4
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	602a      	str	r2, [r5, #0]
 800543c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005440:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005444:	2301      	movs	r3, #1
 8005446:	e09f      	b.n	8005588 <_printf_i+0x1ec>
 8005448:	6820      	ldr	r0, [r4, #0]
 800544a:	682b      	ldr	r3, [r5, #0]
 800544c:	0607      	lsls	r7, r0, #24
 800544e:	f103 0104 	add.w	r1, r3, #4
 8005452:	6029      	str	r1, [r5, #0]
 8005454:	d501      	bpl.n	800545a <_printf_i+0xbe>
 8005456:	681e      	ldr	r6, [r3, #0]
 8005458:	e003      	b.n	8005462 <_printf_i+0xc6>
 800545a:	0646      	lsls	r6, r0, #25
 800545c:	d5fb      	bpl.n	8005456 <_printf_i+0xba>
 800545e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005462:	2e00      	cmp	r6, #0
 8005464:	da03      	bge.n	800546e <_printf_i+0xd2>
 8005466:	232d      	movs	r3, #45	; 0x2d
 8005468:	4276      	negs	r6, r6
 800546a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800546e:	485a      	ldr	r0, [pc, #360]	; (80055d8 <_printf_i+0x23c>)
 8005470:	230a      	movs	r3, #10
 8005472:	e012      	b.n	800549a <_printf_i+0xfe>
 8005474:	682b      	ldr	r3, [r5, #0]
 8005476:	6820      	ldr	r0, [r4, #0]
 8005478:	1d19      	adds	r1, r3, #4
 800547a:	6029      	str	r1, [r5, #0]
 800547c:	0605      	lsls	r5, r0, #24
 800547e:	d501      	bpl.n	8005484 <_printf_i+0xe8>
 8005480:	681e      	ldr	r6, [r3, #0]
 8005482:	e002      	b.n	800548a <_printf_i+0xee>
 8005484:	0641      	lsls	r1, r0, #25
 8005486:	d5fb      	bpl.n	8005480 <_printf_i+0xe4>
 8005488:	881e      	ldrh	r6, [r3, #0]
 800548a:	4853      	ldr	r0, [pc, #332]	; (80055d8 <_printf_i+0x23c>)
 800548c:	2f6f      	cmp	r7, #111	; 0x6f
 800548e:	bf0c      	ite	eq
 8005490:	2308      	moveq	r3, #8
 8005492:	230a      	movne	r3, #10
 8005494:	2100      	movs	r1, #0
 8005496:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800549a:	6865      	ldr	r5, [r4, #4]
 800549c:	60a5      	str	r5, [r4, #8]
 800549e:	2d00      	cmp	r5, #0
 80054a0:	bfa2      	ittt	ge
 80054a2:	6821      	ldrge	r1, [r4, #0]
 80054a4:	f021 0104 	bicge.w	r1, r1, #4
 80054a8:	6021      	strge	r1, [r4, #0]
 80054aa:	b90e      	cbnz	r6, 80054b0 <_printf_i+0x114>
 80054ac:	2d00      	cmp	r5, #0
 80054ae:	d04b      	beq.n	8005548 <_printf_i+0x1ac>
 80054b0:	4615      	mov	r5, r2
 80054b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80054b6:	fb03 6711 	mls	r7, r3, r1, r6
 80054ba:	5dc7      	ldrb	r7, [r0, r7]
 80054bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80054c0:	4637      	mov	r7, r6
 80054c2:	42bb      	cmp	r3, r7
 80054c4:	460e      	mov	r6, r1
 80054c6:	d9f4      	bls.n	80054b2 <_printf_i+0x116>
 80054c8:	2b08      	cmp	r3, #8
 80054ca:	d10b      	bne.n	80054e4 <_printf_i+0x148>
 80054cc:	6823      	ldr	r3, [r4, #0]
 80054ce:	07de      	lsls	r6, r3, #31
 80054d0:	d508      	bpl.n	80054e4 <_printf_i+0x148>
 80054d2:	6923      	ldr	r3, [r4, #16]
 80054d4:	6861      	ldr	r1, [r4, #4]
 80054d6:	4299      	cmp	r1, r3
 80054d8:	bfde      	ittt	le
 80054da:	2330      	movle	r3, #48	; 0x30
 80054dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80054e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80054e4:	1b52      	subs	r2, r2, r5
 80054e6:	6122      	str	r2, [r4, #16]
 80054e8:	f8cd a000 	str.w	sl, [sp]
 80054ec:	464b      	mov	r3, r9
 80054ee:	aa03      	add	r2, sp, #12
 80054f0:	4621      	mov	r1, r4
 80054f2:	4640      	mov	r0, r8
 80054f4:	f7ff fee4 	bl	80052c0 <_printf_common>
 80054f8:	3001      	adds	r0, #1
 80054fa:	d14a      	bne.n	8005592 <_printf_i+0x1f6>
 80054fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005500:	b004      	add	sp, #16
 8005502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005506:	6823      	ldr	r3, [r4, #0]
 8005508:	f043 0320 	orr.w	r3, r3, #32
 800550c:	6023      	str	r3, [r4, #0]
 800550e:	4833      	ldr	r0, [pc, #204]	; (80055dc <_printf_i+0x240>)
 8005510:	2778      	movs	r7, #120	; 0x78
 8005512:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005516:	6823      	ldr	r3, [r4, #0]
 8005518:	6829      	ldr	r1, [r5, #0]
 800551a:	061f      	lsls	r7, r3, #24
 800551c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005520:	d402      	bmi.n	8005528 <_printf_i+0x18c>
 8005522:	065f      	lsls	r7, r3, #25
 8005524:	bf48      	it	mi
 8005526:	b2b6      	uxthmi	r6, r6
 8005528:	07df      	lsls	r7, r3, #31
 800552a:	bf48      	it	mi
 800552c:	f043 0320 	orrmi.w	r3, r3, #32
 8005530:	6029      	str	r1, [r5, #0]
 8005532:	bf48      	it	mi
 8005534:	6023      	strmi	r3, [r4, #0]
 8005536:	b91e      	cbnz	r6, 8005540 <_printf_i+0x1a4>
 8005538:	6823      	ldr	r3, [r4, #0]
 800553a:	f023 0320 	bic.w	r3, r3, #32
 800553e:	6023      	str	r3, [r4, #0]
 8005540:	2310      	movs	r3, #16
 8005542:	e7a7      	b.n	8005494 <_printf_i+0xf8>
 8005544:	4824      	ldr	r0, [pc, #144]	; (80055d8 <_printf_i+0x23c>)
 8005546:	e7e4      	b.n	8005512 <_printf_i+0x176>
 8005548:	4615      	mov	r5, r2
 800554a:	e7bd      	b.n	80054c8 <_printf_i+0x12c>
 800554c:	682b      	ldr	r3, [r5, #0]
 800554e:	6826      	ldr	r6, [r4, #0]
 8005550:	6961      	ldr	r1, [r4, #20]
 8005552:	1d18      	adds	r0, r3, #4
 8005554:	6028      	str	r0, [r5, #0]
 8005556:	0635      	lsls	r5, r6, #24
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	d501      	bpl.n	8005560 <_printf_i+0x1c4>
 800555c:	6019      	str	r1, [r3, #0]
 800555e:	e002      	b.n	8005566 <_printf_i+0x1ca>
 8005560:	0670      	lsls	r0, r6, #25
 8005562:	d5fb      	bpl.n	800555c <_printf_i+0x1c0>
 8005564:	8019      	strh	r1, [r3, #0]
 8005566:	2300      	movs	r3, #0
 8005568:	6123      	str	r3, [r4, #16]
 800556a:	4615      	mov	r5, r2
 800556c:	e7bc      	b.n	80054e8 <_printf_i+0x14c>
 800556e:	682b      	ldr	r3, [r5, #0]
 8005570:	1d1a      	adds	r2, r3, #4
 8005572:	602a      	str	r2, [r5, #0]
 8005574:	681d      	ldr	r5, [r3, #0]
 8005576:	6862      	ldr	r2, [r4, #4]
 8005578:	2100      	movs	r1, #0
 800557a:	4628      	mov	r0, r5
 800557c:	f7fa fea0 	bl	80002c0 <memchr>
 8005580:	b108      	cbz	r0, 8005586 <_printf_i+0x1ea>
 8005582:	1b40      	subs	r0, r0, r5
 8005584:	6060      	str	r0, [r4, #4]
 8005586:	6863      	ldr	r3, [r4, #4]
 8005588:	6123      	str	r3, [r4, #16]
 800558a:	2300      	movs	r3, #0
 800558c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005590:	e7aa      	b.n	80054e8 <_printf_i+0x14c>
 8005592:	6923      	ldr	r3, [r4, #16]
 8005594:	462a      	mov	r2, r5
 8005596:	4649      	mov	r1, r9
 8005598:	4640      	mov	r0, r8
 800559a:	47d0      	blx	sl
 800559c:	3001      	adds	r0, #1
 800559e:	d0ad      	beq.n	80054fc <_printf_i+0x160>
 80055a0:	6823      	ldr	r3, [r4, #0]
 80055a2:	079b      	lsls	r3, r3, #30
 80055a4:	d413      	bmi.n	80055ce <_printf_i+0x232>
 80055a6:	68e0      	ldr	r0, [r4, #12]
 80055a8:	9b03      	ldr	r3, [sp, #12]
 80055aa:	4298      	cmp	r0, r3
 80055ac:	bfb8      	it	lt
 80055ae:	4618      	movlt	r0, r3
 80055b0:	e7a6      	b.n	8005500 <_printf_i+0x164>
 80055b2:	2301      	movs	r3, #1
 80055b4:	4632      	mov	r2, r6
 80055b6:	4649      	mov	r1, r9
 80055b8:	4640      	mov	r0, r8
 80055ba:	47d0      	blx	sl
 80055bc:	3001      	adds	r0, #1
 80055be:	d09d      	beq.n	80054fc <_printf_i+0x160>
 80055c0:	3501      	adds	r5, #1
 80055c2:	68e3      	ldr	r3, [r4, #12]
 80055c4:	9903      	ldr	r1, [sp, #12]
 80055c6:	1a5b      	subs	r3, r3, r1
 80055c8:	42ab      	cmp	r3, r5
 80055ca:	dcf2      	bgt.n	80055b2 <_printf_i+0x216>
 80055cc:	e7eb      	b.n	80055a6 <_printf_i+0x20a>
 80055ce:	2500      	movs	r5, #0
 80055d0:	f104 0619 	add.w	r6, r4, #25
 80055d4:	e7f5      	b.n	80055c2 <_printf_i+0x226>
 80055d6:	bf00      	nop
 80055d8:	080057e1 	.word	0x080057e1
 80055dc:	080057f2 	.word	0x080057f2

080055e0 <memmove>:
 80055e0:	4288      	cmp	r0, r1
 80055e2:	b510      	push	{r4, lr}
 80055e4:	eb01 0402 	add.w	r4, r1, r2
 80055e8:	d902      	bls.n	80055f0 <memmove+0x10>
 80055ea:	4284      	cmp	r4, r0
 80055ec:	4623      	mov	r3, r4
 80055ee:	d807      	bhi.n	8005600 <memmove+0x20>
 80055f0:	1e43      	subs	r3, r0, #1
 80055f2:	42a1      	cmp	r1, r4
 80055f4:	d008      	beq.n	8005608 <memmove+0x28>
 80055f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80055fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80055fe:	e7f8      	b.n	80055f2 <memmove+0x12>
 8005600:	4402      	add	r2, r0
 8005602:	4601      	mov	r1, r0
 8005604:	428a      	cmp	r2, r1
 8005606:	d100      	bne.n	800560a <memmove+0x2a>
 8005608:	bd10      	pop	{r4, pc}
 800560a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800560e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005612:	e7f7      	b.n	8005604 <memmove+0x24>

08005614 <_sbrk_r>:
 8005614:	b538      	push	{r3, r4, r5, lr}
 8005616:	4d06      	ldr	r5, [pc, #24]	; (8005630 <_sbrk_r+0x1c>)
 8005618:	2300      	movs	r3, #0
 800561a:	4604      	mov	r4, r0
 800561c:	4608      	mov	r0, r1
 800561e:	602b      	str	r3, [r5, #0]
 8005620:	f000 f840 	bl	80056a4 <_sbrk>
 8005624:	1c43      	adds	r3, r0, #1
 8005626:	d102      	bne.n	800562e <_sbrk_r+0x1a>
 8005628:	682b      	ldr	r3, [r5, #0]
 800562a:	b103      	cbz	r3, 800562e <_sbrk_r+0x1a>
 800562c:	6023      	str	r3, [r4, #0]
 800562e:	bd38      	pop	{r3, r4, r5, pc}
 8005630:	200135a4 	.word	0x200135a4

08005634 <_realloc_r>:
 8005634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005638:	4680      	mov	r8, r0
 800563a:	4614      	mov	r4, r2
 800563c:	460e      	mov	r6, r1
 800563e:	b921      	cbnz	r1, 800564a <_realloc_r+0x16>
 8005640:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005644:	4611      	mov	r1, r2
 8005646:	f7ff bc57 	b.w	8004ef8 <_malloc_r>
 800564a:	b92a      	cbnz	r2, 8005658 <_realloc_r+0x24>
 800564c:	f7ff fbe8 	bl	8004e20 <_free_r>
 8005650:	4625      	mov	r5, r4
 8005652:	4628      	mov	r0, r5
 8005654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005658:	f000 f81b 	bl	8005692 <_malloc_usable_size_r>
 800565c:	4284      	cmp	r4, r0
 800565e:	4607      	mov	r7, r0
 8005660:	d802      	bhi.n	8005668 <_realloc_r+0x34>
 8005662:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005666:	d812      	bhi.n	800568e <_realloc_r+0x5a>
 8005668:	4621      	mov	r1, r4
 800566a:	4640      	mov	r0, r8
 800566c:	f7ff fc44 	bl	8004ef8 <_malloc_r>
 8005670:	4605      	mov	r5, r0
 8005672:	2800      	cmp	r0, #0
 8005674:	d0ed      	beq.n	8005652 <_realloc_r+0x1e>
 8005676:	42bc      	cmp	r4, r7
 8005678:	4622      	mov	r2, r4
 800567a:	4631      	mov	r1, r6
 800567c:	bf28      	it	cs
 800567e:	463a      	movcs	r2, r7
 8005680:	f7ff fbc0 	bl	8004e04 <memcpy>
 8005684:	4631      	mov	r1, r6
 8005686:	4640      	mov	r0, r8
 8005688:	f7ff fbca 	bl	8004e20 <_free_r>
 800568c:	e7e1      	b.n	8005652 <_realloc_r+0x1e>
 800568e:	4635      	mov	r5, r6
 8005690:	e7df      	b.n	8005652 <_realloc_r+0x1e>

08005692 <_malloc_usable_size_r>:
 8005692:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005696:	1f18      	subs	r0, r3, #4
 8005698:	2b00      	cmp	r3, #0
 800569a:	bfbc      	itt	lt
 800569c:	580b      	ldrlt	r3, [r1, r0]
 800569e:	18c0      	addlt	r0, r0, r3
 80056a0:	4770      	bx	lr
	...

080056a4 <_sbrk>:
 80056a4:	4a04      	ldr	r2, [pc, #16]	; (80056b8 <_sbrk+0x14>)
 80056a6:	6811      	ldr	r1, [r2, #0]
 80056a8:	4603      	mov	r3, r0
 80056aa:	b909      	cbnz	r1, 80056b0 <_sbrk+0xc>
 80056ac:	4903      	ldr	r1, [pc, #12]	; (80056bc <_sbrk+0x18>)
 80056ae:	6011      	str	r1, [r2, #0]
 80056b0:	6810      	ldr	r0, [r2, #0]
 80056b2:	4403      	add	r3, r0
 80056b4:	6013      	str	r3, [r2, #0]
 80056b6:	4770      	bx	lr
 80056b8:	200135b4 	.word	0x200135b4
 80056bc:	200135b8 	.word	0x200135b8

080056c0 <_init>:
 80056c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056c2:	bf00      	nop
 80056c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056c6:	bc08      	pop	{r3}
 80056c8:	469e      	mov	lr, r3
 80056ca:	4770      	bx	lr

080056cc <_fini>:
 80056cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ce:	bf00      	nop
 80056d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056d2:	bc08      	pop	{r3}
 80056d4:	469e      	mov	lr, r3
 80056d6:	4770      	bx	lr

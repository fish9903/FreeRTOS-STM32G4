
CreateTask.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059f0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08005bd0  08005bd0  00015bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d60  08005d60  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08005d60  08005d60  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005d60  08005d60  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d60  08005d60  00015d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d64  08005d64  00015d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08005d68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001455c  20000064  08005dcc  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200145c0  08005dcc  000245c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012f5d  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002bff  00000000  00000000  00033034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001340  00000000  00000000  00035c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ecb  00000000  00000000  00036f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027cfe  00000000  00000000  00037e43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015000  00000000  00000000  0005fb41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001022af  00000000  00000000  00074b41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005598  00000000  00000000  00176df0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a2  00000000  00000000  0017c388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000064 	.word	0x20000064
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005bb8 	.word	0x08005bb8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000068 	.word	0x20000068
 800021c:	08005bb8 	.word	0x08005bb8

08000220 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000220:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000222:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000226:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002b0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800022a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800022e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000232:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000234:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000236:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000238:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800023a:	d332      	bcc.n	80002a2 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800023c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800023e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000240:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000242:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000244:	d314      	bcc.n	8000270 <_CheckCase2>

08000246 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000246:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000248:	19d0      	adds	r0, r2, r7
 800024a:	bf00      	nop

0800024c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800024c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000250:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000254:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000256:	d005      	beq.n	8000264 <_CSDone>
        LDRB     R3,[R1], #+1
 8000258:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000260:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000262:	d1f3      	bne.n	800024c <_LoopCopyStraight>

08000264 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000264:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000268:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800026a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800026e:	4770      	bx	lr

08000270 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000270:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000272:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000274:	d319      	bcc.n	80002aa <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000276:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000278:	1b12      	subs	r2, r2, r4

0800027a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800027e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000282:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000286:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000288:	d005      	beq.n	8000296 <_No2ChunkNeeded>

0800028a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800028a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800028e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000292:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000294:	d1f9      	bne.n	800028a <_LoopCopyAfterWrapAround>

08000296 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000296:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800029a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800029c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800029e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80002a0:	4770      	bx	lr

080002a2 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80002a2:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80002a4:	3801      	subs	r0, #1
        CMP      R0,R2
 80002a6:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80002a8:	d2cd      	bcs.n	8000246 <_Case4>

080002aa <_Case3>:
_Case3:
        MOVS     R0,#+0
 80002aa:	2000      	movs	r0, #0
        POP      {R4-R7}
 80002ac:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80002ae:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002b0:	20012ea0 	.word	0x20012ea0
	...

080002c0 <memchr>:
 80002c0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002c4:	2a10      	cmp	r2, #16
 80002c6:	db2b      	blt.n	8000320 <memchr+0x60>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	d008      	beq.n	80002e0 <memchr+0x20>
 80002ce:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d2:	3a01      	subs	r2, #1
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d02d      	beq.n	8000334 <memchr+0x74>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	b342      	cbz	r2, 8000330 <memchr+0x70>
 80002de:	d1f6      	bne.n	80002ce <memchr+0xe>
 80002e0:	b4f0      	push	{r4, r5, r6, r7}
 80002e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ea:	f022 0407 	bic.w	r4, r2, #7
 80002ee:	f07f 0700 	mvns.w	r7, #0
 80002f2:	2300      	movs	r3, #0
 80002f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002f8:	3c08      	subs	r4, #8
 80002fa:	ea85 0501 	eor.w	r5, r5, r1
 80002fe:	ea86 0601 	eor.w	r6, r6, r1
 8000302:	fa85 f547 	uadd8	r5, r5, r7
 8000306:	faa3 f587 	sel	r5, r3, r7
 800030a:	fa86 f647 	uadd8	r6, r6, r7
 800030e:	faa5 f687 	sel	r6, r5, r7
 8000312:	b98e      	cbnz	r6, 8000338 <memchr+0x78>
 8000314:	d1ee      	bne.n	80002f4 <memchr+0x34>
 8000316:	bcf0      	pop	{r4, r5, r6, r7}
 8000318:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800031c:	f002 0207 	and.w	r2, r2, #7
 8000320:	b132      	cbz	r2, 8000330 <memchr+0x70>
 8000322:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000326:	3a01      	subs	r2, #1
 8000328:	ea83 0301 	eor.w	r3, r3, r1
 800032c:	b113      	cbz	r3, 8000334 <memchr+0x74>
 800032e:	d1f8      	bne.n	8000322 <memchr+0x62>
 8000330:	2000      	movs	r0, #0
 8000332:	4770      	bx	lr
 8000334:	3801      	subs	r0, #1
 8000336:	4770      	bx	lr
 8000338:	2d00      	cmp	r5, #0
 800033a:	bf06      	itte	eq
 800033c:	4635      	moveq	r5, r6
 800033e:	3803      	subeq	r0, #3
 8000340:	3807      	subne	r0, #7
 8000342:	f015 0f01 	tst.w	r5, #1
 8000346:	d107      	bne.n	8000358 <memchr+0x98>
 8000348:	3001      	adds	r0, #1
 800034a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800034e:	bf02      	ittt	eq
 8000350:	3001      	addeq	r0, #1
 8000352:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000356:	3001      	addeq	r0, #1
 8000358:	bcf0      	pop	{r4, r5, r6, r7}
 800035a:	3801      	subs	r0, #1
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop

08000360 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b088      	sub	sp, #32
 8000364:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000366:	f000 fa68 	bl	800083a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800036a:	f000 f851 	bl	8000410 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800036e:	f000 f89b 	bl	80004a8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  // Enable the cycle counter
  DWT_CTRL |= ( 1 << 0 );
 8000372:	4b20      	ldr	r3, [pc, #128]	; (80003f4 <main+0x94>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	4a1f      	ldr	r2, [pc, #124]	; (80003f4 <main+0x94>)
 8000378:	f043 0301 	orr.w	r3, r3, #1
 800037c:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 800037e:	f003 f819 	bl	80033b4 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 8000382:	f004 f9d9 	bl	8004738 <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(task1_handler, "Task-1", 200, "Hello, world from Task-1", 2, &task1_handle);
 8000386:	f107 0308 	add.w	r3, r7, #8
 800038a:	9301      	str	r3, [sp, #4]
 800038c:	2302      	movs	r3, #2
 800038e:	9300      	str	r3, [sp, #0]
 8000390:	4b19      	ldr	r3, [pc, #100]	; (80003f8 <main+0x98>)
 8000392:	22c8      	movs	r2, #200	; 0xc8
 8000394:	4919      	ldr	r1, [pc, #100]	; (80003fc <main+0x9c>)
 8000396:	481a      	ldr	r0, [pc, #104]	; (8000400 <main+0xa0>)
 8000398:	f001 ff13 	bl	80021c2 <xTaskCreate>
 800039c:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 800039e:	697b      	ldr	r3, [r7, #20]
 80003a0:	2b01      	cmp	r3, #1
 80003a2:	d00a      	beq.n	80003ba <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80003a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003a8:	f383 8811 	msr	BASEPRI, r3
 80003ac:	f3bf 8f6f 	isb	sy
 80003b0:	f3bf 8f4f 	dsb	sy
 80003b4:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80003b6:	bf00      	nop
 80003b8:	e7fe      	b.n	80003b8 <main+0x58>

  status = xTaskCreate(task2_handler, "Task-2", 200, "Hello, world from Task-2", 2, &task2_handle);
 80003ba:	1d3b      	adds	r3, r7, #4
 80003bc:	9301      	str	r3, [sp, #4]
 80003be:	2302      	movs	r3, #2
 80003c0:	9300      	str	r3, [sp, #0]
 80003c2:	4b10      	ldr	r3, [pc, #64]	; (8000404 <main+0xa4>)
 80003c4:	22c8      	movs	r2, #200	; 0xc8
 80003c6:	4910      	ldr	r1, [pc, #64]	; (8000408 <main+0xa8>)
 80003c8:	4810      	ldr	r0, [pc, #64]	; (800040c <main+0xac>)
 80003ca:	f001 fefa 	bl	80021c2 <xTaskCreate>
 80003ce:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80003d0:	697b      	ldr	r3, [r7, #20]
 80003d2:	2b01      	cmp	r3, #1
 80003d4:	d00a      	beq.n	80003ec <main+0x8c>
        __asm volatile
 80003d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003da:	f383 8811 	msr	BASEPRI, r3
 80003de:	f3bf 8f6f 	isb	sy
 80003e2:	f3bf 8f4f 	dsb	sy
 80003e6:	60fb      	str	r3, [r7, #12]
    }
 80003e8:	bf00      	nop
 80003ea:	e7fe      	b.n	80003ea <main+0x8a>

  // start the freeRTOS scheduler
  vTaskStartScheduler();
 80003ec:	f002 f83e 	bl	800246c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003f0:	e7fe      	b.n	80003f0 <main+0x90>
 80003f2:	bf00      	nop
 80003f4:	e0001000 	.word	0xe0001000
 80003f8:	08005bd0 	.word	0x08005bd0
 80003fc:	08005bec 	.word	0x08005bec
 8000400:	080005a9 	.word	0x080005a9
 8000404:	08005bf4 	.word	0x08005bf4
 8000408:	08005c10 	.word	0x08005c10
 800040c:	080005e5 	.word	0x080005e5

08000410 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b094      	sub	sp, #80	; 0x50
 8000414:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000416:	f107 0318 	add.w	r3, r7, #24
 800041a:	2238      	movs	r2, #56	; 0x38
 800041c:	2100      	movs	r1, #0
 800041e:	4618      	mov	r0, r3
 8000420:	f004 ff3e 	bl	80052a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000424:	1d3b      	adds	r3, r7, #4
 8000426:	2200      	movs	r2, #0
 8000428:	601a      	str	r2, [r3, #0]
 800042a:	605a      	str	r2, [r3, #4]
 800042c:	609a      	str	r2, [r3, #8]
 800042e:	60da      	str	r2, [r3, #12]
 8000430:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000432:	2000      	movs	r0, #0
 8000434:	f000 fcd6 	bl	8000de4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000438:	2302      	movs	r3, #2
 800043a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800043c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000440:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000442:	2340      	movs	r3, #64	; 0x40
 8000444:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000446:	2302      	movs	r3, #2
 8000448:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800044a:	2302      	movs	r3, #2
 800044c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800044e:	2304      	movs	r3, #4
 8000450:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000452:	2355      	movs	r3, #85	; 0x55
 8000454:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000456:	2302      	movs	r3, #2
 8000458:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800045a:	2302      	movs	r3, #2
 800045c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800045e:	2302      	movs	r3, #2
 8000460:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000462:	f107 0318 	add.w	r3, r7, #24
 8000466:	4618      	mov	r0, r3
 8000468:	f000 fd70 	bl	8000f4c <HAL_RCC_OscConfig>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d001      	beq.n	8000476 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000472:	f000 f8e7 	bl	8000644 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000476:	230f      	movs	r3, #15
 8000478:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800047a:	2303      	movs	r3, #3
 800047c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800047e:	2300      	movs	r3, #0
 8000480:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000482:	2300      	movs	r3, #0
 8000484:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000486:	2300      	movs	r3, #0
 8000488:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800048a:	1d3b      	adds	r3, r7, #4
 800048c:	2104      	movs	r1, #4
 800048e:	4618      	mov	r0, r3
 8000490:	f001 f874 	bl	800157c <HAL_RCC_ClockConfig>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800049a:	f000 f8d3 	bl	8000644 <Error_Handler>
  }
}
 800049e:	bf00      	nop
 80004a0:	3750      	adds	r7, #80	; 0x50
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
	...

080004a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b08a      	sub	sp, #40	; 0x28
 80004ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ae:	f107 0314 	add.w	r3, r7, #20
 80004b2:	2200      	movs	r2, #0
 80004b4:	601a      	str	r2, [r3, #0]
 80004b6:	605a      	str	r2, [r3, #4]
 80004b8:	609a      	str	r2, [r3, #8]
 80004ba:	60da      	str	r2, [r3, #12]
 80004bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004be:	4b38      	ldr	r3, [pc, #224]	; (80005a0 <MX_GPIO_Init+0xf8>)
 80004c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004c2:	4a37      	ldr	r2, [pc, #220]	; (80005a0 <MX_GPIO_Init+0xf8>)
 80004c4:	f043 0304 	orr.w	r3, r3, #4
 80004c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ca:	4b35      	ldr	r3, [pc, #212]	; (80005a0 <MX_GPIO_Init+0xf8>)
 80004cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ce:	f003 0304 	and.w	r3, r3, #4
 80004d2:	613b      	str	r3, [r7, #16]
 80004d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004d6:	4b32      	ldr	r3, [pc, #200]	; (80005a0 <MX_GPIO_Init+0xf8>)
 80004d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004da:	4a31      	ldr	r2, [pc, #196]	; (80005a0 <MX_GPIO_Init+0xf8>)
 80004dc:	f043 0320 	orr.w	r3, r3, #32
 80004e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004e2:	4b2f      	ldr	r3, [pc, #188]	; (80005a0 <MX_GPIO_Init+0xf8>)
 80004e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e6:	f003 0320 	and.w	r3, r3, #32
 80004ea:	60fb      	str	r3, [r7, #12]
 80004ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ee:	4b2c      	ldr	r3, [pc, #176]	; (80005a0 <MX_GPIO_Init+0xf8>)
 80004f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f2:	4a2b      	ldr	r2, [pc, #172]	; (80005a0 <MX_GPIO_Init+0xf8>)
 80004f4:	f043 0301 	orr.w	r3, r3, #1
 80004f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004fa:	4b29      	ldr	r3, [pc, #164]	; (80005a0 <MX_GPIO_Init+0xf8>)
 80004fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fe:	f003 0301 	and.w	r3, r3, #1
 8000502:	60bb      	str	r3, [r7, #8]
 8000504:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000506:	4b26      	ldr	r3, [pc, #152]	; (80005a0 <MX_GPIO_Init+0xf8>)
 8000508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050a:	4a25      	ldr	r2, [pc, #148]	; (80005a0 <MX_GPIO_Init+0xf8>)
 800050c:	f043 0302 	orr.w	r3, r3, #2
 8000510:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000512:	4b23      	ldr	r3, [pc, #140]	; (80005a0 <MX_GPIO_Init+0xf8>)
 8000514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000516:	f003 0302 	and.w	r3, r3, #2
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800051e:	2200      	movs	r2, #0
 8000520:	2120      	movs	r1, #32
 8000522:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000526:	f000 fc21 	bl	8000d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800052a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800052e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000530:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000534:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000536:	2300      	movs	r3, #0
 8000538:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800053a:	f107 0314 	add.w	r3, r7, #20
 800053e:	4619      	mov	r1, r3
 8000540:	4818      	ldr	r0, [pc, #96]	; (80005a4 <MX_GPIO_Init+0xfc>)
 8000542:	f000 fa91 	bl	8000a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPUART1_TX_Pin LPUART1_RX_Pin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000546:	230c      	movs	r3, #12
 8000548:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800054a:	2302      	movs	r3, #2
 800054c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054e:	2300      	movs	r3, #0
 8000550:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000552:	2300      	movs	r3, #0
 8000554:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000556:	230c      	movs	r3, #12
 8000558:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800055a:	f107 0314 	add.w	r3, r7, #20
 800055e:	4619      	mov	r1, r3
 8000560:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000564:	f000 fa80 	bl	8000a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000568:	2320      	movs	r3, #32
 800056a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800056c:	2301      	movs	r3, #1
 800056e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000570:	2300      	movs	r3, #0
 8000572:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000574:	2300      	movs	r3, #0
 8000576:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000578:	f107 0314 	add.w	r3, r7, #20
 800057c:	4619      	mov	r1, r3
 800057e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000582:	f000 fa71 	bl	8000a68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000586:	2200      	movs	r2, #0
 8000588:	2100      	movs	r1, #0
 800058a:	2028      	movs	r0, #40	; 0x28
 800058c:	f000 fa44 	bl	8000a18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000590:	2028      	movs	r0, #40	; 0x28
 8000592:	f000 fa5b 	bl	8000a4c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000596:	bf00      	nop
 8000598:	3728      	adds	r7, #40	; 0x28
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	40021000 	.word	0x40021000
 80005a4:	48000800 	.word	0x48000800

080005a8 <task1_handler>:

/* USER CODE BEGIN 4 */

static void task1_handler(void* parameters)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b09c      	sub	sp, #112	; 0x70
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1)
	{
		//printf("%s\n", (char*)parameters);
		snprintf(msg, 100, "%s\n", (char*)parameters);
 80005b0:	f107 000c 	add.w	r0, r7, #12
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	4a09      	ldr	r2, [pc, #36]	; (80005dc <task1_handler+0x34>)
 80005b8:	2164      	movs	r1, #100	; 0x64
 80005ba:	f004 fe2d 	bl	8005218 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 80005be:	f107 030c 	add.w	r3, r7, #12
 80005c2:	4618      	mov	r0, r3
 80005c4:	f004 fdb8 	bl	8005138 <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 80005c8:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <task1_handler+0x38>)
 80005ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	f3bf 8f4f 	dsb	sy
 80005d4:	f3bf 8f6f 	isb	sy
		snprintf(msg, 100, "%s\n", (char*)parameters);
 80005d8:	e7ea      	b.n	80005b0 <task1_handler+0x8>
 80005da:	bf00      	nop
 80005dc:	08005c18 	.word	0x08005c18
 80005e0:	e000ed04 	.word	0xe000ed04

080005e4 <task2_handler>:
	}
}

static void task2_handler(void* parameters)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b09c      	sub	sp, #112	; 0x70
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1)
	{
		//printf("%s\n", (char*)parameters);
		snprintf(msg, 100, "%s\n", (char*)parameters);
 80005ec:	f107 000c 	add.w	r0, r7, #12
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	4a09      	ldr	r2, [pc, #36]	; (8000618 <task2_handler+0x34>)
 80005f4:	2164      	movs	r1, #100	; 0x64
 80005f6:	f004 fe0f 	bl	8005218 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 80005fa:	f107 030c 	add.w	r3, r7, #12
 80005fe:	4618      	mov	r0, r3
 8000600:	f004 fd9a 	bl	8005138 <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 8000604:	4b05      	ldr	r3, [pc, #20]	; (800061c <task2_handler+0x38>)
 8000606:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	f3bf 8f4f 	dsb	sy
 8000610:	f3bf 8f6f 	isb	sy
		snprintf(msg, 100, "%s\n", (char*)parameters);
 8000614:	e7ea      	b.n	80005ec <task2_handler+0x8>
 8000616:	bf00      	nop
 8000618:	08005c18 	.word	0x08005c18
 800061c:	e000ed04 	.word	0xe000ed04

08000620 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a04      	ldr	r2, [pc, #16]	; (8000640 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d101      	bne.n	8000636 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000632:	f000 f91b 	bl	800086c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000636:	bf00      	nop
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40001000 	.word	0x40001000

08000644 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000648:	b672      	cpsid	i
}
 800064a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800064c:	e7fe      	b.n	800064c <Error_Handler+0x8>
	...

08000650 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000656:	4b10      	ldr	r3, [pc, #64]	; (8000698 <HAL_MspInit+0x48>)
 8000658:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800065a:	4a0f      	ldr	r2, [pc, #60]	; (8000698 <HAL_MspInit+0x48>)
 800065c:	f043 0301 	orr.w	r3, r3, #1
 8000660:	6613      	str	r3, [r2, #96]	; 0x60
 8000662:	4b0d      	ldr	r3, [pc, #52]	; (8000698 <HAL_MspInit+0x48>)
 8000664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800066e:	4b0a      	ldr	r3, [pc, #40]	; (8000698 <HAL_MspInit+0x48>)
 8000670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000672:	4a09      	ldr	r2, [pc, #36]	; (8000698 <HAL_MspInit+0x48>)
 8000674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000678:	6593      	str	r3, [r2, #88]	; 0x58
 800067a:	4b07      	ldr	r3, [pc, #28]	; (8000698 <HAL_MspInit+0x48>)
 800067c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800067e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000682:	603b      	str	r3, [r7, #0]
 8000684:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000686:	f000 fc51 	bl	8000f2c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 800068a:	f002 fadd 	bl	8002c48 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 800068e:	bf00      	nop
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40021000 	.word	0x40021000

0800069c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b08c      	sub	sp, #48	; 0x30
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80006a4:	2300      	movs	r3, #0
 80006a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80006ac:	4b2c      	ldr	r3, [pc, #176]	; (8000760 <HAL_InitTick+0xc4>)
 80006ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006b0:	4a2b      	ldr	r2, [pc, #172]	; (8000760 <HAL_InitTick+0xc4>)
 80006b2:	f043 0310 	orr.w	r3, r3, #16
 80006b6:	6593      	str	r3, [r2, #88]	; 0x58
 80006b8:	4b29      	ldr	r3, [pc, #164]	; (8000760 <HAL_InitTick+0xc4>)
 80006ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006bc:	f003 0310 	and.w	r3, r3, #16
 80006c0:	60bb      	str	r3, [r7, #8]
 80006c2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80006c4:	f107 020c 	add.w	r2, r7, #12
 80006c8:	f107 0310 	add.w	r3, r7, #16
 80006cc:	4611      	mov	r1, r2
 80006ce:	4618      	mov	r0, r3
 80006d0:	f001 f914 	bl	80018fc <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80006d4:	f001 f8fc 	bl	80018d0 <HAL_RCC_GetPCLK1Freq>
 80006d8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80006da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006dc:	4a21      	ldr	r2, [pc, #132]	; (8000764 <HAL_InitTick+0xc8>)
 80006de:	fba2 2303 	umull	r2, r3, r2, r3
 80006e2:	0c9b      	lsrs	r3, r3, #18
 80006e4:	3b01      	subs	r3, #1
 80006e6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80006e8:	4b1f      	ldr	r3, [pc, #124]	; (8000768 <HAL_InitTick+0xcc>)
 80006ea:	4a20      	ldr	r2, [pc, #128]	; (800076c <HAL_InitTick+0xd0>)
 80006ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80006ee:	4b1e      	ldr	r3, [pc, #120]	; (8000768 <HAL_InitTick+0xcc>)
 80006f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006f4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80006f6:	4a1c      	ldr	r2, [pc, #112]	; (8000768 <HAL_InitTick+0xcc>)
 80006f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006fa:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80006fc:	4b1a      	ldr	r3, [pc, #104]	; (8000768 <HAL_InitTick+0xcc>)
 80006fe:	2200      	movs	r2, #0
 8000700:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000702:	4b19      	ldr	r3, [pc, #100]	; (8000768 <HAL_InitTick+0xcc>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000708:	4817      	ldr	r0, [pc, #92]	; (8000768 <HAL_InitTick+0xcc>)
 800070a:	f001 f96f 	bl	80019ec <HAL_TIM_Base_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000714:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000718:	2b00      	cmp	r3, #0
 800071a:	d11b      	bne.n	8000754 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800071c:	4812      	ldr	r0, [pc, #72]	; (8000768 <HAL_InitTick+0xcc>)
 800071e:	f001 f9c7 	bl	8001ab0 <HAL_TIM_Base_Start_IT>
 8000722:	4603      	mov	r3, r0
 8000724:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000728:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800072c:	2b00      	cmp	r3, #0
 800072e:	d111      	bne.n	8000754 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000730:	2036      	movs	r0, #54	; 0x36
 8000732:	f000 f98b 	bl	8000a4c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	2b0f      	cmp	r3, #15
 800073a:	d808      	bhi.n	800074e <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800073c:	2200      	movs	r2, #0
 800073e:	6879      	ldr	r1, [r7, #4]
 8000740:	2036      	movs	r0, #54	; 0x36
 8000742:	f000 f969 	bl	8000a18 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000746:	4a0a      	ldr	r2, [pc, #40]	; (8000770 <HAL_InitTick+0xd4>)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	6013      	str	r3, [r2, #0]
 800074c:	e002      	b.n	8000754 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800074e:	2301      	movs	r3, #1
 8000750:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000754:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000758:	4618      	mov	r0, r3
 800075a:	3730      	adds	r7, #48	; 0x30
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40021000 	.word	0x40021000
 8000764:	431bde83 	.word	0x431bde83
 8000768:	20000080 	.word	0x20000080
 800076c:	40001000 	.word	0x40001000
 8000770:	20000004 	.word	0x20000004

08000774 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000778:	e7fe      	b.n	8000778 <NMI_Handler+0x4>

0800077a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800077a:	b480      	push	{r7}
 800077c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800077e:	e7fe      	b.n	800077e <HardFault_Handler+0x4>

08000780 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000784:	e7fe      	b.n	8000784 <MemManage_Handler+0x4>

08000786 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000786:	b480      	push	{r7}
 8000788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800078a:	e7fe      	b.n	800078a <BusFault_Handler+0x4>

0800078c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000790:	e7fe      	b.n	8000790 <UsageFault_Handler+0x4>

08000792 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000792:	b480      	push	{r7}
 8000794:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000796:	bf00      	nop
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr

080007a0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80007a4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80007a8:	f000 faf8 	bl	8000d9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80007ac:	bf00      	nop
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80007b4:	4802      	ldr	r0, [pc, #8]	; (80007c0 <TIM6_DAC_IRQHandler+0x10>)
 80007b6:	f001 f9f3 	bl	8001ba0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000080 	.word	0x20000080

080007c4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80007c8:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <SystemInit+0x20>)
 80007ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007ce:	4a05      	ldr	r2, [pc, #20]	; (80007e4 <SystemInit+0x20>)
 80007d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007d8:	bf00      	nop
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	e000ed00 	.word	0xe000ed00

080007e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007e8:	480d      	ldr	r0, [pc, #52]	; (8000820 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007ea:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007ec:	480d      	ldr	r0, [pc, #52]	; (8000824 <LoopForever+0x6>)
  ldr r1, =_edata
 80007ee:	490e      	ldr	r1, [pc, #56]	; (8000828 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007f0:	4a0e      	ldr	r2, [pc, #56]	; (800082c <LoopForever+0xe>)
  movs r3, #0
 80007f2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80007f4:	e002      	b.n	80007fc <LoopCopyDataInit>

080007f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007fa:	3304      	adds	r3, #4

080007fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000800:	d3f9      	bcc.n	80007f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000802:	4a0b      	ldr	r2, [pc, #44]	; (8000830 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000804:	4c0b      	ldr	r4, [pc, #44]	; (8000834 <LoopForever+0x16>)
  movs r3, #0
 8000806:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000808:	e001      	b.n	800080e <LoopFillZerobss>

0800080a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800080a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800080c:	3204      	adds	r2, #4

0800080e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800080e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000810:	d3fb      	bcc.n	800080a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000812:	f7ff ffd7 	bl	80007c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000816:	f004 fd4b 	bl	80052b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800081a:	f7ff fda1 	bl	8000360 <main>

0800081e <LoopForever>:

LoopForever:
    b LoopForever
 800081e:	e7fe      	b.n	800081e <LoopForever>
  ldr   r0, =_estack
 8000820:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000824:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000828:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 800082c:	08005d68 	.word	0x08005d68
  ldr r2, =_sbss
 8000830:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000834:	200145c0 	.word	0x200145c0

08000838 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000838:	e7fe      	b.n	8000838 <ADC1_2_IRQHandler>

0800083a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800083a:	b580      	push	{r7, lr}
 800083c:	b082      	sub	sp, #8
 800083e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000840:	2300      	movs	r3, #0
 8000842:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000844:	2003      	movs	r0, #3
 8000846:	f000 f8dc 	bl	8000a02 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800084a:	200f      	movs	r0, #15
 800084c:	f7ff ff26 	bl	800069c <HAL_InitTick>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d002      	beq.n	800085c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000856:	2301      	movs	r3, #1
 8000858:	71fb      	strb	r3, [r7, #7]
 800085a:	e001      	b.n	8000860 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800085c:	f7ff fef8 	bl	8000650 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000860:	79fb      	ldrb	r3, [r7, #7]

}
 8000862:	4618      	mov	r0, r3
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
	...

0800086c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000870:	4b05      	ldr	r3, [pc, #20]	; (8000888 <HAL_IncTick+0x1c>)
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	4b05      	ldr	r3, [pc, #20]	; (800088c <HAL_IncTick+0x20>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4413      	add	r3, r2
 800087a:	4a03      	ldr	r2, [pc, #12]	; (8000888 <HAL_IncTick+0x1c>)
 800087c:	6013      	str	r3, [r2, #0]
}
 800087e:	bf00      	nop
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr
 8000888:	200000cc 	.word	0x200000cc
 800088c:	20000008 	.word	0x20000008

08000890 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  return uwTick;
 8000894:	4b03      	ldr	r3, [pc, #12]	; (80008a4 <HAL_GetTick+0x14>)
 8000896:	681b      	ldr	r3, [r3, #0]
}
 8000898:	4618      	mov	r0, r3
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	200000cc 	.word	0x200000cc

080008a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b085      	sub	sp, #20
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	f003 0307 	and.w	r3, r3, #7
 80008b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008b8:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <__NVIC_SetPriorityGrouping+0x44>)
 80008ba:	68db      	ldr	r3, [r3, #12]
 80008bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008be:	68ba      	ldr	r2, [r7, #8]
 80008c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008c4:	4013      	ands	r3, r2
 80008c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008da:	4a04      	ldr	r2, [pc, #16]	; (80008ec <__NVIC_SetPriorityGrouping+0x44>)
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	60d3      	str	r3, [r2, #12]
}
 80008e0:	bf00      	nop
 80008e2:	3714      	adds	r7, #20
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	e000ed00 	.word	0xe000ed00

080008f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008f4:	4b04      	ldr	r3, [pc, #16]	; (8000908 <__NVIC_GetPriorityGrouping+0x18>)
 80008f6:	68db      	ldr	r3, [r3, #12]
 80008f8:	0a1b      	lsrs	r3, r3, #8
 80008fa:	f003 0307 	and.w	r3, r3, #7
}
 80008fe:	4618      	mov	r0, r3
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr
 8000908:	e000ed00 	.word	0xe000ed00

0800090c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091a:	2b00      	cmp	r3, #0
 800091c:	db0b      	blt.n	8000936 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	f003 021f 	and.w	r2, r3, #31
 8000924:	4907      	ldr	r1, [pc, #28]	; (8000944 <__NVIC_EnableIRQ+0x38>)
 8000926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800092a:	095b      	lsrs	r3, r3, #5
 800092c:	2001      	movs	r0, #1
 800092e:	fa00 f202 	lsl.w	r2, r0, r2
 8000932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000936:	bf00      	nop
 8000938:	370c      	adds	r7, #12
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	e000e100 	.word	0xe000e100

08000948 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	6039      	str	r1, [r7, #0]
 8000952:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000958:	2b00      	cmp	r3, #0
 800095a:	db0a      	blt.n	8000972 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	b2da      	uxtb	r2, r3
 8000960:	490c      	ldr	r1, [pc, #48]	; (8000994 <__NVIC_SetPriority+0x4c>)
 8000962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000966:	0112      	lsls	r2, r2, #4
 8000968:	b2d2      	uxtb	r2, r2
 800096a:	440b      	add	r3, r1
 800096c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000970:	e00a      	b.n	8000988 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	b2da      	uxtb	r2, r3
 8000976:	4908      	ldr	r1, [pc, #32]	; (8000998 <__NVIC_SetPriority+0x50>)
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	f003 030f 	and.w	r3, r3, #15
 800097e:	3b04      	subs	r3, #4
 8000980:	0112      	lsls	r2, r2, #4
 8000982:	b2d2      	uxtb	r2, r2
 8000984:	440b      	add	r3, r1
 8000986:	761a      	strb	r2, [r3, #24]
}
 8000988:	bf00      	nop
 800098a:	370c      	adds	r7, #12
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr
 8000994:	e000e100 	.word	0xe000e100
 8000998:	e000ed00 	.word	0xe000ed00

0800099c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800099c:	b480      	push	{r7}
 800099e:	b089      	sub	sp, #36	; 0x24
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	60b9      	str	r1, [r7, #8]
 80009a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	f003 0307 	and.w	r3, r3, #7
 80009ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009b0:	69fb      	ldr	r3, [r7, #28]
 80009b2:	f1c3 0307 	rsb	r3, r3, #7
 80009b6:	2b04      	cmp	r3, #4
 80009b8:	bf28      	it	cs
 80009ba:	2304      	movcs	r3, #4
 80009bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009be:	69fb      	ldr	r3, [r7, #28]
 80009c0:	3304      	adds	r3, #4
 80009c2:	2b06      	cmp	r3, #6
 80009c4:	d902      	bls.n	80009cc <NVIC_EncodePriority+0x30>
 80009c6:	69fb      	ldr	r3, [r7, #28]
 80009c8:	3b03      	subs	r3, #3
 80009ca:	e000      	b.n	80009ce <NVIC_EncodePriority+0x32>
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d0:	f04f 32ff 	mov.w	r2, #4294967295
 80009d4:	69bb      	ldr	r3, [r7, #24]
 80009d6:	fa02 f303 	lsl.w	r3, r2, r3
 80009da:	43da      	mvns	r2, r3
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	401a      	ands	r2, r3
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009e4:	f04f 31ff 	mov.w	r1, #4294967295
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	fa01 f303 	lsl.w	r3, r1, r3
 80009ee:	43d9      	mvns	r1, r3
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f4:	4313      	orrs	r3, r2
         );
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3724      	adds	r7, #36	; 0x24
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr

08000a02 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a02:	b580      	push	{r7, lr}
 8000a04:	b082      	sub	sp, #8
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f7ff ff4c 	bl	80008a8 <__NVIC_SetPriorityGrouping>
}
 8000a10:	bf00      	nop
 8000a12:	3708      	adds	r7, #8
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	60b9      	str	r1, [r7, #8]
 8000a22:	607a      	str	r2, [r7, #4]
 8000a24:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a26:	f7ff ff63 	bl	80008f0 <__NVIC_GetPriorityGrouping>
 8000a2a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a2c:	687a      	ldr	r2, [r7, #4]
 8000a2e:	68b9      	ldr	r1, [r7, #8]
 8000a30:	6978      	ldr	r0, [r7, #20]
 8000a32:	f7ff ffb3 	bl	800099c <NVIC_EncodePriority>
 8000a36:	4602      	mov	r2, r0
 8000a38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a3c:	4611      	mov	r1, r2
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f7ff ff82 	bl	8000948 <__NVIC_SetPriority>
}
 8000a44:	bf00      	nop
 8000a46:	3718      	adds	r7, #24
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f7ff ff56 	bl	800090c <__NVIC_EnableIRQ>
}
 8000a60:	bf00      	nop
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b087      	sub	sp, #28
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000a72:	2300      	movs	r3, #0
 8000a74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000a76:	e15a      	b.n	8000d2e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	2101      	movs	r1, #1
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	fa01 f303 	lsl.w	r3, r1, r3
 8000a84:	4013      	ands	r3, r2
 8000a86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	f000 814c 	beq.w	8000d28 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	f003 0303 	and.w	r3, r3, #3
 8000a98:	2b01      	cmp	r3, #1
 8000a9a:	d005      	beq.n	8000aa8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000aa4:	2b02      	cmp	r3, #2
 8000aa6:	d130      	bne.n	8000b0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	689b      	ldr	r3, [r3, #8]
 8000aac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	005b      	lsls	r3, r3, #1
 8000ab2:	2203      	movs	r2, #3
 8000ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab8:	43db      	mvns	r3, r3
 8000aba:	693a      	ldr	r2, [r7, #16]
 8000abc:	4013      	ands	r3, r2
 8000abe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	68da      	ldr	r2, [r3, #12]
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	005b      	lsls	r3, r3, #1
 8000ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8000acc:	693a      	ldr	r2, [r7, #16]
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	693a      	ldr	r2, [r7, #16]
 8000ad6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ade:	2201      	movs	r2, #1
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae6:	43db      	mvns	r3, r3
 8000ae8:	693a      	ldr	r2, [r7, #16]
 8000aea:	4013      	ands	r3, r2
 8000aec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	091b      	lsrs	r3, r3, #4
 8000af4:	f003 0201 	and.w	r2, r3, #1
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	fa02 f303 	lsl.w	r3, r2, r3
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	f003 0303 	and.w	r3, r3, #3
 8000b12:	2b03      	cmp	r3, #3
 8000b14:	d017      	beq.n	8000b46 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	68db      	ldr	r3, [r3, #12]
 8000b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	005b      	lsls	r3, r3, #1
 8000b20:	2203      	movs	r2, #3
 8000b22:	fa02 f303 	lsl.w	r3, r2, r3
 8000b26:	43db      	mvns	r3, r3
 8000b28:	693a      	ldr	r2, [r7, #16]
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	689a      	ldr	r2, [r3, #8]
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	005b      	lsls	r3, r3, #1
 8000b36:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	f003 0303 	and.w	r3, r3, #3
 8000b4e:	2b02      	cmp	r3, #2
 8000b50:	d123      	bne.n	8000b9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	08da      	lsrs	r2, r3, #3
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	3208      	adds	r2, #8
 8000b5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	f003 0307 	and.w	r3, r3, #7
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	220f      	movs	r2, #15
 8000b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6e:	43db      	mvns	r3, r3
 8000b70:	693a      	ldr	r2, [r7, #16]
 8000b72:	4013      	ands	r3, r2
 8000b74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	691a      	ldr	r2, [r3, #16]
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	f003 0307 	and.w	r3, r3, #7
 8000b80:	009b      	lsls	r3, r3, #2
 8000b82:	fa02 f303 	lsl.w	r3, r2, r3
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	08da      	lsrs	r2, r3, #3
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	3208      	adds	r2, #8
 8000b94:	6939      	ldr	r1, [r7, #16]
 8000b96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	2203      	movs	r2, #3
 8000ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8000baa:	43db      	mvns	r3, r3
 8000bac:	693a      	ldr	r2, [r7, #16]
 8000bae:	4013      	ands	r3, r2
 8000bb0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	f003 0203 	and.w	r2, r3, #3
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	005b      	lsls	r3, r3, #1
 8000bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	f000 80a6 	beq.w	8000d28 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bdc:	4b5b      	ldr	r3, [pc, #364]	; (8000d4c <HAL_GPIO_Init+0x2e4>)
 8000bde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000be0:	4a5a      	ldr	r2, [pc, #360]	; (8000d4c <HAL_GPIO_Init+0x2e4>)
 8000be2:	f043 0301 	orr.w	r3, r3, #1
 8000be6:	6613      	str	r3, [r2, #96]	; 0x60
 8000be8:	4b58      	ldr	r3, [pc, #352]	; (8000d4c <HAL_GPIO_Init+0x2e4>)
 8000bea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bec:	f003 0301 	and.w	r3, r3, #1
 8000bf0:	60bb      	str	r3, [r7, #8]
 8000bf2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000bf4:	4a56      	ldr	r2, [pc, #344]	; (8000d50 <HAL_GPIO_Init+0x2e8>)
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	089b      	lsrs	r3, r3, #2
 8000bfa:	3302      	adds	r3, #2
 8000bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	f003 0303 	and.w	r3, r3, #3
 8000c08:	009b      	lsls	r3, r3, #2
 8000c0a:	220f      	movs	r2, #15
 8000c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c10:	43db      	mvns	r3, r3
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	4013      	ands	r3, r2
 8000c16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c1e:	d01f      	beq.n	8000c60 <HAL_GPIO_Init+0x1f8>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	4a4c      	ldr	r2, [pc, #304]	; (8000d54 <HAL_GPIO_Init+0x2ec>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d019      	beq.n	8000c5c <HAL_GPIO_Init+0x1f4>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4a4b      	ldr	r2, [pc, #300]	; (8000d58 <HAL_GPIO_Init+0x2f0>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d013      	beq.n	8000c58 <HAL_GPIO_Init+0x1f0>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	4a4a      	ldr	r2, [pc, #296]	; (8000d5c <HAL_GPIO_Init+0x2f4>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d00d      	beq.n	8000c54 <HAL_GPIO_Init+0x1ec>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	4a49      	ldr	r2, [pc, #292]	; (8000d60 <HAL_GPIO_Init+0x2f8>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d007      	beq.n	8000c50 <HAL_GPIO_Init+0x1e8>
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	4a48      	ldr	r2, [pc, #288]	; (8000d64 <HAL_GPIO_Init+0x2fc>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d101      	bne.n	8000c4c <HAL_GPIO_Init+0x1e4>
 8000c48:	2305      	movs	r3, #5
 8000c4a:	e00a      	b.n	8000c62 <HAL_GPIO_Init+0x1fa>
 8000c4c:	2306      	movs	r3, #6
 8000c4e:	e008      	b.n	8000c62 <HAL_GPIO_Init+0x1fa>
 8000c50:	2304      	movs	r3, #4
 8000c52:	e006      	b.n	8000c62 <HAL_GPIO_Init+0x1fa>
 8000c54:	2303      	movs	r3, #3
 8000c56:	e004      	b.n	8000c62 <HAL_GPIO_Init+0x1fa>
 8000c58:	2302      	movs	r3, #2
 8000c5a:	e002      	b.n	8000c62 <HAL_GPIO_Init+0x1fa>
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	e000      	b.n	8000c62 <HAL_GPIO_Init+0x1fa>
 8000c60:	2300      	movs	r3, #0
 8000c62:	697a      	ldr	r2, [r7, #20]
 8000c64:	f002 0203 	and.w	r2, r2, #3
 8000c68:	0092      	lsls	r2, r2, #2
 8000c6a:	4093      	lsls	r3, r2
 8000c6c:	693a      	ldr	r2, [r7, #16]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000c72:	4937      	ldr	r1, [pc, #220]	; (8000d50 <HAL_GPIO_Init+0x2e8>)
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	089b      	lsrs	r3, r3, #2
 8000c78:	3302      	adds	r3, #2
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c80:	4b39      	ldr	r3, [pc, #228]	; (8000d68 <HAL_GPIO_Init+0x300>)
 8000c82:	689b      	ldr	r3, [r3, #8]
 8000c84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	43db      	mvns	r3, r3
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d003      	beq.n	8000ca4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ca4:	4a30      	ldr	r2, [pc, #192]	; (8000d68 <HAL_GPIO_Init+0x300>)
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000caa:	4b2f      	ldr	r3, [pc, #188]	; (8000d68 <HAL_GPIO_Init+0x300>)
 8000cac:	68db      	ldr	r3, [r3, #12]
 8000cae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	43db      	mvns	r3, r3
 8000cb4:	693a      	ldr	r2, [r7, #16]
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d003      	beq.n	8000cce <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000cce:	4a26      	ldr	r2, [pc, #152]	; (8000d68 <HAL_GPIO_Init+0x300>)
 8000cd0:	693b      	ldr	r3, [r7, #16]
 8000cd2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000cd4:	4b24      	ldr	r3, [pc, #144]	; (8000d68 <HAL_GPIO_Init+0x300>)
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	43db      	mvns	r3, r3
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d003      	beq.n	8000cf8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000cf8:	4a1b      	ldr	r2, [pc, #108]	; (8000d68 <HAL_GPIO_Init+0x300>)
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000cfe:	4b1a      	ldr	r3, [pc, #104]	; (8000d68 <HAL_GPIO_Init+0x300>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	43db      	mvns	r3, r3
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d003      	beq.n	8000d22 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d22:	4a11      	ldr	r2, [pc, #68]	; (8000d68 <HAL_GPIO_Init+0x300>)
 8000d24:	693b      	ldr	r3, [r7, #16]
 8000d26:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	fa22 f303 	lsr.w	r3, r2, r3
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	f47f ae9d 	bne.w	8000a78 <HAL_GPIO_Init+0x10>
  }
}
 8000d3e:	bf00      	nop
 8000d40:	bf00      	nop
 8000d42:	371c      	adds	r7, #28
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	40021000 	.word	0x40021000
 8000d50:	40010000 	.word	0x40010000
 8000d54:	48000400 	.word	0x48000400
 8000d58:	48000800 	.word	0x48000800
 8000d5c:	48000c00 	.word	0x48000c00
 8000d60:	48001000 	.word	0x48001000
 8000d64:	48001400 	.word	0x48001400
 8000d68:	40010400 	.word	0x40010400

08000d6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	460b      	mov	r3, r1
 8000d76:	807b      	strh	r3, [r7, #2]
 8000d78:	4613      	mov	r3, r2
 8000d7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d7c:	787b      	ldrb	r3, [r7, #1]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d003      	beq.n	8000d8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d82:	887a      	ldrh	r2, [r7, #2]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d88:	e002      	b.n	8000d90 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d8a:	887a      	ldrh	r2, [r7, #2]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d90:	bf00      	nop
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000da6:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000da8:	695a      	ldr	r2, [r3, #20]
 8000daa:	88fb      	ldrh	r3, [r7, #6]
 8000dac:	4013      	ands	r3, r2
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d006      	beq.n	8000dc0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000db2:	4a05      	ldr	r2, [pc, #20]	; (8000dc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000db4:	88fb      	ldrh	r3, [r7, #6]
 8000db6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000db8:	88fb      	ldrh	r3, [r7, #6]
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f000 f806 	bl	8000dcc <HAL_GPIO_EXTI_Callback>
  }
}
 8000dc0:	bf00      	nop
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40010400 	.word	0x40010400

08000dcc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
	...

08000de4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d141      	bne.n	8000e76 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000df2:	4b4b      	ldr	r3, [pc, #300]	; (8000f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000dfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000dfe:	d131      	bne.n	8000e64 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000e00:	4b47      	ldr	r3, [pc, #284]	; (8000f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e06:	4a46      	ldr	r2, [pc, #280]	; (8000f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e0c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e10:	4b43      	ldr	r3, [pc, #268]	; (8000f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e18:	4a41      	ldr	r2, [pc, #260]	; (8000f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e1e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000e20:	4b40      	ldr	r3, [pc, #256]	; (8000f24 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2232      	movs	r2, #50	; 0x32
 8000e26:	fb02 f303 	mul.w	r3, r2, r3
 8000e2a:	4a3f      	ldr	r2, [pc, #252]	; (8000f28 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e30:	0c9b      	lsrs	r3, r3, #18
 8000e32:	3301      	adds	r3, #1
 8000e34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e36:	e002      	b.n	8000e3e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	3b01      	subs	r3, #1
 8000e3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e3e:	4b38      	ldr	r3, [pc, #224]	; (8000f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e4a:	d102      	bne.n	8000e52 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d1f2      	bne.n	8000e38 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e52:	4b33      	ldr	r3, [pc, #204]	; (8000f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e54:	695b      	ldr	r3, [r3, #20]
 8000e56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e5e:	d158      	bne.n	8000f12 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000e60:	2303      	movs	r3, #3
 8000e62:	e057      	b.n	8000f14 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000e64:	4b2e      	ldr	r3, [pc, #184]	; (8000f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e6a:	4a2d      	ldr	r2, [pc, #180]	; (8000f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e70:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000e74:	e04d      	b.n	8000f12 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e7c:	d141      	bne.n	8000f02 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e7e:	4b28      	ldr	r3, [pc, #160]	; (8000f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e8a:	d131      	bne.n	8000ef0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000e8c:	4b24      	ldr	r3, [pc, #144]	; (8000f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e92:	4a23      	ldr	r2, [pc, #140]	; (8000f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e98:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e9c:	4b20      	ldr	r3, [pc, #128]	; (8000f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000ea4:	4a1e      	ldr	r2, [pc, #120]	; (8000f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ea6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eaa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000eac:	4b1d      	ldr	r3, [pc, #116]	; (8000f24 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2232      	movs	r2, #50	; 0x32
 8000eb2:	fb02 f303 	mul.w	r3, r2, r3
 8000eb6:	4a1c      	ldr	r2, [pc, #112]	; (8000f28 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8000ebc:	0c9b      	lsrs	r3, r3, #18
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ec2:	e002      	b.n	8000eca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000eca:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ecc:	695b      	ldr	r3, [r3, #20]
 8000ece:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ed2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ed6:	d102      	bne.n	8000ede <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d1f2      	bne.n	8000ec4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000ede:	4b10      	ldr	r3, [pc, #64]	; (8000f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ee0:	695b      	ldr	r3, [r3, #20]
 8000ee2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ee6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000eea:	d112      	bne.n	8000f12 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000eec:	2303      	movs	r3, #3
 8000eee:	e011      	b.n	8000f14 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000ef0:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ef2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ef6:	4a0a      	ldr	r2, [pc, #40]	; (8000f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ef8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000efc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000f00:	e007      	b.n	8000f12 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f02:	4b07      	ldr	r3, [pc, #28]	; (8000f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f0a:	4a05      	ldr	r2, [pc, #20]	; (8000f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f0c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f10:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8000f12:	2300      	movs	r3, #0
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3714      	adds	r7, #20
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	40007000 	.word	0x40007000
 8000f24:	20000000 	.word	0x20000000
 8000f28:	431bde83 	.word	0x431bde83

08000f2c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000f30:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	4a04      	ldr	r2, [pc, #16]	; (8000f48 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000f36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f3a:	6093      	str	r3, [r2, #8]
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	40007000 	.word	0x40007000

08000f4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b088      	sub	sp, #32
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d101      	bne.n	8000f5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e306      	b.n	800156c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d075      	beq.n	8001056 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f6a:	4b97      	ldr	r3, [pc, #604]	; (80011c8 <HAL_RCC_OscConfig+0x27c>)
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	f003 030c 	and.w	r3, r3, #12
 8000f72:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f74:	4b94      	ldr	r3, [pc, #592]	; (80011c8 <HAL_RCC_OscConfig+0x27c>)
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	f003 0303 	and.w	r3, r3, #3
 8000f7c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8000f7e:	69bb      	ldr	r3, [r7, #24]
 8000f80:	2b0c      	cmp	r3, #12
 8000f82:	d102      	bne.n	8000f8a <HAL_RCC_OscConfig+0x3e>
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	2b03      	cmp	r3, #3
 8000f88:	d002      	beq.n	8000f90 <HAL_RCC_OscConfig+0x44>
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	2b08      	cmp	r3, #8
 8000f8e:	d10b      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f90:	4b8d      	ldr	r3, [pc, #564]	; (80011c8 <HAL_RCC_OscConfig+0x27c>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d05b      	beq.n	8001054 <HAL_RCC_OscConfig+0x108>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d157      	bne.n	8001054 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	e2e1      	b.n	800156c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fb0:	d106      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x74>
 8000fb2:	4b85      	ldr	r3, [pc, #532]	; (80011c8 <HAL_RCC_OscConfig+0x27c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a84      	ldr	r2, [pc, #528]	; (80011c8 <HAL_RCC_OscConfig+0x27c>)
 8000fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fbc:	6013      	str	r3, [r2, #0]
 8000fbe:	e01d      	b.n	8000ffc <HAL_RCC_OscConfig+0xb0>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fc8:	d10c      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x98>
 8000fca:	4b7f      	ldr	r3, [pc, #508]	; (80011c8 <HAL_RCC_OscConfig+0x27c>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a7e      	ldr	r2, [pc, #504]	; (80011c8 <HAL_RCC_OscConfig+0x27c>)
 8000fd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fd4:	6013      	str	r3, [r2, #0]
 8000fd6:	4b7c      	ldr	r3, [pc, #496]	; (80011c8 <HAL_RCC_OscConfig+0x27c>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a7b      	ldr	r2, [pc, #492]	; (80011c8 <HAL_RCC_OscConfig+0x27c>)
 8000fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fe0:	6013      	str	r3, [r2, #0]
 8000fe2:	e00b      	b.n	8000ffc <HAL_RCC_OscConfig+0xb0>
 8000fe4:	4b78      	ldr	r3, [pc, #480]	; (80011c8 <HAL_RCC_OscConfig+0x27c>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a77      	ldr	r2, [pc, #476]	; (80011c8 <HAL_RCC_OscConfig+0x27c>)
 8000fea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fee:	6013      	str	r3, [r2, #0]
 8000ff0:	4b75      	ldr	r3, [pc, #468]	; (80011c8 <HAL_RCC_OscConfig+0x27c>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a74      	ldr	r2, [pc, #464]	; (80011c8 <HAL_RCC_OscConfig+0x27c>)
 8000ff6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ffa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d013      	beq.n	800102c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001004:	f7ff fc44 	bl	8000890 <HAL_GetTick>
 8001008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800100a:	e008      	b.n	800101e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800100c:	f7ff fc40 	bl	8000890 <HAL_GetTick>
 8001010:	4602      	mov	r2, r0
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	2b64      	cmp	r3, #100	; 0x64
 8001018:	d901      	bls.n	800101e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800101a:	2303      	movs	r3, #3
 800101c:	e2a6      	b.n	800156c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800101e:	4b6a      	ldr	r3, [pc, #424]	; (80011c8 <HAL_RCC_OscConfig+0x27c>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d0f0      	beq.n	800100c <HAL_RCC_OscConfig+0xc0>
 800102a:	e014      	b.n	8001056 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800102c:	f7ff fc30 	bl	8000890 <HAL_GetTick>
 8001030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001032:	e008      	b.n	8001046 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001034:	f7ff fc2c 	bl	8000890 <HAL_GetTick>
 8001038:	4602      	mov	r2, r0
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	2b64      	cmp	r3, #100	; 0x64
 8001040:	d901      	bls.n	8001046 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001042:	2303      	movs	r3, #3
 8001044:	e292      	b.n	800156c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001046:	4b60      	ldr	r3, [pc, #384]	; (80011c8 <HAL_RCC_OscConfig+0x27c>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d1f0      	bne.n	8001034 <HAL_RCC_OscConfig+0xe8>
 8001052:	e000      	b.n	8001056 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001054:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f003 0302 	and.w	r3, r3, #2
 800105e:	2b00      	cmp	r3, #0
 8001060:	d075      	beq.n	800114e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001062:	4b59      	ldr	r3, [pc, #356]	; (80011c8 <HAL_RCC_OscConfig+0x27c>)
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	f003 030c 	and.w	r3, r3, #12
 800106a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800106c:	4b56      	ldr	r3, [pc, #344]	; (80011c8 <HAL_RCC_OscConfig+0x27c>)
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	f003 0303 	and.w	r3, r3, #3
 8001074:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	2b0c      	cmp	r3, #12
 800107a:	d102      	bne.n	8001082 <HAL_RCC_OscConfig+0x136>
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	2b02      	cmp	r3, #2
 8001080:	d002      	beq.n	8001088 <HAL_RCC_OscConfig+0x13c>
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	2b04      	cmp	r3, #4
 8001086:	d11f      	bne.n	80010c8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001088:	4b4f      	ldr	r3, [pc, #316]	; (80011c8 <HAL_RCC_OscConfig+0x27c>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001090:	2b00      	cmp	r3, #0
 8001092:	d005      	beq.n	80010a0 <HAL_RCC_OscConfig+0x154>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d101      	bne.n	80010a0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800109c:	2301      	movs	r3, #1
 800109e:	e265      	b.n	800156c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010a0:	4b49      	ldr	r3, [pc, #292]	; (80011c8 <HAL_RCC_OscConfig+0x27c>)
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	691b      	ldr	r3, [r3, #16]
 80010ac:	061b      	lsls	r3, r3, #24
 80010ae:	4946      	ldr	r1, [pc, #280]	; (80011c8 <HAL_RCC_OscConfig+0x27c>)
 80010b0:	4313      	orrs	r3, r2
 80010b2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80010b4:	4b45      	ldr	r3, [pc, #276]	; (80011cc <HAL_RCC_OscConfig+0x280>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff faef 	bl	800069c <HAL_InitTick>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d043      	beq.n	800114c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
 80010c6:	e251      	b.n	800156c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d023      	beq.n	8001118 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010d0:	4b3d      	ldr	r3, [pc, #244]	; (80011c8 <HAL_RCC_OscConfig+0x27c>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a3c      	ldr	r2, [pc, #240]	; (80011c8 <HAL_RCC_OscConfig+0x27c>)
 80010d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010dc:	f7ff fbd8 	bl	8000890 <HAL_GetTick>
 80010e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010e2:	e008      	b.n	80010f6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010e4:	f7ff fbd4 	bl	8000890 <HAL_GetTick>
 80010e8:	4602      	mov	r2, r0
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d901      	bls.n	80010f6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80010f2:	2303      	movs	r3, #3
 80010f4:	e23a      	b.n	800156c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010f6:	4b34      	ldr	r3, [pc, #208]	; (80011c8 <HAL_RCC_OscConfig+0x27c>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d0f0      	beq.n	80010e4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001102:	4b31      	ldr	r3, [pc, #196]	; (80011c8 <HAL_RCC_OscConfig+0x27c>)
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	691b      	ldr	r3, [r3, #16]
 800110e:	061b      	lsls	r3, r3, #24
 8001110:	492d      	ldr	r1, [pc, #180]	; (80011c8 <HAL_RCC_OscConfig+0x27c>)
 8001112:	4313      	orrs	r3, r2
 8001114:	604b      	str	r3, [r1, #4]
 8001116:	e01a      	b.n	800114e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001118:	4b2b      	ldr	r3, [pc, #172]	; (80011c8 <HAL_RCC_OscConfig+0x27c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a2a      	ldr	r2, [pc, #168]	; (80011c8 <HAL_RCC_OscConfig+0x27c>)
 800111e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001122:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001124:	f7ff fbb4 	bl	8000890 <HAL_GetTick>
 8001128:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800112a:	e008      	b.n	800113e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800112c:	f7ff fbb0 	bl	8000890 <HAL_GetTick>
 8001130:	4602      	mov	r2, r0
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	2b02      	cmp	r3, #2
 8001138:	d901      	bls.n	800113e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800113a:	2303      	movs	r3, #3
 800113c:	e216      	b.n	800156c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800113e:	4b22      	ldr	r3, [pc, #136]	; (80011c8 <HAL_RCC_OscConfig+0x27c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001146:	2b00      	cmp	r3, #0
 8001148:	d1f0      	bne.n	800112c <HAL_RCC_OscConfig+0x1e0>
 800114a:	e000      	b.n	800114e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800114c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f003 0308 	and.w	r3, r3, #8
 8001156:	2b00      	cmp	r3, #0
 8001158:	d041      	beq.n	80011de <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	695b      	ldr	r3, [r3, #20]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d01c      	beq.n	800119c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001162:	4b19      	ldr	r3, [pc, #100]	; (80011c8 <HAL_RCC_OscConfig+0x27c>)
 8001164:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001168:	4a17      	ldr	r2, [pc, #92]	; (80011c8 <HAL_RCC_OscConfig+0x27c>)
 800116a:	f043 0301 	orr.w	r3, r3, #1
 800116e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001172:	f7ff fb8d 	bl	8000890 <HAL_GetTick>
 8001176:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001178:	e008      	b.n	800118c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800117a:	f7ff fb89 	bl	8000890 <HAL_GetTick>
 800117e:	4602      	mov	r2, r0
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	2b02      	cmp	r3, #2
 8001186:	d901      	bls.n	800118c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001188:	2303      	movs	r3, #3
 800118a:	e1ef      	b.n	800156c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800118c:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <HAL_RCC_OscConfig+0x27c>)
 800118e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001192:	f003 0302 	and.w	r3, r3, #2
 8001196:	2b00      	cmp	r3, #0
 8001198:	d0ef      	beq.n	800117a <HAL_RCC_OscConfig+0x22e>
 800119a:	e020      	b.n	80011de <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800119c:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <HAL_RCC_OscConfig+0x27c>)
 800119e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011a2:	4a09      	ldr	r2, [pc, #36]	; (80011c8 <HAL_RCC_OscConfig+0x27c>)
 80011a4:	f023 0301 	bic.w	r3, r3, #1
 80011a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011ac:	f7ff fb70 	bl	8000890 <HAL_GetTick>
 80011b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011b2:	e00d      	b.n	80011d0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011b4:	f7ff fb6c 	bl	8000890 <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	2b02      	cmp	r3, #2
 80011c0:	d906      	bls.n	80011d0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80011c2:	2303      	movs	r3, #3
 80011c4:	e1d2      	b.n	800156c <HAL_RCC_OscConfig+0x620>
 80011c6:	bf00      	nop
 80011c8:	40021000 	.word	0x40021000
 80011cc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011d0:	4b8c      	ldr	r3, [pc, #560]	; (8001404 <HAL_RCC_OscConfig+0x4b8>)
 80011d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d1ea      	bne.n	80011b4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 0304 	and.w	r3, r3, #4
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	f000 80a6 	beq.w	8001338 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011ec:	2300      	movs	r3, #0
 80011ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80011f0:	4b84      	ldr	r3, [pc, #528]	; (8001404 <HAL_RCC_OscConfig+0x4b8>)
 80011f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d101      	bne.n	8001200 <HAL_RCC_OscConfig+0x2b4>
 80011fc:	2301      	movs	r3, #1
 80011fe:	e000      	b.n	8001202 <HAL_RCC_OscConfig+0x2b6>
 8001200:	2300      	movs	r3, #0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d00d      	beq.n	8001222 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001206:	4b7f      	ldr	r3, [pc, #508]	; (8001404 <HAL_RCC_OscConfig+0x4b8>)
 8001208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800120a:	4a7e      	ldr	r2, [pc, #504]	; (8001404 <HAL_RCC_OscConfig+0x4b8>)
 800120c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001210:	6593      	str	r3, [r2, #88]	; 0x58
 8001212:	4b7c      	ldr	r3, [pc, #496]	; (8001404 <HAL_RCC_OscConfig+0x4b8>)
 8001214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800121e:	2301      	movs	r3, #1
 8001220:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001222:	4b79      	ldr	r3, [pc, #484]	; (8001408 <HAL_RCC_OscConfig+0x4bc>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800122a:	2b00      	cmp	r3, #0
 800122c:	d118      	bne.n	8001260 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800122e:	4b76      	ldr	r3, [pc, #472]	; (8001408 <HAL_RCC_OscConfig+0x4bc>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a75      	ldr	r2, [pc, #468]	; (8001408 <HAL_RCC_OscConfig+0x4bc>)
 8001234:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001238:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800123a:	f7ff fb29 	bl	8000890 <HAL_GetTick>
 800123e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001240:	e008      	b.n	8001254 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001242:	f7ff fb25 	bl	8000890 <HAL_GetTick>
 8001246:	4602      	mov	r2, r0
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	2b02      	cmp	r3, #2
 800124e:	d901      	bls.n	8001254 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001250:	2303      	movs	r3, #3
 8001252:	e18b      	b.n	800156c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001254:	4b6c      	ldr	r3, [pc, #432]	; (8001408 <HAL_RCC_OscConfig+0x4bc>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800125c:	2b00      	cmp	r3, #0
 800125e:	d0f0      	beq.n	8001242 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	2b01      	cmp	r3, #1
 8001266:	d108      	bne.n	800127a <HAL_RCC_OscConfig+0x32e>
 8001268:	4b66      	ldr	r3, [pc, #408]	; (8001404 <HAL_RCC_OscConfig+0x4b8>)
 800126a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800126e:	4a65      	ldr	r2, [pc, #404]	; (8001404 <HAL_RCC_OscConfig+0x4b8>)
 8001270:	f043 0301 	orr.w	r3, r3, #1
 8001274:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001278:	e024      	b.n	80012c4 <HAL_RCC_OscConfig+0x378>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	2b05      	cmp	r3, #5
 8001280:	d110      	bne.n	80012a4 <HAL_RCC_OscConfig+0x358>
 8001282:	4b60      	ldr	r3, [pc, #384]	; (8001404 <HAL_RCC_OscConfig+0x4b8>)
 8001284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001288:	4a5e      	ldr	r2, [pc, #376]	; (8001404 <HAL_RCC_OscConfig+0x4b8>)
 800128a:	f043 0304 	orr.w	r3, r3, #4
 800128e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001292:	4b5c      	ldr	r3, [pc, #368]	; (8001404 <HAL_RCC_OscConfig+0x4b8>)
 8001294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001298:	4a5a      	ldr	r2, [pc, #360]	; (8001404 <HAL_RCC_OscConfig+0x4b8>)
 800129a:	f043 0301 	orr.w	r3, r3, #1
 800129e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012a2:	e00f      	b.n	80012c4 <HAL_RCC_OscConfig+0x378>
 80012a4:	4b57      	ldr	r3, [pc, #348]	; (8001404 <HAL_RCC_OscConfig+0x4b8>)
 80012a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012aa:	4a56      	ldr	r2, [pc, #344]	; (8001404 <HAL_RCC_OscConfig+0x4b8>)
 80012ac:	f023 0301 	bic.w	r3, r3, #1
 80012b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012b4:	4b53      	ldr	r3, [pc, #332]	; (8001404 <HAL_RCC_OscConfig+0x4b8>)
 80012b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012ba:	4a52      	ldr	r2, [pc, #328]	; (8001404 <HAL_RCC_OscConfig+0x4b8>)
 80012bc:	f023 0304 	bic.w	r3, r3, #4
 80012c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d016      	beq.n	80012fa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012cc:	f7ff fae0 	bl	8000890 <HAL_GetTick>
 80012d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012d2:	e00a      	b.n	80012ea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012d4:	f7ff fadc 	bl	8000890 <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	f241 3288 	movw	r2, #5000	; 0x1388
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d901      	bls.n	80012ea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e140      	b.n	800156c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012ea:	4b46      	ldr	r3, [pc, #280]	; (8001404 <HAL_RCC_OscConfig+0x4b8>)
 80012ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012f0:	f003 0302 	and.w	r3, r3, #2
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d0ed      	beq.n	80012d4 <HAL_RCC_OscConfig+0x388>
 80012f8:	e015      	b.n	8001326 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012fa:	f7ff fac9 	bl	8000890 <HAL_GetTick>
 80012fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001300:	e00a      	b.n	8001318 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001302:	f7ff fac5 	bl	8000890 <HAL_GetTick>
 8001306:	4602      	mov	r2, r0
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001310:	4293      	cmp	r3, r2
 8001312:	d901      	bls.n	8001318 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e129      	b.n	800156c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001318:	4b3a      	ldr	r3, [pc, #232]	; (8001404 <HAL_RCC_OscConfig+0x4b8>)
 800131a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	2b00      	cmp	r3, #0
 8001324:	d1ed      	bne.n	8001302 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001326:	7ffb      	ldrb	r3, [r7, #31]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d105      	bne.n	8001338 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800132c:	4b35      	ldr	r3, [pc, #212]	; (8001404 <HAL_RCC_OscConfig+0x4b8>)
 800132e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001330:	4a34      	ldr	r2, [pc, #208]	; (8001404 <HAL_RCC_OscConfig+0x4b8>)
 8001332:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001336:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 0320 	and.w	r3, r3, #32
 8001340:	2b00      	cmp	r3, #0
 8001342:	d03c      	beq.n	80013be <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	699b      	ldr	r3, [r3, #24]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d01c      	beq.n	8001386 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800134c:	4b2d      	ldr	r3, [pc, #180]	; (8001404 <HAL_RCC_OscConfig+0x4b8>)
 800134e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001352:	4a2c      	ldr	r2, [pc, #176]	; (8001404 <HAL_RCC_OscConfig+0x4b8>)
 8001354:	f043 0301 	orr.w	r3, r3, #1
 8001358:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800135c:	f7ff fa98 	bl	8000890 <HAL_GetTick>
 8001360:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001362:	e008      	b.n	8001376 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001364:	f7ff fa94 	bl	8000890 <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	2b02      	cmp	r3, #2
 8001370:	d901      	bls.n	8001376 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e0fa      	b.n	800156c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001376:	4b23      	ldr	r3, [pc, #140]	; (8001404 <HAL_RCC_OscConfig+0x4b8>)
 8001378:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800137c:	f003 0302 	and.w	r3, r3, #2
 8001380:	2b00      	cmp	r3, #0
 8001382:	d0ef      	beq.n	8001364 <HAL_RCC_OscConfig+0x418>
 8001384:	e01b      	b.n	80013be <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001386:	4b1f      	ldr	r3, [pc, #124]	; (8001404 <HAL_RCC_OscConfig+0x4b8>)
 8001388:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800138c:	4a1d      	ldr	r2, [pc, #116]	; (8001404 <HAL_RCC_OscConfig+0x4b8>)
 800138e:	f023 0301 	bic.w	r3, r3, #1
 8001392:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001396:	f7ff fa7b 	bl	8000890 <HAL_GetTick>
 800139a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800139c:	e008      	b.n	80013b0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800139e:	f7ff fa77 	bl	8000890 <HAL_GetTick>
 80013a2:	4602      	mov	r2, r0
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d901      	bls.n	80013b0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e0dd      	b.n	800156c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80013b0:	4b14      	ldr	r3, [pc, #80]	; (8001404 <HAL_RCC_OscConfig+0x4b8>)
 80013b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d1ef      	bne.n	800139e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	69db      	ldr	r3, [r3, #28]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	f000 80d1 	beq.w	800156a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013c8:	4b0e      	ldr	r3, [pc, #56]	; (8001404 <HAL_RCC_OscConfig+0x4b8>)
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	f003 030c 	and.w	r3, r3, #12
 80013d0:	2b0c      	cmp	r3, #12
 80013d2:	f000 808b 	beq.w	80014ec <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	69db      	ldr	r3, [r3, #28]
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d15e      	bne.n	800149c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013de:	4b09      	ldr	r3, [pc, #36]	; (8001404 <HAL_RCC_OscConfig+0x4b8>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a08      	ldr	r2, [pc, #32]	; (8001404 <HAL_RCC_OscConfig+0x4b8>)
 80013e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ea:	f7ff fa51 	bl	8000890 <HAL_GetTick>
 80013ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013f0:	e00c      	b.n	800140c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013f2:	f7ff fa4d 	bl	8000890 <HAL_GetTick>
 80013f6:	4602      	mov	r2, r0
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d905      	bls.n	800140c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001400:	2303      	movs	r3, #3
 8001402:	e0b3      	b.n	800156c <HAL_RCC_OscConfig+0x620>
 8001404:	40021000 	.word	0x40021000
 8001408:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800140c:	4b59      	ldr	r3, [pc, #356]	; (8001574 <HAL_RCC_OscConfig+0x628>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d1ec      	bne.n	80013f2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001418:	4b56      	ldr	r3, [pc, #344]	; (8001574 <HAL_RCC_OscConfig+0x628>)
 800141a:	68da      	ldr	r2, [r3, #12]
 800141c:	4b56      	ldr	r3, [pc, #344]	; (8001578 <HAL_RCC_OscConfig+0x62c>)
 800141e:	4013      	ands	r3, r2
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	6a11      	ldr	r1, [r2, #32]
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001428:	3a01      	subs	r2, #1
 800142a:	0112      	lsls	r2, r2, #4
 800142c:	4311      	orrs	r1, r2
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001432:	0212      	lsls	r2, r2, #8
 8001434:	4311      	orrs	r1, r2
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800143a:	0852      	lsrs	r2, r2, #1
 800143c:	3a01      	subs	r2, #1
 800143e:	0552      	lsls	r2, r2, #21
 8001440:	4311      	orrs	r1, r2
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001446:	0852      	lsrs	r2, r2, #1
 8001448:	3a01      	subs	r2, #1
 800144a:	0652      	lsls	r2, r2, #25
 800144c:	4311      	orrs	r1, r2
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001452:	06d2      	lsls	r2, r2, #27
 8001454:	430a      	orrs	r2, r1
 8001456:	4947      	ldr	r1, [pc, #284]	; (8001574 <HAL_RCC_OscConfig+0x628>)
 8001458:	4313      	orrs	r3, r2
 800145a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800145c:	4b45      	ldr	r3, [pc, #276]	; (8001574 <HAL_RCC_OscConfig+0x628>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a44      	ldr	r2, [pc, #272]	; (8001574 <HAL_RCC_OscConfig+0x628>)
 8001462:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001466:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001468:	4b42      	ldr	r3, [pc, #264]	; (8001574 <HAL_RCC_OscConfig+0x628>)
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	4a41      	ldr	r2, [pc, #260]	; (8001574 <HAL_RCC_OscConfig+0x628>)
 800146e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001472:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001474:	f7ff fa0c 	bl	8000890 <HAL_GetTick>
 8001478:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800147a:	e008      	b.n	800148e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800147c:	f7ff fa08 	bl	8000890 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b02      	cmp	r3, #2
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e06e      	b.n	800156c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800148e:	4b39      	ldr	r3, [pc, #228]	; (8001574 <HAL_RCC_OscConfig+0x628>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d0f0      	beq.n	800147c <HAL_RCC_OscConfig+0x530>
 800149a:	e066      	b.n	800156a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800149c:	4b35      	ldr	r3, [pc, #212]	; (8001574 <HAL_RCC_OscConfig+0x628>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a34      	ldr	r2, [pc, #208]	; (8001574 <HAL_RCC_OscConfig+0x628>)
 80014a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014a6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80014a8:	4b32      	ldr	r3, [pc, #200]	; (8001574 <HAL_RCC_OscConfig+0x628>)
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	4a31      	ldr	r2, [pc, #196]	; (8001574 <HAL_RCC_OscConfig+0x628>)
 80014ae:	f023 0303 	bic.w	r3, r3, #3
 80014b2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80014b4:	4b2f      	ldr	r3, [pc, #188]	; (8001574 <HAL_RCC_OscConfig+0x628>)
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	4a2e      	ldr	r2, [pc, #184]	; (8001574 <HAL_RCC_OscConfig+0x628>)
 80014ba:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80014be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014c2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c4:	f7ff f9e4 	bl	8000890 <HAL_GetTick>
 80014c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014ca:	e008      	b.n	80014de <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014cc:	f7ff f9e0 	bl	8000890 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e046      	b.n	800156c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014de:	4b25      	ldr	r3, [pc, #148]	; (8001574 <HAL_RCC_OscConfig+0x628>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d1f0      	bne.n	80014cc <HAL_RCC_OscConfig+0x580>
 80014ea:	e03e      	b.n	800156a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	69db      	ldr	r3, [r3, #28]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d101      	bne.n	80014f8 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e039      	b.n	800156c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80014f8:	4b1e      	ldr	r3, [pc, #120]	; (8001574 <HAL_RCC_OscConfig+0x628>)
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	f003 0203 	and.w	r2, r3, #3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6a1b      	ldr	r3, [r3, #32]
 8001508:	429a      	cmp	r2, r3
 800150a:	d12c      	bne.n	8001566 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001516:	3b01      	subs	r3, #1
 8001518:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800151a:	429a      	cmp	r2, r3
 800151c:	d123      	bne.n	8001566 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001528:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800152a:	429a      	cmp	r2, r3
 800152c:	d11b      	bne.n	8001566 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001538:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800153a:	429a      	cmp	r2, r3
 800153c:	d113      	bne.n	8001566 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001548:	085b      	lsrs	r3, r3, #1
 800154a:	3b01      	subs	r3, #1
 800154c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800154e:	429a      	cmp	r2, r3
 8001550:	d109      	bne.n	8001566 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800155c:	085b      	lsrs	r3, r3, #1
 800155e:	3b01      	subs	r3, #1
 8001560:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001562:	429a      	cmp	r2, r3
 8001564:	d001      	beq.n	800156a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e000      	b.n	800156c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800156a:	2300      	movs	r3, #0
}
 800156c:	4618      	mov	r0, r3
 800156e:	3720      	adds	r7, #32
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	40021000 	.word	0x40021000
 8001578:	019f800c 	.word	0x019f800c

0800157c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001586:	2300      	movs	r3, #0
 8001588:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d101      	bne.n	8001594 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e11e      	b.n	80017d2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001594:	4b91      	ldr	r3, [pc, #580]	; (80017dc <HAL_RCC_ClockConfig+0x260>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 030f 	and.w	r3, r3, #15
 800159c:	683a      	ldr	r2, [r7, #0]
 800159e:	429a      	cmp	r2, r3
 80015a0:	d910      	bls.n	80015c4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015a2:	4b8e      	ldr	r3, [pc, #568]	; (80017dc <HAL_RCC_ClockConfig+0x260>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f023 020f 	bic.w	r2, r3, #15
 80015aa:	498c      	ldr	r1, [pc, #560]	; (80017dc <HAL_RCC_ClockConfig+0x260>)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015b2:	4b8a      	ldr	r3, [pc, #552]	; (80017dc <HAL_RCC_ClockConfig+0x260>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 030f 	and.w	r3, r3, #15
 80015ba:	683a      	ldr	r2, [r7, #0]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d001      	beq.n	80015c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e106      	b.n	80017d2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0301 	and.w	r3, r3, #1
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d073      	beq.n	80016b8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	2b03      	cmp	r3, #3
 80015d6:	d129      	bne.n	800162c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015d8:	4b81      	ldr	r3, [pc, #516]	; (80017e0 <HAL_RCC_ClockConfig+0x264>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d101      	bne.n	80015e8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e0f4      	b.n	80017d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80015e8:	f000 f9ba 	bl	8001960 <RCC_GetSysClockFreqFromPLLSource>
 80015ec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	4a7c      	ldr	r2, [pc, #496]	; (80017e4 <HAL_RCC_ClockConfig+0x268>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d93f      	bls.n	8001676 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80015f6:	4b7a      	ldr	r3, [pc, #488]	; (80017e0 <HAL_RCC_ClockConfig+0x264>)
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d009      	beq.n	8001616 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800160a:	2b00      	cmp	r3, #0
 800160c:	d033      	beq.n	8001676 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001612:	2b00      	cmp	r3, #0
 8001614:	d12f      	bne.n	8001676 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001616:	4b72      	ldr	r3, [pc, #456]	; (80017e0 <HAL_RCC_ClockConfig+0x264>)
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800161e:	4a70      	ldr	r2, [pc, #448]	; (80017e0 <HAL_RCC_ClockConfig+0x264>)
 8001620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001624:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001626:	2380      	movs	r3, #128	; 0x80
 8001628:	617b      	str	r3, [r7, #20]
 800162a:	e024      	b.n	8001676 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	2b02      	cmp	r3, #2
 8001632:	d107      	bne.n	8001644 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001634:	4b6a      	ldr	r3, [pc, #424]	; (80017e0 <HAL_RCC_ClockConfig+0x264>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d109      	bne.n	8001654 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e0c6      	b.n	80017d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001644:	4b66      	ldr	r3, [pc, #408]	; (80017e0 <HAL_RCC_ClockConfig+0x264>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800164c:	2b00      	cmp	r3, #0
 800164e:	d101      	bne.n	8001654 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e0be      	b.n	80017d2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001654:	f000 f8ce 	bl	80017f4 <HAL_RCC_GetSysClockFreq>
 8001658:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	4a61      	ldr	r2, [pc, #388]	; (80017e4 <HAL_RCC_ClockConfig+0x268>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d909      	bls.n	8001676 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001662:	4b5f      	ldr	r3, [pc, #380]	; (80017e0 <HAL_RCC_ClockConfig+0x264>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800166a:	4a5d      	ldr	r2, [pc, #372]	; (80017e0 <HAL_RCC_ClockConfig+0x264>)
 800166c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001670:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001672:	2380      	movs	r3, #128	; 0x80
 8001674:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001676:	4b5a      	ldr	r3, [pc, #360]	; (80017e0 <HAL_RCC_ClockConfig+0x264>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	f023 0203 	bic.w	r2, r3, #3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	4957      	ldr	r1, [pc, #348]	; (80017e0 <HAL_RCC_ClockConfig+0x264>)
 8001684:	4313      	orrs	r3, r2
 8001686:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001688:	f7ff f902 	bl	8000890 <HAL_GetTick>
 800168c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800168e:	e00a      	b.n	80016a6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001690:	f7ff f8fe 	bl	8000890 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	f241 3288 	movw	r2, #5000	; 0x1388
 800169e:	4293      	cmp	r3, r2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e095      	b.n	80017d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016a6:	4b4e      	ldr	r3, [pc, #312]	; (80017e0 <HAL_RCC_ClockConfig+0x264>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f003 020c 	and.w	r2, r3, #12
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d1eb      	bne.n	8001690 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d023      	beq.n	800170c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0304 	and.w	r3, r3, #4
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d005      	beq.n	80016dc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016d0:	4b43      	ldr	r3, [pc, #268]	; (80017e0 <HAL_RCC_ClockConfig+0x264>)
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	4a42      	ldr	r2, [pc, #264]	; (80017e0 <HAL_RCC_ClockConfig+0x264>)
 80016d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80016da:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0308 	and.w	r3, r3, #8
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d007      	beq.n	80016f8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80016e8:	4b3d      	ldr	r3, [pc, #244]	; (80017e0 <HAL_RCC_ClockConfig+0x264>)
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80016f0:	4a3b      	ldr	r2, [pc, #236]	; (80017e0 <HAL_RCC_ClockConfig+0x264>)
 80016f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80016f6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016f8:	4b39      	ldr	r3, [pc, #228]	; (80017e0 <HAL_RCC_ClockConfig+0x264>)
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	4936      	ldr	r1, [pc, #216]	; (80017e0 <HAL_RCC_ClockConfig+0x264>)
 8001706:	4313      	orrs	r3, r2
 8001708:	608b      	str	r3, [r1, #8]
 800170a:	e008      	b.n	800171e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	2b80      	cmp	r3, #128	; 0x80
 8001710:	d105      	bne.n	800171e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001712:	4b33      	ldr	r3, [pc, #204]	; (80017e0 <HAL_RCC_ClockConfig+0x264>)
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	4a32      	ldr	r2, [pc, #200]	; (80017e0 <HAL_RCC_ClockConfig+0x264>)
 8001718:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800171c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800171e:	4b2f      	ldr	r3, [pc, #188]	; (80017dc <HAL_RCC_ClockConfig+0x260>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 030f 	and.w	r3, r3, #15
 8001726:	683a      	ldr	r2, [r7, #0]
 8001728:	429a      	cmp	r2, r3
 800172a:	d21d      	bcs.n	8001768 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800172c:	4b2b      	ldr	r3, [pc, #172]	; (80017dc <HAL_RCC_ClockConfig+0x260>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f023 020f 	bic.w	r2, r3, #15
 8001734:	4929      	ldr	r1, [pc, #164]	; (80017dc <HAL_RCC_ClockConfig+0x260>)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	4313      	orrs	r3, r2
 800173a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800173c:	f7ff f8a8 	bl	8000890 <HAL_GetTick>
 8001740:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001742:	e00a      	b.n	800175a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001744:	f7ff f8a4 	bl	8000890 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001752:	4293      	cmp	r3, r2
 8001754:	d901      	bls.n	800175a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e03b      	b.n	80017d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800175a:	4b20      	ldr	r3, [pc, #128]	; (80017dc <HAL_RCC_ClockConfig+0x260>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 030f 	and.w	r3, r3, #15
 8001762:	683a      	ldr	r2, [r7, #0]
 8001764:	429a      	cmp	r2, r3
 8001766:	d1ed      	bne.n	8001744 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0304 	and.w	r3, r3, #4
 8001770:	2b00      	cmp	r3, #0
 8001772:	d008      	beq.n	8001786 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001774:	4b1a      	ldr	r3, [pc, #104]	; (80017e0 <HAL_RCC_ClockConfig+0x264>)
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	4917      	ldr	r1, [pc, #92]	; (80017e0 <HAL_RCC_ClockConfig+0x264>)
 8001782:	4313      	orrs	r3, r2
 8001784:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0308 	and.w	r3, r3, #8
 800178e:	2b00      	cmp	r3, #0
 8001790:	d009      	beq.n	80017a6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001792:	4b13      	ldr	r3, [pc, #76]	; (80017e0 <HAL_RCC_ClockConfig+0x264>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	691b      	ldr	r3, [r3, #16]
 800179e:	00db      	lsls	r3, r3, #3
 80017a0:	490f      	ldr	r1, [pc, #60]	; (80017e0 <HAL_RCC_ClockConfig+0x264>)
 80017a2:	4313      	orrs	r3, r2
 80017a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80017a6:	f000 f825 	bl	80017f4 <HAL_RCC_GetSysClockFreq>
 80017aa:	4602      	mov	r2, r0
 80017ac:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <HAL_RCC_ClockConfig+0x264>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	091b      	lsrs	r3, r3, #4
 80017b2:	f003 030f 	and.w	r3, r3, #15
 80017b6:	490c      	ldr	r1, [pc, #48]	; (80017e8 <HAL_RCC_ClockConfig+0x26c>)
 80017b8:	5ccb      	ldrb	r3, [r1, r3]
 80017ba:	f003 031f 	and.w	r3, r3, #31
 80017be:	fa22 f303 	lsr.w	r3, r2, r3
 80017c2:	4a0a      	ldr	r2, [pc, #40]	; (80017ec <HAL_RCC_ClockConfig+0x270>)
 80017c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80017c6:	4b0a      	ldr	r3, [pc, #40]	; (80017f0 <HAL_RCC_ClockConfig+0x274>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7fe ff66 	bl	800069c <HAL_InitTick>
 80017d0:	4603      	mov	r3, r0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3718      	adds	r7, #24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40022000 	.word	0x40022000
 80017e0:	40021000 	.word	0x40021000
 80017e4:	04c4b400 	.word	0x04c4b400
 80017e8:	08005cf0 	.word	0x08005cf0
 80017ec:	20000000 	.word	0x20000000
 80017f0:	20000004 	.word	0x20000004

080017f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b087      	sub	sp, #28
 80017f8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80017fa:	4b2c      	ldr	r3, [pc, #176]	; (80018ac <HAL_RCC_GetSysClockFreq+0xb8>)
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	f003 030c 	and.w	r3, r3, #12
 8001802:	2b04      	cmp	r3, #4
 8001804:	d102      	bne.n	800180c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001806:	4b2a      	ldr	r3, [pc, #168]	; (80018b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001808:	613b      	str	r3, [r7, #16]
 800180a:	e047      	b.n	800189c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800180c:	4b27      	ldr	r3, [pc, #156]	; (80018ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f003 030c 	and.w	r3, r3, #12
 8001814:	2b08      	cmp	r3, #8
 8001816:	d102      	bne.n	800181e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001818:	4b26      	ldr	r3, [pc, #152]	; (80018b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800181a:	613b      	str	r3, [r7, #16]
 800181c:	e03e      	b.n	800189c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800181e:	4b23      	ldr	r3, [pc, #140]	; (80018ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f003 030c 	and.w	r3, r3, #12
 8001826:	2b0c      	cmp	r3, #12
 8001828:	d136      	bne.n	8001898 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800182a:	4b20      	ldr	r3, [pc, #128]	; (80018ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	f003 0303 	and.w	r3, r3, #3
 8001832:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001834:	4b1d      	ldr	r3, [pc, #116]	; (80018ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	091b      	lsrs	r3, r3, #4
 800183a:	f003 030f 	and.w	r3, r3, #15
 800183e:	3301      	adds	r3, #1
 8001840:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	2b03      	cmp	r3, #3
 8001846:	d10c      	bne.n	8001862 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001848:	4a1a      	ldr	r2, [pc, #104]	; (80018b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001850:	4a16      	ldr	r2, [pc, #88]	; (80018ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8001852:	68d2      	ldr	r2, [r2, #12]
 8001854:	0a12      	lsrs	r2, r2, #8
 8001856:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800185a:	fb02 f303 	mul.w	r3, r2, r3
 800185e:	617b      	str	r3, [r7, #20]
      break;
 8001860:	e00c      	b.n	800187c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001862:	4a13      	ldr	r2, [pc, #76]	; (80018b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	fbb2 f3f3 	udiv	r3, r2, r3
 800186a:	4a10      	ldr	r2, [pc, #64]	; (80018ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800186c:	68d2      	ldr	r2, [r2, #12]
 800186e:	0a12      	lsrs	r2, r2, #8
 8001870:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001874:	fb02 f303 	mul.w	r3, r2, r3
 8001878:	617b      	str	r3, [r7, #20]
      break;
 800187a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800187c:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	0e5b      	lsrs	r3, r3, #25
 8001882:	f003 0303 	and.w	r3, r3, #3
 8001886:	3301      	adds	r3, #1
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800188c:	697a      	ldr	r2, [r7, #20]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	fbb2 f3f3 	udiv	r3, r2, r3
 8001894:	613b      	str	r3, [r7, #16]
 8001896:	e001      	b.n	800189c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001898:	2300      	movs	r3, #0
 800189a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800189c:	693b      	ldr	r3, [r7, #16]
}
 800189e:	4618      	mov	r0, r3
 80018a0:	371c      	adds	r7, #28
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	40021000 	.word	0x40021000
 80018b0:	00f42400 	.word	0x00f42400
 80018b4:	016e3600 	.word	0x016e3600

080018b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018bc:	4b03      	ldr	r3, [pc, #12]	; (80018cc <HAL_RCC_GetHCLKFreq+0x14>)
 80018be:	681b      	ldr	r3, [r3, #0]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	20000000 	.word	0x20000000

080018d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80018d4:	f7ff fff0 	bl	80018b8 <HAL_RCC_GetHCLKFreq>
 80018d8:	4602      	mov	r2, r0
 80018da:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	0a1b      	lsrs	r3, r3, #8
 80018e0:	f003 0307 	and.w	r3, r3, #7
 80018e4:	4904      	ldr	r1, [pc, #16]	; (80018f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80018e6:	5ccb      	ldrb	r3, [r1, r3]
 80018e8:	f003 031f 	and.w	r3, r3, #31
 80018ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40021000 	.word	0x40021000
 80018f8:	08005d00 	.word	0x08005d00

080018fc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	220f      	movs	r2, #15
 800190a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800190c:	4b12      	ldr	r3, [pc, #72]	; (8001958 <HAL_RCC_GetClockConfig+0x5c>)
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f003 0203 	and.w	r2, r3, #3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001918:	4b0f      	ldr	r3, [pc, #60]	; (8001958 <HAL_RCC_GetClockConfig+0x5c>)
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001924:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <HAL_RCC_GetClockConfig+0x5c>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001930:	4b09      	ldr	r3, [pc, #36]	; (8001958 <HAL_RCC_GetClockConfig+0x5c>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	08db      	lsrs	r3, r3, #3
 8001936:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800193e:	4b07      	ldr	r3, [pc, #28]	; (800195c <HAL_RCC_GetClockConfig+0x60>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 020f 	and.w	r2, r3, #15
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	601a      	str	r2, [r3, #0]
}
 800194a:	bf00      	nop
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	40021000 	.word	0x40021000
 800195c:	40022000 	.word	0x40022000

08001960 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001960:	b480      	push	{r7}
 8001962:	b087      	sub	sp, #28
 8001964:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001966:	4b1e      	ldr	r3, [pc, #120]	; (80019e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	f003 0303 	and.w	r3, r3, #3
 800196e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001970:	4b1b      	ldr	r3, [pc, #108]	; (80019e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	091b      	lsrs	r3, r3, #4
 8001976:	f003 030f 	and.w	r3, r3, #15
 800197a:	3301      	adds	r3, #1
 800197c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	2b03      	cmp	r3, #3
 8001982:	d10c      	bne.n	800199e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001984:	4a17      	ldr	r2, [pc, #92]	; (80019e4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	fbb2 f3f3 	udiv	r3, r2, r3
 800198c:	4a14      	ldr	r2, [pc, #80]	; (80019e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800198e:	68d2      	ldr	r2, [r2, #12]
 8001990:	0a12      	lsrs	r2, r2, #8
 8001992:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001996:	fb02 f303 	mul.w	r3, r2, r3
 800199a:	617b      	str	r3, [r7, #20]
    break;
 800199c:	e00c      	b.n	80019b8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800199e:	4a12      	ldr	r2, [pc, #72]	; (80019e8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a6:	4a0e      	ldr	r2, [pc, #56]	; (80019e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80019a8:	68d2      	ldr	r2, [r2, #12]
 80019aa:	0a12      	lsrs	r2, r2, #8
 80019ac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80019b0:	fb02 f303 	mul.w	r3, r2, r3
 80019b4:	617b      	str	r3, [r7, #20]
    break;
 80019b6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80019b8:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	0e5b      	lsrs	r3, r3, #25
 80019be:	f003 0303 	and.w	r3, r3, #3
 80019c2:	3301      	adds	r3, #1
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80019c8:	697a      	ldr	r2, [r7, #20]
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80019d0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80019d2:	687b      	ldr	r3, [r7, #4]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	371c      	adds	r7, #28
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	40021000 	.word	0x40021000
 80019e4:	016e3600 	.word	0x016e3600
 80019e8:	00f42400 	.word	0x00f42400

080019ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d101      	bne.n	80019fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e049      	b.n	8001a92 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d106      	bne.n	8001a18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f000 f841 	bl	8001a9a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2202      	movs	r2, #2
 8001a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	3304      	adds	r3, #4
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4610      	mov	r0, r2
 8001a2c:	f000 fa60 	bl	8001ef0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2201      	movs	r2, #1
 8001a34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2201      	movs	r2, #1
 8001a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2201      	movs	r2, #1
 8001a64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2201      	movs	r2, #1
 8001a74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2201      	movs	r2, #1
 8001a84:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	b083      	sub	sp, #12
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
	...

08001ab0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d001      	beq.n	8001ac8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e054      	b.n	8001b72 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2202      	movs	r2, #2
 8001acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	68da      	ldr	r2, [r3, #12]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f042 0201 	orr.w	r2, r2, #1
 8001ade:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a26      	ldr	r2, [pc, #152]	; (8001b80 <HAL_TIM_Base_Start_IT+0xd0>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d022      	beq.n	8001b30 <HAL_TIM_Base_Start_IT+0x80>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001af2:	d01d      	beq.n	8001b30 <HAL_TIM_Base_Start_IT+0x80>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a22      	ldr	r2, [pc, #136]	; (8001b84 <HAL_TIM_Base_Start_IT+0xd4>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d018      	beq.n	8001b30 <HAL_TIM_Base_Start_IT+0x80>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a21      	ldr	r2, [pc, #132]	; (8001b88 <HAL_TIM_Base_Start_IT+0xd8>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d013      	beq.n	8001b30 <HAL_TIM_Base_Start_IT+0x80>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a1f      	ldr	r2, [pc, #124]	; (8001b8c <HAL_TIM_Base_Start_IT+0xdc>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d00e      	beq.n	8001b30 <HAL_TIM_Base_Start_IT+0x80>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a1e      	ldr	r2, [pc, #120]	; (8001b90 <HAL_TIM_Base_Start_IT+0xe0>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d009      	beq.n	8001b30 <HAL_TIM_Base_Start_IT+0x80>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a1c      	ldr	r2, [pc, #112]	; (8001b94 <HAL_TIM_Base_Start_IT+0xe4>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d004      	beq.n	8001b30 <HAL_TIM_Base_Start_IT+0x80>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a1b      	ldr	r2, [pc, #108]	; (8001b98 <HAL_TIM_Base_Start_IT+0xe8>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d115      	bne.n	8001b5c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	689a      	ldr	r2, [r3, #8]
 8001b36:	4b19      	ldr	r3, [pc, #100]	; (8001b9c <HAL_TIM_Base_Start_IT+0xec>)
 8001b38:	4013      	ands	r3, r2
 8001b3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2b06      	cmp	r3, #6
 8001b40:	d015      	beq.n	8001b6e <HAL_TIM_Base_Start_IT+0xbe>
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b48:	d011      	beq.n	8001b6e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f042 0201 	orr.w	r2, r2, #1
 8001b58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b5a:	e008      	b.n	8001b6e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f042 0201 	orr.w	r2, r2, #1
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	e000      	b.n	8001b70 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b6e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3714      	adds	r7, #20
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	40012c00 	.word	0x40012c00
 8001b84:	40000400 	.word	0x40000400
 8001b88:	40000800 	.word	0x40000800
 8001b8c:	40000c00 	.word	0x40000c00
 8001b90:	40013400 	.word	0x40013400
 8001b94:	40014000 	.word	0x40014000
 8001b98:	40015000 	.word	0x40015000
 8001b9c:	00010007 	.word	0x00010007

08001ba0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d122      	bne.n	8001bfc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d11b      	bne.n	8001bfc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f06f 0202 	mvn.w	r2, #2
 8001bcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	f003 0303 	and.w	r3, r3, #3
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d003      	beq.n	8001bea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 f965 	bl	8001eb2 <HAL_TIM_IC_CaptureCallback>
 8001be8:	e005      	b.n	8001bf6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f000 f957 	bl	8001e9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f000 f968 	bl	8001ec6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	f003 0304 	and.w	r3, r3, #4
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	d122      	bne.n	8001c50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	f003 0304 	and.w	r3, r3, #4
 8001c14:	2b04      	cmp	r3, #4
 8001c16:	d11b      	bne.n	8001c50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f06f 0204 	mvn.w	r2, #4
 8001c20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2202      	movs	r2, #2
 8001c26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	699b      	ldr	r3, [r3, #24]
 8001c2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d003      	beq.n	8001c3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 f93b 	bl	8001eb2 <HAL_TIM_IC_CaptureCallback>
 8001c3c:	e005      	b.n	8001c4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f000 f92d 	bl	8001e9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f000 f93e 	bl	8001ec6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	691b      	ldr	r3, [r3, #16]
 8001c56:	f003 0308 	and.w	r3, r3, #8
 8001c5a:	2b08      	cmp	r3, #8
 8001c5c:	d122      	bne.n	8001ca4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	f003 0308 	and.w	r3, r3, #8
 8001c68:	2b08      	cmp	r3, #8
 8001c6a:	d11b      	bne.n	8001ca4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f06f 0208 	mvn.w	r2, #8
 8001c74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2204      	movs	r2, #4
 8001c7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	69db      	ldr	r3, [r3, #28]
 8001c82:	f003 0303 	and.w	r3, r3, #3
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d003      	beq.n	8001c92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 f911 	bl	8001eb2 <HAL_TIM_IC_CaptureCallback>
 8001c90:	e005      	b.n	8001c9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f000 f903 	bl	8001e9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f000 f914 	bl	8001ec6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	691b      	ldr	r3, [r3, #16]
 8001caa:	f003 0310 	and.w	r3, r3, #16
 8001cae:	2b10      	cmp	r3, #16
 8001cb0:	d122      	bne.n	8001cf8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	f003 0310 	and.w	r3, r3, #16
 8001cbc:	2b10      	cmp	r3, #16
 8001cbe:	d11b      	bne.n	8001cf8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f06f 0210 	mvn.w	r2, #16
 8001cc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2208      	movs	r2, #8
 8001cce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	69db      	ldr	r3, [r3, #28]
 8001cd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f000 f8e7 	bl	8001eb2 <HAL_TIM_IC_CaptureCallback>
 8001ce4:	e005      	b.n	8001cf2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 f8d9 	bl	8001e9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f000 f8ea 	bl	8001ec6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	691b      	ldr	r3, [r3, #16]
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d10e      	bne.n	8001d24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	f003 0301 	and.w	r3, r3, #1
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d107      	bne.n	8001d24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f06f 0201 	mvn.w	r2, #1
 8001d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f7fe fc7e 	bl	8000620 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d2e:	2b80      	cmp	r3, #128	; 0x80
 8001d30:	d10e      	bne.n	8001d50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d3c:	2b80      	cmp	r3, #128	; 0x80
 8001d3e:	d107      	bne.n	8001d50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f000 f982 	bl	8002054 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d5e:	d10e      	bne.n	8001d7e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d6a:	2b80      	cmp	r3, #128	; 0x80
 8001d6c:	d107      	bne.n	8001d7e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001d76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f000 f975 	bl	8002068 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	691b      	ldr	r3, [r3, #16]
 8001d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d88:	2b40      	cmp	r3, #64	; 0x40
 8001d8a:	d10e      	bne.n	8001daa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d96:	2b40      	cmp	r3, #64	; 0x40
 8001d98:	d107      	bne.n	8001daa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001da2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f000 f898 	bl	8001eda <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	691b      	ldr	r3, [r3, #16]
 8001db0:	f003 0320 	and.w	r3, r3, #32
 8001db4:	2b20      	cmp	r3, #32
 8001db6:	d10e      	bne.n	8001dd6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	f003 0320 	and.w	r3, r3, #32
 8001dc2:	2b20      	cmp	r3, #32
 8001dc4:	d107      	bne.n	8001dd6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f06f 0220 	mvn.w	r2, #32
 8001dce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f000 f935 	bl	8002040 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	691b      	ldr	r3, [r3, #16]
 8001ddc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001de0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001de4:	d10f      	bne.n	8001e06 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001df0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001df4:	d107      	bne.n	8001e06 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8001dfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f000 f93b 	bl	800207c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001e14:	d10f      	bne.n	8001e36 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001e24:	d107      	bne.n	8001e36 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8001e2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 f92d 	bl	8002090 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	691b      	ldr	r3, [r3, #16]
 8001e3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e44:	d10f      	bne.n	8001e66 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e54:	d107      	bne.n	8001e66 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8001e5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f000 f91f 	bl	80020a4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	691b      	ldr	r3, [r3, #16]
 8001e6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e70:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001e74:	d10f      	bne.n	8001e96 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e80:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001e84:	d107      	bne.n	8001e96 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8001e8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f000 f911 	bl	80020b8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e96:	bf00      	nop
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	b083      	sub	sp, #12
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ea6:	bf00      	nop
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	b083      	sub	sp, #12
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001eba:	bf00      	nop
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr

08001ec6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	b083      	sub	sp, #12
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ece:	bf00      	nop
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr

08001eda <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001eda:	b480      	push	{r7}
 8001edc:	b083      	sub	sp, #12
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ee2:	bf00      	nop
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
	...

08001ef0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a46      	ldr	r2, [pc, #280]	; (800201c <TIM_Base_SetConfig+0x12c>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d017      	beq.n	8001f38 <TIM_Base_SetConfig+0x48>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f0e:	d013      	beq.n	8001f38 <TIM_Base_SetConfig+0x48>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4a43      	ldr	r2, [pc, #268]	; (8002020 <TIM_Base_SetConfig+0x130>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d00f      	beq.n	8001f38 <TIM_Base_SetConfig+0x48>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4a42      	ldr	r2, [pc, #264]	; (8002024 <TIM_Base_SetConfig+0x134>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d00b      	beq.n	8001f38 <TIM_Base_SetConfig+0x48>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4a41      	ldr	r2, [pc, #260]	; (8002028 <TIM_Base_SetConfig+0x138>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d007      	beq.n	8001f38 <TIM_Base_SetConfig+0x48>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4a40      	ldr	r2, [pc, #256]	; (800202c <TIM_Base_SetConfig+0x13c>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d003      	beq.n	8001f38 <TIM_Base_SetConfig+0x48>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4a3f      	ldr	r2, [pc, #252]	; (8002030 <TIM_Base_SetConfig+0x140>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d108      	bne.n	8001f4a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	68fa      	ldr	r2, [r7, #12]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a33      	ldr	r2, [pc, #204]	; (800201c <TIM_Base_SetConfig+0x12c>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d023      	beq.n	8001f9a <TIM_Base_SetConfig+0xaa>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f58:	d01f      	beq.n	8001f9a <TIM_Base_SetConfig+0xaa>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a30      	ldr	r2, [pc, #192]	; (8002020 <TIM_Base_SetConfig+0x130>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d01b      	beq.n	8001f9a <TIM_Base_SetConfig+0xaa>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a2f      	ldr	r2, [pc, #188]	; (8002024 <TIM_Base_SetConfig+0x134>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d017      	beq.n	8001f9a <TIM_Base_SetConfig+0xaa>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a2e      	ldr	r2, [pc, #184]	; (8002028 <TIM_Base_SetConfig+0x138>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d013      	beq.n	8001f9a <TIM_Base_SetConfig+0xaa>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a2d      	ldr	r2, [pc, #180]	; (800202c <TIM_Base_SetConfig+0x13c>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d00f      	beq.n	8001f9a <TIM_Base_SetConfig+0xaa>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a2d      	ldr	r2, [pc, #180]	; (8002034 <TIM_Base_SetConfig+0x144>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d00b      	beq.n	8001f9a <TIM_Base_SetConfig+0xaa>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a2c      	ldr	r2, [pc, #176]	; (8002038 <TIM_Base_SetConfig+0x148>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d007      	beq.n	8001f9a <TIM_Base_SetConfig+0xaa>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a2b      	ldr	r2, [pc, #172]	; (800203c <TIM_Base_SetConfig+0x14c>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d003      	beq.n	8001f9a <TIM_Base_SetConfig+0xaa>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a26      	ldr	r2, [pc, #152]	; (8002030 <TIM_Base_SetConfig+0x140>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d108      	bne.n	8001fac <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fa0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	68fa      	ldr	r2, [r7, #12]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	695b      	ldr	r3, [r3, #20]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	68fa      	ldr	r2, [r7, #12]
 8001fbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	689a      	ldr	r2, [r3, #8]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a12      	ldr	r2, [pc, #72]	; (800201c <TIM_Base_SetConfig+0x12c>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d013      	beq.n	8002000 <TIM_Base_SetConfig+0x110>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a14      	ldr	r2, [pc, #80]	; (800202c <TIM_Base_SetConfig+0x13c>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d00f      	beq.n	8002000 <TIM_Base_SetConfig+0x110>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a14      	ldr	r2, [pc, #80]	; (8002034 <TIM_Base_SetConfig+0x144>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d00b      	beq.n	8002000 <TIM_Base_SetConfig+0x110>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a13      	ldr	r2, [pc, #76]	; (8002038 <TIM_Base_SetConfig+0x148>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d007      	beq.n	8002000 <TIM_Base_SetConfig+0x110>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4a12      	ldr	r2, [pc, #72]	; (800203c <TIM_Base_SetConfig+0x14c>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d003      	beq.n	8002000 <TIM_Base_SetConfig+0x110>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4a0d      	ldr	r2, [pc, #52]	; (8002030 <TIM_Base_SetConfig+0x140>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d103      	bne.n	8002008 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	691a      	ldr	r2, [r3, #16]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	615a      	str	r2, [r3, #20]
}
 800200e:	bf00      	nop
 8002010:	3714      	adds	r7, #20
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	40012c00 	.word	0x40012c00
 8002020:	40000400 	.word	0x40000400
 8002024:	40000800 	.word	0x40000800
 8002028:	40000c00 	.word	0x40000c00
 800202c:	40013400 	.word	0x40013400
 8002030:	40015000 	.word	0x40015000
 8002034:	40014000 	.word	0x40014000
 8002038:	40014400 	.word	0x40014400
 800203c:	40014800 	.word	0x40014800

08002040 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8002098:	bf00      	nop
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f103 0208 	add.w	r2, r3, #8
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f04f 32ff 	mov.w	r2, #4294967295
 80020e4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f103 0208 	add.w	r2, r3, #8
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f103 0208 	add.w	r2, r3, #8
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800211a:	bf00      	nop
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002126:	b480      	push	{r7}
 8002128:	b085      	sub	sp, #20
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
 800212e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	68fa      	ldr	r2, [r7, #12]
 800213a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	689a      	ldr	r2, [r3, #8]
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	683a      	ldr	r2, [r7, #0]
 800214a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	683a      	ldr	r2, [r7, #0]
 8002150:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	1c5a      	adds	r2, r3, #1
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	601a      	str	r2, [r3, #0]
}
 8002162:	bf00      	nop
 8002164:	3714      	adds	r7, #20
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr

0800216e <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800216e:	b480      	push	{r7}
 8002170:	b085      	sub	sp, #20
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	6892      	ldr	r2, [r2, #8]
 8002184:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	6852      	ldr	r2, [r2, #4]
 800218e:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	429a      	cmp	r2, r3
 8002198:	d103      	bne.n	80021a2 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	689a      	ldr	r2, [r3, #8]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	1e5a      	subs	r2, r3, #1
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3714      	adds	r7, #20
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr

080021c2 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b08c      	sub	sp, #48	; 0x30
 80021c6:	af04      	add	r7, sp, #16
 80021c8:	60f8      	str	r0, [r7, #12]
 80021ca:	60b9      	str	r1, [r7, #8]
 80021cc:	603b      	str	r3, [r7, #0]
 80021ce:	4613      	mov	r3, r2
 80021d0:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80021d2:	88fb      	ldrh	r3, [r7, #6]
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	4618      	mov	r0, r3
 80021d8:	f000 fee0 	bl	8002f9c <pvPortMalloc>
 80021dc:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d00e      	beq.n	8002202 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80021e4:	2058      	movs	r0, #88	; 0x58
 80021e6:	f000 fed9 	bl	8002f9c <pvPortMalloc>
 80021ea:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d003      	beq.n	80021fa <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	697a      	ldr	r2, [r7, #20]
 80021f6:	631a      	str	r2, [r3, #48]	; 0x30
 80021f8:	e005      	b.n	8002206 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80021fa:	6978      	ldr	r0, [r7, #20]
 80021fc:	f000 ffae 	bl	800315c <vPortFree>
 8002200:	e001      	b.n	8002206 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002202:	2300      	movs	r3, #0
 8002204:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d013      	beq.n	8002234 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800220c:	88fa      	ldrh	r2, [r7, #6]
 800220e:	2300      	movs	r3, #0
 8002210:	9303      	str	r3, [sp, #12]
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	9302      	str	r3, [sp, #8]
 8002216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002218:	9301      	str	r3, [sp, #4]
 800221a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800221c:	9300      	str	r3, [sp, #0]
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	68b9      	ldr	r1, [r7, #8]
 8002222:	68f8      	ldr	r0, [r7, #12]
 8002224:	f000 f80e 	bl	8002244 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002228:	69f8      	ldr	r0, [r7, #28]
 800222a:	f000 f8a1 	bl	8002370 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800222e:	2301      	movs	r3, #1
 8002230:	61bb      	str	r3, [r7, #24]
 8002232:	e002      	b.n	800223a <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002234:	f04f 33ff 	mov.w	r3, #4294967295
 8002238:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800223a:	69bb      	ldr	r3, [r7, #24]
    }
 800223c:	4618      	mov	r0, r3
 800223e:	3720      	adds	r7, #32
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b088      	sub	sp, #32
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
 8002250:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002254:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	461a      	mov	r2, r3
 800225c:	21a5      	movs	r1, #165	; 0xa5
 800225e:	f003 f81f 	bl	80052a0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002264:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800226c:	3b01      	subs	r3, #1
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	4413      	add	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	f023 0307 	bic.w	r3, r3, #7
 800227a:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00a      	beq.n	800229c <prvInitialiseNewTask+0x58>
        __asm volatile
 8002286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800228a:	f383 8811 	msr	BASEPRI, r3
 800228e:	f3bf 8f6f 	isb	sy
 8002292:	f3bf 8f4f 	dsb	sy
 8002296:	617b      	str	r3, [r7, #20]
    }
 8002298:	bf00      	nop
 800229a:	e7fe      	b.n	800229a <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d01f      	beq.n	80022e2 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80022a2:	2300      	movs	r3, #0
 80022a4:	61fb      	str	r3, [r7, #28]
 80022a6:	e012      	b.n	80022ce <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80022a8:	68ba      	ldr	r2, [r7, #8]
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	4413      	add	r3, r2
 80022ae:	7819      	ldrb	r1, [r3, #0]
 80022b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	4413      	add	r3, r2
 80022b6:	3334      	adds	r3, #52	; 0x34
 80022b8:	460a      	mov	r2, r1
 80022ba:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80022bc:	68ba      	ldr	r2, [r7, #8]
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	4413      	add	r3, r2
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d006      	beq.n	80022d6 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	3301      	adds	r3, #1
 80022cc:	61fb      	str	r3, [r7, #28]
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	2b09      	cmp	r3, #9
 80022d2:	d9e9      	bls.n	80022a8 <prvInitialiseNewTask+0x64>
 80022d4:	e000      	b.n	80022d8 <prvInitialiseNewTask+0x94>
            {
                break;
 80022d6:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80022d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80022e0:	e003      	b.n	80022ea <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80022e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80022ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ec:	2b04      	cmp	r3, #4
 80022ee:	d901      	bls.n	80022f4 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80022f0:	2304      	movs	r3, #4
 80022f2:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80022f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022f8:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80022fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022fe:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002302:	2200      	movs	r2, #0
 8002304:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002308:	3304      	adds	r3, #4
 800230a:	4618      	mov	r0, r3
 800230c:	f7ff fefe 	bl	800210c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002312:	3318      	adds	r3, #24
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff fef9 	bl	800210c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800231a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800231c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800231e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002322:	f1c3 0205 	rsb	r2, r3, #5
 8002326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002328:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800232a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800232c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800232e:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002332:	3350      	adds	r3, #80	; 0x50
 8002334:	2204      	movs	r2, #4
 8002336:	2100      	movs	r1, #0
 8002338:	4618      	mov	r0, r3
 800233a:	f002 ffb1 	bl	80052a0 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800233e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002340:	3354      	adds	r3, #84	; 0x54
 8002342:	2201      	movs	r2, #1
 8002344:	2100      	movs	r1, #0
 8002346:	4618      	mov	r0, r3
 8002348:	f002 ffaa 	bl	80052a0 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800234c:	683a      	ldr	r2, [r7, #0]
 800234e:	68f9      	ldr	r1, [r7, #12]
 8002350:	69b8      	ldr	r0, [r7, #24]
 8002352:	f000 fb49 	bl	80029e8 <pxPortInitialiseStack>
 8002356:	4602      	mov	r2, r0
 8002358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800235a:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800235c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800235e:	2b00      	cmp	r3, #0
 8002360:	d002      	beq.n	8002368 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002364:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002366:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002368:	bf00      	nop
 800236a:	3720      	adds	r7, #32
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}

08002370 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002370:	b5b0      	push	{r4, r5, r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af02      	add	r7, sp, #8
 8002376:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002378:	f000 fce4 	bl	8002d44 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800237c:	4b35      	ldr	r3, [pc, #212]	; (8002454 <prvAddNewTaskToReadyList+0xe4>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	3301      	adds	r3, #1
 8002382:	4a34      	ldr	r2, [pc, #208]	; (8002454 <prvAddNewTaskToReadyList+0xe4>)
 8002384:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002386:	4b34      	ldr	r3, [pc, #208]	; (8002458 <prvAddNewTaskToReadyList+0xe8>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d109      	bne.n	80023a2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800238e:	4a32      	ldr	r2, [pc, #200]	; (8002458 <prvAddNewTaskToReadyList+0xe8>)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002394:	4b2f      	ldr	r3, [pc, #188]	; (8002454 <prvAddNewTaskToReadyList+0xe4>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2b01      	cmp	r3, #1
 800239a:	d110      	bne.n	80023be <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800239c:	f000 fa8a 	bl	80028b4 <prvInitialiseTaskLists>
 80023a0:	e00d      	b.n	80023be <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80023a2:	4b2e      	ldr	r3, [pc, #184]	; (800245c <prvAddNewTaskToReadyList+0xec>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d109      	bne.n	80023be <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80023aa:	4b2b      	ldr	r3, [pc, #172]	; (8002458 <prvAddNewTaskToReadyList+0xe8>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d802      	bhi.n	80023be <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80023b8:	4a27      	ldr	r2, [pc, #156]	; (8002458 <prvAddNewTaskToReadyList+0xe8>)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80023be:	4b28      	ldr	r3, [pc, #160]	; (8002460 <prvAddNewTaskToReadyList+0xf0>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	3301      	adds	r3, #1
 80023c4:	4a26      	ldr	r2, [pc, #152]	; (8002460 <prvAddNewTaskToReadyList+0xf0>)
 80023c6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80023c8:	4b25      	ldr	r3, [pc, #148]	; (8002460 <prvAddNewTaskToReadyList+0xf0>)
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d016      	beq.n	8002404 <prvAddNewTaskToReadyList+0x94>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4618      	mov	r0, r3
 80023da:	f002 fd0b 	bl	8004df4 <SEGGER_SYSVIEW_OnTaskCreate>
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	461d      	mov	r5, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	461c      	mov	r4, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	1ae3      	subs	r3, r4, r3
 80023fc:	9300      	str	r3, [sp, #0]
 80023fe:	462b      	mov	r3, r5
 8002400:	f001 f87a 	bl	80034f8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4618      	mov	r0, r3
 8002408:	f002 fd78 	bl	8004efc <SEGGER_SYSVIEW_OnTaskStartReady>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002410:	2201      	movs	r2, #1
 8002412:	409a      	lsls	r2, r3
 8002414:	4b13      	ldr	r3, [pc, #76]	; (8002464 <prvAddNewTaskToReadyList+0xf4>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4313      	orrs	r3, r2
 800241a:	4a12      	ldr	r2, [pc, #72]	; (8002464 <prvAddNewTaskToReadyList+0xf4>)
 800241c:	6013      	str	r3, [r2, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002422:	4613      	mov	r3, r2
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	4413      	add	r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	4a0f      	ldr	r2, [pc, #60]	; (8002468 <prvAddNewTaskToReadyList+0xf8>)
 800242c:	441a      	add	r2, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	3304      	adds	r3, #4
 8002432:	4619      	mov	r1, r3
 8002434:	4610      	mov	r0, r2
 8002436:	f7ff fe76 	bl	8002126 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800243a:	f000 fcb3 	bl	8002da4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800243e:	4b07      	ldr	r3, [pc, #28]	; (800245c <prvAddNewTaskToReadyList+0xec>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <prvAddNewTaskToReadyList+0xda>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002446:	4b04      	ldr	r3, [pc, #16]	; (8002458 <prvAddNewTaskToReadyList+0xe8>)
 8002448:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800244a:	bf00      	nop
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bdb0      	pop	{r4, r5, r7, pc}
 8002452:	bf00      	nop
 8002454:	200001a8 	.word	0x200001a8
 8002458:	200000d0 	.word	0x200000d0
 800245c:	200001b4 	.word	0x200001b4
 8002460:	200001c4 	.word	0x200001c4
 8002464:	200001b0 	.word	0x200001b0
 8002468:	200000d4 	.word	0x200000d4

0800246c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002472:	4b24      	ldr	r3, [pc, #144]	; (8002504 <vTaskStartScheduler+0x98>)
 8002474:	9301      	str	r3, [sp, #4]
 8002476:	2300      	movs	r3, #0
 8002478:	9300      	str	r3, [sp, #0]
 800247a:	2300      	movs	r3, #0
 800247c:	2282      	movs	r2, #130	; 0x82
 800247e:	4922      	ldr	r1, [pc, #136]	; (8002508 <vTaskStartScheduler+0x9c>)
 8002480:	4822      	ldr	r0, [pc, #136]	; (800250c <vTaskStartScheduler+0xa0>)
 8002482:	f7ff fe9e 	bl	80021c2 <xTaskCreate>
 8002486:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d124      	bne.n	80024d8 <vTaskStartScheduler+0x6c>
        __asm volatile
 800248e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002492:	f383 8811 	msr	BASEPRI, r3
 8002496:	f3bf 8f6f 	isb	sy
 800249a:	f3bf 8f4f 	dsb	sy
 800249e:	60bb      	str	r3, [r7, #8]
    }
 80024a0:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80024a2:	4b1b      	ldr	r3, [pc, #108]	; (8002510 <vTaskStartScheduler+0xa4>)
 80024a4:	f04f 32ff 	mov.w	r2, #4294967295
 80024a8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80024aa:	4b1a      	ldr	r3, [pc, #104]	; (8002514 <vTaskStartScheduler+0xa8>)
 80024ac:	2201      	movs	r2, #1
 80024ae:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80024b0:	4b19      	ldr	r3, [pc, #100]	; (8002518 <vTaskStartScheduler+0xac>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80024b6:	4b19      	ldr	r3, [pc, #100]	; (800251c <vTaskStartScheduler+0xb0>)
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	4b12      	ldr	r3, [pc, #72]	; (8002504 <vTaskStartScheduler+0x98>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d102      	bne.n	80024c8 <vTaskStartScheduler+0x5c>
 80024c2:	f002 fc7b 	bl	8004dbc <SEGGER_SYSVIEW_OnIdle>
 80024c6:	e004      	b.n	80024d2 <vTaskStartScheduler+0x66>
 80024c8:	4b14      	ldr	r3, [pc, #80]	; (800251c <vTaskStartScheduler+0xb0>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f002 fcd3 	bl	8004e78 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80024d2:	f000 fb17 	bl	8002b04 <xPortStartScheduler>
 80024d6:	e00e      	b.n	80024f6 <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024de:	d10a      	bne.n	80024f6 <vTaskStartScheduler+0x8a>
        __asm volatile
 80024e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024e4:	f383 8811 	msr	BASEPRI, r3
 80024e8:	f3bf 8f6f 	isb	sy
 80024ec:	f3bf 8f4f 	dsb	sy
 80024f0:	607b      	str	r3, [r7, #4]
    }
 80024f2:	bf00      	nop
 80024f4:	e7fe      	b.n	80024f4 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80024f6:	4b0a      	ldr	r3, [pc, #40]	; (8002520 <vTaskStartScheduler+0xb4>)
 80024f8:	681b      	ldr	r3, [r3, #0]
}
 80024fa:	bf00      	nop
 80024fc:	3710      	adds	r7, #16
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	200001cc 	.word	0x200001cc
 8002508:	08005c1c 	.word	0x08005c1c
 800250c:	08002891 	.word	0x08002891
 8002510:	200001c8 	.word	0x200001c8
 8002514:	200001b4 	.word	0x200001b4
 8002518:	200001ac 	.word	0x200001ac
 800251c:	200000d0 	.word	0x200000d0
 8002520:	2000000c 	.word	0x2000000c

08002524 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002528:	4b04      	ldr	r3, [pc, #16]	; (800253c <vTaskSuspendAll+0x18>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	3301      	adds	r3, #1
 800252e:	4a03      	ldr	r2, [pc, #12]	; (800253c <vTaskSuspendAll+0x18>)
 8002530:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002532:	bf00      	nop
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr
 800253c:	200001d0 	.word	0x200001d0

08002540 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002546:	2300      	movs	r3, #0
 8002548:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800254a:	2300      	movs	r3, #0
 800254c:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800254e:	4b3d      	ldr	r3, [pc, #244]	; (8002644 <xTaskResumeAll+0x104>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d10a      	bne.n	800256c <xTaskResumeAll+0x2c>
        __asm volatile
 8002556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800255a:	f383 8811 	msr	BASEPRI, r3
 800255e:	f3bf 8f6f 	isb	sy
 8002562:	f3bf 8f4f 	dsb	sy
 8002566:	603b      	str	r3, [r7, #0]
    }
 8002568:	bf00      	nop
 800256a:	e7fe      	b.n	800256a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800256c:	f000 fbea 	bl	8002d44 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002570:	4b34      	ldr	r3, [pc, #208]	; (8002644 <xTaskResumeAll+0x104>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	3b01      	subs	r3, #1
 8002576:	4a33      	ldr	r2, [pc, #204]	; (8002644 <xTaskResumeAll+0x104>)
 8002578:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800257a:	4b32      	ldr	r3, [pc, #200]	; (8002644 <xTaskResumeAll+0x104>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d159      	bne.n	8002636 <xTaskResumeAll+0xf6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002582:	4b31      	ldr	r3, [pc, #196]	; (8002648 <xTaskResumeAll+0x108>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d055      	beq.n	8002636 <xTaskResumeAll+0xf6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800258a:	e032      	b.n	80025f2 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800258c:	4b2f      	ldr	r3, [pc, #188]	; (800264c <xTaskResumeAll+0x10c>)
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	3318      	adds	r3, #24
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff fde8 	bl	800216e <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	3304      	adds	r3, #4
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff fde3 	bl	800216e <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f002 fca6 	bl	8004efc <SEGGER_SYSVIEW_OnTaskStartReady>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b4:	2201      	movs	r2, #1
 80025b6:	409a      	lsls	r2, r3
 80025b8:	4b25      	ldr	r3, [pc, #148]	; (8002650 <xTaskResumeAll+0x110>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4313      	orrs	r3, r2
 80025be:	4a24      	ldr	r2, [pc, #144]	; (8002650 <xTaskResumeAll+0x110>)
 80025c0:	6013      	str	r3, [r2, #0]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025c6:	4613      	mov	r3, r2
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	4413      	add	r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	4a21      	ldr	r2, [pc, #132]	; (8002654 <xTaskResumeAll+0x114>)
 80025d0:	441a      	add	r2, r3
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	3304      	adds	r3, #4
 80025d6:	4619      	mov	r1, r3
 80025d8:	4610      	mov	r0, r2
 80025da:	f7ff fda4 	bl	8002126 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025e2:	4b1d      	ldr	r3, [pc, #116]	; (8002658 <xTaskResumeAll+0x118>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d302      	bcc.n	80025f2 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80025ec:	4b1b      	ldr	r3, [pc, #108]	; (800265c <xTaskResumeAll+0x11c>)
 80025ee:	2201      	movs	r2, #1
 80025f0:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80025f2:	4b16      	ldr	r3, [pc, #88]	; (800264c <xTaskResumeAll+0x10c>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1c8      	bne.n	800258c <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002600:	f000 f9d6 	bl	80029b0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002604:	4b16      	ldr	r3, [pc, #88]	; (8002660 <xTaskResumeAll+0x120>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d010      	beq.n	8002632 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002610:	f000 f83a 	bl	8002688 <xTaskIncrementTick>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d002      	beq.n	8002620 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 800261a:	4b10      	ldr	r3, [pc, #64]	; (800265c <xTaskResumeAll+0x11c>)
 800261c:	2201      	movs	r2, #1
 800261e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	3b01      	subs	r3, #1
 8002624:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d1f1      	bne.n	8002610 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 800262c:	4b0c      	ldr	r3, [pc, #48]	; (8002660 <xTaskResumeAll+0x120>)
 800262e:	2200      	movs	r2, #0
 8002630:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002632:	4b0a      	ldr	r3, [pc, #40]	; (800265c <xTaskResumeAll+0x11c>)
 8002634:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002636:	f000 fbb5 	bl	8002da4 <vPortExitCritical>

    return xAlreadyYielded;
 800263a:	687b      	ldr	r3, [r7, #4]
}
 800263c:	4618      	mov	r0, r3
 800263e:	3710      	adds	r7, #16
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	200001d0 	.word	0x200001d0
 8002648:	200001a8 	.word	0x200001a8
 800264c:	20000168 	.word	0x20000168
 8002650:	200001b0 	.word	0x200001b0
 8002654:	200000d4 	.word	0x200000d4
 8002658:	200000d0 	.word	0x200000d0
 800265c:	200001bc 	.word	0x200001bc
 8002660:	200001b8 	.word	0x200001b8

08002664 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800266a:	f000 fc57 	bl	8002f1c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800266e:	2300      	movs	r3, #0
 8002670:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002672:	4b04      	ldr	r3, [pc, #16]	; (8002684 <xTaskGetTickCountFromISR+0x20>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002678:	683b      	ldr	r3, [r7, #0]
}
 800267a:	4618      	mov	r0, r3
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	200001ac 	.word	0x200001ac

08002688 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800268e:	2300      	movs	r3, #0
 8002690:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002692:	4b41      	ldr	r3, [pc, #260]	; (8002798 <xTaskIncrementTick+0x110>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d173      	bne.n	8002782 <xTaskIncrementTick+0xfa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800269a:	4b40      	ldr	r3, [pc, #256]	; (800279c <xTaskIncrementTick+0x114>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	3301      	adds	r3, #1
 80026a0:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80026a2:	4a3e      	ldr	r2, [pc, #248]	; (800279c <xTaskIncrementTick+0x114>)
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d120      	bne.n	80026f0 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 80026ae:	4b3c      	ldr	r3, [pc, #240]	; (80027a0 <xTaskIncrementTick+0x118>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00a      	beq.n	80026ce <xTaskIncrementTick+0x46>
        __asm volatile
 80026b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026bc:	f383 8811 	msr	BASEPRI, r3
 80026c0:	f3bf 8f6f 	isb	sy
 80026c4:	f3bf 8f4f 	dsb	sy
 80026c8:	603b      	str	r3, [r7, #0]
    }
 80026ca:	bf00      	nop
 80026cc:	e7fe      	b.n	80026cc <xTaskIncrementTick+0x44>
 80026ce:	4b34      	ldr	r3, [pc, #208]	; (80027a0 <xTaskIncrementTick+0x118>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	60fb      	str	r3, [r7, #12]
 80026d4:	4b33      	ldr	r3, [pc, #204]	; (80027a4 <xTaskIncrementTick+0x11c>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a31      	ldr	r2, [pc, #196]	; (80027a0 <xTaskIncrementTick+0x118>)
 80026da:	6013      	str	r3, [r2, #0]
 80026dc:	4a31      	ldr	r2, [pc, #196]	; (80027a4 <xTaskIncrementTick+0x11c>)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6013      	str	r3, [r2, #0]
 80026e2:	4b31      	ldr	r3, [pc, #196]	; (80027a8 <xTaskIncrementTick+0x120>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	3301      	adds	r3, #1
 80026e8:	4a2f      	ldr	r2, [pc, #188]	; (80027a8 <xTaskIncrementTick+0x120>)
 80026ea:	6013      	str	r3, [r2, #0]
 80026ec:	f000 f960 	bl	80029b0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80026f0:	4b2e      	ldr	r3, [pc, #184]	; (80027ac <xTaskIncrementTick+0x124>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	693a      	ldr	r2, [r7, #16]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d348      	bcc.n	800278c <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80026fa:	4b29      	ldr	r3, [pc, #164]	; (80027a0 <xTaskIncrementTick+0x118>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d104      	bne.n	800270e <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002704:	4b29      	ldr	r3, [pc, #164]	; (80027ac <xTaskIncrementTick+0x124>)
 8002706:	f04f 32ff 	mov.w	r2, #4294967295
 800270a:	601a      	str	r2, [r3, #0]
                    break;
 800270c:	e03e      	b.n	800278c <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800270e:	4b24      	ldr	r3, [pc, #144]	; (80027a0 <xTaskIncrementTick+0x118>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	429a      	cmp	r2, r3
 8002724:	d203      	bcs.n	800272e <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002726:	4a21      	ldr	r2, [pc, #132]	; (80027ac <xTaskIncrementTick+0x124>)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800272c:	e02e      	b.n	800278c <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	3304      	adds	r3, #4
 8002732:	4618      	mov	r0, r3
 8002734:	f7ff fd1b 	bl	800216e <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800273c:	2b00      	cmp	r3, #0
 800273e:	d004      	beq.n	800274a <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	3318      	adds	r3, #24
 8002744:	4618      	mov	r0, r3
 8002746:	f7ff fd12 	bl	800216e <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	4618      	mov	r0, r3
 800274e:	f002 fbd5 	bl	8004efc <SEGGER_SYSVIEW_OnTaskStartReady>
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002756:	2201      	movs	r2, #1
 8002758:	409a      	lsls	r2, r3
 800275a:	4b15      	ldr	r3, [pc, #84]	; (80027b0 <xTaskIncrementTick+0x128>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4313      	orrs	r3, r2
 8002760:	4a13      	ldr	r2, [pc, #76]	; (80027b0 <xTaskIncrementTick+0x128>)
 8002762:	6013      	str	r3, [r2, #0]
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002768:	4613      	mov	r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	4413      	add	r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	4a10      	ldr	r2, [pc, #64]	; (80027b4 <xTaskIncrementTick+0x12c>)
 8002772:	441a      	add	r2, r3
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	3304      	adds	r3, #4
 8002778:	4619      	mov	r1, r3
 800277a:	4610      	mov	r0, r2
 800277c:	f7ff fcd3 	bl	8002126 <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002780:	e7bb      	b.n	80026fa <xTaskIncrementTick+0x72>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002782:	4b0d      	ldr	r3, [pc, #52]	; (80027b8 <xTaskIncrementTick+0x130>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	3301      	adds	r3, #1
 8002788:	4a0b      	ldr	r2, [pc, #44]	; (80027b8 <xTaskIncrementTick+0x130>)
 800278a:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800278c:	697b      	ldr	r3, [r7, #20]
}
 800278e:	4618      	mov	r0, r3
 8002790:	3718      	adds	r7, #24
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	200001d0 	.word	0x200001d0
 800279c:	200001ac 	.word	0x200001ac
 80027a0:	20000160 	.word	0x20000160
 80027a4:	20000164 	.word	0x20000164
 80027a8:	200001c0 	.word	0x200001c0
 80027ac:	200001c8 	.word	0x200001c8
 80027b0:	200001b0 	.word	0x200001b0
 80027b4:	200000d4 	.word	0x200000d4
 80027b8:	200001b8 	.word	0x200001b8

080027bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b086      	sub	sp, #24
 80027c0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80027c2:	4b2d      	ldr	r3, [pc, #180]	; (8002878 <vTaskSwitchContext+0xbc>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d003      	beq.n	80027d2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80027ca:	4b2c      	ldr	r3, [pc, #176]	; (800287c <vTaskSwitchContext+0xc0>)
 80027cc:	2201      	movs	r2, #1
 80027ce:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80027d0:	e04d      	b.n	800286e <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 80027d2:	4b2a      	ldr	r3, [pc, #168]	; (800287c <vTaskSwitchContext+0xc0>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80027d8:	4b29      	ldr	r3, [pc, #164]	; (8002880 <vTaskSwitchContext+0xc4>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	fab3 f383 	clz	r3, r3
 80027e4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80027e6:	7afb      	ldrb	r3, [r7, #11]
 80027e8:	f1c3 031f 	rsb	r3, r3, #31
 80027ec:	617b      	str	r3, [r7, #20]
 80027ee:	4925      	ldr	r1, [pc, #148]	; (8002884 <vTaskSwitchContext+0xc8>)
 80027f0:	697a      	ldr	r2, [r7, #20]
 80027f2:	4613      	mov	r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	4413      	add	r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	440b      	add	r3, r1
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d10a      	bne.n	8002818 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002806:	f383 8811 	msr	BASEPRI, r3
 800280a:	f3bf 8f6f 	isb	sy
 800280e:	f3bf 8f4f 	dsb	sy
 8002812:	607b      	str	r3, [r7, #4]
    }
 8002814:	bf00      	nop
 8002816:	e7fe      	b.n	8002816 <vTaskSwitchContext+0x5a>
 8002818:	697a      	ldr	r2, [r7, #20]
 800281a:	4613      	mov	r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	4413      	add	r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	4a18      	ldr	r2, [pc, #96]	; (8002884 <vTaskSwitchContext+0xc8>)
 8002824:	4413      	add	r3, r2
 8002826:	613b      	str	r3, [r7, #16]
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	685a      	ldr	r2, [r3, #4]
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	605a      	str	r2, [r3, #4]
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	685a      	ldr	r2, [r3, #4]
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	3308      	adds	r3, #8
 800283a:	429a      	cmp	r2, r3
 800283c:	d104      	bne.n	8002848 <vTaskSwitchContext+0x8c>
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	685a      	ldr	r2, [r3, #4]
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	605a      	str	r2, [r3, #4]
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	4a0e      	ldr	r2, [pc, #56]	; (8002888 <vTaskSwitchContext+0xcc>)
 8002850:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002852:	4b0d      	ldr	r3, [pc, #52]	; (8002888 <vTaskSwitchContext+0xcc>)
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	4b0d      	ldr	r3, [pc, #52]	; (800288c <vTaskSwitchContext+0xd0>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	429a      	cmp	r2, r3
 800285c:	d102      	bne.n	8002864 <vTaskSwitchContext+0xa8>
 800285e:	f002 faad 	bl	8004dbc <SEGGER_SYSVIEW_OnIdle>
}
 8002862:	e004      	b.n	800286e <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002864:	4b08      	ldr	r3, [pc, #32]	; (8002888 <vTaskSwitchContext+0xcc>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4618      	mov	r0, r3
 800286a:	f002 fb05 	bl	8004e78 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800286e:	bf00      	nop
 8002870:	3718      	adds	r7, #24
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	200001d0 	.word	0x200001d0
 800287c:	200001bc 	.word	0x200001bc
 8002880:	200001b0 	.word	0x200001b0
 8002884:	200000d4 	.word	0x200000d4
 8002888:	200000d0 	.word	0x200000d0
 800288c:	200001cc 	.word	0x200001cc

08002890 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002898:	f000 f84c 	bl	8002934 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 800289c:	4b04      	ldr	r3, [pc, #16]	; (80028b0 <prvIdleTask+0x20>)
 800289e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	f3bf 8f4f 	dsb	sy
 80028a8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80028ac:	e7f4      	b.n	8002898 <prvIdleTask+0x8>
 80028ae:	bf00      	nop
 80028b0:	e000ed04 	.word	0xe000ed04

080028b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80028ba:	2300      	movs	r3, #0
 80028bc:	607b      	str	r3, [r7, #4]
 80028be:	e00c      	b.n	80028da <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	4613      	mov	r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	4413      	add	r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	4a12      	ldr	r2, [pc, #72]	; (8002914 <prvInitialiseTaskLists+0x60>)
 80028cc:	4413      	add	r3, r2
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7ff fbfc 	bl	80020cc <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	3301      	adds	r3, #1
 80028d8:	607b      	str	r3, [r7, #4]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2b04      	cmp	r3, #4
 80028de:	d9ef      	bls.n	80028c0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80028e0:	480d      	ldr	r0, [pc, #52]	; (8002918 <prvInitialiseTaskLists+0x64>)
 80028e2:	f7ff fbf3 	bl	80020cc <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80028e6:	480d      	ldr	r0, [pc, #52]	; (800291c <prvInitialiseTaskLists+0x68>)
 80028e8:	f7ff fbf0 	bl	80020cc <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80028ec:	480c      	ldr	r0, [pc, #48]	; (8002920 <prvInitialiseTaskLists+0x6c>)
 80028ee:	f7ff fbed 	bl	80020cc <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80028f2:	480c      	ldr	r0, [pc, #48]	; (8002924 <prvInitialiseTaskLists+0x70>)
 80028f4:	f7ff fbea 	bl	80020cc <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80028f8:	480b      	ldr	r0, [pc, #44]	; (8002928 <prvInitialiseTaskLists+0x74>)
 80028fa:	f7ff fbe7 	bl	80020cc <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80028fe:	4b0b      	ldr	r3, [pc, #44]	; (800292c <prvInitialiseTaskLists+0x78>)
 8002900:	4a05      	ldr	r2, [pc, #20]	; (8002918 <prvInitialiseTaskLists+0x64>)
 8002902:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002904:	4b0a      	ldr	r3, [pc, #40]	; (8002930 <prvInitialiseTaskLists+0x7c>)
 8002906:	4a05      	ldr	r2, [pc, #20]	; (800291c <prvInitialiseTaskLists+0x68>)
 8002908:	601a      	str	r2, [r3, #0]
}
 800290a:	bf00      	nop
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	200000d4 	.word	0x200000d4
 8002918:	20000138 	.word	0x20000138
 800291c:	2000014c 	.word	0x2000014c
 8002920:	20000168 	.word	0x20000168
 8002924:	2000017c 	.word	0x2000017c
 8002928:	20000194 	.word	0x20000194
 800292c:	20000160 	.word	0x20000160
 8002930:	20000164 	.word	0x20000164

08002934 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800293a:	e019      	b.n	8002970 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800293c:	f000 fa02 	bl	8002d44 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002940:	4b10      	ldr	r3, [pc, #64]	; (8002984 <prvCheckTasksWaitingTermination+0x50>)
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	3304      	adds	r3, #4
 800294c:	4618      	mov	r0, r3
 800294e:	f7ff fc0e 	bl	800216e <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002952:	4b0d      	ldr	r3, [pc, #52]	; (8002988 <prvCheckTasksWaitingTermination+0x54>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	3b01      	subs	r3, #1
 8002958:	4a0b      	ldr	r2, [pc, #44]	; (8002988 <prvCheckTasksWaitingTermination+0x54>)
 800295a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800295c:	4b0b      	ldr	r3, [pc, #44]	; (800298c <prvCheckTasksWaitingTermination+0x58>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	3b01      	subs	r3, #1
 8002962:	4a0a      	ldr	r2, [pc, #40]	; (800298c <prvCheckTasksWaitingTermination+0x58>)
 8002964:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002966:	f000 fa1d 	bl	8002da4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 f810 	bl	8002990 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002970:	4b06      	ldr	r3, [pc, #24]	; (800298c <prvCheckTasksWaitingTermination+0x58>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d1e1      	bne.n	800293c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002978:	bf00      	nop
 800297a:	bf00      	nop
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	2000017c 	.word	0x2000017c
 8002988:	200001a8 	.word	0x200001a8
 800298c:	20000190 	.word	0x20000190

08002990 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299c:	4618      	mov	r0, r3
 800299e:	f000 fbdd 	bl	800315c <vPortFree>
                vPortFree( pxTCB );
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 fbda 	bl	800315c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80029a8:	bf00      	nop
 80029aa:	3708      	adds	r7, #8
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80029b4:	4b0a      	ldr	r3, [pc, #40]	; (80029e0 <prvResetNextTaskUnblockTime+0x30>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d104      	bne.n	80029c8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80029be:	4b09      	ldr	r3, [pc, #36]	; (80029e4 <prvResetNextTaskUnblockTime+0x34>)
 80029c0:	f04f 32ff 	mov.w	r2, #4294967295
 80029c4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80029c6:	e005      	b.n	80029d4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80029c8:	4b05      	ldr	r3, [pc, #20]	; (80029e0 <prvResetNextTaskUnblockTime+0x30>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a04      	ldr	r2, [pc, #16]	; (80029e4 <prvResetNextTaskUnblockTime+0x34>)
 80029d2:	6013      	str	r3, [r2, #0]
}
 80029d4:	bf00      	nop
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	20000160 	.word	0x20000160
 80029e4:	200001c8 	.word	0x200001c8

080029e8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	3b04      	subs	r3, #4
 80029f8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a00:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	3b04      	subs	r3, #4
 8002a06:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	f023 0201 	bic.w	r2, r3, #1
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	3b04      	subs	r3, #4
 8002a16:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002a18:	4a0c      	ldr	r2, [pc, #48]	; (8002a4c <pxPortInitialiseStack+0x64>)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	3b14      	subs	r3, #20
 8002a22:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	3b04      	subs	r3, #4
 8002a2e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f06f 0202 	mvn.w	r2, #2
 8002a36:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	3b20      	subs	r3, #32
 8002a3c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3714      	adds	r7, #20
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr
 8002a4c:	08002a51 	.word	0x08002a51

08002a50 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002a56:	2300      	movs	r3, #0
 8002a58:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002a5a:	4b12      	ldr	r3, [pc, #72]	; (8002aa4 <prvTaskExitError+0x54>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a62:	d00a      	beq.n	8002a7a <prvTaskExitError+0x2a>
        __asm volatile
 8002a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a68:	f383 8811 	msr	BASEPRI, r3
 8002a6c:	f3bf 8f6f 	isb	sy
 8002a70:	f3bf 8f4f 	dsb	sy
 8002a74:	60fb      	str	r3, [r7, #12]
    }
 8002a76:	bf00      	nop
 8002a78:	e7fe      	b.n	8002a78 <prvTaskExitError+0x28>
        __asm volatile
 8002a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a7e:	f383 8811 	msr	BASEPRI, r3
 8002a82:	f3bf 8f6f 	isb	sy
 8002a86:	f3bf 8f4f 	dsb	sy
 8002a8a:	60bb      	str	r3, [r7, #8]
    }
 8002a8c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002a8e:	bf00      	nop
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d0fc      	beq.n	8002a90 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002a96:	bf00      	nop
 8002a98:	bf00      	nop
 8002a9a:	3714      	adds	r7, #20
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr
 8002aa4:	20000010 	.word	0x20000010
	...

08002ab0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002ab0:	4b07      	ldr	r3, [pc, #28]	; (8002ad0 <pxCurrentTCBConst2>)
 8002ab2:	6819      	ldr	r1, [r3, #0]
 8002ab4:	6808      	ldr	r0, [r1, #0]
 8002ab6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002aba:	f380 8809 	msr	PSP, r0
 8002abe:	f3bf 8f6f 	isb	sy
 8002ac2:	f04f 0000 	mov.w	r0, #0
 8002ac6:	f380 8811 	msr	BASEPRI, r0
 8002aca:	4770      	bx	lr
 8002acc:	f3af 8000 	nop.w

08002ad0 <pxCurrentTCBConst2>:
 8002ad0:	200000d0 	.word	0x200000d0
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002ad4:	bf00      	nop
 8002ad6:	bf00      	nop

08002ad8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002ad8:	4808      	ldr	r0, [pc, #32]	; (8002afc <prvPortStartFirstTask+0x24>)
 8002ada:	6800      	ldr	r0, [r0, #0]
 8002adc:	6800      	ldr	r0, [r0, #0]
 8002ade:	f380 8808 	msr	MSP, r0
 8002ae2:	f04f 0000 	mov.w	r0, #0
 8002ae6:	f380 8814 	msr	CONTROL, r0
 8002aea:	b662      	cpsie	i
 8002aec:	b661      	cpsie	f
 8002aee:	f3bf 8f4f 	dsb	sy
 8002af2:	f3bf 8f6f 	isb	sy
 8002af6:	df00      	svc	0
 8002af8:	bf00      	nop
 8002afa:	0000      	.short	0x0000
 8002afc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002b00:	bf00      	nop
 8002b02:	bf00      	nop

08002b04 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b086      	sub	sp, #24
 8002b08:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002b0a:	4b46      	ldr	r3, [pc, #280]	; (8002c24 <xPortStartScheduler+0x120>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a46      	ldr	r2, [pc, #280]	; (8002c28 <xPortStartScheduler+0x124>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d10a      	bne.n	8002b2a <xPortStartScheduler+0x26>
        __asm volatile
 8002b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b18:	f383 8811 	msr	BASEPRI, r3
 8002b1c:	f3bf 8f6f 	isb	sy
 8002b20:	f3bf 8f4f 	dsb	sy
 8002b24:	613b      	str	r3, [r7, #16]
    }
 8002b26:	bf00      	nop
 8002b28:	e7fe      	b.n	8002b28 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002b2a:	4b3e      	ldr	r3, [pc, #248]	; (8002c24 <xPortStartScheduler+0x120>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a3f      	ldr	r2, [pc, #252]	; (8002c2c <xPortStartScheduler+0x128>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d10a      	bne.n	8002b4a <xPortStartScheduler+0x46>
        __asm volatile
 8002b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b38:	f383 8811 	msr	BASEPRI, r3
 8002b3c:	f3bf 8f6f 	isb	sy
 8002b40:	f3bf 8f4f 	dsb	sy
 8002b44:	60fb      	str	r3, [r7, #12]
    }
 8002b46:	bf00      	nop
 8002b48:	e7fe      	b.n	8002b48 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002b4a:	4b39      	ldr	r3, [pc, #228]	; (8002c30 <xPortStartScheduler+0x12c>)
 8002b4c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	22ff      	movs	r2, #255	; 0xff
 8002b5a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002b64:	78fb      	ldrb	r3, [r7, #3]
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002b6c:	b2da      	uxtb	r2, r3
 8002b6e:	4b31      	ldr	r3, [pc, #196]	; (8002c34 <xPortStartScheduler+0x130>)
 8002b70:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002b72:	4b31      	ldr	r3, [pc, #196]	; (8002c38 <xPortStartScheduler+0x134>)
 8002b74:	2207      	movs	r2, #7
 8002b76:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002b78:	e009      	b.n	8002b8e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002b7a:	4b2f      	ldr	r3, [pc, #188]	; (8002c38 <xPortStartScheduler+0x134>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	4a2d      	ldr	r2, [pc, #180]	; (8002c38 <xPortStartScheduler+0x134>)
 8002b82:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002b84:	78fb      	ldrb	r3, [r7, #3]
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002b8e:	78fb      	ldrb	r3, [r7, #3]
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b96:	2b80      	cmp	r3, #128	; 0x80
 8002b98:	d0ef      	beq.n	8002b7a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002b9a:	4b27      	ldr	r3, [pc, #156]	; (8002c38 <xPortStartScheduler+0x134>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f1c3 0307 	rsb	r3, r3, #7
 8002ba2:	2b04      	cmp	r3, #4
 8002ba4:	d00a      	beq.n	8002bbc <xPortStartScheduler+0xb8>
        __asm volatile
 8002ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002baa:	f383 8811 	msr	BASEPRI, r3
 8002bae:	f3bf 8f6f 	isb	sy
 8002bb2:	f3bf 8f4f 	dsb	sy
 8002bb6:	60bb      	str	r3, [r7, #8]
    }
 8002bb8:	bf00      	nop
 8002bba:	e7fe      	b.n	8002bba <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002bbc:	4b1e      	ldr	r3, [pc, #120]	; (8002c38 <xPortStartScheduler+0x134>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	021b      	lsls	r3, r3, #8
 8002bc2:	4a1d      	ldr	r2, [pc, #116]	; (8002c38 <xPortStartScheduler+0x134>)
 8002bc4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002bc6:	4b1c      	ldr	r3, [pc, #112]	; (8002c38 <xPortStartScheduler+0x134>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002bce:	4a1a      	ldr	r2, [pc, #104]	; (8002c38 <xPortStartScheduler+0x134>)
 8002bd0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	b2da      	uxtb	r2, r3
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002bda:	4b18      	ldr	r3, [pc, #96]	; (8002c3c <xPortStartScheduler+0x138>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a17      	ldr	r2, [pc, #92]	; (8002c3c <xPortStartScheduler+0x138>)
 8002be0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002be4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002be6:	4b15      	ldr	r3, [pc, #84]	; (8002c3c <xPortStartScheduler+0x138>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a14      	ldr	r2, [pc, #80]	; (8002c3c <xPortStartScheduler+0x138>)
 8002bec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002bf0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002bf2:	f000 f963 	bl	8002ebc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002bf6:	4b12      	ldr	r3, [pc, #72]	; (8002c40 <xPortStartScheduler+0x13c>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002bfc:	f000 f982 	bl	8002f04 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002c00:	4b10      	ldr	r3, [pc, #64]	; (8002c44 <xPortStartScheduler+0x140>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a0f      	ldr	r2, [pc, #60]	; (8002c44 <xPortStartScheduler+0x140>)
 8002c06:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002c0a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002c0c:	f7ff ff64 	bl	8002ad8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002c10:	f7ff fdd4 	bl	80027bc <vTaskSwitchContext>
    prvTaskExitError();
 8002c14:	f7ff ff1c 	bl	8002a50 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3718      	adds	r7, #24
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	e000ed00 	.word	0xe000ed00
 8002c28:	410fc271 	.word	0x410fc271
 8002c2c:	410fc270 	.word	0x410fc270
 8002c30:	e000e400 	.word	0xe000e400
 8002c34:	200001d4 	.word	0x200001d4
 8002c38:	200001d8 	.word	0x200001d8
 8002c3c:	e000ed20 	.word	0xe000ed20
 8002c40:	20000010 	.word	0x20000010
 8002c44:	e000ef34 	.word	0xe000ef34

08002c48 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b087      	sub	sp, #28
 8002c4c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002c4e:	4b37      	ldr	r3, [pc, #220]	; (8002d2c <vInitPrioGroupValue+0xe4>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a37      	ldr	r2, [pc, #220]	; (8002d30 <vInitPrioGroupValue+0xe8>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d10a      	bne.n	8002c6e <vInitPrioGroupValue+0x26>
        __asm volatile
 8002c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c5c:	f383 8811 	msr	BASEPRI, r3
 8002c60:	f3bf 8f6f 	isb	sy
 8002c64:	f3bf 8f4f 	dsb	sy
 8002c68:	613b      	str	r3, [r7, #16]
    }
 8002c6a:	bf00      	nop
 8002c6c:	e7fe      	b.n	8002c6c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002c6e:	4b2f      	ldr	r3, [pc, #188]	; (8002d2c <vInitPrioGroupValue+0xe4>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a30      	ldr	r2, [pc, #192]	; (8002d34 <vInitPrioGroupValue+0xec>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d10a      	bne.n	8002c8e <vInitPrioGroupValue+0x46>
        __asm volatile
 8002c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c7c:	f383 8811 	msr	BASEPRI, r3
 8002c80:	f3bf 8f6f 	isb	sy
 8002c84:	f3bf 8f4f 	dsb	sy
 8002c88:	60fb      	str	r3, [r7, #12]
    }
 8002c8a:	bf00      	nop
 8002c8c:	e7fe      	b.n	8002c8c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002c8e:	4b2a      	ldr	r3, [pc, #168]	; (8002d38 <vInitPrioGroupValue+0xf0>)
 8002c90:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	22ff      	movs	r2, #255	; 0xff
 8002c9e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002ca8:	78fb      	ldrb	r3, [r7, #3]
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002cb0:	b2da      	uxtb	r2, r3
 8002cb2:	4b22      	ldr	r3, [pc, #136]	; (8002d3c <vInitPrioGroupValue+0xf4>)
 8002cb4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002cb6:	4b22      	ldr	r3, [pc, #136]	; (8002d40 <vInitPrioGroupValue+0xf8>)
 8002cb8:	2207      	movs	r2, #7
 8002cba:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002cbc:	e009      	b.n	8002cd2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002cbe:	4b20      	ldr	r3, [pc, #128]	; (8002d40 <vInitPrioGroupValue+0xf8>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	4a1e      	ldr	r2, [pc, #120]	; (8002d40 <vInitPrioGroupValue+0xf8>)
 8002cc6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002cc8:	78fb      	ldrb	r3, [r7, #3]
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002cd2:	78fb      	ldrb	r3, [r7, #3]
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cda:	2b80      	cmp	r3, #128	; 0x80
 8002cdc:	d0ef      	beq.n	8002cbe <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002cde:	4b18      	ldr	r3, [pc, #96]	; (8002d40 <vInitPrioGroupValue+0xf8>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f1c3 0307 	rsb	r3, r3, #7
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d00a      	beq.n	8002d00 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8002cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cee:	f383 8811 	msr	BASEPRI, r3
 8002cf2:	f3bf 8f6f 	isb	sy
 8002cf6:	f3bf 8f4f 	dsb	sy
 8002cfa:	60bb      	str	r3, [r7, #8]
    }
 8002cfc:	bf00      	nop
 8002cfe:	e7fe      	b.n	8002cfe <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002d00:	4b0f      	ldr	r3, [pc, #60]	; (8002d40 <vInitPrioGroupValue+0xf8>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	021b      	lsls	r3, r3, #8
 8002d06:	4a0e      	ldr	r2, [pc, #56]	; (8002d40 <vInitPrioGroupValue+0xf8>)
 8002d08:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002d0a:	4b0d      	ldr	r3, [pc, #52]	; (8002d40 <vInitPrioGroupValue+0xf8>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d12:	4a0b      	ldr	r2, [pc, #44]	; (8002d40 <vInitPrioGroupValue+0xf8>)
 8002d14:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	b2da      	uxtb	r2, r3
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8002d1e:	bf00      	nop
 8002d20:	371c      	adds	r7, #28
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	e000ed00 	.word	0xe000ed00
 8002d30:	410fc271 	.word	0x410fc271
 8002d34:	410fc270 	.word	0x410fc270
 8002d38:	e000e400 	.word	0xe000e400
 8002d3c:	200001d4 	.word	0x200001d4
 8002d40:	200001d8 	.word	0x200001d8

08002d44 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
        __asm volatile
 8002d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d4e:	f383 8811 	msr	BASEPRI, r3
 8002d52:	f3bf 8f6f 	isb	sy
 8002d56:	f3bf 8f4f 	dsb	sy
 8002d5a:	607b      	str	r3, [r7, #4]
    }
 8002d5c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002d5e:	4b0f      	ldr	r3, [pc, #60]	; (8002d9c <vPortEnterCritical+0x58>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	3301      	adds	r3, #1
 8002d64:	4a0d      	ldr	r2, [pc, #52]	; (8002d9c <vPortEnterCritical+0x58>)
 8002d66:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002d68:	4b0c      	ldr	r3, [pc, #48]	; (8002d9c <vPortEnterCritical+0x58>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d10f      	bne.n	8002d90 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002d70:	4b0b      	ldr	r3, [pc, #44]	; (8002da0 <vPortEnterCritical+0x5c>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00a      	beq.n	8002d90 <vPortEnterCritical+0x4c>
        __asm volatile
 8002d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d7e:	f383 8811 	msr	BASEPRI, r3
 8002d82:	f3bf 8f6f 	isb	sy
 8002d86:	f3bf 8f4f 	dsb	sy
 8002d8a:	603b      	str	r3, [r7, #0]
    }
 8002d8c:	bf00      	nop
 8002d8e:	e7fe      	b.n	8002d8e <vPortEnterCritical+0x4a>
    }
}
 8002d90:	bf00      	nop
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr
 8002d9c:	20000010 	.word	0x20000010
 8002da0:	e000ed04 	.word	0xe000ed04

08002da4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002daa:	4b12      	ldr	r3, [pc, #72]	; (8002df4 <vPortExitCritical+0x50>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d10a      	bne.n	8002dc8 <vPortExitCritical+0x24>
        __asm volatile
 8002db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db6:	f383 8811 	msr	BASEPRI, r3
 8002dba:	f3bf 8f6f 	isb	sy
 8002dbe:	f3bf 8f4f 	dsb	sy
 8002dc2:	607b      	str	r3, [r7, #4]
    }
 8002dc4:	bf00      	nop
 8002dc6:	e7fe      	b.n	8002dc6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002dc8:	4b0a      	ldr	r3, [pc, #40]	; (8002df4 <vPortExitCritical+0x50>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	4a09      	ldr	r2, [pc, #36]	; (8002df4 <vPortExitCritical+0x50>)
 8002dd0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002dd2:	4b08      	ldr	r3, [pc, #32]	; (8002df4 <vPortExitCritical+0x50>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d105      	bne.n	8002de6 <vPortExitCritical+0x42>
 8002dda:	2300      	movs	r3, #0
 8002ddc:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002de4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002de6:	bf00      	nop
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	20000010 	.word	0x20000010
	...

08002e00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002e00:	f3ef 8009 	mrs	r0, PSP
 8002e04:	f3bf 8f6f 	isb	sy
 8002e08:	4b15      	ldr	r3, [pc, #84]	; (8002e60 <pxCurrentTCBConst>)
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	f01e 0f10 	tst.w	lr, #16
 8002e10:	bf08      	it	eq
 8002e12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002e16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e1a:	6010      	str	r0, [r2, #0]
 8002e1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002e20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002e24:	f380 8811 	msr	BASEPRI, r0
 8002e28:	f3bf 8f4f 	dsb	sy
 8002e2c:	f3bf 8f6f 	isb	sy
 8002e30:	f7ff fcc4 	bl	80027bc <vTaskSwitchContext>
 8002e34:	f04f 0000 	mov.w	r0, #0
 8002e38:	f380 8811 	msr	BASEPRI, r0
 8002e3c:	bc09      	pop	{r0, r3}
 8002e3e:	6819      	ldr	r1, [r3, #0]
 8002e40:	6808      	ldr	r0, [r1, #0]
 8002e42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e46:	f01e 0f10 	tst.w	lr, #16
 8002e4a:	bf08      	it	eq
 8002e4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002e50:	f380 8809 	msr	PSP, r0
 8002e54:	f3bf 8f6f 	isb	sy
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	f3af 8000 	nop.w

08002e60 <pxCurrentTCBConst>:
 8002e60:	200000d0 	.word	0x200000d0
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002e64:	bf00      	nop
 8002e66:	bf00      	nop

08002e68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
        __asm volatile
 8002e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e72:	f383 8811 	msr	BASEPRI, r3
 8002e76:	f3bf 8f6f 	isb	sy
 8002e7a:	f3bf 8f4f 	dsb	sy
 8002e7e:	607b      	str	r3, [r7, #4]
    }
 8002e80:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8002e82:	f001 ff21 	bl	8004cc8 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002e86:	f7ff fbff 	bl	8002688 <xTaskIncrementTick>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d006      	beq.n	8002e9e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8002e90:	f001 ff78 	bl	8004d84 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002e94:	4b08      	ldr	r3, [pc, #32]	; (8002eb8 <SysTick_Handler+0x50>)
 8002e96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e9a:	601a      	str	r2, [r3, #0]
 8002e9c:	e001      	b.n	8002ea2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8002e9e:	f001 ff55 	bl	8004d4c <SEGGER_SYSVIEW_RecordExitISR>
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	f383 8811 	msr	BASEPRI, r3
    }
 8002eac:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8002eae:	bf00      	nop
 8002eb0:	3708      	adds	r7, #8
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	e000ed04 	.word	0xe000ed04

08002ebc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002ec0:	4b0b      	ldr	r3, [pc, #44]	; (8002ef0 <vPortSetupTimerInterrupt+0x34>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002ec6:	4b0b      	ldr	r3, [pc, #44]	; (8002ef4 <vPortSetupTimerInterrupt+0x38>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002ecc:	4b0a      	ldr	r3, [pc, #40]	; (8002ef8 <vPortSetupTimerInterrupt+0x3c>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a0a      	ldr	r2, [pc, #40]	; (8002efc <vPortSetupTimerInterrupt+0x40>)
 8002ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed6:	099b      	lsrs	r3, r3, #6
 8002ed8:	4a09      	ldr	r2, [pc, #36]	; (8002f00 <vPortSetupTimerInterrupt+0x44>)
 8002eda:	3b01      	subs	r3, #1
 8002edc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002ede:	4b04      	ldr	r3, [pc, #16]	; (8002ef0 <vPortSetupTimerInterrupt+0x34>)
 8002ee0:	2207      	movs	r2, #7
 8002ee2:	601a      	str	r2, [r3, #0]
}
 8002ee4:	bf00      	nop
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	e000e010 	.word	0xe000e010
 8002ef4:	e000e018 	.word	0xe000e018
 8002ef8:	20000000 	.word	0x20000000
 8002efc:	10624dd3 	.word	0x10624dd3
 8002f00:	e000e014 	.word	0xe000e014

08002f04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002f04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002f14 <vPortEnableVFP+0x10>
 8002f08:	6801      	ldr	r1, [r0, #0]
 8002f0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002f0e:	6001      	str	r1, [r0, #0]
 8002f10:	4770      	bx	lr
 8002f12:	0000      	.short	0x0000
 8002f14:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002f18:	bf00      	nop
 8002f1a:	bf00      	nop

08002f1c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8002f1c:	b480      	push	{r7}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8002f22:	f3ef 8305 	mrs	r3, IPSR
 8002f26:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2b0f      	cmp	r3, #15
 8002f2c:	d914      	bls.n	8002f58 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002f2e:	4a17      	ldr	r2, [pc, #92]	; (8002f8c <vPortValidateInterruptPriority+0x70>)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	4413      	add	r3, r2
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002f38:	4b15      	ldr	r3, [pc, #84]	; (8002f90 <vPortValidateInterruptPriority+0x74>)
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	7afa      	ldrb	r2, [r7, #11]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d20a      	bcs.n	8002f58 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8002f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f46:	f383 8811 	msr	BASEPRI, r3
 8002f4a:	f3bf 8f6f 	isb	sy
 8002f4e:	f3bf 8f4f 	dsb	sy
 8002f52:	607b      	str	r3, [r7, #4]
    }
 8002f54:	bf00      	nop
 8002f56:	e7fe      	b.n	8002f56 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002f58:	4b0e      	ldr	r3, [pc, #56]	; (8002f94 <vPortValidateInterruptPriority+0x78>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002f60:	4b0d      	ldr	r3, [pc, #52]	; (8002f98 <vPortValidateInterruptPriority+0x7c>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d90a      	bls.n	8002f7e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8002f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f6c:	f383 8811 	msr	BASEPRI, r3
 8002f70:	f3bf 8f6f 	isb	sy
 8002f74:	f3bf 8f4f 	dsb	sy
 8002f78:	603b      	str	r3, [r7, #0]
    }
 8002f7a:	bf00      	nop
 8002f7c:	e7fe      	b.n	8002f7c <vPortValidateInterruptPriority+0x60>
    }
 8002f7e:	bf00      	nop
 8002f80:	3714      	adds	r7, #20
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	e000e3f0 	.word	0xe000e3f0
 8002f90:	200001d4 	.word	0x200001d4
 8002f94:	e000ed0c 	.word	0xe000ed0c
 8002f98:	200001d8 	.word	0x200001d8

08002f9c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b08a      	sub	sp, #40	; 0x28
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8002fa8:	f7ff fabc 	bl	8002524 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002fac:	4b65      	ldr	r3, [pc, #404]	; (8003144 <pvPortMalloc+0x1a8>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d101      	bne.n	8002fb8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002fb4:	f000 f934 	bl	8003220 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002fb8:	4b63      	ldr	r3, [pc, #396]	; (8003148 <pvPortMalloc+0x1ac>)
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f040 80a7 	bne.w	8003114 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d02d      	beq.n	8003028 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8002fcc:	2208      	movs	r2, #8
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d227      	bcs.n	8003028 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8002fd8:	2208      	movs	r2, #8
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4413      	add	r3, r2
 8002fde:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f003 0307 	and.w	r3, r3, #7
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d021      	beq.n	800302e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f023 0307 	bic.w	r3, r3, #7
 8002ff0:	3308      	adds	r3, #8
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d214      	bcs.n	8003022 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f023 0307 	bic.w	r3, r3, #7
 8002ffe:	3308      	adds	r3, #8
 8003000:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f003 0307 	and.w	r3, r3, #7
 8003008:	2b00      	cmp	r3, #0
 800300a:	d010      	beq.n	800302e <pvPortMalloc+0x92>
        __asm volatile
 800300c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003010:	f383 8811 	msr	BASEPRI, r3
 8003014:	f3bf 8f6f 	isb	sy
 8003018:	f3bf 8f4f 	dsb	sy
 800301c:	617b      	str	r3, [r7, #20]
    }
 800301e:	bf00      	nop
 8003020:	e7fe      	b.n	8003020 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003022:	2300      	movs	r3, #0
 8003024:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003026:	e002      	b.n	800302e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8003028:	2300      	movs	r3, #0
 800302a:	607b      	str	r3, [r7, #4]
 800302c:	e000      	b.n	8003030 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800302e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d06e      	beq.n	8003114 <pvPortMalloc+0x178>
 8003036:	4b45      	ldr	r3, [pc, #276]	; (800314c <pvPortMalloc+0x1b0>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	429a      	cmp	r2, r3
 800303e:	d869      	bhi.n	8003114 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003040:	4b43      	ldr	r3, [pc, #268]	; (8003150 <pvPortMalloc+0x1b4>)
 8003042:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003044:	4b42      	ldr	r3, [pc, #264]	; (8003150 <pvPortMalloc+0x1b4>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800304a:	e004      	b.n	8003056 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800304c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	429a      	cmp	r2, r3
 800305e:	d903      	bls.n	8003068 <pvPortMalloc+0xcc>
 8003060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d1f1      	bne.n	800304c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003068:	4b36      	ldr	r3, [pc, #216]	; (8003144 <pvPortMalloc+0x1a8>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800306e:	429a      	cmp	r2, r3
 8003070:	d050      	beq.n	8003114 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003072:	6a3b      	ldr	r3, [r7, #32]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2208      	movs	r2, #8
 8003078:	4413      	add	r3, r2
 800307a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800307c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	6a3b      	ldr	r3, [r7, #32]
 8003082:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003086:	685a      	ldr	r2, [r3, #4]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	1ad2      	subs	r2, r2, r3
 800308c:	2308      	movs	r3, #8
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	429a      	cmp	r2, r3
 8003092:	d91f      	bls.n	80030d4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003094:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4413      	add	r3, r2
 800309a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	f003 0307 	and.w	r3, r3, #7
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00a      	beq.n	80030bc <pvPortMalloc+0x120>
        __asm volatile
 80030a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030aa:	f383 8811 	msr	BASEPRI, r3
 80030ae:	f3bf 8f6f 	isb	sy
 80030b2:	f3bf 8f4f 	dsb	sy
 80030b6:	613b      	str	r3, [r7, #16]
    }
 80030b8:	bf00      	nop
 80030ba:	e7fe      	b.n	80030ba <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80030bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030be:	685a      	ldr	r2, [r3, #4]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	1ad2      	subs	r2, r2, r3
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80030c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80030ce:	69b8      	ldr	r0, [r7, #24]
 80030d0:	f000 f908 	bl	80032e4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80030d4:	4b1d      	ldr	r3, [pc, #116]	; (800314c <pvPortMalloc+0x1b0>)
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	4a1b      	ldr	r2, [pc, #108]	; (800314c <pvPortMalloc+0x1b0>)
 80030e0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80030e2:	4b1a      	ldr	r3, [pc, #104]	; (800314c <pvPortMalloc+0x1b0>)
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	4b1b      	ldr	r3, [pc, #108]	; (8003154 <pvPortMalloc+0x1b8>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d203      	bcs.n	80030f6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80030ee:	4b17      	ldr	r3, [pc, #92]	; (800314c <pvPortMalloc+0x1b0>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a18      	ldr	r2, [pc, #96]	; (8003154 <pvPortMalloc+0x1b8>)
 80030f4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80030f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f8:	685a      	ldr	r2, [r3, #4]
 80030fa:	4b13      	ldr	r3, [pc, #76]	; (8003148 <pvPortMalloc+0x1ac>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	431a      	orrs	r2, r3
 8003100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003102:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003106:	2200      	movs	r2, #0
 8003108:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800310a:	4b13      	ldr	r3, [pc, #76]	; (8003158 <pvPortMalloc+0x1bc>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	3301      	adds	r3, #1
 8003110:	4a11      	ldr	r2, [pc, #68]	; (8003158 <pvPortMalloc+0x1bc>)
 8003112:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003114:	f7ff fa14 	bl	8002540 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	f003 0307 	and.w	r3, r3, #7
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00a      	beq.n	8003138 <pvPortMalloc+0x19c>
        __asm volatile
 8003122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003126:	f383 8811 	msr	BASEPRI, r3
 800312a:	f3bf 8f6f 	isb	sy
 800312e:	f3bf 8f4f 	dsb	sy
 8003132:	60fb      	str	r3, [r7, #12]
    }
 8003134:	bf00      	nop
 8003136:	e7fe      	b.n	8003136 <pvPortMalloc+0x19a>
    return pvReturn;
 8003138:	69fb      	ldr	r3, [r7, #28]
}
 800313a:	4618      	mov	r0, r3
 800313c:	3728      	adds	r7, #40	; 0x28
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	20012de4 	.word	0x20012de4
 8003148:	20012df8 	.word	0x20012df8
 800314c:	20012de8 	.word	0x20012de8
 8003150:	20012ddc 	.word	0x20012ddc
 8003154:	20012dec 	.word	0x20012dec
 8003158:	20012df0 	.word	0x20012df0

0800315c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b086      	sub	sp, #24
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d04d      	beq.n	800320a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800316e:	2308      	movs	r3, #8
 8003170:	425b      	negs	r3, r3
 8003172:	697a      	ldr	r2, [r7, #20]
 8003174:	4413      	add	r3, r2
 8003176:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	685a      	ldr	r2, [r3, #4]
 8003180:	4b24      	ldr	r3, [pc, #144]	; (8003214 <vPortFree+0xb8>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4013      	ands	r3, r2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10a      	bne.n	80031a0 <vPortFree+0x44>
        __asm volatile
 800318a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800318e:	f383 8811 	msr	BASEPRI, r3
 8003192:	f3bf 8f6f 	isb	sy
 8003196:	f3bf 8f4f 	dsb	sy
 800319a:	60fb      	str	r3, [r7, #12]
    }
 800319c:	bf00      	nop
 800319e:	e7fe      	b.n	800319e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d00a      	beq.n	80031be <vPortFree+0x62>
        __asm volatile
 80031a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ac:	f383 8811 	msr	BASEPRI, r3
 80031b0:	f3bf 8f6f 	isb	sy
 80031b4:	f3bf 8f4f 	dsb	sy
 80031b8:	60bb      	str	r3, [r7, #8]
    }
 80031ba:	bf00      	nop
 80031bc:	e7fe      	b.n	80031bc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	685a      	ldr	r2, [r3, #4]
 80031c2:	4b14      	ldr	r3, [pc, #80]	; (8003214 <vPortFree+0xb8>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4013      	ands	r3, r2
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d01e      	beq.n	800320a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d11a      	bne.n	800320a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	685a      	ldr	r2, [r3, #4]
 80031d8:	4b0e      	ldr	r3, [pc, #56]	; (8003214 <vPortFree+0xb8>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	43db      	mvns	r3, r3
 80031de:	401a      	ands	r2, r3
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80031e4:	f7ff f99e 	bl	8002524 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	4b0a      	ldr	r3, [pc, #40]	; (8003218 <vPortFree+0xbc>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4413      	add	r3, r2
 80031f2:	4a09      	ldr	r2, [pc, #36]	; (8003218 <vPortFree+0xbc>)
 80031f4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80031f6:	6938      	ldr	r0, [r7, #16]
 80031f8:	f000 f874 	bl	80032e4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80031fc:	4b07      	ldr	r3, [pc, #28]	; (800321c <vPortFree+0xc0>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	3301      	adds	r3, #1
 8003202:	4a06      	ldr	r2, [pc, #24]	; (800321c <vPortFree+0xc0>)
 8003204:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003206:	f7ff f99b 	bl	8002540 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800320a:	bf00      	nop
 800320c:	3718      	adds	r7, #24
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	20012df8 	.word	0x20012df8
 8003218:	20012de8 	.word	0x20012de8
 800321c:	20012df4 	.word	0x20012df4

08003220 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003226:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800322a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800322c:	4b27      	ldr	r3, [pc, #156]	; (80032cc <prvHeapInit+0xac>)
 800322e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	2b00      	cmp	r3, #0
 8003238:	d00c      	beq.n	8003254 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	3307      	adds	r3, #7
 800323e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f023 0307 	bic.w	r3, r3, #7
 8003246:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003248:	68ba      	ldr	r2, [r7, #8]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	4a1f      	ldr	r2, [pc, #124]	; (80032cc <prvHeapInit+0xac>)
 8003250:	4413      	add	r3, r2
 8003252:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003258:	4a1d      	ldr	r2, [pc, #116]	; (80032d0 <prvHeapInit+0xb0>)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800325e:	4b1c      	ldr	r3, [pc, #112]	; (80032d0 <prvHeapInit+0xb0>)
 8003260:	2200      	movs	r2, #0
 8003262:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	68ba      	ldr	r2, [r7, #8]
 8003268:	4413      	add	r3, r2
 800326a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800326c:	2208      	movs	r2, #8
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	1a9b      	subs	r3, r3, r2
 8003272:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f023 0307 	bic.w	r3, r3, #7
 800327a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	4a15      	ldr	r2, [pc, #84]	; (80032d4 <prvHeapInit+0xb4>)
 8003280:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003282:	4b14      	ldr	r3, [pc, #80]	; (80032d4 <prvHeapInit+0xb4>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2200      	movs	r2, #0
 8003288:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800328a:	4b12      	ldr	r3, [pc, #72]	; (80032d4 <prvHeapInit+0xb4>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2200      	movs	r2, #0
 8003290:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	1ad2      	subs	r2, r2, r3
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80032a0:	4b0c      	ldr	r3, [pc, #48]	; (80032d4 <prvHeapInit+0xb4>)
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	4a0a      	ldr	r2, [pc, #40]	; (80032d8 <prvHeapInit+0xb8>)
 80032ae:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	4a09      	ldr	r2, [pc, #36]	; (80032dc <prvHeapInit+0xbc>)
 80032b6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80032b8:	4b09      	ldr	r3, [pc, #36]	; (80032e0 <prvHeapInit+0xc0>)
 80032ba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80032be:	601a      	str	r2, [r3, #0]
}
 80032c0:	bf00      	nop
 80032c2:	3714      	adds	r7, #20
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr
 80032cc:	200001dc 	.word	0x200001dc
 80032d0:	20012ddc 	.word	0x20012ddc
 80032d4:	20012de4 	.word	0x20012de4
 80032d8:	20012dec 	.word	0x20012dec
 80032dc:	20012de8 	.word	0x20012de8
 80032e0:	20012df8 	.word	0x20012df8

080032e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80032e4:	b480      	push	{r7}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80032ec:	4b28      	ldr	r3, [pc, #160]	; (8003390 <prvInsertBlockIntoFreeList+0xac>)
 80032ee:	60fb      	str	r3, [r7, #12]
 80032f0:	e002      	b.n	80032f8 <prvInsertBlockIntoFreeList+0x14>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	60fb      	str	r3, [r7, #12]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d8f7      	bhi.n	80032f2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	68ba      	ldr	r2, [r7, #8]
 800330c:	4413      	add	r3, r2
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	429a      	cmp	r2, r3
 8003312:	d108      	bne.n	8003326 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	685a      	ldr	r2, [r3, #4]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	441a      	add	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	68ba      	ldr	r2, [r7, #8]
 8003330:	441a      	add	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	429a      	cmp	r2, r3
 8003338:	d118      	bne.n	800336c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	4b15      	ldr	r3, [pc, #84]	; (8003394 <prvInsertBlockIntoFreeList+0xb0>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	429a      	cmp	r2, r3
 8003344:	d00d      	beq.n	8003362 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685a      	ldr	r2, [r3, #4]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	441a      	add	r2, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	601a      	str	r2, [r3, #0]
 8003360:	e008      	b.n	8003374 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003362:	4b0c      	ldr	r3, [pc, #48]	; (8003394 <prvInsertBlockIntoFreeList+0xb0>)
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	601a      	str	r2, [r3, #0]
 800336a:	e003      	b.n	8003374 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	429a      	cmp	r2, r3
 800337a:	d002      	beq.n	8003382 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003382:	bf00      	nop
 8003384:	3714      	adds	r7, #20
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	20012ddc 	.word	0x20012ddc
 8003394:	20012de4 	.word	0x20012de4

08003398 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800339c:	4803      	ldr	r0, [pc, #12]	; (80033ac <_cbSendSystemDesc+0x14>)
 800339e:	f001 fc3d 	bl	8004c1c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80033a2:	4803      	ldr	r0, [pc, #12]	; (80033b0 <_cbSendSystemDesc+0x18>)
 80033a4:	f001 fc3a 	bl	8004c1c <SEGGER_SYSVIEW_SendSysDesc>
}
 80033a8:	bf00      	nop
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	08005c24 	.word	0x08005c24
 80033b0:	08005c68 	.word	0x08005c68

080033b4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80033b4:	b580      	push	{r7, lr}
 80033b6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80033b8:	4b06      	ldr	r3, [pc, #24]	; (80033d4 <SEGGER_SYSVIEW_Conf+0x20>)
 80033ba:	6818      	ldr	r0, [r3, #0]
 80033bc:	4b05      	ldr	r3, [pc, #20]	; (80033d4 <SEGGER_SYSVIEW_Conf+0x20>)
 80033be:	6819      	ldr	r1, [r3, #0]
 80033c0:	4b05      	ldr	r3, [pc, #20]	; (80033d8 <SEGGER_SYSVIEW_Conf+0x24>)
 80033c2:	4a06      	ldr	r2, [pc, #24]	; (80033dc <SEGGER_SYSVIEW_Conf+0x28>)
 80033c4:	f001 f8b0 	bl	8004528 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80033c8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80033cc:	f001 f8f0 	bl	80045b0 <SEGGER_SYSVIEW_SetRAMBase>
}
 80033d0:	bf00      	nop
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	20000000 	.word	0x20000000
 80033d8:	08003399 	.word	0x08003399
 80033dc:	08005d08 	.word	0x08005d08

080033e0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80033e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033e2:	b085      	sub	sp, #20
 80033e4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80033e6:	2300      	movs	r3, #0
 80033e8:	607b      	str	r3, [r7, #4]
 80033ea:	e033      	b.n	8003454 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80033ec:	491e      	ldr	r1, [pc, #120]	; (8003468 <_cbSendTaskList+0x88>)
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	4613      	mov	r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	4413      	add	r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	440b      	add	r3, r1
 80033fa:	6818      	ldr	r0, [r3, #0]
 80033fc:	491a      	ldr	r1, [pc, #104]	; (8003468 <_cbSendTaskList+0x88>)
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	4613      	mov	r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	4413      	add	r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	440b      	add	r3, r1
 800340a:	3304      	adds	r3, #4
 800340c:	6819      	ldr	r1, [r3, #0]
 800340e:	4c16      	ldr	r4, [pc, #88]	; (8003468 <_cbSendTaskList+0x88>)
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	4613      	mov	r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	4413      	add	r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	4423      	add	r3, r4
 800341c:	3308      	adds	r3, #8
 800341e:	681c      	ldr	r4, [r3, #0]
 8003420:	4d11      	ldr	r5, [pc, #68]	; (8003468 <_cbSendTaskList+0x88>)
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	4613      	mov	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	4413      	add	r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	442b      	add	r3, r5
 800342e:	330c      	adds	r3, #12
 8003430:	681d      	ldr	r5, [r3, #0]
 8003432:	4e0d      	ldr	r6, [pc, #52]	; (8003468 <_cbSendTaskList+0x88>)
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	4613      	mov	r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	4413      	add	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	4433      	add	r3, r6
 8003440:	3310      	adds	r3, #16
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	9300      	str	r3, [sp, #0]
 8003446:	462b      	mov	r3, r5
 8003448:	4622      	mov	r2, r4
 800344a:	f000 f8bd 	bl	80035c8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	3301      	adds	r3, #1
 8003452:	607b      	str	r3, [r7, #4]
 8003454:	4b05      	ldr	r3, [pc, #20]	; (800346c <_cbSendTaskList+0x8c>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	429a      	cmp	r2, r3
 800345c:	d3c6      	bcc.n	80033ec <_cbSendTaskList+0xc>
  }
}
 800345e:	bf00      	nop
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003468:	20012dfc 	.word	0x20012dfc
 800346c:	20012e9c 	.word	0x20012e9c

08003470 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003470:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003474:	b082      	sub	sp, #8
 8003476:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003478:	f7ff f8f4 	bl	8002664 <xTaskGetTickCountFromISR>
 800347c:	4603      	mov	r3, r0
 800347e:	2200      	movs	r2, #0
 8003480:	469a      	mov	sl, r3
 8003482:	4693      	mov	fp, r2
 8003484:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003488:	e9d7 0100 	ldrd	r0, r1, [r7]
 800348c:	4602      	mov	r2, r0
 800348e:	460b      	mov	r3, r1
 8003490:	f04f 0a00 	mov.w	sl, #0
 8003494:	f04f 0b00 	mov.w	fp, #0
 8003498:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800349c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80034a0:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80034a4:	4652      	mov	r2, sl
 80034a6:	465b      	mov	r3, fp
 80034a8:	1a14      	subs	r4, r2, r0
 80034aa:	eb63 0501 	sbc.w	r5, r3, r1
 80034ae:	f04f 0200 	mov.w	r2, #0
 80034b2:	f04f 0300 	mov.w	r3, #0
 80034b6:	00ab      	lsls	r3, r5, #2
 80034b8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80034bc:	00a2      	lsls	r2, r4, #2
 80034be:	4614      	mov	r4, r2
 80034c0:	461d      	mov	r5, r3
 80034c2:	eb14 0800 	adds.w	r8, r4, r0
 80034c6:	eb45 0901 	adc.w	r9, r5, r1
 80034ca:	f04f 0200 	mov.w	r2, #0
 80034ce:	f04f 0300 	mov.w	r3, #0
 80034d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034de:	4690      	mov	r8, r2
 80034e0:	4699      	mov	r9, r3
 80034e2:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80034e6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80034ea:	4610      	mov	r0, r2
 80034ec:	4619      	mov	r1, r3
 80034ee:	3708      	adds	r7, #8
 80034f0:	46bd      	mov	sp, r7
 80034f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080034f8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b086      	sub	sp, #24
 80034fc:	af02      	add	r7, sp, #8
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	607a      	str	r2, [r7, #4]
 8003504:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003506:	2205      	movs	r2, #5
 8003508:	492b      	ldr	r1, [pc, #172]	; (80035b8 <SYSVIEW_AddTask+0xc0>)
 800350a:	68b8      	ldr	r0, [r7, #8]
 800350c:	f001 feb8 	bl	8005280 <memcmp>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d04b      	beq.n	80035ae <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003516:	4b29      	ldr	r3, [pc, #164]	; (80035bc <SYSVIEW_AddTask+0xc4>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2b07      	cmp	r3, #7
 800351c:	d903      	bls.n	8003526 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800351e:	4828      	ldr	r0, [pc, #160]	; (80035c0 <SYSVIEW_AddTask+0xc8>)
 8003520:	f001 fe1e 	bl	8005160 <SEGGER_SYSVIEW_Warn>
    return;
 8003524:	e044      	b.n	80035b0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003526:	4b25      	ldr	r3, [pc, #148]	; (80035bc <SYSVIEW_AddTask+0xc4>)
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	4926      	ldr	r1, [pc, #152]	; (80035c4 <SYSVIEW_AddTask+0xcc>)
 800352c:	4613      	mov	r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	4413      	add	r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	440b      	add	r3, r1
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800353a:	4b20      	ldr	r3, [pc, #128]	; (80035bc <SYSVIEW_AddTask+0xc4>)
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	4921      	ldr	r1, [pc, #132]	; (80035c4 <SYSVIEW_AddTask+0xcc>)
 8003540:	4613      	mov	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	4413      	add	r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	440b      	add	r3, r1
 800354a:	3304      	adds	r3, #4
 800354c:	68ba      	ldr	r2, [r7, #8]
 800354e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003550:	4b1a      	ldr	r3, [pc, #104]	; (80035bc <SYSVIEW_AddTask+0xc4>)
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	491b      	ldr	r1, [pc, #108]	; (80035c4 <SYSVIEW_AddTask+0xcc>)
 8003556:	4613      	mov	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	4413      	add	r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	440b      	add	r3, r1
 8003560:	3308      	adds	r3, #8
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003566:	4b15      	ldr	r3, [pc, #84]	; (80035bc <SYSVIEW_AddTask+0xc4>)
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	4916      	ldr	r1, [pc, #88]	; (80035c4 <SYSVIEW_AddTask+0xcc>)
 800356c:	4613      	mov	r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	4413      	add	r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	440b      	add	r3, r1
 8003576:	330c      	adds	r3, #12
 8003578:	683a      	ldr	r2, [r7, #0]
 800357a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800357c:	4b0f      	ldr	r3, [pc, #60]	; (80035bc <SYSVIEW_AddTask+0xc4>)
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	4910      	ldr	r1, [pc, #64]	; (80035c4 <SYSVIEW_AddTask+0xcc>)
 8003582:	4613      	mov	r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	4413      	add	r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	440b      	add	r3, r1
 800358c:	3310      	adds	r3, #16
 800358e:	69ba      	ldr	r2, [r7, #24]
 8003590:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003592:	4b0a      	ldr	r3, [pc, #40]	; (80035bc <SYSVIEW_AddTask+0xc4>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	3301      	adds	r3, #1
 8003598:	4a08      	ldr	r2, [pc, #32]	; (80035bc <SYSVIEW_AddTask+0xc4>)
 800359a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	9300      	str	r3, [sp, #0]
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	68b9      	ldr	r1, [r7, #8]
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f000 f80e 	bl	80035c8 <SYSVIEW_SendTaskInfo>
 80035ac:	e000      	b.n	80035b0 <SYSVIEW_AddTask+0xb8>
    return;
 80035ae:	bf00      	nop

}
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	08005c78 	.word	0x08005c78
 80035bc:	20012e9c 	.word	0x20012e9c
 80035c0:	08005c80 	.word	0x08005c80
 80035c4:	20012dfc 	.word	0x20012dfc

080035c8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b08a      	sub	sp, #40	; 0x28
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
 80035d4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80035d6:	f107 0314 	add.w	r3, r7, #20
 80035da:	2214      	movs	r2, #20
 80035dc:	2100      	movs	r1, #0
 80035de:	4618      	mov	r0, r3
 80035e0:	f001 fe5e 	bl	80052a0 <memset>
  TaskInfo.TaskID     = TaskID;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80035f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80035f8:	f107 0314 	add.w	r3, r7, #20
 80035fc:	4618      	mov	r0, r3
 80035fe:	f001 fa15 	bl	8004a2c <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003602:	bf00      	nop
 8003604:	3728      	adds	r7, #40	; 0x28
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
	...

0800360c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003612:	4b24      	ldr	r3, [pc, #144]	; (80036a4 <_DoInit+0x98>)
 8003614:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2203      	movs	r2, #3
 800361a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2203      	movs	r2, #3
 8003620:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a20      	ldr	r2, [pc, #128]	; (80036a8 <_DoInit+0x9c>)
 8003626:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4a20      	ldr	r2, [pc, #128]	; (80036ac <_DoInit+0xa0>)
 800362c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003634:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a17      	ldr	r2, [pc, #92]	; (80036a8 <_DoInit+0x9c>)
 800364c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a17      	ldr	r2, [pc, #92]	; (80036b0 <_DoInit+0xa4>)
 8003652:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2210      	movs	r2, #16
 8003658:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	3307      	adds	r3, #7
 8003670:	4a10      	ldr	r2, [pc, #64]	; (80036b4 <_DoInit+0xa8>)
 8003672:	6810      	ldr	r0, [r2, #0]
 8003674:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003676:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a0e      	ldr	r2, [pc, #56]	; (80036b8 <_DoInit+0xac>)
 800367e:	6810      	ldr	r0, [r2, #0]
 8003680:	6018      	str	r0, [r3, #0]
 8003682:	8891      	ldrh	r1, [r2, #4]
 8003684:	7992      	ldrb	r2, [r2, #6]
 8003686:	8099      	strh	r1, [r3, #4]
 8003688:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800368a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2220      	movs	r2, #32
 8003692:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003694:	f3bf 8f5f 	dmb	sy
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr
 80036a4:	20012ea0 	.word	0x20012ea0
 80036a8:	08005cd0 	.word	0x08005cd0
 80036ac:	20012f48 	.word	0x20012f48
 80036b0:	20013348 	.word	0x20013348
 80036b4:	08005cdc 	.word	0x08005cdc
 80036b8:	08005ce0 	.word	0x08005ce0

080036bc <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80036bc:	b580      	push	{r7, lr}
 80036be:	b08c      	sub	sp, #48	; 0x30
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80036c8:	4b3e      	ldr	r3, [pc, #248]	; (80037c4 <SEGGER_RTT_ReadNoLock+0x108>)
 80036ca:	623b      	str	r3, [r7, #32]
 80036cc:	6a3b      	ldr	r3, [r7, #32]
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <SEGGER_RTT_ReadNoLock+0x1e>
 80036d6:	f7ff ff99 	bl	800360c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	4613      	mov	r3, r2
 80036de:	005b      	lsls	r3, r3, #1
 80036e0:	4413      	add	r3, r2
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	3360      	adds	r3, #96	; 0x60
 80036e6:	4a37      	ldr	r2, [pc, #220]	; (80037c4 <SEGGER_RTT_ReadNoLock+0x108>)
 80036e8:	4413      	add	r3, r2
 80036ea:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80036fc:	2300      	movs	r3, #0
 80036fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003700:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	429a      	cmp	r2, r3
 8003706:	d92b      	bls.n	8003760 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	689a      	ldr	r2, [r3, #8]
 800370c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003712:	697a      	ldr	r2, [r7, #20]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	4293      	cmp	r3, r2
 8003718:	bf28      	it	cs
 800371a:	4613      	movcs	r3, r2
 800371c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	685a      	ldr	r2, [r3, #4]
 8003722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003724:	4413      	add	r3, r2
 8003726:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003728:	697a      	ldr	r2, [r7, #20]
 800372a:	6939      	ldr	r1, [r7, #16]
 800372c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800372e:	f001 fde5 	bl	80052fc <memcpy>
    NumBytesRead += NumBytesRem;
 8003732:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	4413      	add	r3, r2
 8003738:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800373a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	4413      	add	r3, r2
 8003740:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800374a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	4413      	add	r3, r2
 8003750:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003758:	429a      	cmp	r2, r3
 800375a:	d101      	bne.n	8003760 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800375c:	2300      	movs	r3, #0
 800375e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003768:	697a      	ldr	r2, [r7, #20]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4293      	cmp	r3, r2
 800376e:	bf28      	it	cs
 8003770:	4613      	movcs	r3, r2
 8003772:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d019      	beq.n	80037ae <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	685a      	ldr	r2, [r3, #4]
 800377e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003780:	4413      	add	r3, r2
 8003782:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003784:	697a      	ldr	r2, [r7, #20]
 8003786:	6939      	ldr	r1, [r7, #16]
 8003788:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800378a:	f001 fdb7 	bl	80052fc <memcpy>
    NumBytesRead += NumBytesRem;
 800378e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	4413      	add	r3, r2
 8003794:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	4413      	add	r3, r2
 800379c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80037a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	4413      	add	r3, r2
 80037ac:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80037ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d002      	beq.n	80037ba <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037b8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80037ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3730      	adds	r7, #48	; 0x30
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	20012ea0 	.word	0x20012ea0

080037c8 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b088      	sub	sp, #32
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	607a      	str	r2, [r7, #4]
 80037d4:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80037d6:	4b3d      	ldr	r3, [pc, #244]	; (80038cc <SEGGER_RTT_AllocUpBuffer+0x104>)
 80037d8:	61bb      	str	r3, [r7, #24]
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d101      	bne.n	80037e8 <SEGGER_RTT_AllocUpBuffer+0x20>
 80037e4:	f7ff ff12 	bl	800360c <_DoInit>
  SEGGER_RTT_LOCK();
 80037e8:	f3ef 8311 	mrs	r3, BASEPRI
 80037ec:	f04f 0120 	mov.w	r1, #32
 80037f0:	f381 8811 	msr	BASEPRI, r1
 80037f4:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80037f6:	4b35      	ldr	r3, [pc, #212]	; (80038cc <SEGGER_RTT_AllocUpBuffer+0x104>)
 80037f8:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80037fa:	2300      	movs	r3, #0
 80037fc:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80037fe:	6939      	ldr	r1, [r7, #16]
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	1c5a      	adds	r2, r3, #1
 8003804:	4613      	mov	r3, r2
 8003806:	005b      	lsls	r3, r3, #1
 8003808:	4413      	add	r3, r2
 800380a:	00db      	lsls	r3, r3, #3
 800380c:	440b      	add	r3, r1
 800380e:	3304      	adds	r3, #4
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d008      	beq.n	8003828 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	3301      	adds	r3, #1
 800381a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	69fa      	ldr	r2, [r7, #28]
 8003822:	429a      	cmp	r2, r3
 8003824:	dbeb      	blt.n	80037fe <SEGGER_RTT_AllocUpBuffer+0x36>
 8003826:	e000      	b.n	800382a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8003828:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	69fa      	ldr	r2, [r7, #28]
 8003830:	429a      	cmp	r2, r3
 8003832:	da3f      	bge.n	80038b4 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8003834:	6939      	ldr	r1, [r7, #16]
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	1c5a      	adds	r2, r3, #1
 800383a:	4613      	mov	r3, r2
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	4413      	add	r3, r2
 8003840:	00db      	lsls	r3, r3, #3
 8003842:	440b      	add	r3, r1
 8003844:	68fa      	ldr	r2, [r7, #12]
 8003846:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003848:	6939      	ldr	r1, [r7, #16]
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	1c5a      	adds	r2, r3, #1
 800384e:	4613      	mov	r3, r2
 8003850:	005b      	lsls	r3, r3, #1
 8003852:	4413      	add	r3, r2
 8003854:	00db      	lsls	r3, r3, #3
 8003856:	440b      	add	r3, r1
 8003858:	3304      	adds	r3, #4
 800385a:	68ba      	ldr	r2, [r7, #8]
 800385c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800385e:	6939      	ldr	r1, [r7, #16]
 8003860:	69fa      	ldr	r2, [r7, #28]
 8003862:	4613      	mov	r3, r2
 8003864:	005b      	lsls	r3, r3, #1
 8003866:	4413      	add	r3, r2
 8003868:	00db      	lsls	r3, r3, #3
 800386a:	440b      	add	r3, r1
 800386c:	3320      	adds	r3, #32
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8003872:	6939      	ldr	r1, [r7, #16]
 8003874:	69fa      	ldr	r2, [r7, #28]
 8003876:	4613      	mov	r3, r2
 8003878:	005b      	lsls	r3, r3, #1
 800387a:	4413      	add	r3, r2
 800387c:	00db      	lsls	r3, r3, #3
 800387e:	440b      	add	r3, r1
 8003880:	3328      	adds	r3, #40	; 0x28
 8003882:	2200      	movs	r2, #0
 8003884:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8003886:	6939      	ldr	r1, [r7, #16]
 8003888:	69fa      	ldr	r2, [r7, #28]
 800388a:	4613      	mov	r3, r2
 800388c:	005b      	lsls	r3, r3, #1
 800388e:	4413      	add	r3, r2
 8003890:	00db      	lsls	r3, r3, #3
 8003892:	440b      	add	r3, r1
 8003894:	3324      	adds	r3, #36	; 0x24
 8003896:	2200      	movs	r2, #0
 8003898:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800389a:	6939      	ldr	r1, [r7, #16]
 800389c:	69fa      	ldr	r2, [r7, #28]
 800389e:	4613      	mov	r3, r2
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	4413      	add	r3, r2
 80038a4:	00db      	lsls	r3, r3, #3
 80038a6:	440b      	add	r3, r1
 80038a8:	332c      	adds	r3, #44	; 0x2c
 80038aa:	683a      	ldr	r2, [r7, #0]
 80038ac:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80038ae:	f3bf 8f5f 	dmb	sy
 80038b2:	e002      	b.n	80038ba <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80038b4:	f04f 33ff 	mov.w	r3, #4294967295
 80038b8:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80038c0:	69fb      	ldr	r3, [r7, #28]
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3720      	adds	r7, #32
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	20012ea0 	.word	0x20012ea0

080038d0 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b088      	sub	sp, #32
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	607a      	str	r2, [r7, #4]
 80038dc:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80038de:	4b33      	ldr	r3, [pc, #204]	; (80039ac <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80038e0:	61bb      	str	r3, [r7, #24]
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d101      	bne.n	80038f0 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80038ec:	f7ff fe8e 	bl	800360c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80038f0:	4b2e      	ldr	r3, [pc, #184]	; (80039ac <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80038f2:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	695b      	ldr	r3, [r3, #20]
 80038f8:	461a      	mov	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d24d      	bcs.n	800399c <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8003900:	f3ef 8311 	mrs	r3, BASEPRI
 8003904:	f04f 0120 	mov.w	r1, #32
 8003908:	f381 8811 	msr	BASEPRI, r1
 800390c:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d031      	beq.n	8003978 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8003914:	6979      	ldr	r1, [r7, #20]
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	4613      	mov	r3, r2
 800391a:	005b      	lsls	r3, r3, #1
 800391c:	4413      	add	r3, r2
 800391e:	00db      	lsls	r3, r3, #3
 8003920:	440b      	add	r3, r1
 8003922:	3360      	adds	r3, #96	; 0x60
 8003924:	68ba      	ldr	r2, [r7, #8]
 8003926:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8003928:	6979      	ldr	r1, [r7, #20]
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	4613      	mov	r3, r2
 800392e:	005b      	lsls	r3, r3, #1
 8003930:	4413      	add	r3, r2
 8003932:	00db      	lsls	r3, r3, #3
 8003934:	440b      	add	r3, r1
 8003936:	3364      	adds	r3, #100	; 0x64
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 800393c:	6979      	ldr	r1, [r7, #20]
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	4613      	mov	r3, r2
 8003942:	005b      	lsls	r3, r3, #1
 8003944:	4413      	add	r3, r2
 8003946:	00db      	lsls	r3, r3, #3
 8003948:	440b      	add	r3, r1
 800394a:	3368      	adds	r3, #104	; 0x68
 800394c:	683a      	ldr	r2, [r7, #0]
 800394e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8003950:	6979      	ldr	r1, [r7, #20]
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	4613      	mov	r3, r2
 8003956:	005b      	lsls	r3, r3, #1
 8003958:	4413      	add	r3, r2
 800395a:	00db      	lsls	r3, r3, #3
 800395c:	440b      	add	r3, r1
 800395e:	3370      	adds	r3, #112	; 0x70
 8003960:	2200      	movs	r2, #0
 8003962:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8003964:	6979      	ldr	r1, [r7, #20]
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	4613      	mov	r3, r2
 800396a:	005b      	lsls	r3, r3, #1
 800396c:	4413      	add	r3, r2
 800396e:	00db      	lsls	r3, r3, #3
 8003970:	440b      	add	r3, r1
 8003972:	336c      	adds	r3, #108	; 0x6c
 8003974:	2200      	movs	r2, #0
 8003976:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8003978:	6979      	ldr	r1, [r7, #20]
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	4613      	mov	r3, r2
 800397e:	005b      	lsls	r3, r3, #1
 8003980:	4413      	add	r3, r2
 8003982:	00db      	lsls	r3, r3, #3
 8003984:	440b      	add	r3, r1
 8003986:	3374      	adds	r3, #116	; 0x74
 8003988:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800398a:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800398c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003996:	2300      	movs	r3, #0
 8003998:	61fb      	str	r3, [r7, #28]
 800399a:	e002      	b.n	80039a2 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 800399c:	f04f 33ff 	mov.w	r3, #4294967295
 80039a0:	61fb      	str	r3, [r7, #28]
  }
  return r;
 80039a2:	69fb      	ldr	r3, [r7, #28]
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3720      	adds	r7, #32
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	20012ea0 	.word	0x20012ea0

080039b0 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80039b0:	b480      	push	{r7}
 80039b2:	b087      	sub	sp, #28
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80039bc:	2300      	movs	r3, #0
 80039be:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80039c0:	e002      	b.n	80039c8 <_EncodeStr+0x18>
    Len++;
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	3301      	adds	r3, #1
 80039c6:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80039c8:	68ba      	ldr	r2, [r7, #8]
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	4413      	add	r3, r2
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d1f6      	bne.n	80039c2 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d901      	bls.n	80039e0 <_EncodeStr+0x30>
    Len = Limit;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	2bfe      	cmp	r3, #254	; 0xfe
 80039e4:	d806      	bhi.n	80039f4 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	1c5a      	adds	r2, r3, #1
 80039ea:	60fa      	str	r2, [r7, #12]
 80039ec:	693a      	ldr	r2, [r7, #16]
 80039ee:	b2d2      	uxtb	r2, r2
 80039f0:	701a      	strb	r2, [r3, #0]
 80039f2:	e011      	b.n	8003a18 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	1c5a      	adds	r2, r3, #1
 80039f8:	60fa      	str	r2, [r7, #12]
 80039fa:	22ff      	movs	r2, #255	; 0xff
 80039fc:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	1c5a      	adds	r2, r3, #1
 8003a02:	60fa      	str	r2, [r7, #12]
 8003a04:	693a      	ldr	r2, [r7, #16]
 8003a06:	b2d2      	uxtb	r2, r2
 8003a08:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	0a19      	lsrs	r1, r3, #8
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	1c5a      	adds	r2, r3, #1
 8003a12:	60fa      	str	r2, [r7, #12]
 8003a14:	b2ca      	uxtb	r2, r1
 8003a16:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003a1c:	e00a      	b.n	8003a34 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8003a1e:	68ba      	ldr	r2, [r7, #8]
 8003a20:	1c53      	adds	r3, r2, #1
 8003a22:	60bb      	str	r3, [r7, #8]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	1c59      	adds	r1, r3, #1
 8003a28:	60f9      	str	r1, [r7, #12]
 8003a2a:	7812      	ldrb	r2, [r2, #0]
 8003a2c:	701a      	strb	r2, [r3, #0]
    n++;
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	3301      	adds	r3, #1
 8003a32:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003a34:	697a      	ldr	r2, [r7, #20]
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d3f0      	bcc.n	8003a1e <_EncodeStr+0x6e>
  }
  return pPayload;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	371c      	adds	r7, #28
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr

08003a4a <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8003a4a:	b480      	push	{r7}
 8003a4c:	b083      	sub	sp, #12
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	3304      	adds	r3, #4
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	370c      	adds	r7, #12
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
	...

08003a64 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003a6a:	4b35      	ldr	r3, [pc, #212]	; (8003b40 <_HandleIncomingPacket+0xdc>)
 8003a6c:	7e1b      	ldrb	r3, [r3, #24]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	1cfb      	adds	r3, r7, #3
 8003a72:	2201      	movs	r2, #1
 8003a74:	4619      	mov	r1, r3
 8003a76:	f7ff fe21 	bl	80036bc <SEGGER_RTT_ReadNoLock>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	dd59      	ble.n	8003b38 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8003a84:	78fb      	ldrb	r3, [r7, #3]
 8003a86:	2b80      	cmp	r3, #128	; 0x80
 8003a88:	d032      	beq.n	8003af0 <_HandleIncomingPacket+0x8c>
 8003a8a:	2b80      	cmp	r3, #128	; 0x80
 8003a8c:	dc42      	bgt.n	8003b14 <_HandleIncomingPacket+0xb0>
 8003a8e:	2b07      	cmp	r3, #7
 8003a90:	dc16      	bgt.n	8003ac0 <_HandleIncomingPacket+0x5c>
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	dd3e      	ble.n	8003b14 <_HandleIncomingPacket+0xb0>
 8003a96:	3b01      	subs	r3, #1
 8003a98:	2b06      	cmp	r3, #6
 8003a9a:	d83b      	bhi.n	8003b14 <_HandleIncomingPacket+0xb0>
 8003a9c:	a201      	add	r2, pc, #4	; (adr r2, 8003aa4 <_HandleIncomingPacket+0x40>)
 8003a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aa2:	bf00      	nop
 8003aa4:	08003ac7 	.word	0x08003ac7
 8003aa8:	08003acd 	.word	0x08003acd
 8003aac:	08003ad3 	.word	0x08003ad3
 8003ab0:	08003ad9 	.word	0x08003ad9
 8003ab4:	08003adf 	.word	0x08003adf
 8003ab8:	08003ae5 	.word	0x08003ae5
 8003abc:	08003aeb 	.word	0x08003aeb
 8003ac0:	2b7f      	cmp	r3, #127	; 0x7f
 8003ac2:	d034      	beq.n	8003b2e <_HandleIncomingPacket+0xca>
 8003ac4:	e026      	b.n	8003b14 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8003ac6:	f000 fe37 	bl	8004738 <SEGGER_SYSVIEW_Start>
      break;
 8003aca:	e035      	b.n	8003b38 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8003acc:	f000 feee 	bl	80048ac <SEGGER_SYSVIEW_Stop>
      break;
 8003ad0:	e032      	b.n	8003b38 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8003ad2:	f001 f8c7 	bl	8004c64 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8003ad6:	e02f      	b.n	8003b38 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8003ad8:	f001 f88c 	bl	8004bf4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8003adc:	e02c      	b.n	8003b38 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8003ade:	f000 ff0b 	bl	80048f8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8003ae2:	e029      	b.n	8003b38 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8003ae4:	f001 faea 	bl	80050bc <SEGGER_SYSVIEW_SendNumModules>
      break;
 8003ae8:	e026      	b.n	8003b38 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8003aea:	f001 fac9 	bl	8005080 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8003aee:	e023      	b.n	8003b38 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003af0:	4b13      	ldr	r3, [pc, #76]	; (8003b40 <_HandleIncomingPacket+0xdc>)
 8003af2:	7e1b      	ldrb	r3, [r3, #24]
 8003af4:	4618      	mov	r0, r3
 8003af6:	1cfb      	adds	r3, r7, #3
 8003af8:	2201      	movs	r2, #1
 8003afa:	4619      	mov	r1, r3
 8003afc:	f7ff fdde 	bl	80036bc <SEGGER_RTT_ReadNoLock>
 8003b00:	4603      	mov	r3, r0
 8003b02:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	dd13      	ble.n	8003b32 <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8003b0a:	78fb      	ldrb	r3, [r7, #3]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f001 fa37 	bl	8004f80 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8003b12:	e00e      	b.n	8003b32 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8003b14:	78fb      	ldrb	r3, [r7, #3]
 8003b16:	b25b      	sxtb	r3, r3
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	da0c      	bge.n	8003b36 <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003b1c:	4b08      	ldr	r3, [pc, #32]	; (8003b40 <_HandleIncomingPacket+0xdc>)
 8003b1e:	7e1b      	ldrb	r3, [r3, #24]
 8003b20:	4618      	mov	r0, r3
 8003b22:	1cfb      	adds	r3, r7, #3
 8003b24:	2201      	movs	r2, #1
 8003b26:	4619      	mov	r1, r3
 8003b28:	f7ff fdc8 	bl	80036bc <SEGGER_RTT_ReadNoLock>
      }
      break;
 8003b2c:	e003      	b.n	8003b36 <_HandleIncomingPacket+0xd2>
      break;
 8003b2e:	bf00      	nop
 8003b30:	e002      	b.n	8003b38 <_HandleIncomingPacket+0xd4>
      break;
 8003b32:	bf00      	nop
 8003b34:	e000      	b.n	8003b38 <_HandleIncomingPacket+0xd4>
      break;
 8003b36:	bf00      	nop
    }
  }
}
 8003b38:	bf00      	nop
 8003b3a:	3708      	adds	r7, #8
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	20014360 	.word	0x20014360

08003b44 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b08c      	sub	sp, #48	; 0x30
 8003b48:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8003b4e:	1d3b      	adds	r3, r7, #4
 8003b50:	3301      	adds	r3, #1
 8003b52:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b58:	4b31      	ldr	r3, [pc, #196]	; (8003c20 <_TrySendOverflowPacket+0xdc>)
 8003b5a:	695b      	ldr	r3, [r3, #20]
 8003b5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b5e:	e00b      	b.n	8003b78 <_TrySendOverflowPacket+0x34>
 8003b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b62:	b2da      	uxtb	r2, r3
 8003b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b66:	1c59      	adds	r1, r3, #1
 8003b68:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003b6a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b6e:	b2d2      	uxtb	r2, r2
 8003b70:	701a      	strb	r2, [r3, #0]
 8003b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b74:	09db      	lsrs	r3, r3, #7
 8003b76:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b7a:	2b7f      	cmp	r3, #127	; 0x7f
 8003b7c:	d8f0      	bhi.n	8003b60 <_TrySendOverflowPacket+0x1c>
 8003b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b80:	1c5a      	adds	r2, r3, #1
 8003b82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b86:	b2d2      	uxtb	r2, r2
 8003b88:	701a      	strb	r2, [r3, #0]
 8003b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b8c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003b8e:	4b25      	ldr	r3, [pc, #148]	; (8003c24 <_TrySendOverflowPacket+0xe0>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003b94:	4b22      	ldr	r3, [pc, #136]	; (8003c20 <_TrySendOverflowPacket+0xdc>)
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	69ba      	ldr	r2, [r7, #24]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	623b      	str	r3, [r7, #32]
 8003ba6:	e00b      	b.n	8003bc0 <_TrySendOverflowPacket+0x7c>
 8003ba8:	6a3b      	ldr	r3, [r7, #32]
 8003baa:	b2da      	uxtb	r2, r3
 8003bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bae:	1c59      	adds	r1, r3, #1
 8003bb0:	6279      	str	r1, [r7, #36]	; 0x24
 8003bb2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003bb6:	b2d2      	uxtb	r2, r2
 8003bb8:	701a      	strb	r2, [r3, #0]
 8003bba:	6a3b      	ldr	r3, [r7, #32]
 8003bbc:	09db      	lsrs	r3, r3, #7
 8003bbe:	623b      	str	r3, [r7, #32]
 8003bc0:	6a3b      	ldr	r3, [r7, #32]
 8003bc2:	2b7f      	cmp	r3, #127	; 0x7f
 8003bc4:	d8f0      	bhi.n	8003ba8 <_TrySendOverflowPacket+0x64>
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc8:	1c5a      	adds	r2, r3, #1
 8003bca:	627a      	str	r2, [r7, #36]	; 0x24
 8003bcc:	6a3a      	ldr	r2, [r7, #32]
 8003bce:	b2d2      	uxtb	r2, r2
 8003bd0:	701a      	strb	r2, [r3, #0]
 8003bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd4:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8003bd6:	4b12      	ldr	r3, [pc, #72]	; (8003c20 <_TrySendOverflowPacket+0xdc>)
 8003bd8:	785b      	ldrb	r3, [r3, #1]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	1d3b      	adds	r3, r7, #4
 8003bde:	69fa      	ldr	r2, [r7, #28]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	461a      	mov	r2, r3
 8003be4:	1d3b      	adds	r3, r7, #4
 8003be6:	4619      	mov	r1, r3
 8003be8:	f7fc fb1a 	bl	8000220 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003bec:	4603      	mov	r3, r0
 8003bee:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d009      	beq.n	8003c0a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003bf6:	4a0a      	ldr	r2, [pc, #40]	; (8003c20 <_TrySendOverflowPacket+0xdc>)
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8003bfc:	4b08      	ldr	r3, [pc, #32]	; (8003c20 <_TrySendOverflowPacket+0xdc>)
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	3b01      	subs	r3, #1
 8003c02:	b2da      	uxtb	r2, r3
 8003c04:	4b06      	ldr	r3, [pc, #24]	; (8003c20 <_TrySendOverflowPacket+0xdc>)
 8003c06:	701a      	strb	r2, [r3, #0]
 8003c08:	e004      	b.n	8003c14 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8003c0a:	4b05      	ldr	r3, [pc, #20]	; (8003c20 <_TrySendOverflowPacket+0xdc>)
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	3301      	adds	r3, #1
 8003c10:	4a03      	ldr	r2, [pc, #12]	; (8003c20 <_TrySendOverflowPacket+0xdc>)
 8003c12:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8003c14:	693b      	ldr	r3, [r7, #16]
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3730      	adds	r7, #48	; 0x30
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	20014360 	.word	0x20014360
 8003c24:	e0001004 	.word	0xe0001004

08003c28 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b08a      	sub	sp, #40	; 0x28
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8003c34:	4b6c      	ldr	r3, [pc, #432]	; (8003de8 <_SendPacket+0x1c0>)
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d010      	beq.n	8003c5e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003c3c:	4b6a      	ldr	r3, [pc, #424]	; (8003de8 <_SendPacket+0x1c0>)
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f000 80a3 	beq.w	8003d8c <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8003c46:	4b68      	ldr	r3, [pc, #416]	; (8003de8 <_SendPacket+0x1c0>)
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d109      	bne.n	8003c62 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8003c4e:	f7ff ff79 	bl	8003b44 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8003c52:	4b65      	ldr	r3, [pc, #404]	; (8003de8 <_SendPacket+0x1c0>)
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	f040 809a 	bne.w	8003d90 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8003c5c:	e001      	b.n	8003c62 <_SendPacket+0x3a>
    goto Send;
 8003c5e:	bf00      	nop
 8003c60:	e000      	b.n	8003c64 <_SendPacket+0x3c>
Send:
 8003c62:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2b1f      	cmp	r3, #31
 8003c68:	d809      	bhi.n	8003c7e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8003c6a:	4b5f      	ldr	r3, [pc, #380]	; (8003de8 <_SendPacket+0x1c0>)
 8003c6c:	69da      	ldr	r2, [r3, #28]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	fa22 f303 	lsr.w	r3, r2, r3
 8003c74:	f003 0301 	and.w	r3, r3, #1
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f040 808b 	bne.w	8003d94 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2b17      	cmp	r3, #23
 8003c82:	d807      	bhi.n	8003c94 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	3b01      	subs	r3, #1
 8003c88:	60fb      	str	r3, [r7, #12]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	b2da      	uxtb	r2, r3
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	701a      	strb	r2, [r3, #0]
 8003c92:	e03d      	b.n	8003d10 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8003c94:	68ba      	ldr	r2, [r7, #8]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	2b7f      	cmp	r3, #127	; 0x7f
 8003ca0:	d912      	bls.n	8003cc8 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	09da      	lsrs	r2, r3, #7
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	60fb      	str	r3, [r7, #12]
 8003cac:	b2d2      	uxtb	r2, r2
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	3a01      	subs	r2, #1
 8003cba:	60fa      	str	r2, [r7, #12]
 8003cbc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003cc0:	b2da      	uxtb	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	701a      	strb	r2, [r3, #0]
 8003cc6:	e006      	b.n	8003cd6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	60fb      	str	r3, [r7, #12]
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	b2da      	uxtb	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2b7f      	cmp	r3, #127	; 0x7f
 8003cda:	d912      	bls.n	8003d02 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	09da      	lsrs	r2, r3, #7
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	60fb      	str	r3, [r7, #12]
 8003ce6:	b2d2      	uxtb	r2, r2
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	3a01      	subs	r2, #1
 8003cf4:	60fa      	str	r2, [r7, #12]
 8003cf6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003cfa:	b2da      	uxtb	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	701a      	strb	r2, [r3, #0]
 8003d00:	e006      	b.n	8003d10 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	3b01      	subs	r3, #1
 8003d06:	60fb      	str	r3, [r7, #12]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	b2da      	uxtb	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003d10:	4b36      	ldr	r3, [pc, #216]	; (8003dec <_SendPacket+0x1c4>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003d16:	4b34      	ldr	r3, [pc, #208]	; (8003de8 <_SendPacket+0x1c0>)
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	69ba      	ldr	r2, [r7, #24]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	627b      	str	r3, [r7, #36]	; 0x24
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	623b      	str	r3, [r7, #32]
 8003d28:	e00b      	b.n	8003d42 <_SendPacket+0x11a>
 8003d2a:	6a3b      	ldr	r3, [r7, #32]
 8003d2c:	b2da      	uxtb	r2, r3
 8003d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d30:	1c59      	adds	r1, r3, #1
 8003d32:	6279      	str	r1, [r7, #36]	; 0x24
 8003d34:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d38:	b2d2      	uxtb	r2, r2
 8003d3a:	701a      	strb	r2, [r3, #0]
 8003d3c:	6a3b      	ldr	r3, [r7, #32]
 8003d3e:	09db      	lsrs	r3, r3, #7
 8003d40:	623b      	str	r3, [r7, #32]
 8003d42:	6a3b      	ldr	r3, [r7, #32]
 8003d44:	2b7f      	cmp	r3, #127	; 0x7f
 8003d46:	d8f0      	bhi.n	8003d2a <_SendPacket+0x102>
 8003d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4a:	1c5a      	adds	r2, r3, #1
 8003d4c:	627a      	str	r2, [r7, #36]	; 0x24
 8003d4e:	6a3a      	ldr	r2, [r7, #32]
 8003d50:	b2d2      	uxtb	r2, r2
 8003d52:	701a      	strb	r2, [r3, #0]
 8003d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d56:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8003d58:	4b23      	ldr	r3, [pc, #140]	; (8003de8 <_SendPacket+0x1c0>)
 8003d5a:	785b      	ldrb	r3, [r3, #1]
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	68ba      	ldr	r2, [r7, #8]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	461a      	mov	r2, r3
 8003d66:	68f9      	ldr	r1, [r7, #12]
 8003d68:	f7fc fa5a 	bl	8000220 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d003      	beq.n	8003d7e <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003d76:	4a1c      	ldr	r2, [pc, #112]	; (8003de8 <_SendPacket+0x1c0>)
 8003d78:	69bb      	ldr	r3, [r7, #24]
 8003d7a:	60d3      	str	r3, [r2, #12]
 8003d7c:	e00b      	b.n	8003d96 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8003d7e:	4b1a      	ldr	r3, [pc, #104]	; (8003de8 <_SendPacket+0x1c0>)
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	3301      	adds	r3, #1
 8003d84:	b2da      	uxtb	r2, r3
 8003d86:	4b18      	ldr	r3, [pc, #96]	; (8003de8 <_SendPacket+0x1c0>)
 8003d88:	701a      	strb	r2, [r3, #0]
 8003d8a:	e004      	b.n	8003d96 <_SendPacket+0x16e>
    goto SendDone;
 8003d8c:	bf00      	nop
 8003d8e:	e002      	b.n	8003d96 <_SendPacket+0x16e>
      goto SendDone;
 8003d90:	bf00      	nop
 8003d92:	e000      	b.n	8003d96 <_SendPacket+0x16e>
      goto SendDone;
 8003d94:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8003d96:	4b14      	ldr	r3, [pc, #80]	; (8003de8 <_SendPacket+0x1c0>)
 8003d98:	7e1b      	ldrb	r3, [r3, #24]
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	4a14      	ldr	r2, [pc, #80]	; (8003df0 <_SendPacket+0x1c8>)
 8003d9e:	460b      	mov	r3, r1
 8003da0:	005b      	lsls	r3, r3, #1
 8003da2:	440b      	add	r3, r1
 8003da4:	00db      	lsls	r3, r3, #3
 8003da6:	4413      	add	r3, r2
 8003da8:	336c      	adds	r3, #108	; 0x6c
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	4b0e      	ldr	r3, [pc, #56]	; (8003de8 <_SendPacket+0x1c0>)
 8003dae:	7e1b      	ldrb	r3, [r3, #24]
 8003db0:	4618      	mov	r0, r3
 8003db2:	490f      	ldr	r1, [pc, #60]	; (8003df0 <_SendPacket+0x1c8>)
 8003db4:	4603      	mov	r3, r0
 8003db6:	005b      	lsls	r3, r3, #1
 8003db8:	4403      	add	r3, r0
 8003dba:	00db      	lsls	r3, r3, #3
 8003dbc:	440b      	add	r3, r1
 8003dbe:	3370      	adds	r3, #112	; 0x70
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d00b      	beq.n	8003dde <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8003dc6:	4b08      	ldr	r3, [pc, #32]	; (8003de8 <_SendPacket+0x1c0>)
 8003dc8:	789b      	ldrb	r3, [r3, #2]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d107      	bne.n	8003dde <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8003dce:	4b06      	ldr	r3, [pc, #24]	; (8003de8 <_SendPacket+0x1c0>)
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8003dd4:	f7ff fe46 	bl	8003a64 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8003dd8:	4b03      	ldr	r3, [pc, #12]	; (8003de8 <_SendPacket+0x1c0>)
 8003dda:	2200      	movs	r2, #0
 8003ddc:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8003dde:	bf00      	nop
 8003de0:	3728      	adds	r7, #40	; 0x28
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	20014360 	.word	0x20014360
 8003dec:	e0001004 	.word	0xe0001004
 8003df0:	20012ea0 	.word	0x20012ea0

08003df4 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b08a      	sub	sp, #40	; 0x28
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	3301      	adds	r3, #1
 8003e0a:	2b80      	cmp	r3, #128	; 0x80
 8003e0c:	d80a      	bhi.n	8003e24 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	1c59      	adds	r1, r3, #1
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	6051      	str	r1, [r2, #4]
 8003e18:	78fa      	ldrb	r2, [r7, #3]
 8003e1a:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	1c5a      	adds	r2, r3, #1
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	2b80      	cmp	r3, #128	; 0x80
 8003e2a:	d15a      	bne.n	8003ee2 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	691a      	ldr	r2, [r3, #16]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	b2d2      	uxtb	r2, r2
 8003e36:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	627b      	str	r3, [r7, #36]	; 0x24
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	623b      	str	r3, [r7, #32]
 8003e4c:	e00b      	b.n	8003e66 <_StoreChar+0x72>
 8003e4e:	6a3b      	ldr	r3, [r7, #32]
 8003e50:	b2da      	uxtb	r2, r3
 8003e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e54:	1c59      	adds	r1, r3, #1
 8003e56:	6279      	str	r1, [r7, #36]	; 0x24
 8003e58:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e5c:	b2d2      	uxtb	r2, r2
 8003e5e:	701a      	strb	r2, [r3, #0]
 8003e60:	6a3b      	ldr	r3, [r7, #32]
 8003e62:	09db      	lsrs	r3, r3, #7
 8003e64:	623b      	str	r3, [r7, #32]
 8003e66:	6a3b      	ldr	r3, [r7, #32]
 8003e68:	2b7f      	cmp	r3, #127	; 0x7f
 8003e6a:	d8f0      	bhi.n	8003e4e <_StoreChar+0x5a>
 8003e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6e:	1c5a      	adds	r2, r3, #1
 8003e70:	627a      	str	r2, [r7, #36]	; 0x24
 8003e72:	6a3a      	ldr	r2, [r7, #32]
 8003e74:	b2d2      	uxtb	r2, r2
 8003e76:	701a      	strb	r2, [r3, #0]
 8003e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7a:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	61fb      	str	r3, [r7, #28]
 8003e80:	2300      	movs	r3, #0
 8003e82:	61bb      	str	r3, [r7, #24]
 8003e84:	e00b      	b.n	8003e9e <_StoreChar+0xaa>
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	b2da      	uxtb	r2, r3
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	1c59      	adds	r1, r3, #1
 8003e8e:	61f9      	str	r1, [r7, #28]
 8003e90:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e94:	b2d2      	uxtb	r2, r2
 8003e96:	701a      	strb	r2, [r3, #0]
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	09db      	lsrs	r3, r3, #7
 8003e9c:	61bb      	str	r3, [r7, #24]
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	2b7f      	cmp	r3, #127	; 0x7f
 8003ea2:	d8f0      	bhi.n	8003e86 <_StoreChar+0x92>
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	1c5a      	adds	r2, r3, #1
 8003ea8:	61fa      	str	r2, [r7, #28]
 8003eaa:	69ba      	ldr	r2, [r7, #24]
 8003eac:	b2d2      	uxtb	r2, r2
 8003eae:	701a      	strb	r2, [r3, #0]
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	221a      	movs	r2, #26
 8003eba:	6939      	ldr	r1, [r7, #16]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7ff feb3 	bl	8003c28 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7ff fdbf 	bl	8003a4a <_PreparePacket>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	1c5a      	adds	r2, r3, #1
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	611a      	str	r2, [r3, #16]
  }
}
 8003ee2:	bf00      	nop
 8003ee4:	3728      	adds	r7, #40	; 0x28
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
	...

08003eec <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b08a      	sub	sp, #40	; 0x28
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	607a      	str	r2, [r7, #4]
 8003ef8:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8003efe:	2301      	movs	r3, #1
 8003f00:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8003f02:	2301      	movs	r3, #1
 8003f04:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8003f06:	e007      	b.n	8003f18 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8003f08:	6a3a      	ldr	r2, [r7, #32]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f10:	623b      	str	r3, [r7, #32]
    Width++;
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	3301      	adds	r3, #1
 8003f16:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8003f18:	6a3a      	ldr	r2, [r7, #32]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d2f3      	bcs.n	8003f08 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8003f20:	683a      	ldr	r2, [r7, #0]
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d901      	bls.n	8003f2c <_PrintUnsigned+0x40>
    Width = NumDigits;
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8003f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f2e:	f003 0301 	and.w	r3, r3, #1
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d11f      	bne.n	8003f76 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8003f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d01c      	beq.n	8003f76 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8003f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f3e:	f003 0302 	and.w	r3, r3, #2
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d005      	beq.n	8003f52 <_PrintUnsigned+0x66>
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d102      	bne.n	8003f52 <_PrintUnsigned+0x66>
        c = '0';
 8003f4c:	2330      	movs	r3, #48	; 0x30
 8003f4e:	76fb      	strb	r3, [r7, #27]
 8003f50:	e001      	b.n	8003f56 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8003f52:	2320      	movs	r3, #32
 8003f54:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003f56:	e007      	b.n	8003f68 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8003f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8003f5e:	7efb      	ldrb	r3, [r7, #27]
 8003f60:	4619      	mov	r1, r3
 8003f62:	68f8      	ldr	r0, [r7, #12]
 8003f64:	f7ff ff46 	bl	8003df4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d003      	beq.n	8003f76 <_PrintUnsigned+0x8a>
 8003f6e:	69fa      	ldr	r2, [r7, #28]
 8003f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d3f0      	bcc.n	8003f58 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d903      	bls.n	8003f84 <_PrintUnsigned+0x98>
      NumDigits--;
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	603b      	str	r3, [r7, #0]
 8003f82:	e009      	b.n	8003f98 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8003f84:	68ba      	ldr	r2, [r7, #8]
 8003f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f8c:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8003f8e:	697a      	ldr	r2, [r7, #20]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d200      	bcs.n	8003f98 <_PrintUnsigned+0xac>
        break;
 8003f96:	e005      	b.n	8003fa4 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8003f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	fb02 f303 	mul.w	r3, r2, r3
 8003fa0:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8003fa2:	e7e8      	b.n	8003f76 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8003fa4:	68ba      	ldr	r2, [r7, #8]
 8003fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fac:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fb2:	fb02 f303 	mul.w	r3, r2, r3
 8003fb6:	68ba      	ldr	r2, [r7, #8]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8003fbc:	4a15      	ldr	r2, [pc, #84]	; (8004014 <_PrintUnsigned+0x128>)
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	68f8      	ldr	r0, [r7, #12]
 8003fc8:	f7ff ff14 	bl	8003df4 <_StoreChar>
    Digit /= Base;
 8003fcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fd4:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d1e3      	bne.n	8003fa4 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8003fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fde:	f003 0301 	and.w	r3, r3, #1
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d011      	beq.n	800400a <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8003fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d00e      	beq.n	800400a <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003fec:	e006      	b.n	8003ffc <_PrintUnsigned+0x110>
        FieldWidth--;
 8003fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8003ff4:	2120      	movs	r1, #32
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	f7ff fefc 	bl	8003df4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d003      	beq.n	800400a <_PrintUnsigned+0x11e>
 8004002:	69fa      	ldr	r2, [r7, #28]
 8004004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004006:	429a      	cmp	r2, r3
 8004008:	d3f1      	bcc.n	8003fee <_PrintUnsigned+0x102>
      }
    }
  }
}
 800400a:	bf00      	nop
 800400c:	3728      	adds	r7, #40	; 0x28
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	08005d1c 	.word	0x08005d1c

08004018 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004018:	b580      	push	{r7, lr}
 800401a:	b088      	sub	sp, #32
 800401c:	af02      	add	r7, sp, #8
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	60b9      	str	r1, [r7, #8]
 8004022:	607a      	str	r2, [r7, #4]
 8004024:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	2b00      	cmp	r3, #0
 800402a:	bfb8      	it	lt
 800402c:	425b      	neglt	r3, r3
 800402e:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8004030:	2301      	movs	r3, #1
 8004032:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004034:	e007      	b.n	8004046 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	693a      	ldr	r2, [r7, #16]
 800403a:	fb92 f3f3 	sdiv	r3, r2, r3
 800403e:	613b      	str	r3, [r7, #16]
    Width++;
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	3301      	adds	r3, #1
 8004044:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	429a      	cmp	r2, r3
 800404c:	daf3      	bge.n	8004036 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 800404e:	683a      	ldr	r2, [r7, #0]
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	429a      	cmp	r2, r3
 8004054:	d901      	bls.n	800405a <_PrintInt+0x42>
    Width = NumDigits;
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800405a:	6a3b      	ldr	r3, [r7, #32]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00a      	beq.n	8004076 <_PrintInt+0x5e>
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	2b00      	cmp	r3, #0
 8004064:	db04      	blt.n	8004070 <_PrintInt+0x58>
 8004066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004068:	f003 0304 	and.w	r3, r3, #4
 800406c:	2b00      	cmp	r3, #0
 800406e:	d002      	beq.n	8004076 <_PrintInt+0x5e>
    FieldWidth--;
 8004070:	6a3b      	ldr	r3, [r7, #32]
 8004072:	3b01      	subs	r3, #1
 8004074:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8004076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004078:	f003 0302 	and.w	r3, r3, #2
 800407c:	2b00      	cmp	r3, #0
 800407e:	d002      	beq.n	8004086 <_PrintInt+0x6e>
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d016      	beq.n	80040b4 <_PrintInt+0x9c>
 8004086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004088:	f003 0301 	and.w	r3, r3, #1
 800408c:	2b00      	cmp	r3, #0
 800408e:	d111      	bne.n	80040b4 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8004090:	6a3b      	ldr	r3, [r7, #32]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00e      	beq.n	80040b4 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004096:	e006      	b.n	80040a6 <_PrintInt+0x8e>
        FieldWidth--;
 8004098:	6a3b      	ldr	r3, [r7, #32]
 800409a:	3b01      	subs	r3, #1
 800409c:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 800409e:	2120      	movs	r1, #32
 80040a0:	68f8      	ldr	r0, [r7, #12]
 80040a2:	f7ff fea7 	bl	8003df4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80040a6:	6a3b      	ldr	r3, [r7, #32]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d003      	beq.n	80040b4 <_PrintInt+0x9c>
 80040ac:	697a      	ldr	r2, [r7, #20]
 80040ae:	6a3b      	ldr	r3, [r7, #32]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d3f1      	bcc.n	8004098 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	da07      	bge.n	80040ca <_PrintInt+0xb2>
    v = -v;
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	425b      	negs	r3, r3
 80040be:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 80040c0:	212d      	movs	r1, #45	; 0x2d
 80040c2:	68f8      	ldr	r0, [r7, #12]
 80040c4:	f7ff fe96 	bl	8003df4 <_StoreChar>
 80040c8:	e008      	b.n	80040dc <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80040ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040cc:	f003 0304 	and.w	r3, r3, #4
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d003      	beq.n	80040dc <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80040d4:	212b      	movs	r1, #43	; 0x2b
 80040d6:	68f8      	ldr	r0, [r7, #12]
 80040d8:	f7ff fe8c 	bl	8003df4 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80040dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040de:	f003 0302 	and.w	r3, r3, #2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d019      	beq.n	800411a <_PrintInt+0x102>
 80040e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e8:	f003 0301 	and.w	r3, r3, #1
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d114      	bne.n	800411a <_PrintInt+0x102>
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d111      	bne.n	800411a <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80040f6:	6a3b      	ldr	r3, [r7, #32]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d00e      	beq.n	800411a <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80040fc:	e006      	b.n	800410c <_PrintInt+0xf4>
        FieldWidth--;
 80040fe:	6a3b      	ldr	r3, [r7, #32]
 8004100:	3b01      	subs	r3, #1
 8004102:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8004104:	2130      	movs	r1, #48	; 0x30
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	f7ff fe74 	bl	8003df4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800410c:	6a3b      	ldr	r3, [r7, #32]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d003      	beq.n	800411a <_PrintInt+0x102>
 8004112:	697a      	ldr	r2, [r7, #20]
 8004114:	6a3b      	ldr	r3, [r7, #32]
 8004116:	429a      	cmp	r2, r3
 8004118:	d3f1      	bcc.n	80040fe <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 800411a:	68b9      	ldr	r1, [r7, #8]
 800411c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411e:	9301      	str	r3, [sp, #4]
 8004120:	6a3b      	ldr	r3, [r7, #32]
 8004122:	9300      	str	r3, [sp, #0]
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	68f8      	ldr	r0, [r7, #12]
 800412a:	f7ff fedf 	bl	8003eec <_PrintUnsigned>
}
 800412e:	bf00      	nop
 8004130:	3718      	adds	r7, #24
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
	...

08004138 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8004138:	b580      	push	{r7, lr}
 800413a:	b098      	sub	sp, #96	; 0x60
 800413c:	af02      	add	r7, sp, #8
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004144:	f3ef 8311 	mrs	r3, BASEPRI
 8004148:	f04f 0120 	mov.w	r1, #32
 800414c:	f381 8811 	msr	BASEPRI, r1
 8004150:	633b      	str	r3, [r7, #48]	; 0x30
 8004152:	48b7      	ldr	r0, [pc, #732]	; (8004430 <_VPrintTarget+0x2f8>)
 8004154:	f7ff fc79 	bl	8003a4a <_PreparePacket>
 8004158:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 800415a:	4bb5      	ldr	r3, [pc, #724]	; (8004430 <_VPrintTarget+0x2f8>)
 800415c:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 800415e:	2300      	movs	r3, #0
 8004160:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8004162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004164:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	3301      	adds	r3, #1
 800416a:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	3301      	adds	r3, #1
 800417c:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 800417e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004182:	2b00      	cmp	r3, #0
 8004184:	f000 8183 	beq.w	800448e <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8004188:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800418c:	2b25      	cmp	r3, #37	; 0x25
 800418e:	f040 8170 	bne.w	8004472 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8004192:	2300      	movs	r3, #0
 8004194:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8004196:	2301      	movs	r3, #1
 8004198:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 80041a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80041a6:	3b23      	subs	r3, #35	; 0x23
 80041a8:	2b0d      	cmp	r3, #13
 80041aa:	d83f      	bhi.n	800422c <_VPrintTarget+0xf4>
 80041ac:	a201      	add	r2, pc, #4	; (adr r2, 80041b4 <_VPrintTarget+0x7c>)
 80041ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041b2:	bf00      	nop
 80041b4:	0800421d 	.word	0x0800421d
 80041b8:	0800422d 	.word	0x0800422d
 80041bc:	0800422d 	.word	0x0800422d
 80041c0:	0800422d 	.word	0x0800422d
 80041c4:	0800422d 	.word	0x0800422d
 80041c8:	0800422d 	.word	0x0800422d
 80041cc:	0800422d 	.word	0x0800422d
 80041d0:	0800422d 	.word	0x0800422d
 80041d4:	0800420d 	.word	0x0800420d
 80041d8:	0800422d 	.word	0x0800422d
 80041dc:	080041ed 	.word	0x080041ed
 80041e0:	0800422d 	.word	0x0800422d
 80041e4:	0800422d 	.word	0x0800422d
 80041e8:	080041fd 	.word	0x080041fd
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80041ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041ee:	f043 0301 	orr.w	r3, r3, #1
 80041f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	3301      	adds	r3, #1
 80041f8:	60fb      	str	r3, [r7, #12]
 80041fa:	e01a      	b.n	8004232 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80041fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041fe:	f043 0302 	orr.w	r3, r3, #2
 8004202:	64bb      	str	r3, [r7, #72]	; 0x48
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	3301      	adds	r3, #1
 8004208:	60fb      	str	r3, [r7, #12]
 800420a:	e012      	b.n	8004232 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 800420c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800420e:	f043 0304 	orr.w	r3, r3, #4
 8004212:	64bb      	str	r3, [r7, #72]	; 0x48
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	3301      	adds	r3, #1
 8004218:	60fb      	str	r3, [r7, #12]
 800421a:	e00a      	b.n	8004232 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 800421c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800421e:	f043 0308 	orr.w	r3, r3, #8
 8004222:	64bb      	str	r3, [r7, #72]	; 0x48
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	3301      	adds	r3, #1
 8004228:	60fb      	str	r3, [r7, #12]
 800422a:	e002      	b.n	8004232 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 800422c:	2300      	movs	r3, #0
 800422e:	653b      	str	r3, [r7, #80]	; 0x50
 8004230:	bf00      	nop
        }
      } while (v);
 8004232:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1b0      	bne.n	800419a <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8004238:	2300      	movs	r3, #0
 800423a:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8004244:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004248:	2b2f      	cmp	r3, #47	; 0x2f
 800424a:	d912      	bls.n	8004272 <_VPrintTarget+0x13a>
 800424c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004250:	2b39      	cmp	r3, #57	; 0x39
 8004252:	d80e      	bhi.n	8004272 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	3301      	adds	r3, #1
 8004258:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 800425a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800425c:	4613      	mov	r3, r2
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	4413      	add	r3, r2
 8004262:	005b      	lsls	r3, r3, #1
 8004264:	461a      	mov	r2, r3
 8004266:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800426a:	4413      	add	r3, r2
 800426c:	3b30      	subs	r3, #48	; 0x30
 800426e:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8004270:	e7e4      	b.n	800423c <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8004272:	2300      	movs	r3, #0
 8004274:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 800427e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004282:	2b2e      	cmp	r3, #46	; 0x2e
 8004284:	d11d      	bne.n	80042c2 <_VPrintTarget+0x18a>
        sFormat++;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	3301      	adds	r3, #1
 800428a:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8004294:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004298:	2b2f      	cmp	r3, #47	; 0x2f
 800429a:	d912      	bls.n	80042c2 <_VPrintTarget+0x18a>
 800429c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80042a0:	2b39      	cmp	r3, #57	; 0x39
 80042a2:	d80e      	bhi.n	80042c2 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	3301      	adds	r3, #1
 80042a8:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 80042aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80042ac:	4613      	mov	r3, r2
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	4413      	add	r3, r2
 80042b2:	005b      	lsls	r3, r3, #1
 80042b4:	461a      	mov	r2, r3
 80042b6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80042ba:	4413      	add	r3, r2
 80042bc:	3b30      	subs	r3, #48	; 0x30
 80042be:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 80042c0:	e7e4      	b.n	800428c <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 80042ca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80042ce:	2b6c      	cmp	r3, #108	; 0x6c
 80042d0:	d003      	beq.n	80042da <_VPrintTarget+0x1a2>
 80042d2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80042d6:	2b68      	cmp	r3, #104	; 0x68
 80042d8:	d107      	bne.n	80042ea <_VPrintTarget+0x1b2>
          c = *sFormat;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	3301      	adds	r3, #1
 80042e6:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80042e8:	e7ef      	b.n	80042ca <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80042ea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80042ee:	2b25      	cmp	r3, #37	; 0x25
 80042f0:	f000 80b3 	beq.w	800445a <_VPrintTarget+0x322>
 80042f4:	2b25      	cmp	r3, #37	; 0x25
 80042f6:	f2c0 80b7 	blt.w	8004468 <_VPrintTarget+0x330>
 80042fa:	2b78      	cmp	r3, #120	; 0x78
 80042fc:	f300 80b4 	bgt.w	8004468 <_VPrintTarget+0x330>
 8004300:	2b58      	cmp	r3, #88	; 0x58
 8004302:	f2c0 80b1 	blt.w	8004468 <_VPrintTarget+0x330>
 8004306:	3b58      	subs	r3, #88	; 0x58
 8004308:	2b20      	cmp	r3, #32
 800430a:	f200 80ad 	bhi.w	8004468 <_VPrintTarget+0x330>
 800430e:	a201      	add	r2, pc, #4	; (adr r2, 8004314 <_VPrintTarget+0x1dc>)
 8004310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004314:	0800440b 	.word	0x0800440b
 8004318:	08004469 	.word	0x08004469
 800431c:	08004469 	.word	0x08004469
 8004320:	08004469 	.word	0x08004469
 8004324:	08004469 	.word	0x08004469
 8004328:	08004469 	.word	0x08004469
 800432c:	08004469 	.word	0x08004469
 8004330:	08004469 	.word	0x08004469
 8004334:	08004469 	.word	0x08004469
 8004338:	08004469 	.word	0x08004469
 800433c:	08004469 	.word	0x08004469
 8004340:	08004399 	.word	0x08004399
 8004344:	080043bf 	.word	0x080043bf
 8004348:	08004469 	.word	0x08004469
 800434c:	08004469 	.word	0x08004469
 8004350:	08004469 	.word	0x08004469
 8004354:	08004469 	.word	0x08004469
 8004358:	08004469 	.word	0x08004469
 800435c:	08004469 	.word	0x08004469
 8004360:	08004469 	.word	0x08004469
 8004364:	08004469 	.word	0x08004469
 8004368:	08004469 	.word	0x08004469
 800436c:	08004469 	.word	0x08004469
 8004370:	08004469 	.word	0x08004469
 8004374:	08004435 	.word	0x08004435
 8004378:	08004469 	.word	0x08004469
 800437c:	08004469 	.word	0x08004469
 8004380:	08004469 	.word	0x08004469
 8004384:	08004469 	.word	0x08004469
 8004388:	080043e5 	.word	0x080043e5
 800438c:	08004469 	.word	0x08004469
 8004390:	08004469 	.word	0x08004469
 8004394:	0800440b 	.word	0x0800440b
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	1d19      	adds	r1, r3, #4
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	6011      	str	r1, [r2, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 80043a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 80043ac:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80043b0:	f107 0314 	add.w	r3, r7, #20
 80043b4:	4611      	mov	r1, r2
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7ff fd1c 	bl	8003df4 <_StoreChar>
        break;
 80043bc:	e055      	b.n	800446a <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	1d19      	adds	r1, r3, #4
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	6011      	str	r1, [r2, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80043cc:	f107 0014 	add.w	r0, r7, #20
 80043d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043d2:	9301      	str	r3, [sp, #4]
 80043d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043d6:	9300      	str	r3, [sp, #0]
 80043d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043da:	220a      	movs	r2, #10
 80043dc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80043de:	f7ff fe1b 	bl	8004018 <_PrintInt>
        break;
 80043e2:	e042      	b.n	800446a <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	1d19      	adds	r1, r3, #4
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	6011      	str	r1, [r2, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80043f2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80043f4:	f107 0014 	add.w	r0, r7, #20
 80043f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043fa:	9301      	str	r3, [sp, #4]
 80043fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043fe:	9300      	str	r3, [sp, #0]
 8004400:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004402:	220a      	movs	r2, #10
 8004404:	f7ff fd72 	bl	8003eec <_PrintUnsigned>
        break;
 8004408:	e02f      	b.n	800446a <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	1d19      	adds	r1, r3, #4
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	6011      	str	r1, [r2, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8004418:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800441a:	f107 0014 	add.w	r0, r7, #20
 800441e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004420:	9301      	str	r3, [sp, #4]
 8004422:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004424:	9300      	str	r3, [sp, #0]
 8004426:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004428:	2210      	movs	r2, #16
 800442a:	f7ff fd5f 	bl	8003eec <_PrintUnsigned>
        break;
 800442e:	e01c      	b.n	800446a <_VPrintTarget+0x332>
 8004430:	20014390 	.word	0x20014390
      case 'p':
        v = va_arg(*pParamList, int);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	1d19      	adds	r1, r3, #4
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	6011      	str	r1, [r2, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8004442:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004444:	f107 0014 	add.w	r0, r7, #20
 8004448:	2300      	movs	r3, #0
 800444a:	9301      	str	r3, [sp, #4]
 800444c:	2308      	movs	r3, #8
 800444e:	9300      	str	r3, [sp, #0]
 8004450:	2308      	movs	r3, #8
 8004452:	2210      	movs	r2, #16
 8004454:	f7ff fd4a 	bl	8003eec <_PrintUnsigned>
        break;
 8004458:	e007      	b.n	800446a <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 800445a:	f107 0314 	add.w	r3, r7, #20
 800445e:	2125      	movs	r1, #37	; 0x25
 8004460:	4618      	mov	r0, r3
 8004462:	f7ff fcc7 	bl	8003df4 <_StoreChar>
        break;
 8004466:	e000      	b.n	800446a <_VPrintTarget+0x332>
      default:
        break;
 8004468:	bf00      	nop
      }
      sFormat++;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	3301      	adds	r3, #1
 800446e:	60fb      	str	r3, [r7, #12]
 8004470:	e007      	b.n	8004482 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8004472:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004476:	f107 0314 	add.w	r3, r7, #20
 800447a:	4611      	mov	r1, r2
 800447c:	4618      	mov	r0, r3
 800447e:	f7ff fcb9 	bl	8003df4 <_StoreChar>
    }
  } while (*sFormat);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	2b00      	cmp	r3, #0
 8004488:	f47f ae72 	bne.w	8004170 <_VPrintTarget+0x38>
 800448c:	e000      	b.n	8004490 <_VPrintTarget+0x358>
      break;
 800448e:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8004490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004492:	2b00      	cmp	r3, #0
 8004494:	d041      	beq.n	800451a <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8004496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	b2d2      	uxtb	r2, r2
 800449c:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	643b      	str	r3, [r7, #64]	; 0x40
 80044a2:	6a3b      	ldr	r3, [r7, #32]
 80044a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044a6:	e00b      	b.n	80044c0 <_VPrintTarget+0x388>
 80044a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044aa:	b2da      	uxtb	r2, r3
 80044ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044ae:	1c59      	adds	r1, r3, #1
 80044b0:	6439      	str	r1, [r7, #64]	; 0x40
 80044b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80044b6:	b2d2      	uxtb	r2, r2
 80044b8:	701a      	strb	r2, [r3, #0]
 80044ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044bc:	09db      	lsrs	r3, r3, #7
 80044be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044c2:	2b7f      	cmp	r3, #127	; 0x7f
 80044c4:	d8f0      	bhi.n	80044a8 <_VPrintTarget+0x370>
 80044c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044c8:	1c5a      	adds	r2, r3, #1
 80044ca:	643a      	str	r2, [r7, #64]	; 0x40
 80044cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80044ce:	b2d2      	uxtb	r2, r2
 80044d0:	701a      	strb	r2, [r3, #0]
 80044d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044d4:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80044da:	2300      	movs	r3, #0
 80044dc:	637b      	str	r3, [r7, #52]	; 0x34
 80044de:	e00b      	b.n	80044f8 <_VPrintTarget+0x3c0>
 80044e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044e2:	b2da      	uxtb	r2, r3
 80044e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044e6:	1c59      	adds	r1, r3, #1
 80044e8:	63b9      	str	r1, [r7, #56]	; 0x38
 80044ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80044ee:	b2d2      	uxtb	r2, r2
 80044f0:	701a      	strb	r2, [r3, #0]
 80044f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044f4:	09db      	lsrs	r3, r3, #7
 80044f6:	637b      	str	r3, [r7, #52]	; 0x34
 80044f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044fa:	2b7f      	cmp	r3, #127	; 0x7f
 80044fc:	d8f0      	bhi.n	80044e0 <_VPrintTarget+0x3a8>
 80044fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004500:	1c5a      	adds	r2, r3, #1
 8004502:	63ba      	str	r2, [r7, #56]	; 0x38
 8004504:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004506:	b2d2      	uxtb	r2, r2
 8004508:	701a      	strb	r2, [r3, #0]
 800450a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800450c:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	69b9      	ldr	r1, [r7, #24]
 8004512:	221a      	movs	r2, #26
 8004514:	4618      	mov	r0, r3
 8004516:	f7ff fb87 	bl	8003c28 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 800451a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800451c:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8004520:	bf00      	nop
 8004522:	3758      	adds	r7, #88	; 0x58
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004528:	b580      	push	{r7, lr}
 800452a:	b086      	sub	sp, #24
 800452c:	af02      	add	r7, sp, #8
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	607a      	str	r2, [r7, #4]
 8004534:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004536:	2300      	movs	r3, #0
 8004538:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800453c:	4917      	ldr	r1, [pc, #92]	; (800459c <SEGGER_SYSVIEW_Init+0x74>)
 800453e:	4818      	ldr	r0, [pc, #96]	; (80045a0 <SEGGER_SYSVIEW_Init+0x78>)
 8004540:	f7ff f942 	bl	80037c8 <SEGGER_RTT_AllocUpBuffer>
 8004544:	4603      	mov	r3, r0
 8004546:	b2da      	uxtb	r2, r3
 8004548:	4b16      	ldr	r3, [pc, #88]	; (80045a4 <SEGGER_SYSVIEW_Init+0x7c>)
 800454a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800454c:	4b15      	ldr	r3, [pc, #84]	; (80045a4 <SEGGER_SYSVIEW_Init+0x7c>)
 800454e:	785a      	ldrb	r2, [r3, #1]
 8004550:	4b14      	ldr	r3, [pc, #80]	; (80045a4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004552:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004554:	4b13      	ldr	r3, [pc, #76]	; (80045a4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004556:	7e1b      	ldrb	r3, [r3, #24]
 8004558:	4618      	mov	r0, r3
 800455a:	2300      	movs	r3, #0
 800455c:	9300      	str	r3, [sp, #0]
 800455e:	2308      	movs	r3, #8
 8004560:	4a11      	ldr	r2, [pc, #68]	; (80045a8 <SEGGER_SYSVIEW_Init+0x80>)
 8004562:	490f      	ldr	r1, [pc, #60]	; (80045a0 <SEGGER_SYSVIEW_Init+0x78>)
 8004564:	f7ff f9b4 	bl	80038d0 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004568:	4b0e      	ldr	r3, [pc, #56]	; (80045a4 <SEGGER_SYSVIEW_Init+0x7c>)
 800456a:	2200      	movs	r2, #0
 800456c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800456e:	4b0f      	ldr	r3, [pc, #60]	; (80045ac <SEGGER_SYSVIEW_Init+0x84>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a0c      	ldr	r2, [pc, #48]	; (80045a4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004574:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004576:	4a0b      	ldr	r2, [pc, #44]	; (80045a4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800457c:	4a09      	ldr	r2, [pc, #36]	; (80045a4 <SEGGER_SYSVIEW_Init+0x7c>)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004582:	4a08      	ldr	r2, [pc, #32]	; (80045a4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004588:	4a06      	ldr	r2, [pc, #24]	; (80045a4 <SEGGER_SYSVIEW_Init+0x7c>)
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800458e:	4b05      	ldr	r3, [pc, #20]	; (80045a4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004590:	2200      	movs	r2, #0
 8004592:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004594:	bf00      	nop
 8004596:	3710      	adds	r7, #16
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}
 800459c:	20013358 	.word	0x20013358
 80045a0:	08005ce8 	.word	0x08005ce8
 80045a4:	20014360 	.word	0x20014360
 80045a8:	20014358 	.word	0x20014358
 80045ac:	e0001004 	.word	0xe0001004

080045b0 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80045b8:	4a04      	ldr	r2, [pc, #16]	; (80045cc <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6113      	str	r3, [r2, #16]
}
 80045be:	bf00      	nop
 80045c0:	370c      	adds	r7, #12
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	20014360 	.word	0x20014360

080045d0 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80045d8:	f3ef 8311 	mrs	r3, BASEPRI
 80045dc:	f04f 0120 	mov.w	r1, #32
 80045e0:	f381 8811 	msr	BASEPRI, r1
 80045e4:	60fb      	str	r3, [r7, #12]
 80045e6:	4808      	ldr	r0, [pc, #32]	; (8004608 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80045e8:	f7ff fa2f 	bl	8003a4a <_PreparePacket>
 80045ec:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	68b9      	ldr	r1, [r7, #8]
 80045f2:	68b8      	ldr	r0, [r7, #8]
 80045f4:	f7ff fb18 	bl	8003c28 <_SendPacket>
  RECORD_END();
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f383 8811 	msr	BASEPRI, r3
}
 80045fe:	bf00      	nop
 8004600:	3710      	adds	r7, #16
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	20014390 	.word	0x20014390

0800460c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800460c:	b580      	push	{r7, lr}
 800460e:	b088      	sub	sp, #32
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004616:	f3ef 8311 	mrs	r3, BASEPRI
 800461a:	f04f 0120 	mov.w	r1, #32
 800461e:	f381 8811 	msr	BASEPRI, r1
 8004622:	617b      	str	r3, [r7, #20]
 8004624:	4816      	ldr	r0, [pc, #88]	; (8004680 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004626:	f7ff fa10 	bl	8003a4a <_PreparePacket>
 800462a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	61fb      	str	r3, [r7, #28]
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	61bb      	str	r3, [r7, #24]
 8004638:	e00b      	b.n	8004652 <SEGGER_SYSVIEW_RecordU32+0x46>
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	b2da      	uxtb	r2, r3
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	1c59      	adds	r1, r3, #1
 8004642:	61f9      	str	r1, [r7, #28]
 8004644:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004648:	b2d2      	uxtb	r2, r2
 800464a:	701a      	strb	r2, [r3, #0]
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	09db      	lsrs	r3, r3, #7
 8004650:	61bb      	str	r3, [r7, #24]
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	2b7f      	cmp	r3, #127	; 0x7f
 8004656:	d8f0      	bhi.n	800463a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	1c5a      	adds	r2, r3, #1
 800465c:	61fa      	str	r2, [r7, #28]
 800465e:	69ba      	ldr	r2, [r7, #24]
 8004660:	b2d2      	uxtb	r2, r2
 8004662:	701a      	strb	r2, [r3, #0]
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	68f9      	ldr	r1, [r7, #12]
 800466c:	6938      	ldr	r0, [r7, #16]
 800466e:	f7ff fadb 	bl	8003c28 <_SendPacket>
  RECORD_END();
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	f383 8811 	msr	BASEPRI, r3
}
 8004678:	bf00      	nop
 800467a:	3720      	adds	r7, #32
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	20014390 	.word	0x20014390

08004684 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004684:	b580      	push	{r7, lr}
 8004686:	b08c      	sub	sp, #48	; 0x30
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004690:	f3ef 8311 	mrs	r3, BASEPRI
 8004694:	f04f 0120 	mov.w	r1, #32
 8004698:	f381 8811 	msr	BASEPRI, r1
 800469c:	61fb      	str	r3, [r7, #28]
 800469e:	4825      	ldr	r0, [pc, #148]	; (8004734 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80046a0:	f7ff f9d3 	bl	8003a4a <_PreparePacket>
 80046a4:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80046b2:	e00b      	b.n	80046cc <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80046b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b6:	b2da      	uxtb	r2, r3
 80046b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ba:	1c59      	adds	r1, r3, #1
 80046bc:	62f9      	str	r1, [r7, #44]	; 0x2c
 80046be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046c2:	b2d2      	uxtb	r2, r2
 80046c4:	701a      	strb	r2, [r3, #0]
 80046c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c8:	09db      	lsrs	r3, r3, #7
 80046ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80046cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ce:	2b7f      	cmp	r3, #127	; 0x7f
 80046d0:	d8f0      	bhi.n	80046b4 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80046d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d4:	1c5a      	adds	r2, r3, #1
 80046d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046da:	b2d2      	uxtb	r2, r2
 80046dc:	701a      	strb	r2, [r3, #0]
 80046de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046e0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	627b      	str	r3, [r7, #36]	; 0x24
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	623b      	str	r3, [r7, #32]
 80046ea:	e00b      	b.n	8004704 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80046ec:	6a3b      	ldr	r3, [r7, #32]
 80046ee:	b2da      	uxtb	r2, r3
 80046f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f2:	1c59      	adds	r1, r3, #1
 80046f4:	6279      	str	r1, [r7, #36]	; 0x24
 80046f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046fa:	b2d2      	uxtb	r2, r2
 80046fc:	701a      	strb	r2, [r3, #0]
 80046fe:	6a3b      	ldr	r3, [r7, #32]
 8004700:	09db      	lsrs	r3, r3, #7
 8004702:	623b      	str	r3, [r7, #32]
 8004704:	6a3b      	ldr	r3, [r7, #32]
 8004706:	2b7f      	cmp	r3, #127	; 0x7f
 8004708:	d8f0      	bhi.n	80046ec <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800470a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470c:	1c5a      	adds	r2, r3, #1
 800470e:	627a      	str	r2, [r7, #36]	; 0x24
 8004710:	6a3a      	ldr	r2, [r7, #32]
 8004712:	b2d2      	uxtb	r2, r2
 8004714:	701a      	strb	r2, [r3, #0]
 8004716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004718:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	6979      	ldr	r1, [r7, #20]
 800471e:	69b8      	ldr	r0, [r7, #24]
 8004720:	f7ff fa82 	bl	8003c28 <_SendPacket>
  RECORD_END();
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	f383 8811 	msr	BASEPRI, r3
}
 800472a:	bf00      	nop
 800472c:	3730      	adds	r7, #48	; 0x30
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	20014390 	.word	0x20014390

08004738 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004738:	b580      	push	{r7, lr}
 800473a:	b08c      	sub	sp, #48	; 0x30
 800473c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800473e:	4b58      	ldr	r3, [pc, #352]	; (80048a0 <SEGGER_SYSVIEW_Start+0x168>)
 8004740:	2201      	movs	r2, #1
 8004742:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004744:	f3ef 8311 	mrs	r3, BASEPRI
 8004748:	f04f 0120 	mov.w	r1, #32
 800474c:	f381 8811 	msr	BASEPRI, r1
 8004750:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004752:	4b53      	ldr	r3, [pc, #332]	; (80048a0 <SEGGER_SYSVIEW_Start+0x168>)
 8004754:	785b      	ldrb	r3, [r3, #1]
 8004756:	220a      	movs	r2, #10
 8004758:	4952      	ldr	r1, [pc, #328]	; (80048a4 <SEGGER_SYSVIEW_Start+0x16c>)
 800475a:	4618      	mov	r0, r3
 800475c:	f7fb fd60 	bl	8000220 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004766:	200a      	movs	r0, #10
 8004768:	f7ff ff32 	bl	80045d0 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800476c:	f3ef 8311 	mrs	r3, BASEPRI
 8004770:	f04f 0120 	mov.w	r1, #32
 8004774:	f381 8811 	msr	BASEPRI, r1
 8004778:	60bb      	str	r3, [r7, #8]
 800477a:	484b      	ldr	r0, [pc, #300]	; (80048a8 <SEGGER_SYSVIEW_Start+0x170>)
 800477c:	f7ff f965 	bl	8003a4a <_PreparePacket>
 8004780:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	62fb      	str	r3, [r7, #44]	; 0x2c
 800478a:	4b45      	ldr	r3, [pc, #276]	; (80048a0 <SEGGER_SYSVIEW_Start+0x168>)
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004790:	e00b      	b.n	80047aa <SEGGER_SYSVIEW_Start+0x72>
 8004792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004794:	b2da      	uxtb	r2, r3
 8004796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004798:	1c59      	adds	r1, r3, #1
 800479a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800479c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80047a0:	b2d2      	uxtb	r2, r2
 80047a2:	701a      	strb	r2, [r3, #0]
 80047a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a6:	09db      	lsrs	r3, r3, #7
 80047a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80047aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ac:	2b7f      	cmp	r3, #127	; 0x7f
 80047ae:	d8f0      	bhi.n	8004792 <SEGGER_SYSVIEW_Start+0x5a>
 80047b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b2:	1c5a      	adds	r2, r3, #1
 80047b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047b8:	b2d2      	uxtb	r2, r2
 80047ba:	701a      	strb	r2, [r3, #0]
 80047bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047be:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	627b      	str	r3, [r7, #36]	; 0x24
 80047c4:	4b36      	ldr	r3, [pc, #216]	; (80048a0 <SEGGER_SYSVIEW_Start+0x168>)
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	623b      	str	r3, [r7, #32]
 80047ca:	e00b      	b.n	80047e4 <SEGGER_SYSVIEW_Start+0xac>
 80047cc:	6a3b      	ldr	r3, [r7, #32]
 80047ce:	b2da      	uxtb	r2, r3
 80047d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d2:	1c59      	adds	r1, r3, #1
 80047d4:	6279      	str	r1, [r7, #36]	; 0x24
 80047d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80047da:	b2d2      	uxtb	r2, r2
 80047dc:	701a      	strb	r2, [r3, #0]
 80047de:	6a3b      	ldr	r3, [r7, #32]
 80047e0:	09db      	lsrs	r3, r3, #7
 80047e2:	623b      	str	r3, [r7, #32]
 80047e4:	6a3b      	ldr	r3, [r7, #32]
 80047e6:	2b7f      	cmp	r3, #127	; 0x7f
 80047e8:	d8f0      	bhi.n	80047cc <SEGGER_SYSVIEW_Start+0x94>
 80047ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ec:	1c5a      	adds	r2, r3, #1
 80047ee:	627a      	str	r2, [r7, #36]	; 0x24
 80047f0:	6a3a      	ldr	r2, [r7, #32]
 80047f2:	b2d2      	uxtb	r2, r2
 80047f4:	701a      	strb	r2, [r3, #0]
 80047f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	61fb      	str	r3, [r7, #28]
 80047fe:	4b28      	ldr	r3, [pc, #160]	; (80048a0 <SEGGER_SYSVIEW_Start+0x168>)
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	61bb      	str	r3, [r7, #24]
 8004804:	e00b      	b.n	800481e <SEGGER_SYSVIEW_Start+0xe6>
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	b2da      	uxtb	r2, r3
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	1c59      	adds	r1, r3, #1
 800480e:	61f9      	str	r1, [r7, #28]
 8004810:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004814:	b2d2      	uxtb	r2, r2
 8004816:	701a      	strb	r2, [r3, #0]
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	09db      	lsrs	r3, r3, #7
 800481c:	61bb      	str	r3, [r7, #24]
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	2b7f      	cmp	r3, #127	; 0x7f
 8004822:	d8f0      	bhi.n	8004806 <SEGGER_SYSVIEW_Start+0xce>
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	1c5a      	adds	r2, r3, #1
 8004828:	61fa      	str	r2, [r7, #28]
 800482a:	69ba      	ldr	r2, [r7, #24]
 800482c:	b2d2      	uxtb	r2, r2
 800482e:	701a      	strb	r2, [r3, #0]
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	617b      	str	r3, [r7, #20]
 8004838:	2300      	movs	r3, #0
 800483a:	613b      	str	r3, [r7, #16]
 800483c:	e00b      	b.n	8004856 <SEGGER_SYSVIEW_Start+0x11e>
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	b2da      	uxtb	r2, r3
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	1c59      	adds	r1, r3, #1
 8004846:	6179      	str	r1, [r7, #20]
 8004848:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800484c:	b2d2      	uxtb	r2, r2
 800484e:	701a      	strb	r2, [r3, #0]
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	09db      	lsrs	r3, r3, #7
 8004854:	613b      	str	r3, [r7, #16]
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	2b7f      	cmp	r3, #127	; 0x7f
 800485a:	d8f0      	bhi.n	800483e <SEGGER_SYSVIEW_Start+0x106>
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	1c5a      	adds	r2, r3, #1
 8004860:	617a      	str	r2, [r7, #20]
 8004862:	693a      	ldr	r2, [r7, #16]
 8004864:	b2d2      	uxtb	r2, r2
 8004866:	701a      	strb	r2, [r3, #0]
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800486c:	2218      	movs	r2, #24
 800486e:	6839      	ldr	r1, [r7, #0]
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f7ff f9d9 	bl	8003c28 <_SendPacket>
      RECORD_END();
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800487c:	4b08      	ldr	r3, [pc, #32]	; (80048a0 <SEGGER_SYSVIEW_Start+0x168>)
 800487e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004880:	2b00      	cmp	r3, #0
 8004882:	d002      	beq.n	800488a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004884:	4b06      	ldr	r3, [pc, #24]	; (80048a0 <SEGGER_SYSVIEW_Start+0x168>)
 8004886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004888:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800488a:	f000 f9eb 	bl	8004c64 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800488e:	f000 f9b1 	bl	8004bf4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004892:	f000 fc13 	bl	80050bc <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8004896:	bf00      	nop
 8004898:	3730      	adds	r7, #48	; 0x30
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	20014360 	.word	0x20014360
 80048a4:	08005d10 	.word	0x08005d10
 80048a8:	20014390 	.word	0x20014390

080048ac <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80048b2:	f3ef 8311 	mrs	r3, BASEPRI
 80048b6:	f04f 0120 	mov.w	r1, #32
 80048ba:	f381 8811 	msr	BASEPRI, r1
 80048be:	607b      	str	r3, [r7, #4]
 80048c0:	480b      	ldr	r0, [pc, #44]	; (80048f0 <SEGGER_SYSVIEW_Stop+0x44>)
 80048c2:	f7ff f8c2 	bl	8003a4a <_PreparePacket>
 80048c6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80048c8:	4b0a      	ldr	r3, [pc, #40]	; (80048f4 <SEGGER_SYSVIEW_Stop+0x48>)
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d007      	beq.n	80048e0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80048d0:	220b      	movs	r2, #11
 80048d2:	6839      	ldr	r1, [r7, #0]
 80048d4:	6838      	ldr	r0, [r7, #0]
 80048d6:	f7ff f9a7 	bl	8003c28 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80048da:	4b06      	ldr	r3, [pc, #24]	; (80048f4 <SEGGER_SYSVIEW_Stop+0x48>)
 80048dc:	2200      	movs	r2, #0
 80048de:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f383 8811 	msr	BASEPRI, r3
}
 80048e6:	bf00      	nop
 80048e8:	3708      	adds	r7, #8
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	20014390 	.word	0x20014390
 80048f4:	20014360 	.word	0x20014360

080048f8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b08c      	sub	sp, #48	; 0x30
 80048fc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80048fe:	f3ef 8311 	mrs	r3, BASEPRI
 8004902:	f04f 0120 	mov.w	r1, #32
 8004906:	f381 8811 	msr	BASEPRI, r1
 800490a:	60fb      	str	r3, [r7, #12]
 800490c:	4845      	ldr	r0, [pc, #276]	; (8004a24 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800490e:	f7ff f89c 	bl	8003a4a <_PreparePacket>
 8004912:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800491c:	4b42      	ldr	r3, [pc, #264]	; (8004a28 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	62bb      	str	r3, [r7, #40]	; 0x28
 8004922:	e00b      	b.n	800493c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004926:	b2da      	uxtb	r2, r3
 8004928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800492a:	1c59      	adds	r1, r3, #1
 800492c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800492e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004932:	b2d2      	uxtb	r2, r2
 8004934:	701a      	strb	r2, [r3, #0]
 8004936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004938:	09db      	lsrs	r3, r3, #7
 800493a:	62bb      	str	r3, [r7, #40]	; 0x28
 800493c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800493e:	2b7f      	cmp	r3, #127	; 0x7f
 8004940:	d8f0      	bhi.n	8004924 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004944:	1c5a      	adds	r2, r3, #1
 8004946:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004948:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800494a:	b2d2      	uxtb	r2, r2
 800494c:	701a      	strb	r2, [r3, #0]
 800494e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004950:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	627b      	str	r3, [r7, #36]	; 0x24
 8004956:	4b34      	ldr	r3, [pc, #208]	; (8004a28 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	623b      	str	r3, [r7, #32]
 800495c:	e00b      	b.n	8004976 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800495e:	6a3b      	ldr	r3, [r7, #32]
 8004960:	b2da      	uxtb	r2, r3
 8004962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004964:	1c59      	adds	r1, r3, #1
 8004966:	6279      	str	r1, [r7, #36]	; 0x24
 8004968:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800496c:	b2d2      	uxtb	r2, r2
 800496e:	701a      	strb	r2, [r3, #0]
 8004970:	6a3b      	ldr	r3, [r7, #32]
 8004972:	09db      	lsrs	r3, r3, #7
 8004974:	623b      	str	r3, [r7, #32]
 8004976:	6a3b      	ldr	r3, [r7, #32]
 8004978:	2b7f      	cmp	r3, #127	; 0x7f
 800497a:	d8f0      	bhi.n	800495e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800497c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497e:	1c5a      	adds	r2, r3, #1
 8004980:	627a      	str	r2, [r7, #36]	; 0x24
 8004982:	6a3a      	ldr	r2, [r7, #32]
 8004984:	b2d2      	uxtb	r2, r2
 8004986:	701a      	strb	r2, [r3, #0]
 8004988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	61fb      	str	r3, [r7, #28]
 8004990:	4b25      	ldr	r3, [pc, #148]	; (8004a28 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	61bb      	str	r3, [r7, #24]
 8004996:	e00b      	b.n	80049b0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	b2da      	uxtb	r2, r3
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	1c59      	adds	r1, r3, #1
 80049a0:	61f9      	str	r1, [r7, #28]
 80049a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049a6:	b2d2      	uxtb	r2, r2
 80049a8:	701a      	strb	r2, [r3, #0]
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	09db      	lsrs	r3, r3, #7
 80049ae:	61bb      	str	r3, [r7, #24]
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	2b7f      	cmp	r3, #127	; 0x7f
 80049b4:	d8f0      	bhi.n	8004998 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	1c5a      	adds	r2, r3, #1
 80049ba:	61fa      	str	r2, [r7, #28]
 80049bc:	69ba      	ldr	r2, [r7, #24]
 80049be:	b2d2      	uxtb	r2, r2
 80049c0:	701a      	strb	r2, [r3, #0]
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	617b      	str	r3, [r7, #20]
 80049ca:	2300      	movs	r3, #0
 80049cc:	613b      	str	r3, [r7, #16]
 80049ce:	e00b      	b.n	80049e8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	b2da      	uxtb	r2, r3
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	1c59      	adds	r1, r3, #1
 80049d8:	6179      	str	r1, [r7, #20]
 80049da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049de:	b2d2      	uxtb	r2, r2
 80049e0:	701a      	strb	r2, [r3, #0]
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	09db      	lsrs	r3, r3, #7
 80049e6:	613b      	str	r3, [r7, #16]
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	2b7f      	cmp	r3, #127	; 0x7f
 80049ec:	d8f0      	bhi.n	80049d0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	1c5a      	adds	r2, r3, #1
 80049f2:	617a      	str	r2, [r7, #20]
 80049f4:	693a      	ldr	r2, [r7, #16]
 80049f6:	b2d2      	uxtb	r2, r2
 80049f8:	701a      	strb	r2, [r3, #0]
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80049fe:	2218      	movs	r2, #24
 8004a00:	6879      	ldr	r1, [r7, #4]
 8004a02:	68b8      	ldr	r0, [r7, #8]
 8004a04:	f7ff f910 	bl	8003c28 <_SendPacket>
  RECORD_END();
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004a0e:	4b06      	ldr	r3, [pc, #24]	; (8004a28 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d002      	beq.n	8004a1c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8004a16:	4b04      	ldr	r3, [pc, #16]	; (8004a28 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1a:	4798      	blx	r3
  }
}
 8004a1c:	bf00      	nop
 8004a1e:	3730      	adds	r7, #48	; 0x30
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	20014390 	.word	0x20014390
 8004a28:	20014360 	.word	0x20014360

08004a2c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b092      	sub	sp, #72	; 0x48
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004a34:	f3ef 8311 	mrs	r3, BASEPRI
 8004a38:	f04f 0120 	mov.w	r1, #32
 8004a3c:	f381 8811 	msr	BASEPRI, r1
 8004a40:	617b      	str	r3, [r7, #20]
 8004a42:	486a      	ldr	r0, [pc, #424]	; (8004bec <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8004a44:	f7ff f801 	bl	8003a4a <_PreparePacket>
 8004a48:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	647b      	str	r3, [r7, #68]	; 0x44
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	4b66      	ldr	r3, [pc, #408]	; (8004bf0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	643b      	str	r3, [r7, #64]	; 0x40
 8004a5e:	e00b      	b.n	8004a78 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8004a60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a62:	b2da      	uxtb	r2, r3
 8004a64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a66:	1c59      	adds	r1, r3, #1
 8004a68:	6479      	str	r1, [r7, #68]	; 0x44
 8004a6a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a6e:	b2d2      	uxtb	r2, r2
 8004a70:	701a      	strb	r2, [r3, #0]
 8004a72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a74:	09db      	lsrs	r3, r3, #7
 8004a76:	643b      	str	r3, [r7, #64]	; 0x40
 8004a78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a7a:	2b7f      	cmp	r3, #127	; 0x7f
 8004a7c:	d8f0      	bhi.n	8004a60 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8004a7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a80:	1c5a      	adds	r2, r3, #1
 8004a82:	647a      	str	r2, [r7, #68]	; 0x44
 8004a84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a86:	b2d2      	uxtb	r2, r2
 8004a88:	701a      	strb	r2, [r3, #0]
 8004a8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a8c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a98:	e00b      	b.n	8004ab2 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8004a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a9c:	b2da      	uxtb	r2, r3
 8004a9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aa0:	1c59      	adds	r1, r3, #1
 8004aa2:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004aa4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004aa8:	b2d2      	uxtb	r2, r2
 8004aaa:	701a      	strb	r2, [r3, #0]
 8004aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aae:	09db      	lsrs	r3, r3, #7
 8004ab0:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab4:	2b7f      	cmp	r3, #127	; 0x7f
 8004ab6:	d8f0      	bhi.n	8004a9a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8004ab8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aba:	1c5a      	adds	r2, r3, #1
 8004abc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004abe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ac0:	b2d2      	uxtb	r2, r2
 8004ac2:	701a      	strb	r2, [r3, #0]
 8004ac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ac6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	2220      	movs	r2, #32
 8004ace:	4619      	mov	r1, r3
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	f7fe ff6d 	bl	80039b0 <_EncodeStr>
 8004ad6:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8004ad8:	2209      	movs	r2, #9
 8004ada:	68f9      	ldr	r1, [r7, #12]
 8004adc:	6938      	ldr	r0, [r7, #16]
 8004ade:	f7ff f8a3 	bl	8003c28 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	637b      	str	r3, [r7, #52]	; 0x34
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	4b40      	ldr	r3, [pc, #256]	; (8004bf0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	633b      	str	r3, [r7, #48]	; 0x30
 8004af6:	e00b      	b.n	8004b10 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8004af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004afa:	b2da      	uxtb	r2, r3
 8004afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004afe:	1c59      	adds	r1, r3, #1
 8004b00:	6379      	str	r1, [r7, #52]	; 0x34
 8004b02:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b06:	b2d2      	uxtb	r2, r2
 8004b08:	701a      	strb	r2, [r3, #0]
 8004b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b0c:	09db      	lsrs	r3, r3, #7
 8004b0e:	633b      	str	r3, [r7, #48]	; 0x30
 8004b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b12:	2b7f      	cmp	r3, #127	; 0x7f
 8004b14:	d8f0      	bhi.n	8004af8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8004b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b18:	1c5a      	adds	r2, r3, #1
 8004b1a:	637a      	str	r2, [r7, #52]	; 0x34
 8004b1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b1e:	b2d2      	uxtb	r2, r2
 8004b20:	701a      	strb	r2, [r3, #0]
 8004b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b24:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b30:	e00b      	b.n	8004b4a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8004b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b34:	b2da      	uxtb	r2, r3
 8004b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b38:	1c59      	adds	r1, r3, #1
 8004b3a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004b3c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b40:	b2d2      	uxtb	r2, r2
 8004b42:	701a      	strb	r2, [r3, #0]
 8004b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b46:	09db      	lsrs	r3, r3, #7
 8004b48:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b4c:	2b7f      	cmp	r3, #127	; 0x7f
 8004b4e:	d8f0      	bhi.n	8004b32 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8004b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b52:	1c5a      	adds	r2, r3, #1
 8004b54:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b58:	b2d2      	uxtb	r2, r2
 8004b5a:	701a      	strb	r2, [r3, #0]
 8004b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b5e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	627b      	str	r3, [r7, #36]	; 0x24
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	691b      	ldr	r3, [r3, #16]
 8004b68:	623b      	str	r3, [r7, #32]
 8004b6a:	e00b      	b.n	8004b84 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8004b6c:	6a3b      	ldr	r3, [r7, #32]
 8004b6e:	b2da      	uxtb	r2, r3
 8004b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b72:	1c59      	adds	r1, r3, #1
 8004b74:	6279      	str	r1, [r7, #36]	; 0x24
 8004b76:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b7a:	b2d2      	uxtb	r2, r2
 8004b7c:	701a      	strb	r2, [r3, #0]
 8004b7e:	6a3b      	ldr	r3, [r7, #32]
 8004b80:	09db      	lsrs	r3, r3, #7
 8004b82:	623b      	str	r3, [r7, #32]
 8004b84:	6a3b      	ldr	r3, [r7, #32]
 8004b86:	2b7f      	cmp	r3, #127	; 0x7f
 8004b88:	d8f0      	bhi.n	8004b6c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8004b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8c:	1c5a      	adds	r2, r3, #1
 8004b8e:	627a      	str	r2, [r7, #36]	; 0x24
 8004b90:	6a3a      	ldr	r2, [r7, #32]
 8004b92:	b2d2      	uxtb	r2, r2
 8004b94:	701a      	strb	r2, [r3, #0]
 8004b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b98:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	61fb      	str	r3, [r7, #28]
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	61bb      	str	r3, [r7, #24]
 8004ba2:	e00b      	b.n	8004bbc <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	b2da      	uxtb	r2, r3
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	1c59      	adds	r1, r3, #1
 8004bac:	61f9      	str	r1, [r7, #28]
 8004bae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004bb2:	b2d2      	uxtb	r2, r2
 8004bb4:	701a      	strb	r2, [r3, #0]
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	09db      	lsrs	r3, r3, #7
 8004bba:	61bb      	str	r3, [r7, #24]
 8004bbc:	69bb      	ldr	r3, [r7, #24]
 8004bbe:	2b7f      	cmp	r3, #127	; 0x7f
 8004bc0:	d8f0      	bhi.n	8004ba4 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	1c5a      	adds	r2, r3, #1
 8004bc6:	61fa      	str	r2, [r7, #28]
 8004bc8:	69ba      	ldr	r2, [r7, #24]
 8004bca:	b2d2      	uxtb	r2, r2
 8004bcc:	701a      	strb	r2, [r3, #0]
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004bd2:	2215      	movs	r2, #21
 8004bd4:	68f9      	ldr	r1, [r7, #12]
 8004bd6:	6938      	ldr	r0, [r7, #16]
 8004bd8:	f7ff f826 	bl	8003c28 <_SendPacket>
  RECORD_END();
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	f383 8811 	msr	BASEPRI, r3
}
 8004be2:	bf00      	nop
 8004be4:	3748      	adds	r7, #72	; 0x48
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	20014390 	.word	0x20014390
 8004bf0:	20014360 	.word	0x20014360

08004bf4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004bf8:	4b07      	ldr	r3, [pc, #28]	; (8004c18 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004bfa:	6a1b      	ldr	r3, [r3, #32]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d008      	beq.n	8004c12 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004c00:	4b05      	ldr	r3, [pc, #20]	; (8004c18 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004c02:	6a1b      	ldr	r3, [r3, #32]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d003      	beq.n	8004c12 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8004c0a:	4b03      	ldr	r3, [pc, #12]	; (8004c18 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004c0c:	6a1b      	ldr	r3, [r3, #32]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	4798      	blx	r3
  }
}
 8004c12:	bf00      	nop
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	20014360 	.word	0x20014360

08004c1c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b086      	sub	sp, #24
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004c24:	f3ef 8311 	mrs	r3, BASEPRI
 8004c28:	f04f 0120 	mov.w	r1, #32
 8004c2c:	f381 8811 	msr	BASEPRI, r1
 8004c30:	617b      	str	r3, [r7, #20]
 8004c32:	480b      	ldr	r0, [pc, #44]	; (8004c60 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8004c34:	f7fe ff09 	bl	8003a4a <_PreparePacket>
 8004c38:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004c3a:	2280      	movs	r2, #128	; 0x80
 8004c3c:	6879      	ldr	r1, [r7, #4]
 8004c3e:	6938      	ldr	r0, [r7, #16]
 8004c40:	f7fe feb6 	bl	80039b0 <_EncodeStr>
 8004c44:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8004c46:	220e      	movs	r2, #14
 8004c48:	68f9      	ldr	r1, [r7, #12]
 8004c4a:	6938      	ldr	r0, [r7, #16]
 8004c4c:	f7fe ffec 	bl	8003c28 <_SendPacket>
  RECORD_END();
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	f383 8811 	msr	BASEPRI, r3
}
 8004c56:	bf00      	nop
 8004c58:	3718      	adds	r7, #24
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	20014390 	.word	0x20014390

08004c64 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004c64:	b590      	push	{r4, r7, lr}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004c6a:	4b15      	ldr	r3, [pc, #84]	; (8004cc0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004c6c:	6a1b      	ldr	r3, [r3, #32]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d01a      	beq.n	8004ca8 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8004c72:	4b13      	ldr	r3, [pc, #76]	; (8004cc0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004c74:	6a1b      	ldr	r3, [r3, #32]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d015      	beq.n	8004ca8 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004c7c:	4b10      	ldr	r3, [pc, #64]	; (8004cc0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004c7e:	6a1b      	ldr	r3, [r3, #32]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4798      	blx	r3
 8004c84:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004c88:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004c8a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c8e:	f04f 0200 	mov.w	r2, #0
 8004c92:	f04f 0300 	mov.w	r3, #0
 8004c96:	000a      	movs	r2, r1
 8004c98:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	4621      	mov	r1, r4
 8004ca0:	200d      	movs	r0, #13
 8004ca2:	f7ff fcef 	bl	8004684 <SEGGER_SYSVIEW_RecordU32x2>
 8004ca6:	e006      	b.n	8004cb6 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004ca8:	4b06      	ldr	r3, [pc, #24]	; (8004cc4 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4619      	mov	r1, r3
 8004cae:	200c      	movs	r0, #12
 8004cb0:	f7ff fcac 	bl	800460c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004cb4:	bf00      	nop
 8004cb6:	bf00      	nop
 8004cb8:	370c      	adds	r7, #12
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd90      	pop	{r4, r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	20014360 	.word	0x20014360
 8004cc4:	e0001004 	.word	0xe0001004

08004cc8 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b086      	sub	sp, #24
 8004ccc:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004cce:	f3ef 8311 	mrs	r3, BASEPRI
 8004cd2:	f04f 0120 	mov.w	r1, #32
 8004cd6:	f381 8811 	msr	BASEPRI, r1
 8004cda:	60fb      	str	r3, [r7, #12]
 8004cdc:	4819      	ldr	r0, [pc, #100]	; (8004d44 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8004cde:	f7fe feb4 	bl	8003a4a <_PreparePacket>
 8004ce2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004ce8:	4b17      	ldr	r3, [pc, #92]	; (8004d48 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cf0:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	617b      	str	r3, [r7, #20]
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	613b      	str	r3, [r7, #16]
 8004cfa:	e00b      	b.n	8004d14 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	b2da      	uxtb	r2, r3
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	1c59      	adds	r1, r3, #1
 8004d04:	6179      	str	r1, [r7, #20]
 8004d06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d0a:	b2d2      	uxtb	r2, r2
 8004d0c:	701a      	strb	r2, [r3, #0]
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	09db      	lsrs	r3, r3, #7
 8004d12:	613b      	str	r3, [r7, #16]
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	2b7f      	cmp	r3, #127	; 0x7f
 8004d18:	d8f0      	bhi.n	8004cfc <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	1c5a      	adds	r2, r3, #1
 8004d1e:	617a      	str	r2, [r7, #20]
 8004d20:	693a      	ldr	r2, [r7, #16]
 8004d22:	b2d2      	uxtb	r2, r2
 8004d24:	701a      	strb	r2, [r3, #0]
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8004d2a:	2202      	movs	r2, #2
 8004d2c:	6879      	ldr	r1, [r7, #4]
 8004d2e:	68b8      	ldr	r0, [r7, #8]
 8004d30:	f7fe ff7a 	bl	8003c28 <_SendPacket>
  RECORD_END();
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f383 8811 	msr	BASEPRI, r3
}
 8004d3a:	bf00      	nop
 8004d3c:	3718      	adds	r7, #24
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	20014390 	.word	0x20014390
 8004d48:	e000ed04 	.word	0xe000ed04

08004d4c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b082      	sub	sp, #8
 8004d50:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004d52:	f3ef 8311 	mrs	r3, BASEPRI
 8004d56:	f04f 0120 	mov.w	r1, #32
 8004d5a:	f381 8811 	msr	BASEPRI, r1
 8004d5e:	607b      	str	r3, [r7, #4]
 8004d60:	4807      	ldr	r0, [pc, #28]	; (8004d80 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8004d62:	f7fe fe72 	bl	8003a4a <_PreparePacket>
 8004d66:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004d68:	2203      	movs	r2, #3
 8004d6a:	6839      	ldr	r1, [r7, #0]
 8004d6c:	6838      	ldr	r0, [r7, #0]
 8004d6e:	f7fe ff5b 	bl	8003c28 <_SendPacket>
  RECORD_END();
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f383 8811 	msr	BASEPRI, r3
}
 8004d78:	bf00      	nop
 8004d7a:	3708      	adds	r7, #8
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	20014390 	.word	0x20014390

08004d84 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004d8a:	f3ef 8311 	mrs	r3, BASEPRI
 8004d8e:	f04f 0120 	mov.w	r1, #32
 8004d92:	f381 8811 	msr	BASEPRI, r1
 8004d96:	607b      	str	r3, [r7, #4]
 8004d98:	4807      	ldr	r0, [pc, #28]	; (8004db8 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8004d9a:	f7fe fe56 	bl	8003a4a <_PreparePacket>
 8004d9e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004da0:	2212      	movs	r2, #18
 8004da2:	6839      	ldr	r1, [r7, #0]
 8004da4:	6838      	ldr	r0, [r7, #0]
 8004da6:	f7fe ff3f 	bl	8003c28 <_SendPacket>
  RECORD_END();
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f383 8811 	msr	BASEPRI, r3
}
 8004db0:	bf00      	nop
 8004db2:	3708      	adds	r7, #8
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	20014390 	.word	0x20014390

08004dbc <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b082      	sub	sp, #8
 8004dc0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004dc2:	f3ef 8311 	mrs	r3, BASEPRI
 8004dc6:	f04f 0120 	mov.w	r1, #32
 8004dca:	f381 8811 	msr	BASEPRI, r1
 8004dce:	607b      	str	r3, [r7, #4]
 8004dd0:	4807      	ldr	r0, [pc, #28]	; (8004df0 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8004dd2:	f7fe fe3a 	bl	8003a4a <_PreparePacket>
 8004dd6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004dd8:	2211      	movs	r2, #17
 8004dda:	6839      	ldr	r1, [r7, #0]
 8004ddc:	6838      	ldr	r0, [r7, #0]
 8004dde:	f7fe ff23 	bl	8003c28 <_SendPacket>
  RECORD_END();
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f383 8811 	msr	BASEPRI, r3
}
 8004de8:	bf00      	nop
 8004dea:	3708      	adds	r7, #8
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	20014390 	.word	0x20014390

08004df4 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b088      	sub	sp, #32
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004dfc:	f3ef 8311 	mrs	r3, BASEPRI
 8004e00:	f04f 0120 	mov.w	r1, #32
 8004e04:	f381 8811 	msr	BASEPRI, r1
 8004e08:	617b      	str	r3, [r7, #20]
 8004e0a:	4819      	ldr	r0, [pc, #100]	; (8004e70 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8004e0c:	f7fe fe1d 	bl	8003a4a <_PreparePacket>
 8004e10:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004e16:	4b17      	ldr	r3, [pc, #92]	; (8004e74 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	61fb      	str	r3, [r7, #28]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	61bb      	str	r3, [r7, #24]
 8004e28:	e00b      	b.n	8004e42 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	b2da      	uxtb	r2, r3
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	1c59      	adds	r1, r3, #1
 8004e32:	61f9      	str	r1, [r7, #28]
 8004e34:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e38:	b2d2      	uxtb	r2, r2
 8004e3a:	701a      	strb	r2, [r3, #0]
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	09db      	lsrs	r3, r3, #7
 8004e40:	61bb      	str	r3, [r7, #24]
 8004e42:	69bb      	ldr	r3, [r7, #24]
 8004e44:	2b7f      	cmp	r3, #127	; 0x7f
 8004e46:	d8f0      	bhi.n	8004e2a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	1c5a      	adds	r2, r3, #1
 8004e4c:	61fa      	str	r2, [r7, #28]
 8004e4e:	69ba      	ldr	r2, [r7, #24]
 8004e50:	b2d2      	uxtb	r2, r2
 8004e52:	701a      	strb	r2, [r3, #0]
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8004e58:	2208      	movs	r2, #8
 8004e5a:	68f9      	ldr	r1, [r7, #12]
 8004e5c:	6938      	ldr	r0, [r7, #16]
 8004e5e:	f7fe fee3 	bl	8003c28 <_SendPacket>
  RECORD_END();
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	f383 8811 	msr	BASEPRI, r3
}
 8004e68:	bf00      	nop
 8004e6a:	3720      	adds	r7, #32
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	20014390 	.word	0x20014390
 8004e74:	20014360 	.word	0x20014360

08004e78 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b088      	sub	sp, #32
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004e80:	f3ef 8311 	mrs	r3, BASEPRI
 8004e84:	f04f 0120 	mov.w	r1, #32
 8004e88:	f381 8811 	msr	BASEPRI, r1
 8004e8c:	617b      	str	r3, [r7, #20]
 8004e8e:	4819      	ldr	r0, [pc, #100]	; (8004ef4 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8004e90:	f7fe fddb 	bl	8003a4a <_PreparePacket>
 8004e94:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004e9a:	4b17      	ldr	r3, [pc, #92]	; (8004ef8 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	61fb      	str	r3, [r7, #28]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	61bb      	str	r3, [r7, #24]
 8004eac:	e00b      	b.n	8004ec6 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	b2da      	uxtb	r2, r3
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	1c59      	adds	r1, r3, #1
 8004eb6:	61f9      	str	r1, [r7, #28]
 8004eb8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ebc:	b2d2      	uxtb	r2, r2
 8004ebe:	701a      	strb	r2, [r3, #0]
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	09db      	lsrs	r3, r3, #7
 8004ec4:	61bb      	str	r3, [r7, #24]
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	2b7f      	cmp	r3, #127	; 0x7f
 8004eca:	d8f0      	bhi.n	8004eae <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	1c5a      	adds	r2, r3, #1
 8004ed0:	61fa      	str	r2, [r7, #28]
 8004ed2:	69ba      	ldr	r2, [r7, #24]
 8004ed4:	b2d2      	uxtb	r2, r2
 8004ed6:	701a      	strb	r2, [r3, #0]
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004edc:	2204      	movs	r2, #4
 8004ede:	68f9      	ldr	r1, [r7, #12]
 8004ee0:	6938      	ldr	r0, [r7, #16]
 8004ee2:	f7fe fea1 	bl	8003c28 <_SendPacket>
  RECORD_END();
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	f383 8811 	msr	BASEPRI, r3
}
 8004eec:	bf00      	nop
 8004eee:	3720      	adds	r7, #32
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	20014390 	.word	0x20014390
 8004ef8:	20014360 	.word	0x20014360

08004efc <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b088      	sub	sp, #32
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004f04:	f3ef 8311 	mrs	r3, BASEPRI
 8004f08:	f04f 0120 	mov.w	r1, #32
 8004f0c:	f381 8811 	msr	BASEPRI, r1
 8004f10:	617b      	str	r3, [r7, #20]
 8004f12:	4819      	ldr	r0, [pc, #100]	; (8004f78 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8004f14:	f7fe fd99 	bl	8003a4a <_PreparePacket>
 8004f18:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004f1e:	4b17      	ldr	r3, [pc, #92]	; (8004f7c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	61fb      	str	r3, [r7, #28]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	61bb      	str	r3, [r7, #24]
 8004f30:	e00b      	b.n	8004f4a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	b2da      	uxtb	r2, r3
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	1c59      	adds	r1, r3, #1
 8004f3a:	61f9      	str	r1, [r7, #28]
 8004f3c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f40:	b2d2      	uxtb	r2, r2
 8004f42:	701a      	strb	r2, [r3, #0]
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	09db      	lsrs	r3, r3, #7
 8004f48:	61bb      	str	r3, [r7, #24]
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	2b7f      	cmp	r3, #127	; 0x7f
 8004f4e:	d8f0      	bhi.n	8004f32 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	1c5a      	adds	r2, r3, #1
 8004f54:	61fa      	str	r2, [r7, #28]
 8004f56:	69ba      	ldr	r2, [r7, #24]
 8004f58:	b2d2      	uxtb	r2, r2
 8004f5a:	701a      	strb	r2, [r3, #0]
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8004f60:	2206      	movs	r2, #6
 8004f62:	68f9      	ldr	r1, [r7, #12]
 8004f64:	6938      	ldr	r0, [r7, #16]
 8004f66:	f7fe fe5f 	bl	8003c28 <_SendPacket>
  RECORD_END();
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	f383 8811 	msr	BASEPRI, r3
}
 8004f70:	bf00      	nop
 8004f72:	3720      	adds	r7, #32
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	20014390 	.word	0x20014390
 8004f7c:	20014360 	.word	0x20014360

08004f80 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b08c      	sub	sp, #48	; 0x30
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	4603      	mov	r3, r0
 8004f88:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8004f8a:	4b3b      	ldr	r3, [pc, #236]	; (8005078 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d06d      	beq.n	800506e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8004f92:	4b39      	ldr	r3, [pc, #228]	; (8005078 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8004f98:	2300      	movs	r3, #0
 8004f9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f9c:	e008      	b.n	8004fb0 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8004f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8004fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d007      	beq.n	8004fba <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8004faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fac:	3301      	adds	r3, #1
 8004fae:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fb0:	79fb      	ldrb	r3, [r7, #7]
 8004fb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d3f2      	bcc.n	8004f9e <SEGGER_SYSVIEW_SendModule+0x1e>
 8004fb8:	e000      	b.n	8004fbc <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8004fba:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8004fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d055      	beq.n	800506e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004fc2:	f3ef 8311 	mrs	r3, BASEPRI
 8004fc6:	f04f 0120 	mov.w	r1, #32
 8004fca:	f381 8811 	msr	BASEPRI, r1
 8004fce:	617b      	str	r3, [r7, #20]
 8004fd0:	482a      	ldr	r0, [pc, #168]	; (800507c <SEGGER_SYSVIEW_SendModule+0xfc>)
 8004fd2:	f7fe fd3a 	bl	8003a4a <_PreparePacket>
 8004fd6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	627b      	str	r3, [r7, #36]	; 0x24
 8004fe0:	79fb      	ldrb	r3, [r7, #7]
 8004fe2:	623b      	str	r3, [r7, #32]
 8004fe4:	e00b      	b.n	8004ffe <SEGGER_SYSVIEW_SendModule+0x7e>
 8004fe6:	6a3b      	ldr	r3, [r7, #32]
 8004fe8:	b2da      	uxtb	r2, r3
 8004fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fec:	1c59      	adds	r1, r3, #1
 8004fee:	6279      	str	r1, [r7, #36]	; 0x24
 8004ff0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ff4:	b2d2      	uxtb	r2, r2
 8004ff6:	701a      	strb	r2, [r3, #0]
 8004ff8:	6a3b      	ldr	r3, [r7, #32]
 8004ffa:	09db      	lsrs	r3, r3, #7
 8004ffc:	623b      	str	r3, [r7, #32]
 8004ffe:	6a3b      	ldr	r3, [r7, #32]
 8005000:	2b7f      	cmp	r3, #127	; 0x7f
 8005002:	d8f0      	bhi.n	8004fe6 <SEGGER_SYSVIEW_SendModule+0x66>
 8005004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005006:	1c5a      	adds	r2, r3, #1
 8005008:	627a      	str	r2, [r7, #36]	; 0x24
 800500a:	6a3a      	ldr	r2, [r7, #32]
 800500c:	b2d2      	uxtb	r2, r2
 800500e:	701a      	strb	r2, [r3, #0]
 8005010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005012:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	61fb      	str	r3, [r7, #28]
 8005018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	61bb      	str	r3, [r7, #24]
 800501e:	e00b      	b.n	8005038 <SEGGER_SYSVIEW_SendModule+0xb8>
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	b2da      	uxtb	r2, r3
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	1c59      	adds	r1, r3, #1
 8005028:	61f9      	str	r1, [r7, #28]
 800502a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800502e:	b2d2      	uxtb	r2, r2
 8005030:	701a      	strb	r2, [r3, #0]
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	09db      	lsrs	r3, r3, #7
 8005036:	61bb      	str	r3, [r7, #24]
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	2b7f      	cmp	r3, #127	; 0x7f
 800503c:	d8f0      	bhi.n	8005020 <SEGGER_SYSVIEW_SendModule+0xa0>
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	1c5a      	adds	r2, r3, #1
 8005042:	61fa      	str	r2, [r7, #28]
 8005044:	69ba      	ldr	r2, [r7, #24]
 8005046:	b2d2      	uxtb	r2, r2
 8005048:	701a      	strb	r2, [r3, #0]
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800504e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	2280      	movs	r2, #128	; 0x80
 8005054:	4619      	mov	r1, r3
 8005056:	68f8      	ldr	r0, [r7, #12]
 8005058:	f7fe fcaa 	bl	80039b0 <_EncodeStr>
 800505c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800505e:	2216      	movs	r2, #22
 8005060:	68f9      	ldr	r1, [r7, #12]
 8005062:	6938      	ldr	r0, [r7, #16]
 8005064:	f7fe fde0 	bl	8003c28 <_SendPacket>
      RECORD_END();
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800506e:	bf00      	nop
 8005070:	3730      	adds	r7, #48	; 0x30
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	20014388 	.word	0x20014388
 800507c:	20014390 	.word	0x20014390

08005080 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005080:	b580      	push	{r7, lr}
 8005082:	b082      	sub	sp, #8
 8005084:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005086:	4b0c      	ldr	r3, [pc, #48]	; (80050b8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d00f      	beq.n	80050ae <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800508e:	4b0a      	ldr	r3, [pc, #40]	; (80050b8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d002      	beq.n	80050a2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d1f2      	bne.n	8005094 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80050ae:	bf00      	nop
 80050b0:	3708      	adds	r7, #8
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	20014388 	.word	0x20014388

080050bc <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80050bc:	b580      	push	{r7, lr}
 80050be:	b086      	sub	sp, #24
 80050c0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80050c2:	f3ef 8311 	mrs	r3, BASEPRI
 80050c6:	f04f 0120 	mov.w	r1, #32
 80050ca:	f381 8811 	msr	BASEPRI, r1
 80050ce:	60fb      	str	r3, [r7, #12]
 80050d0:	4817      	ldr	r0, [pc, #92]	; (8005130 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80050d2:	f7fe fcba 	bl	8003a4a <_PreparePacket>
 80050d6:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	617b      	str	r3, [r7, #20]
 80050e0:	4b14      	ldr	r3, [pc, #80]	; (8005134 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	613b      	str	r3, [r7, #16]
 80050e6:	e00b      	b.n	8005100 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	b2da      	uxtb	r2, r3
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	1c59      	adds	r1, r3, #1
 80050f0:	6179      	str	r1, [r7, #20]
 80050f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050f6:	b2d2      	uxtb	r2, r2
 80050f8:	701a      	strb	r2, [r3, #0]
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	09db      	lsrs	r3, r3, #7
 80050fe:	613b      	str	r3, [r7, #16]
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	2b7f      	cmp	r3, #127	; 0x7f
 8005104:	d8f0      	bhi.n	80050e8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	1c5a      	adds	r2, r3, #1
 800510a:	617a      	str	r2, [r7, #20]
 800510c:	693a      	ldr	r2, [r7, #16]
 800510e:	b2d2      	uxtb	r2, r2
 8005110:	701a      	strb	r2, [r3, #0]
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005116:	221b      	movs	r2, #27
 8005118:	6879      	ldr	r1, [r7, #4]
 800511a:	68b8      	ldr	r0, [r7, #8]
 800511c:	f7fe fd84 	bl	8003c28 <_SendPacket>
  RECORD_END();
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f383 8811 	msr	BASEPRI, r3
}
 8005126:	bf00      	nop
 8005128:	3718      	adds	r7, #24
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	20014390 	.word	0x20014390
 8005134:	2001438c 	.word	0x2001438c

08005138 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8005138:	b40f      	push	{r0, r1, r2, r3}
 800513a:	b580      	push	{r7, lr}
 800513c:	b082      	sub	sp, #8
 800513e:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8005140:	f107 0314 	add.w	r3, r7, #20
 8005144:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8005146:	1d3b      	adds	r3, r7, #4
 8005148:	461a      	mov	r2, r3
 800514a:	2100      	movs	r1, #0
 800514c:	6938      	ldr	r0, [r7, #16]
 800514e:	f7fe fff3 	bl	8004138 <_VPrintTarget>
  va_end(ParamList);
}
 8005152:	bf00      	nop
 8005154:	3708      	adds	r7, #8
 8005156:	46bd      	mov	sp, r7
 8005158:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800515c:	b004      	add	sp, #16
 800515e:	4770      	bx	lr

08005160 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005160:	b580      	push	{r7, lr}
 8005162:	b08a      	sub	sp, #40	; 0x28
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005168:	f3ef 8311 	mrs	r3, BASEPRI
 800516c:	f04f 0120 	mov.w	r1, #32
 8005170:	f381 8811 	msr	BASEPRI, r1
 8005174:	617b      	str	r3, [r7, #20]
 8005176:	4827      	ldr	r0, [pc, #156]	; (8005214 <SEGGER_SYSVIEW_Warn+0xb4>)
 8005178:	f7fe fc67 	bl	8003a4a <_PreparePacket>
 800517c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800517e:	2280      	movs	r2, #128	; 0x80
 8005180:	6879      	ldr	r1, [r7, #4]
 8005182:	6938      	ldr	r0, [r7, #16]
 8005184:	f7fe fc14 	bl	80039b0 <_EncodeStr>
 8005188:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	627b      	str	r3, [r7, #36]	; 0x24
 800518e:	2301      	movs	r3, #1
 8005190:	623b      	str	r3, [r7, #32]
 8005192:	e00b      	b.n	80051ac <SEGGER_SYSVIEW_Warn+0x4c>
 8005194:	6a3b      	ldr	r3, [r7, #32]
 8005196:	b2da      	uxtb	r2, r3
 8005198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519a:	1c59      	adds	r1, r3, #1
 800519c:	6279      	str	r1, [r7, #36]	; 0x24
 800519e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051a2:	b2d2      	uxtb	r2, r2
 80051a4:	701a      	strb	r2, [r3, #0]
 80051a6:	6a3b      	ldr	r3, [r7, #32]
 80051a8:	09db      	lsrs	r3, r3, #7
 80051aa:	623b      	str	r3, [r7, #32]
 80051ac:	6a3b      	ldr	r3, [r7, #32]
 80051ae:	2b7f      	cmp	r3, #127	; 0x7f
 80051b0:	d8f0      	bhi.n	8005194 <SEGGER_SYSVIEW_Warn+0x34>
 80051b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b4:	1c5a      	adds	r2, r3, #1
 80051b6:	627a      	str	r2, [r7, #36]	; 0x24
 80051b8:	6a3a      	ldr	r2, [r7, #32]
 80051ba:	b2d2      	uxtb	r2, r2
 80051bc:	701a      	strb	r2, [r3, #0]
 80051be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	61fb      	str	r3, [r7, #28]
 80051c6:	2300      	movs	r3, #0
 80051c8:	61bb      	str	r3, [r7, #24]
 80051ca:	e00b      	b.n	80051e4 <SEGGER_SYSVIEW_Warn+0x84>
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	b2da      	uxtb	r2, r3
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	1c59      	adds	r1, r3, #1
 80051d4:	61f9      	str	r1, [r7, #28]
 80051d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051da:	b2d2      	uxtb	r2, r2
 80051dc:	701a      	strb	r2, [r3, #0]
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	09db      	lsrs	r3, r3, #7
 80051e2:	61bb      	str	r3, [r7, #24]
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	2b7f      	cmp	r3, #127	; 0x7f
 80051e8:	d8f0      	bhi.n	80051cc <SEGGER_SYSVIEW_Warn+0x6c>
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	1c5a      	adds	r2, r3, #1
 80051ee:	61fa      	str	r2, [r7, #28]
 80051f0:	69ba      	ldr	r2, [r7, #24]
 80051f2:	b2d2      	uxtb	r2, r2
 80051f4:	701a      	strb	r2, [r3, #0]
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80051fa:	221a      	movs	r2, #26
 80051fc:	68f9      	ldr	r1, [r7, #12]
 80051fe:	6938      	ldr	r0, [r7, #16]
 8005200:	f7fe fd12 	bl	8003c28 <_SendPacket>
  RECORD_END();
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	f383 8811 	msr	BASEPRI, r3
}
 800520a:	bf00      	nop
 800520c:	3728      	adds	r7, #40	; 0x28
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	20014390 	.word	0x20014390

08005218 <sniprintf>:
 8005218:	b40c      	push	{r2, r3}
 800521a:	b530      	push	{r4, r5, lr}
 800521c:	4b17      	ldr	r3, [pc, #92]	; (800527c <sniprintf+0x64>)
 800521e:	1e0c      	subs	r4, r1, #0
 8005220:	681d      	ldr	r5, [r3, #0]
 8005222:	b09d      	sub	sp, #116	; 0x74
 8005224:	da08      	bge.n	8005238 <sniprintf+0x20>
 8005226:	238b      	movs	r3, #139	; 0x8b
 8005228:	602b      	str	r3, [r5, #0]
 800522a:	f04f 30ff 	mov.w	r0, #4294967295
 800522e:	b01d      	add	sp, #116	; 0x74
 8005230:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005234:	b002      	add	sp, #8
 8005236:	4770      	bx	lr
 8005238:	f44f 7302 	mov.w	r3, #520	; 0x208
 800523c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005240:	bf14      	ite	ne
 8005242:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005246:	4623      	moveq	r3, r4
 8005248:	9304      	str	r3, [sp, #16]
 800524a:	9307      	str	r3, [sp, #28]
 800524c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005250:	9002      	str	r0, [sp, #8]
 8005252:	9006      	str	r0, [sp, #24]
 8005254:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005258:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800525a:	ab21      	add	r3, sp, #132	; 0x84
 800525c:	a902      	add	r1, sp, #8
 800525e:	4628      	mov	r0, r5
 8005260:	9301      	str	r3, [sp, #4]
 8005262:	f000 f9ab 	bl	80055bc <_svfiprintf_r>
 8005266:	1c43      	adds	r3, r0, #1
 8005268:	bfbc      	itt	lt
 800526a:	238b      	movlt	r3, #139	; 0x8b
 800526c:	602b      	strlt	r3, [r5, #0]
 800526e:	2c00      	cmp	r4, #0
 8005270:	d0dd      	beq.n	800522e <sniprintf+0x16>
 8005272:	9b02      	ldr	r3, [sp, #8]
 8005274:	2200      	movs	r2, #0
 8005276:	701a      	strb	r2, [r3, #0]
 8005278:	e7d9      	b.n	800522e <sniprintf+0x16>
 800527a:	bf00      	nop
 800527c:	20000060 	.word	0x20000060

08005280 <memcmp>:
 8005280:	b510      	push	{r4, lr}
 8005282:	3901      	subs	r1, #1
 8005284:	4402      	add	r2, r0
 8005286:	4290      	cmp	r0, r2
 8005288:	d101      	bne.n	800528e <memcmp+0xe>
 800528a:	2000      	movs	r0, #0
 800528c:	e005      	b.n	800529a <memcmp+0x1a>
 800528e:	7803      	ldrb	r3, [r0, #0]
 8005290:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005294:	42a3      	cmp	r3, r4
 8005296:	d001      	beq.n	800529c <memcmp+0x1c>
 8005298:	1b18      	subs	r0, r3, r4
 800529a:	bd10      	pop	{r4, pc}
 800529c:	3001      	adds	r0, #1
 800529e:	e7f2      	b.n	8005286 <memcmp+0x6>

080052a0 <memset>:
 80052a0:	4402      	add	r2, r0
 80052a2:	4603      	mov	r3, r0
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d100      	bne.n	80052aa <memset+0xa>
 80052a8:	4770      	bx	lr
 80052aa:	f803 1b01 	strb.w	r1, [r3], #1
 80052ae:	e7f9      	b.n	80052a4 <memset+0x4>

080052b0 <__libc_init_array>:
 80052b0:	b570      	push	{r4, r5, r6, lr}
 80052b2:	4d0d      	ldr	r5, [pc, #52]	; (80052e8 <__libc_init_array+0x38>)
 80052b4:	4c0d      	ldr	r4, [pc, #52]	; (80052ec <__libc_init_array+0x3c>)
 80052b6:	1b64      	subs	r4, r4, r5
 80052b8:	10a4      	asrs	r4, r4, #2
 80052ba:	2600      	movs	r6, #0
 80052bc:	42a6      	cmp	r6, r4
 80052be:	d109      	bne.n	80052d4 <__libc_init_array+0x24>
 80052c0:	4d0b      	ldr	r5, [pc, #44]	; (80052f0 <__libc_init_array+0x40>)
 80052c2:	4c0c      	ldr	r4, [pc, #48]	; (80052f4 <__libc_init_array+0x44>)
 80052c4:	f000 fc78 	bl	8005bb8 <_init>
 80052c8:	1b64      	subs	r4, r4, r5
 80052ca:	10a4      	asrs	r4, r4, #2
 80052cc:	2600      	movs	r6, #0
 80052ce:	42a6      	cmp	r6, r4
 80052d0:	d105      	bne.n	80052de <__libc_init_array+0x2e>
 80052d2:	bd70      	pop	{r4, r5, r6, pc}
 80052d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80052d8:	4798      	blx	r3
 80052da:	3601      	adds	r6, #1
 80052dc:	e7ee      	b.n	80052bc <__libc_init_array+0xc>
 80052de:	f855 3b04 	ldr.w	r3, [r5], #4
 80052e2:	4798      	blx	r3
 80052e4:	3601      	adds	r6, #1
 80052e6:	e7f2      	b.n	80052ce <__libc_init_array+0x1e>
 80052e8:	08005d60 	.word	0x08005d60
 80052ec:	08005d60 	.word	0x08005d60
 80052f0:	08005d60 	.word	0x08005d60
 80052f4:	08005d64 	.word	0x08005d64

080052f8 <__retarget_lock_acquire_recursive>:
 80052f8:	4770      	bx	lr

080052fa <__retarget_lock_release_recursive>:
 80052fa:	4770      	bx	lr

080052fc <memcpy>:
 80052fc:	440a      	add	r2, r1
 80052fe:	4291      	cmp	r1, r2
 8005300:	f100 33ff 	add.w	r3, r0, #4294967295
 8005304:	d100      	bne.n	8005308 <memcpy+0xc>
 8005306:	4770      	bx	lr
 8005308:	b510      	push	{r4, lr}
 800530a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800530e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005312:	4291      	cmp	r1, r2
 8005314:	d1f9      	bne.n	800530a <memcpy+0xe>
 8005316:	bd10      	pop	{r4, pc}

08005318 <_free_r>:
 8005318:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800531a:	2900      	cmp	r1, #0
 800531c:	d044      	beq.n	80053a8 <_free_r+0x90>
 800531e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005322:	9001      	str	r0, [sp, #4]
 8005324:	2b00      	cmp	r3, #0
 8005326:	f1a1 0404 	sub.w	r4, r1, #4
 800532a:	bfb8      	it	lt
 800532c:	18e4      	addlt	r4, r4, r3
 800532e:	f000 f8df 	bl	80054f0 <__malloc_lock>
 8005332:	4a1e      	ldr	r2, [pc, #120]	; (80053ac <_free_r+0x94>)
 8005334:	9801      	ldr	r0, [sp, #4]
 8005336:	6813      	ldr	r3, [r2, #0]
 8005338:	b933      	cbnz	r3, 8005348 <_free_r+0x30>
 800533a:	6063      	str	r3, [r4, #4]
 800533c:	6014      	str	r4, [r2, #0]
 800533e:	b003      	add	sp, #12
 8005340:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005344:	f000 b8da 	b.w	80054fc <__malloc_unlock>
 8005348:	42a3      	cmp	r3, r4
 800534a:	d908      	bls.n	800535e <_free_r+0x46>
 800534c:	6825      	ldr	r5, [r4, #0]
 800534e:	1961      	adds	r1, r4, r5
 8005350:	428b      	cmp	r3, r1
 8005352:	bf01      	itttt	eq
 8005354:	6819      	ldreq	r1, [r3, #0]
 8005356:	685b      	ldreq	r3, [r3, #4]
 8005358:	1949      	addeq	r1, r1, r5
 800535a:	6021      	streq	r1, [r4, #0]
 800535c:	e7ed      	b.n	800533a <_free_r+0x22>
 800535e:	461a      	mov	r2, r3
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	b10b      	cbz	r3, 8005368 <_free_r+0x50>
 8005364:	42a3      	cmp	r3, r4
 8005366:	d9fa      	bls.n	800535e <_free_r+0x46>
 8005368:	6811      	ldr	r1, [r2, #0]
 800536a:	1855      	adds	r5, r2, r1
 800536c:	42a5      	cmp	r5, r4
 800536e:	d10b      	bne.n	8005388 <_free_r+0x70>
 8005370:	6824      	ldr	r4, [r4, #0]
 8005372:	4421      	add	r1, r4
 8005374:	1854      	adds	r4, r2, r1
 8005376:	42a3      	cmp	r3, r4
 8005378:	6011      	str	r1, [r2, #0]
 800537a:	d1e0      	bne.n	800533e <_free_r+0x26>
 800537c:	681c      	ldr	r4, [r3, #0]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	6053      	str	r3, [r2, #4]
 8005382:	440c      	add	r4, r1
 8005384:	6014      	str	r4, [r2, #0]
 8005386:	e7da      	b.n	800533e <_free_r+0x26>
 8005388:	d902      	bls.n	8005390 <_free_r+0x78>
 800538a:	230c      	movs	r3, #12
 800538c:	6003      	str	r3, [r0, #0]
 800538e:	e7d6      	b.n	800533e <_free_r+0x26>
 8005390:	6825      	ldr	r5, [r4, #0]
 8005392:	1961      	adds	r1, r4, r5
 8005394:	428b      	cmp	r3, r1
 8005396:	bf04      	itt	eq
 8005398:	6819      	ldreq	r1, [r3, #0]
 800539a:	685b      	ldreq	r3, [r3, #4]
 800539c:	6063      	str	r3, [r4, #4]
 800539e:	bf04      	itt	eq
 80053a0:	1949      	addeq	r1, r1, r5
 80053a2:	6021      	streq	r1, [r4, #0]
 80053a4:	6054      	str	r4, [r2, #4]
 80053a6:	e7ca      	b.n	800533e <_free_r+0x26>
 80053a8:	b003      	add	sp, #12
 80053aa:	bd30      	pop	{r4, r5, pc}
 80053ac:	200145b4 	.word	0x200145b4

080053b0 <sbrk_aligned>:
 80053b0:	b570      	push	{r4, r5, r6, lr}
 80053b2:	4e0e      	ldr	r6, [pc, #56]	; (80053ec <sbrk_aligned+0x3c>)
 80053b4:	460c      	mov	r4, r1
 80053b6:	6831      	ldr	r1, [r6, #0]
 80053b8:	4605      	mov	r5, r0
 80053ba:	b911      	cbnz	r1, 80053c2 <sbrk_aligned+0x12>
 80053bc:	f000 fba6 	bl	8005b0c <_sbrk_r>
 80053c0:	6030      	str	r0, [r6, #0]
 80053c2:	4621      	mov	r1, r4
 80053c4:	4628      	mov	r0, r5
 80053c6:	f000 fba1 	bl	8005b0c <_sbrk_r>
 80053ca:	1c43      	adds	r3, r0, #1
 80053cc:	d00a      	beq.n	80053e4 <sbrk_aligned+0x34>
 80053ce:	1cc4      	adds	r4, r0, #3
 80053d0:	f024 0403 	bic.w	r4, r4, #3
 80053d4:	42a0      	cmp	r0, r4
 80053d6:	d007      	beq.n	80053e8 <sbrk_aligned+0x38>
 80053d8:	1a21      	subs	r1, r4, r0
 80053da:	4628      	mov	r0, r5
 80053dc:	f000 fb96 	bl	8005b0c <_sbrk_r>
 80053e0:	3001      	adds	r0, #1
 80053e2:	d101      	bne.n	80053e8 <sbrk_aligned+0x38>
 80053e4:	f04f 34ff 	mov.w	r4, #4294967295
 80053e8:	4620      	mov	r0, r4
 80053ea:	bd70      	pop	{r4, r5, r6, pc}
 80053ec:	200145b8 	.word	0x200145b8

080053f0 <_malloc_r>:
 80053f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053f4:	1ccd      	adds	r5, r1, #3
 80053f6:	f025 0503 	bic.w	r5, r5, #3
 80053fa:	3508      	adds	r5, #8
 80053fc:	2d0c      	cmp	r5, #12
 80053fe:	bf38      	it	cc
 8005400:	250c      	movcc	r5, #12
 8005402:	2d00      	cmp	r5, #0
 8005404:	4607      	mov	r7, r0
 8005406:	db01      	blt.n	800540c <_malloc_r+0x1c>
 8005408:	42a9      	cmp	r1, r5
 800540a:	d905      	bls.n	8005418 <_malloc_r+0x28>
 800540c:	230c      	movs	r3, #12
 800540e:	603b      	str	r3, [r7, #0]
 8005410:	2600      	movs	r6, #0
 8005412:	4630      	mov	r0, r6
 8005414:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005418:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80054ec <_malloc_r+0xfc>
 800541c:	f000 f868 	bl	80054f0 <__malloc_lock>
 8005420:	f8d8 3000 	ldr.w	r3, [r8]
 8005424:	461c      	mov	r4, r3
 8005426:	bb5c      	cbnz	r4, 8005480 <_malloc_r+0x90>
 8005428:	4629      	mov	r1, r5
 800542a:	4638      	mov	r0, r7
 800542c:	f7ff ffc0 	bl	80053b0 <sbrk_aligned>
 8005430:	1c43      	adds	r3, r0, #1
 8005432:	4604      	mov	r4, r0
 8005434:	d155      	bne.n	80054e2 <_malloc_r+0xf2>
 8005436:	f8d8 4000 	ldr.w	r4, [r8]
 800543a:	4626      	mov	r6, r4
 800543c:	2e00      	cmp	r6, #0
 800543e:	d145      	bne.n	80054cc <_malloc_r+0xdc>
 8005440:	2c00      	cmp	r4, #0
 8005442:	d048      	beq.n	80054d6 <_malloc_r+0xe6>
 8005444:	6823      	ldr	r3, [r4, #0]
 8005446:	4631      	mov	r1, r6
 8005448:	4638      	mov	r0, r7
 800544a:	eb04 0903 	add.w	r9, r4, r3
 800544e:	f000 fb5d 	bl	8005b0c <_sbrk_r>
 8005452:	4581      	cmp	r9, r0
 8005454:	d13f      	bne.n	80054d6 <_malloc_r+0xe6>
 8005456:	6821      	ldr	r1, [r4, #0]
 8005458:	1a6d      	subs	r5, r5, r1
 800545a:	4629      	mov	r1, r5
 800545c:	4638      	mov	r0, r7
 800545e:	f7ff ffa7 	bl	80053b0 <sbrk_aligned>
 8005462:	3001      	adds	r0, #1
 8005464:	d037      	beq.n	80054d6 <_malloc_r+0xe6>
 8005466:	6823      	ldr	r3, [r4, #0]
 8005468:	442b      	add	r3, r5
 800546a:	6023      	str	r3, [r4, #0]
 800546c:	f8d8 3000 	ldr.w	r3, [r8]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d038      	beq.n	80054e6 <_malloc_r+0xf6>
 8005474:	685a      	ldr	r2, [r3, #4]
 8005476:	42a2      	cmp	r2, r4
 8005478:	d12b      	bne.n	80054d2 <_malloc_r+0xe2>
 800547a:	2200      	movs	r2, #0
 800547c:	605a      	str	r2, [r3, #4]
 800547e:	e00f      	b.n	80054a0 <_malloc_r+0xb0>
 8005480:	6822      	ldr	r2, [r4, #0]
 8005482:	1b52      	subs	r2, r2, r5
 8005484:	d41f      	bmi.n	80054c6 <_malloc_r+0xd6>
 8005486:	2a0b      	cmp	r2, #11
 8005488:	d917      	bls.n	80054ba <_malloc_r+0xca>
 800548a:	1961      	adds	r1, r4, r5
 800548c:	42a3      	cmp	r3, r4
 800548e:	6025      	str	r5, [r4, #0]
 8005490:	bf18      	it	ne
 8005492:	6059      	strne	r1, [r3, #4]
 8005494:	6863      	ldr	r3, [r4, #4]
 8005496:	bf08      	it	eq
 8005498:	f8c8 1000 	streq.w	r1, [r8]
 800549c:	5162      	str	r2, [r4, r5]
 800549e:	604b      	str	r3, [r1, #4]
 80054a0:	4638      	mov	r0, r7
 80054a2:	f104 060b 	add.w	r6, r4, #11
 80054a6:	f000 f829 	bl	80054fc <__malloc_unlock>
 80054aa:	f026 0607 	bic.w	r6, r6, #7
 80054ae:	1d23      	adds	r3, r4, #4
 80054b0:	1af2      	subs	r2, r6, r3
 80054b2:	d0ae      	beq.n	8005412 <_malloc_r+0x22>
 80054b4:	1b9b      	subs	r3, r3, r6
 80054b6:	50a3      	str	r3, [r4, r2]
 80054b8:	e7ab      	b.n	8005412 <_malloc_r+0x22>
 80054ba:	42a3      	cmp	r3, r4
 80054bc:	6862      	ldr	r2, [r4, #4]
 80054be:	d1dd      	bne.n	800547c <_malloc_r+0x8c>
 80054c0:	f8c8 2000 	str.w	r2, [r8]
 80054c4:	e7ec      	b.n	80054a0 <_malloc_r+0xb0>
 80054c6:	4623      	mov	r3, r4
 80054c8:	6864      	ldr	r4, [r4, #4]
 80054ca:	e7ac      	b.n	8005426 <_malloc_r+0x36>
 80054cc:	4634      	mov	r4, r6
 80054ce:	6876      	ldr	r6, [r6, #4]
 80054d0:	e7b4      	b.n	800543c <_malloc_r+0x4c>
 80054d2:	4613      	mov	r3, r2
 80054d4:	e7cc      	b.n	8005470 <_malloc_r+0x80>
 80054d6:	230c      	movs	r3, #12
 80054d8:	603b      	str	r3, [r7, #0]
 80054da:	4638      	mov	r0, r7
 80054dc:	f000 f80e 	bl	80054fc <__malloc_unlock>
 80054e0:	e797      	b.n	8005412 <_malloc_r+0x22>
 80054e2:	6025      	str	r5, [r4, #0]
 80054e4:	e7dc      	b.n	80054a0 <_malloc_r+0xb0>
 80054e6:	605b      	str	r3, [r3, #4]
 80054e8:	deff      	udf	#255	; 0xff
 80054ea:	bf00      	nop
 80054ec:	200145b4 	.word	0x200145b4

080054f0 <__malloc_lock>:
 80054f0:	4801      	ldr	r0, [pc, #4]	; (80054f8 <__malloc_lock+0x8>)
 80054f2:	f7ff bf01 	b.w	80052f8 <__retarget_lock_acquire_recursive>
 80054f6:	bf00      	nop
 80054f8:	200145b0 	.word	0x200145b0

080054fc <__malloc_unlock>:
 80054fc:	4801      	ldr	r0, [pc, #4]	; (8005504 <__malloc_unlock+0x8>)
 80054fe:	f7ff befc 	b.w	80052fa <__retarget_lock_release_recursive>
 8005502:	bf00      	nop
 8005504:	200145b0 	.word	0x200145b0

08005508 <__ssputs_r>:
 8005508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800550c:	688e      	ldr	r6, [r1, #8]
 800550e:	461f      	mov	r7, r3
 8005510:	42be      	cmp	r6, r7
 8005512:	680b      	ldr	r3, [r1, #0]
 8005514:	4682      	mov	sl, r0
 8005516:	460c      	mov	r4, r1
 8005518:	4690      	mov	r8, r2
 800551a:	d82c      	bhi.n	8005576 <__ssputs_r+0x6e>
 800551c:	898a      	ldrh	r2, [r1, #12]
 800551e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005522:	d026      	beq.n	8005572 <__ssputs_r+0x6a>
 8005524:	6965      	ldr	r5, [r4, #20]
 8005526:	6909      	ldr	r1, [r1, #16]
 8005528:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800552c:	eba3 0901 	sub.w	r9, r3, r1
 8005530:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005534:	1c7b      	adds	r3, r7, #1
 8005536:	444b      	add	r3, r9
 8005538:	106d      	asrs	r5, r5, #1
 800553a:	429d      	cmp	r5, r3
 800553c:	bf38      	it	cc
 800553e:	461d      	movcc	r5, r3
 8005540:	0553      	lsls	r3, r2, #21
 8005542:	d527      	bpl.n	8005594 <__ssputs_r+0x8c>
 8005544:	4629      	mov	r1, r5
 8005546:	f7ff ff53 	bl	80053f0 <_malloc_r>
 800554a:	4606      	mov	r6, r0
 800554c:	b360      	cbz	r0, 80055a8 <__ssputs_r+0xa0>
 800554e:	6921      	ldr	r1, [r4, #16]
 8005550:	464a      	mov	r2, r9
 8005552:	f7ff fed3 	bl	80052fc <memcpy>
 8005556:	89a3      	ldrh	r3, [r4, #12]
 8005558:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800555c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005560:	81a3      	strh	r3, [r4, #12]
 8005562:	6126      	str	r6, [r4, #16]
 8005564:	6165      	str	r5, [r4, #20]
 8005566:	444e      	add	r6, r9
 8005568:	eba5 0509 	sub.w	r5, r5, r9
 800556c:	6026      	str	r6, [r4, #0]
 800556e:	60a5      	str	r5, [r4, #8]
 8005570:	463e      	mov	r6, r7
 8005572:	42be      	cmp	r6, r7
 8005574:	d900      	bls.n	8005578 <__ssputs_r+0x70>
 8005576:	463e      	mov	r6, r7
 8005578:	6820      	ldr	r0, [r4, #0]
 800557a:	4632      	mov	r2, r6
 800557c:	4641      	mov	r1, r8
 800557e:	f000 faab 	bl	8005ad8 <memmove>
 8005582:	68a3      	ldr	r3, [r4, #8]
 8005584:	1b9b      	subs	r3, r3, r6
 8005586:	60a3      	str	r3, [r4, #8]
 8005588:	6823      	ldr	r3, [r4, #0]
 800558a:	4433      	add	r3, r6
 800558c:	6023      	str	r3, [r4, #0]
 800558e:	2000      	movs	r0, #0
 8005590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005594:	462a      	mov	r2, r5
 8005596:	f000 fac9 	bl	8005b2c <_realloc_r>
 800559a:	4606      	mov	r6, r0
 800559c:	2800      	cmp	r0, #0
 800559e:	d1e0      	bne.n	8005562 <__ssputs_r+0x5a>
 80055a0:	6921      	ldr	r1, [r4, #16]
 80055a2:	4650      	mov	r0, sl
 80055a4:	f7ff feb8 	bl	8005318 <_free_r>
 80055a8:	230c      	movs	r3, #12
 80055aa:	f8ca 3000 	str.w	r3, [sl]
 80055ae:	89a3      	ldrh	r3, [r4, #12]
 80055b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055b4:	81a3      	strh	r3, [r4, #12]
 80055b6:	f04f 30ff 	mov.w	r0, #4294967295
 80055ba:	e7e9      	b.n	8005590 <__ssputs_r+0x88>

080055bc <_svfiprintf_r>:
 80055bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055c0:	4698      	mov	r8, r3
 80055c2:	898b      	ldrh	r3, [r1, #12]
 80055c4:	061b      	lsls	r3, r3, #24
 80055c6:	b09d      	sub	sp, #116	; 0x74
 80055c8:	4607      	mov	r7, r0
 80055ca:	460d      	mov	r5, r1
 80055cc:	4614      	mov	r4, r2
 80055ce:	d50e      	bpl.n	80055ee <_svfiprintf_r+0x32>
 80055d0:	690b      	ldr	r3, [r1, #16]
 80055d2:	b963      	cbnz	r3, 80055ee <_svfiprintf_r+0x32>
 80055d4:	2140      	movs	r1, #64	; 0x40
 80055d6:	f7ff ff0b 	bl	80053f0 <_malloc_r>
 80055da:	6028      	str	r0, [r5, #0]
 80055dc:	6128      	str	r0, [r5, #16]
 80055de:	b920      	cbnz	r0, 80055ea <_svfiprintf_r+0x2e>
 80055e0:	230c      	movs	r3, #12
 80055e2:	603b      	str	r3, [r7, #0]
 80055e4:	f04f 30ff 	mov.w	r0, #4294967295
 80055e8:	e0d0      	b.n	800578c <_svfiprintf_r+0x1d0>
 80055ea:	2340      	movs	r3, #64	; 0x40
 80055ec:	616b      	str	r3, [r5, #20]
 80055ee:	2300      	movs	r3, #0
 80055f0:	9309      	str	r3, [sp, #36]	; 0x24
 80055f2:	2320      	movs	r3, #32
 80055f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80055f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80055fc:	2330      	movs	r3, #48	; 0x30
 80055fe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80057a4 <_svfiprintf_r+0x1e8>
 8005602:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005606:	f04f 0901 	mov.w	r9, #1
 800560a:	4623      	mov	r3, r4
 800560c:	469a      	mov	sl, r3
 800560e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005612:	b10a      	cbz	r2, 8005618 <_svfiprintf_r+0x5c>
 8005614:	2a25      	cmp	r2, #37	; 0x25
 8005616:	d1f9      	bne.n	800560c <_svfiprintf_r+0x50>
 8005618:	ebba 0b04 	subs.w	fp, sl, r4
 800561c:	d00b      	beq.n	8005636 <_svfiprintf_r+0x7a>
 800561e:	465b      	mov	r3, fp
 8005620:	4622      	mov	r2, r4
 8005622:	4629      	mov	r1, r5
 8005624:	4638      	mov	r0, r7
 8005626:	f7ff ff6f 	bl	8005508 <__ssputs_r>
 800562a:	3001      	adds	r0, #1
 800562c:	f000 80a9 	beq.w	8005782 <_svfiprintf_r+0x1c6>
 8005630:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005632:	445a      	add	r2, fp
 8005634:	9209      	str	r2, [sp, #36]	; 0x24
 8005636:	f89a 3000 	ldrb.w	r3, [sl]
 800563a:	2b00      	cmp	r3, #0
 800563c:	f000 80a1 	beq.w	8005782 <_svfiprintf_r+0x1c6>
 8005640:	2300      	movs	r3, #0
 8005642:	f04f 32ff 	mov.w	r2, #4294967295
 8005646:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800564a:	f10a 0a01 	add.w	sl, sl, #1
 800564e:	9304      	str	r3, [sp, #16]
 8005650:	9307      	str	r3, [sp, #28]
 8005652:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005656:	931a      	str	r3, [sp, #104]	; 0x68
 8005658:	4654      	mov	r4, sl
 800565a:	2205      	movs	r2, #5
 800565c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005660:	4850      	ldr	r0, [pc, #320]	; (80057a4 <_svfiprintf_r+0x1e8>)
 8005662:	f7fa fe2d 	bl	80002c0 <memchr>
 8005666:	9a04      	ldr	r2, [sp, #16]
 8005668:	b9d8      	cbnz	r0, 80056a2 <_svfiprintf_r+0xe6>
 800566a:	06d0      	lsls	r0, r2, #27
 800566c:	bf44      	itt	mi
 800566e:	2320      	movmi	r3, #32
 8005670:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005674:	0711      	lsls	r1, r2, #28
 8005676:	bf44      	itt	mi
 8005678:	232b      	movmi	r3, #43	; 0x2b
 800567a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800567e:	f89a 3000 	ldrb.w	r3, [sl]
 8005682:	2b2a      	cmp	r3, #42	; 0x2a
 8005684:	d015      	beq.n	80056b2 <_svfiprintf_r+0xf6>
 8005686:	9a07      	ldr	r2, [sp, #28]
 8005688:	4654      	mov	r4, sl
 800568a:	2000      	movs	r0, #0
 800568c:	f04f 0c0a 	mov.w	ip, #10
 8005690:	4621      	mov	r1, r4
 8005692:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005696:	3b30      	subs	r3, #48	; 0x30
 8005698:	2b09      	cmp	r3, #9
 800569a:	d94d      	bls.n	8005738 <_svfiprintf_r+0x17c>
 800569c:	b1b0      	cbz	r0, 80056cc <_svfiprintf_r+0x110>
 800569e:	9207      	str	r2, [sp, #28]
 80056a0:	e014      	b.n	80056cc <_svfiprintf_r+0x110>
 80056a2:	eba0 0308 	sub.w	r3, r0, r8
 80056a6:	fa09 f303 	lsl.w	r3, r9, r3
 80056aa:	4313      	orrs	r3, r2
 80056ac:	9304      	str	r3, [sp, #16]
 80056ae:	46a2      	mov	sl, r4
 80056b0:	e7d2      	b.n	8005658 <_svfiprintf_r+0x9c>
 80056b2:	9b03      	ldr	r3, [sp, #12]
 80056b4:	1d19      	adds	r1, r3, #4
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	9103      	str	r1, [sp, #12]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	bfbb      	ittet	lt
 80056be:	425b      	neglt	r3, r3
 80056c0:	f042 0202 	orrlt.w	r2, r2, #2
 80056c4:	9307      	strge	r3, [sp, #28]
 80056c6:	9307      	strlt	r3, [sp, #28]
 80056c8:	bfb8      	it	lt
 80056ca:	9204      	strlt	r2, [sp, #16]
 80056cc:	7823      	ldrb	r3, [r4, #0]
 80056ce:	2b2e      	cmp	r3, #46	; 0x2e
 80056d0:	d10c      	bne.n	80056ec <_svfiprintf_r+0x130>
 80056d2:	7863      	ldrb	r3, [r4, #1]
 80056d4:	2b2a      	cmp	r3, #42	; 0x2a
 80056d6:	d134      	bne.n	8005742 <_svfiprintf_r+0x186>
 80056d8:	9b03      	ldr	r3, [sp, #12]
 80056da:	1d1a      	adds	r2, r3, #4
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	9203      	str	r2, [sp, #12]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	bfb8      	it	lt
 80056e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80056e8:	3402      	adds	r4, #2
 80056ea:	9305      	str	r3, [sp, #20]
 80056ec:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80057b4 <_svfiprintf_r+0x1f8>
 80056f0:	7821      	ldrb	r1, [r4, #0]
 80056f2:	2203      	movs	r2, #3
 80056f4:	4650      	mov	r0, sl
 80056f6:	f7fa fde3 	bl	80002c0 <memchr>
 80056fa:	b138      	cbz	r0, 800570c <_svfiprintf_r+0x150>
 80056fc:	9b04      	ldr	r3, [sp, #16]
 80056fe:	eba0 000a 	sub.w	r0, r0, sl
 8005702:	2240      	movs	r2, #64	; 0x40
 8005704:	4082      	lsls	r2, r0
 8005706:	4313      	orrs	r3, r2
 8005708:	3401      	adds	r4, #1
 800570a:	9304      	str	r3, [sp, #16]
 800570c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005710:	4825      	ldr	r0, [pc, #148]	; (80057a8 <_svfiprintf_r+0x1ec>)
 8005712:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005716:	2206      	movs	r2, #6
 8005718:	f7fa fdd2 	bl	80002c0 <memchr>
 800571c:	2800      	cmp	r0, #0
 800571e:	d038      	beq.n	8005792 <_svfiprintf_r+0x1d6>
 8005720:	4b22      	ldr	r3, [pc, #136]	; (80057ac <_svfiprintf_r+0x1f0>)
 8005722:	bb1b      	cbnz	r3, 800576c <_svfiprintf_r+0x1b0>
 8005724:	9b03      	ldr	r3, [sp, #12]
 8005726:	3307      	adds	r3, #7
 8005728:	f023 0307 	bic.w	r3, r3, #7
 800572c:	3308      	adds	r3, #8
 800572e:	9303      	str	r3, [sp, #12]
 8005730:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005732:	4433      	add	r3, r6
 8005734:	9309      	str	r3, [sp, #36]	; 0x24
 8005736:	e768      	b.n	800560a <_svfiprintf_r+0x4e>
 8005738:	fb0c 3202 	mla	r2, ip, r2, r3
 800573c:	460c      	mov	r4, r1
 800573e:	2001      	movs	r0, #1
 8005740:	e7a6      	b.n	8005690 <_svfiprintf_r+0xd4>
 8005742:	2300      	movs	r3, #0
 8005744:	3401      	adds	r4, #1
 8005746:	9305      	str	r3, [sp, #20]
 8005748:	4619      	mov	r1, r3
 800574a:	f04f 0c0a 	mov.w	ip, #10
 800574e:	4620      	mov	r0, r4
 8005750:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005754:	3a30      	subs	r2, #48	; 0x30
 8005756:	2a09      	cmp	r2, #9
 8005758:	d903      	bls.n	8005762 <_svfiprintf_r+0x1a6>
 800575a:	2b00      	cmp	r3, #0
 800575c:	d0c6      	beq.n	80056ec <_svfiprintf_r+0x130>
 800575e:	9105      	str	r1, [sp, #20]
 8005760:	e7c4      	b.n	80056ec <_svfiprintf_r+0x130>
 8005762:	fb0c 2101 	mla	r1, ip, r1, r2
 8005766:	4604      	mov	r4, r0
 8005768:	2301      	movs	r3, #1
 800576a:	e7f0      	b.n	800574e <_svfiprintf_r+0x192>
 800576c:	ab03      	add	r3, sp, #12
 800576e:	9300      	str	r3, [sp, #0]
 8005770:	462a      	mov	r2, r5
 8005772:	4b0f      	ldr	r3, [pc, #60]	; (80057b0 <_svfiprintf_r+0x1f4>)
 8005774:	a904      	add	r1, sp, #16
 8005776:	4638      	mov	r0, r7
 8005778:	f3af 8000 	nop.w
 800577c:	1c42      	adds	r2, r0, #1
 800577e:	4606      	mov	r6, r0
 8005780:	d1d6      	bne.n	8005730 <_svfiprintf_r+0x174>
 8005782:	89ab      	ldrh	r3, [r5, #12]
 8005784:	065b      	lsls	r3, r3, #25
 8005786:	f53f af2d 	bmi.w	80055e4 <_svfiprintf_r+0x28>
 800578a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800578c:	b01d      	add	sp, #116	; 0x74
 800578e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005792:	ab03      	add	r3, sp, #12
 8005794:	9300      	str	r3, [sp, #0]
 8005796:	462a      	mov	r2, r5
 8005798:	4b05      	ldr	r3, [pc, #20]	; (80057b0 <_svfiprintf_r+0x1f4>)
 800579a:	a904      	add	r1, sp, #16
 800579c:	4638      	mov	r0, r7
 800579e:	f000 f879 	bl	8005894 <_printf_i>
 80057a2:	e7eb      	b.n	800577c <_svfiprintf_r+0x1c0>
 80057a4:	08005d2c 	.word	0x08005d2c
 80057a8:	08005d36 	.word	0x08005d36
 80057ac:	00000000 	.word	0x00000000
 80057b0:	08005509 	.word	0x08005509
 80057b4:	08005d32 	.word	0x08005d32

080057b8 <_printf_common>:
 80057b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057bc:	4616      	mov	r6, r2
 80057be:	4699      	mov	r9, r3
 80057c0:	688a      	ldr	r2, [r1, #8]
 80057c2:	690b      	ldr	r3, [r1, #16]
 80057c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80057c8:	4293      	cmp	r3, r2
 80057ca:	bfb8      	it	lt
 80057cc:	4613      	movlt	r3, r2
 80057ce:	6033      	str	r3, [r6, #0]
 80057d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80057d4:	4607      	mov	r7, r0
 80057d6:	460c      	mov	r4, r1
 80057d8:	b10a      	cbz	r2, 80057de <_printf_common+0x26>
 80057da:	3301      	adds	r3, #1
 80057dc:	6033      	str	r3, [r6, #0]
 80057de:	6823      	ldr	r3, [r4, #0]
 80057e0:	0699      	lsls	r1, r3, #26
 80057e2:	bf42      	ittt	mi
 80057e4:	6833      	ldrmi	r3, [r6, #0]
 80057e6:	3302      	addmi	r3, #2
 80057e8:	6033      	strmi	r3, [r6, #0]
 80057ea:	6825      	ldr	r5, [r4, #0]
 80057ec:	f015 0506 	ands.w	r5, r5, #6
 80057f0:	d106      	bne.n	8005800 <_printf_common+0x48>
 80057f2:	f104 0a19 	add.w	sl, r4, #25
 80057f6:	68e3      	ldr	r3, [r4, #12]
 80057f8:	6832      	ldr	r2, [r6, #0]
 80057fa:	1a9b      	subs	r3, r3, r2
 80057fc:	42ab      	cmp	r3, r5
 80057fe:	dc26      	bgt.n	800584e <_printf_common+0x96>
 8005800:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005804:	1e13      	subs	r3, r2, #0
 8005806:	6822      	ldr	r2, [r4, #0]
 8005808:	bf18      	it	ne
 800580a:	2301      	movne	r3, #1
 800580c:	0692      	lsls	r2, r2, #26
 800580e:	d42b      	bmi.n	8005868 <_printf_common+0xb0>
 8005810:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005814:	4649      	mov	r1, r9
 8005816:	4638      	mov	r0, r7
 8005818:	47c0      	blx	r8
 800581a:	3001      	adds	r0, #1
 800581c:	d01e      	beq.n	800585c <_printf_common+0xa4>
 800581e:	6823      	ldr	r3, [r4, #0]
 8005820:	6922      	ldr	r2, [r4, #16]
 8005822:	f003 0306 	and.w	r3, r3, #6
 8005826:	2b04      	cmp	r3, #4
 8005828:	bf02      	ittt	eq
 800582a:	68e5      	ldreq	r5, [r4, #12]
 800582c:	6833      	ldreq	r3, [r6, #0]
 800582e:	1aed      	subeq	r5, r5, r3
 8005830:	68a3      	ldr	r3, [r4, #8]
 8005832:	bf0c      	ite	eq
 8005834:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005838:	2500      	movne	r5, #0
 800583a:	4293      	cmp	r3, r2
 800583c:	bfc4      	itt	gt
 800583e:	1a9b      	subgt	r3, r3, r2
 8005840:	18ed      	addgt	r5, r5, r3
 8005842:	2600      	movs	r6, #0
 8005844:	341a      	adds	r4, #26
 8005846:	42b5      	cmp	r5, r6
 8005848:	d11a      	bne.n	8005880 <_printf_common+0xc8>
 800584a:	2000      	movs	r0, #0
 800584c:	e008      	b.n	8005860 <_printf_common+0xa8>
 800584e:	2301      	movs	r3, #1
 8005850:	4652      	mov	r2, sl
 8005852:	4649      	mov	r1, r9
 8005854:	4638      	mov	r0, r7
 8005856:	47c0      	blx	r8
 8005858:	3001      	adds	r0, #1
 800585a:	d103      	bne.n	8005864 <_printf_common+0xac>
 800585c:	f04f 30ff 	mov.w	r0, #4294967295
 8005860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005864:	3501      	adds	r5, #1
 8005866:	e7c6      	b.n	80057f6 <_printf_common+0x3e>
 8005868:	18e1      	adds	r1, r4, r3
 800586a:	1c5a      	adds	r2, r3, #1
 800586c:	2030      	movs	r0, #48	; 0x30
 800586e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005872:	4422      	add	r2, r4
 8005874:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005878:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800587c:	3302      	adds	r3, #2
 800587e:	e7c7      	b.n	8005810 <_printf_common+0x58>
 8005880:	2301      	movs	r3, #1
 8005882:	4622      	mov	r2, r4
 8005884:	4649      	mov	r1, r9
 8005886:	4638      	mov	r0, r7
 8005888:	47c0      	blx	r8
 800588a:	3001      	adds	r0, #1
 800588c:	d0e6      	beq.n	800585c <_printf_common+0xa4>
 800588e:	3601      	adds	r6, #1
 8005890:	e7d9      	b.n	8005846 <_printf_common+0x8e>
	...

08005894 <_printf_i>:
 8005894:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005898:	7e0f      	ldrb	r7, [r1, #24]
 800589a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800589c:	2f78      	cmp	r7, #120	; 0x78
 800589e:	4691      	mov	r9, r2
 80058a0:	4680      	mov	r8, r0
 80058a2:	460c      	mov	r4, r1
 80058a4:	469a      	mov	sl, r3
 80058a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80058aa:	d807      	bhi.n	80058bc <_printf_i+0x28>
 80058ac:	2f62      	cmp	r7, #98	; 0x62
 80058ae:	d80a      	bhi.n	80058c6 <_printf_i+0x32>
 80058b0:	2f00      	cmp	r7, #0
 80058b2:	f000 80d4 	beq.w	8005a5e <_printf_i+0x1ca>
 80058b6:	2f58      	cmp	r7, #88	; 0x58
 80058b8:	f000 80c0 	beq.w	8005a3c <_printf_i+0x1a8>
 80058bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80058c4:	e03a      	b.n	800593c <_printf_i+0xa8>
 80058c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80058ca:	2b15      	cmp	r3, #21
 80058cc:	d8f6      	bhi.n	80058bc <_printf_i+0x28>
 80058ce:	a101      	add	r1, pc, #4	; (adr r1, 80058d4 <_printf_i+0x40>)
 80058d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80058d4:	0800592d 	.word	0x0800592d
 80058d8:	08005941 	.word	0x08005941
 80058dc:	080058bd 	.word	0x080058bd
 80058e0:	080058bd 	.word	0x080058bd
 80058e4:	080058bd 	.word	0x080058bd
 80058e8:	080058bd 	.word	0x080058bd
 80058ec:	08005941 	.word	0x08005941
 80058f0:	080058bd 	.word	0x080058bd
 80058f4:	080058bd 	.word	0x080058bd
 80058f8:	080058bd 	.word	0x080058bd
 80058fc:	080058bd 	.word	0x080058bd
 8005900:	08005a45 	.word	0x08005a45
 8005904:	0800596d 	.word	0x0800596d
 8005908:	080059ff 	.word	0x080059ff
 800590c:	080058bd 	.word	0x080058bd
 8005910:	080058bd 	.word	0x080058bd
 8005914:	08005a67 	.word	0x08005a67
 8005918:	080058bd 	.word	0x080058bd
 800591c:	0800596d 	.word	0x0800596d
 8005920:	080058bd 	.word	0x080058bd
 8005924:	080058bd 	.word	0x080058bd
 8005928:	08005a07 	.word	0x08005a07
 800592c:	682b      	ldr	r3, [r5, #0]
 800592e:	1d1a      	adds	r2, r3, #4
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	602a      	str	r2, [r5, #0]
 8005934:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005938:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800593c:	2301      	movs	r3, #1
 800593e:	e09f      	b.n	8005a80 <_printf_i+0x1ec>
 8005940:	6820      	ldr	r0, [r4, #0]
 8005942:	682b      	ldr	r3, [r5, #0]
 8005944:	0607      	lsls	r7, r0, #24
 8005946:	f103 0104 	add.w	r1, r3, #4
 800594a:	6029      	str	r1, [r5, #0]
 800594c:	d501      	bpl.n	8005952 <_printf_i+0xbe>
 800594e:	681e      	ldr	r6, [r3, #0]
 8005950:	e003      	b.n	800595a <_printf_i+0xc6>
 8005952:	0646      	lsls	r6, r0, #25
 8005954:	d5fb      	bpl.n	800594e <_printf_i+0xba>
 8005956:	f9b3 6000 	ldrsh.w	r6, [r3]
 800595a:	2e00      	cmp	r6, #0
 800595c:	da03      	bge.n	8005966 <_printf_i+0xd2>
 800595e:	232d      	movs	r3, #45	; 0x2d
 8005960:	4276      	negs	r6, r6
 8005962:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005966:	485a      	ldr	r0, [pc, #360]	; (8005ad0 <_printf_i+0x23c>)
 8005968:	230a      	movs	r3, #10
 800596a:	e012      	b.n	8005992 <_printf_i+0xfe>
 800596c:	682b      	ldr	r3, [r5, #0]
 800596e:	6820      	ldr	r0, [r4, #0]
 8005970:	1d19      	adds	r1, r3, #4
 8005972:	6029      	str	r1, [r5, #0]
 8005974:	0605      	lsls	r5, r0, #24
 8005976:	d501      	bpl.n	800597c <_printf_i+0xe8>
 8005978:	681e      	ldr	r6, [r3, #0]
 800597a:	e002      	b.n	8005982 <_printf_i+0xee>
 800597c:	0641      	lsls	r1, r0, #25
 800597e:	d5fb      	bpl.n	8005978 <_printf_i+0xe4>
 8005980:	881e      	ldrh	r6, [r3, #0]
 8005982:	4853      	ldr	r0, [pc, #332]	; (8005ad0 <_printf_i+0x23c>)
 8005984:	2f6f      	cmp	r7, #111	; 0x6f
 8005986:	bf0c      	ite	eq
 8005988:	2308      	moveq	r3, #8
 800598a:	230a      	movne	r3, #10
 800598c:	2100      	movs	r1, #0
 800598e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005992:	6865      	ldr	r5, [r4, #4]
 8005994:	60a5      	str	r5, [r4, #8]
 8005996:	2d00      	cmp	r5, #0
 8005998:	bfa2      	ittt	ge
 800599a:	6821      	ldrge	r1, [r4, #0]
 800599c:	f021 0104 	bicge.w	r1, r1, #4
 80059a0:	6021      	strge	r1, [r4, #0]
 80059a2:	b90e      	cbnz	r6, 80059a8 <_printf_i+0x114>
 80059a4:	2d00      	cmp	r5, #0
 80059a6:	d04b      	beq.n	8005a40 <_printf_i+0x1ac>
 80059a8:	4615      	mov	r5, r2
 80059aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80059ae:	fb03 6711 	mls	r7, r3, r1, r6
 80059b2:	5dc7      	ldrb	r7, [r0, r7]
 80059b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80059b8:	4637      	mov	r7, r6
 80059ba:	42bb      	cmp	r3, r7
 80059bc:	460e      	mov	r6, r1
 80059be:	d9f4      	bls.n	80059aa <_printf_i+0x116>
 80059c0:	2b08      	cmp	r3, #8
 80059c2:	d10b      	bne.n	80059dc <_printf_i+0x148>
 80059c4:	6823      	ldr	r3, [r4, #0]
 80059c6:	07de      	lsls	r6, r3, #31
 80059c8:	d508      	bpl.n	80059dc <_printf_i+0x148>
 80059ca:	6923      	ldr	r3, [r4, #16]
 80059cc:	6861      	ldr	r1, [r4, #4]
 80059ce:	4299      	cmp	r1, r3
 80059d0:	bfde      	ittt	le
 80059d2:	2330      	movle	r3, #48	; 0x30
 80059d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80059d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80059dc:	1b52      	subs	r2, r2, r5
 80059de:	6122      	str	r2, [r4, #16]
 80059e0:	f8cd a000 	str.w	sl, [sp]
 80059e4:	464b      	mov	r3, r9
 80059e6:	aa03      	add	r2, sp, #12
 80059e8:	4621      	mov	r1, r4
 80059ea:	4640      	mov	r0, r8
 80059ec:	f7ff fee4 	bl	80057b8 <_printf_common>
 80059f0:	3001      	adds	r0, #1
 80059f2:	d14a      	bne.n	8005a8a <_printf_i+0x1f6>
 80059f4:	f04f 30ff 	mov.w	r0, #4294967295
 80059f8:	b004      	add	sp, #16
 80059fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059fe:	6823      	ldr	r3, [r4, #0]
 8005a00:	f043 0320 	orr.w	r3, r3, #32
 8005a04:	6023      	str	r3, [r4, #0]
 8005a06:	4833      	ldr	r0, [pc, #204]	; (8005ad4 <_printf_i+0x240>)
 8005a08:	2778      	movs	r7, #120	; 0x78
 8005a0a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005a0e:	6823      	ldr	r3, [r4, #0]
 8005a10:	6829      	ldr	r1, [r5, #0]
 8005a12:	061f      	lsls	r7, r3, #24
 8005a14:	f851 6b04 	ldr.w	r6, [r1], #4
 8005a18:	d402      	bmi.n	8005a20 <_printf_i+0x18c>
 8005a1a:	065f      	lsls	r7, r3, #25
 8005a1c:	bf48      	it	mi
 8005a1e:	b2b6      	uxthmi	r6, r6
 8005a20:	07df      	lsls	r7, r3, #31
 8005a22:	bf48      	it	mi
 8005a24:	f043 0320 	orrmi.w	r3, r3, #32
 8005a28:	6029      	str	r1, [r5, #0]
 8005a2a:	bf48      	it	mi
 8005a2c:	6023      	strmi	r3, [r4, #0]
 8005a2e:	b91e      	cbnz	r6, 8005a38 <_printf_i+0x1a4>
 8005a30:	6823      	ldr	r3, [r4, #0]
 8005a32:	f023 0320 	bic.w	r3, r3, #32
 8005a36:	6023      	str	r3, [r4, #0]
 8005a38:	2310      	movs	r3, #16
 8005a3a:	e7a7      	b.n	800598c <_printf_i+0xf8>
 8005a3c:	4824      	ldr	r0, [pc, #144]	; (8005ad0 <_printf_i+0x23c>)
 8005a3e:	e7e4      	b.n	8005a0a <_printf_i+0x176>
 8005a40:	4615      	mov	r5, r2
 8005a42:	e7bd      	b.n	80059c0 <_printf_i+0x12c>
 8005a44:	682b      	ldr	r3, [r5, #0]
 8005a46:	6826      	ldr	r6, [r4, #0]
 8005a48:	6961      	ldr	r1, [r4, #20]
 8005a4a:	1d18      	adds	r0, r3, #4
 8005a4c:	6028      	str	r0, [r5, #0]
 8005a4e:	0635      	lsls	r5, r6, #24
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	d501      	bpl.n	8005a58 <_printf_i+0x1c4>
 8005a54:	6019      	str	r1, [r3, #0]
 8005a56:	e002      	b.n	8005a5e <_printf_i+0x1ca>
 8005a58:	0670      	lsls	r0, r6, #25
 8005a5a:	d5fb      	bpl.n	8005a54 <_printf_i+0x1c0>
 8005a5c:	8019      	strh	r1, [r3, #0]
 8005a5e:	2300      	movs	r3, #0
 8005a60:	6123      	str	r3, [r4, #16]
 8005a62:	4615      	mov	r5, r2
 8005a64:	e7bc      	b.n	80059e0 <_printf_i+0x14c>
 8005a66:	682b      	ldr	r3, [r5, #0]
 8005a68:	1d1a      	adds	r2, r3, #4
 8005a6a:	602a      	str	r2, [r5, #0]
 8005a6c:	681d      	ldr	r5, [r3, #0]
 8005a6e:	6862      	ldr	r2, [r4, #4]
 8005a70:	2100      	movs	r1, #0
 8005a72:	4628      	mov	r0, r5
 8005a74:	f7fa fc24 	bl	80002c0 <memchr>
 8005a78:	b108      	cbz	r0, 8005a7e <_printf_i+0x1ea>
 8005a7a:	1b40      	subs	r0, r0, r5
 8005a7c:	6060      	str	r0, [r4, #4]
 8005a7e:	6863      	ldr	r3, [r4, #4]
 8005a80:	6123      	str	r3, [r4, #16]
 8005a82:	2300      	movs	r3, #0
 8005a84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a88:	e7aa      	b.n	80059e0 <_printf_i+0x14c>
 8005a8a:	6923      	ldr	r3, [r4, #16]
 8005a8c:	462a      	mov	r2, r5
 8005a8e:	4649      	mov	r1, r9
 8005a90:	4640      	mov	r0, r8
 8005a92:	47d0      	blx	sl
 8005a94:	3001      	adds	r0, #1
 8005a96:	d0ad      	beq.n	80059f4 <_printf_i+0x160>
 8005a98:	6823      	ldr	r3, [r4, #0]
 8005a9a:	079b      	lsls	r3, r3, #30
 8005a9c:	d413      	bmi.n	8005ac6 <_printf_i+0x232>
 8005a9e:	68e0      	ldr	r0, [r4, #12]
 8005aa0:	9b03      	ldr	r3, [sp, #12]
 8005aa2:	4298      	cmp	r0, r3
 8005aa4:	bfb8      	it	lt
 8005aa6:	4618      	movlt	r0, r3
 8005aa8:	e7a6      	b.n	80059f8 <_printf_i+0x164>
 8005aaa:	2301      	movs	r3, #1
 8005aac:	4632      	mov	r2, r6
 8005aae:	4649      	mov	r1, r9
 8005ab0:	4640      	mov	r0, r8
 8005ab2:	47d0      	blx	sl
 8005ab4:	3001      	adds	r0, #1
 8005ab6:	d09d      	beq.n	80059f4 <_printf_i+0x160>
 8005ab8:	3501      	adds	r5, #1
 8005aba:	68e3      	ldr	r3, [r4, #12]
 8005abc:	9903      	ldr	r1, [sp, #12]
 8005abe:	1a5b      	subs	r3, r3, r1
 8005ac0:	42ab      	cmp	r3, r5
 8005ac2:	dcf2      	bgt.n	8005aaa <_printf_i+0x216>
 8005ac4:	e7eb      	b.n	8005a9e <_printf_i+0x20a>
 8005ac6:	2500      	movs	r5, #0
 8005ac8:	f104 0619 	add.w	r6, r4, #25
 8005acc:	e7f5      	b.n	8005aba <_printf_i+0x226>
 8005ace:	bf00      	nop
 8005ad0:	08005d3d 	.word	0x08005d3d
 8005ad4:	08005d4e 	.word	0x08005d4e

08005ad8 <memmove>:
 8005ad8:	4288      	cmp	r0, r1
 8005ada:	b510      	push	{r4, lr}
 8005adc:	eb01 0402 	add.w	r4, r1, r2
 8005ae0:	d902      	bls.n	8005ae8 <memmove+0x10>
 8005ae2:	4284      	cmp	r4, r0
 8005ae4:	4623      	mov	r3, r4
 8005ae6:	d807      	bhi.n	8005af8 <memmove+0x20>
 8005ae8:	1e43      	subs	r3, r0, #1
 8005aea:	42a1      	cmp	r1, r4
 8005aec:	d008      	beq.n	8005b00 <memmove+0x28>
 8005aee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005af2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005af6:	e7f8      	b.n	8005aea <memmove+0x12>
 8005af8:	4402      	add	r2, r0
 8005afa:	4601      	mov	r1, r0
 8005afc:	428a      	cmp	r2, r1
 8005afe:	d100      	bne.n	8005b02 <memmove+0x2a>
 8005b00:	bd10      	pop	{r4, pc}
 8005b02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005b0a:	e7f7      	b.n	8005afc <memmove+0x24>

08005b0c <_sbrk_r>:
 8005b0c:	b538      	push	{r3, r4, r5, lr}
 8005b0e:	4d06      	ldr	r5, [pc, #24]	; (8005b28 <_sbrk_r+0x1c>)
 8005b10:	2300      	movs	r3, #0
 8005b12:	4604      	mov	r4, r0
 8005b14:	4608      	mov	r0, r1
 8005b16:	602b      	str	r3, [r5, #0]
 8005b18:	f000 f840 	bl	8005b9c <_sbrk>
 8005b1c:	1c43      	adds	r3, r0, #1
 8005b1e:	d102      	bne.n	8005b26 <_sbrk_r+0x1a>
 8005b20:	682b      	ldr	r3, [r5, #0]
 8005b22:	b103      	cbz	r3, 8005b26 <_sbrk_r+0x1a>
 8005b24:	6023      	str	r3, [r4, #0]
 8005b26:	bd38      	pop	{r3, r4, r5, pc}
 8005b28:	200145ac 	.word	0x200145ac

08005b2c <_realloc_r>:
 8005b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b30:	4680      	mov	r8, r0
 8005b32:	4614      	mov	r4, r2
 8005b34:	460e      	mov	r6, r1
 8005b36:	b921      	cbnz	r1, 8005b42 <_realloc_r+0x16>
 8005b38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b3c:	4611      	mov	r1, r2
 8005b3e:	f7ff bc57 	b.w	80053f0 <_malloc_r>
 8005b42:	b92a      	cbnz	r2, 8005b50 <_realloc_r+0x24>
 8005b44:	f7ff fbe8 	bl	8005318 <_free_r>
 8005b48:	4625      	mov	r5, r4
 8005b4a:	4628      	mov	r0, r5
 8005b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b50:	f000 f81b 	bl	8005b8a <_malloc_usable_size_r>
 8005b54:	4284      	cmp	r4, r0
 8005b56:	4607      	mov	r7, r0
 8005b58:	d802      	bhi.n	8005b60 <_realloc_r+0x34>
 8005b5a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005b5e:	d812      	bhi.n	8005b86 <_realloc_r+0x5a>
 8005b60:	4621      	mov	r1, r4
 8005b62:	4640      	mov	r0, r8
 8005b64:	f7ff fc44 	bl	80053f0 <_malloc_r>
 8005b68:	4605      	mov	r5, r0
 8005b6a:	2800      	cmp	r0, #0
 8005b6c:	d0ed      	beq.n	8005b4a <_realloc_r+0x1e>
 8005b6e:	42bc      	cmp	r4, r7
 8005b70:	4622      	mov	r2, r4
 8005b72:	4631      	mov	r1, r6
 8005b74:	bf28      	it	cs
 8005b76:	463a      	movcs	r2, r7
 8005b78:	f7ff fbc0 	bl	80052fc <memcpy>
 8005b7c:	4631      	mov	r1, r6
 8005b7e:	4640      	mov	r0, r8
 8005b80:	f7ff fbca 	bl	8005318 <_free_r>
 8005b84:	e7e1      	b.n	8005b4a <_realloc_r+0x1e>
 8005b86:	4635      	mov	r5, r6
 8005b88:	e7df      	b.n	8005b4a <_realloc_r+0x1e>

08005b8a <_malloc_usable_size_r>:
 8005b8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b8e:	1f18      	subs	r0, r3, #4
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	bfbc      	itt	lt
 8005b94:	580b      	ldrlt	r3, [r1, r0]
 8005b96:	18c0      	addlt	r0, r0, r3
 8005b98:	4770      	bx	lr
	...

08005b9c <_sbrk>:
 8005b9c:	4a04      	ldr	r2, [pc, #16]	; (8005bb0 <_sbrk+0x14>)
 8005b9e:	6811      	ldr	r1, [r2, #0]
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	b909      	cbnz	r1, 8005ba8 <_sbrk+0xc>
 8005ba4:	4903      	ldr	r1, [pc, #12]	; (8005bb4 <_sbrk+0x18>)
 8005ba6:	6011      	str	r1, [r2, #0]
 8005ba8:	6810      	ldr	r0, [r2, #0]
 8005baa:	4403      	add	r3, r0
 8005bac:	6013      	str	r3, [r2, #0]
 8005bae:	4770      	bx	lr
 8005bb0:	200145bc 	.word	0x200145bc
 8005bb4:	200145c0 	.word	0x200145c0

08005bb8 <_init>:
 8005bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bba:	bf00      	nop
 8005bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bbe:	bc08      	pop	{r3}
 8005bc0:	469e      	mov	lr, r3
 8005bc2:	4770      	bx	lr

08005bc4 <_fini>:
 8005bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bc6:	bf00      	nop
 8005bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bca:	bc08      	pop	{r3}
 8005bcc:	469e      	mov	lr, r3
 8005bce:	4770      	bx	lr

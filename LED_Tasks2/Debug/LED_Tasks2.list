
LED_Tasks2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053b4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  08005594  08005594  00015594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005710  08005710  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08005710  08005710  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005710  08005710  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005710  08005710  00015710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005714  08005714  00015714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005718  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014410  20000014  0800572c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20014424  0800572c  00024424  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012fbb  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c18  00000000  00000000  00033042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001348  00000000  00000000  00035c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ed1  00000000  00000000  00036fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027cfe  00000000  00000000  00037e79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015048  00000000  00000000  0005fb77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001022dd  00000000  00000000  00074bbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000050a0  00000000  00000000  00176e9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a2  00000000  00000000  0017bf3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000014 	.word	0x20000014
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800557c 	.word	0x0800557c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000018 	.word	0x20000018
 800021c:	0800557c 	.word	0x0800557c

08000220 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000220:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000222:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000226:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002b0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800022a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800022e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000232:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000234:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000236:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000238:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800023a:	d332      	bcc.n	80002a2 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800023c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800023e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000240:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000242:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000244:	d314      	bcc.n	8000270 <_CheckCase2>

08000246 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000246:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000248:	19d0      	adds	r0, r2, r7
 800024a:	bf00      	nop

0800024c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800024c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000250:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000254:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000256:	d005      	beq.n	8000264 <_CSDone>
        LDRB     R3,[R1], #+1
 8000258:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000260:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000262:	d1f3      	bne.n	800024c <_LoopCopyStraight>

08000264 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000264:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000268:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800026a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800026e:	4770      	bx	lr

08000270 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000270:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000272:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000274:	d319      	bcc.n	80002aa <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000276:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000278:	1b12      	subs	r2, r2, r4

0800027a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800027e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000282:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000286:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000288:	d005      	beq.n	8000296 <_No2ChunkNeeded>

0800028a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800028a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800028e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000292:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000294:	d1f9      	bne.n	800028a <_LoopCopyAfterWrapAround>

08000296 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000296:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800029a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800029c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800029e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80002a0:	4770      	bx	lr

080002a2 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80002a2:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80002a4:	3801      	subs	r0, #1
        CMP      R0,R2
 80002a6:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80002a8:	d2cd      	bcs.n	8000246 <_Case4>

080002aa <_Case3>:
_Case3:
        MOVS     R0,#+0
 80002aa:	2000      	movs	r0, #0
        POP      {R4-R7}
 80002ac:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80002ae:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002b0:	20012e50 	.word	0x20012e50

080002b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b08a      	sub	sp, #40	; 0x28
 80002b8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002ba:	f000 fa82 	bl	80007c2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002be:	f000 f86b 	bl	8000398 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002c2:	f000 f8b5 	bl	8000430 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  // Enable the cycle counter
  DWT_CTRL |= ( 1 << 0 );
 80002c6:	4b2d      	ldr	r3, [pc, #180]	; (800037c <main+0xc8>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	4a2c      	ldr	r2, [pc, #176]	; (800037c <main+0xc8>)
 80002cc:	f043 0301 	orr.w	r3, r3, #1
 80002d0:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 80002d2:	f003 f977 	bl	80035c4 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 80002d6:	f004 fb37 	bl	8004948 <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(led_green_handler, "LED_green_task", 200, NULL, 2, &task1_handle);
 80002da:	f107 030c 	add.w	r3, r7, #12
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	2302      	movs	r3, #2
 80002e2:	9300      	str	r3, [sp, #0]
 80002e4:	2300      	movs	r3, #0
 80002e6:	22c8      	movs	r2, #200	; 0xc8
 80002e8:	4925      	ldr	r1, [pc, #148]	; (8000380 <main+0xcc>)
 80002ea:	4826      	ldr	r0, [pc, #152]	; (8000384 <main+0xd0>)
 80002ec:	f001 ff66 	bl	80021bc <xTaskCreate>
 80002f0:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 80002f2:	69fb      	ldr	r3, [r7, #28]
 80002f4:	2b01      	cmp	r3, #1
 80002f6:	d00a      	beq.n	800030e <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80002f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80002fc:	f383 8811 	msr	BASEPRI, r3
 8000300:	f3bf 8f6f 	isb	sy
 8000304:	f3bf 8f4f 	dsb	sy
 8000308:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800030a:	bf00      	nop
 800030c:	e7fe      	b.n	800030c <main+0x58>

  status = xTaskCreate(led_red_handler, "LED_red_task", 200, NULL, 2, &task2_handle);
 800030e:	f107 0308 	add.w	r3, r7, #8
 8000312:	9301      	str	r3, [sp, #4]
 8000314:	2302      	movs	r3, #2
 8000316:	9300      	str	r3, [sp, #0]
 8000318:	2300      	movs	r3, #0
 800031a:	22c8      	movs	r2, #200	; 0xc8
 800031c:	491a      	ldr	r1, [pc, #104]	; (8000388 <main+0xd4>)
 800031e:	481b      	ldr	r0, [pc, #108]	; (800038c <main+0xd8>)
 8000320:	f001 ff4c 	bl	80021bc <xTaskCreate>
 8000324:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 8000326:	69fb      	ldr	r3, [r7, #28]
 8000328:	2b01      	cmp	r3, #1
 800032a:	d00a      	beq.n	8000342 <main+0x8e>
        __asm volatile
 800032c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000330:	f383 8811 	msr	BASEPRI, r3
 8000334:	f3bf 8f6f 	isb	sy
 8000338:	f3bf 8f4f 	dsb	sy
 800033c:	617b      	str	r3, [r7, #20]
    }
 800033e:	bf00      	nop
 8000340:	e7fe      	b.n	8000340 <main+0x8c>

  status = xTaskCreate(led_orange_handler, "LED_orange_task", 200, NULL, 2, &task3_handle);
 8000342:	1d3b      	adds	r3, r7, #4
 8000344:	9301      	str	r3, [sp, #4]
 8000346:	2302      	movs	r3, #2
 8000348:	9300      	str	r3, [sp, #0]
 800034a:	2300      	movs	r3, #0
 800034c:	22c8      	movs	r2, #200	; 0xc8
 800034e:	4910      	ldr	r1, [pc, #64]	; (8000390 <main+0xdc>)
 8000350:	4810      	ldr	r0, [pc, #64]	; (8000394 <main+0xe0>)
 8000352:	f001 ff33 	bl	80021bc <xTaskCreate>
 8000356:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 8000358:	69fb      	ldr	r3, [r7, #28]
 800035a:	2b01      	cmp	r3, #1
 800035c:	d00a      	beq.n	8000374 <main+0xc0>
        __asm volatile
 800035e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000362:	f383 8811 	msr	BASEPRI, r3
 8000366:	f3bf 8f6f 	isb	sy
 800036a:	f3bf 8f4f 	dsb	sy
 800036e:	613b      	str	r3, [r7, #16]
    }
 8000370:	bf00      	nop
 8000372:	e7fe      	b.n	8000372 <main+0xbe>

  // start the freeRTOS scheduler
  vTaskStartScheduler();
 8000374:	f002 f8fa 	bl	800256c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000378:	e7fe      	b.n	8000378 <main+0xc4>
 800037a:	bf00      	nop
 800037c:	e0001000 	.word	0xe0001000
 8000380:	08005594 	.word	0x08005594
 8000384:	08000531 	.word	0x08000531
 8000388:	080055a4 	.word	0x080055a4
 800038c:	08000559 	.word	0x08000559
 8000390:	080055b4 	.word	0x080055b4
 8000394:	08000581 	.word	0x08000581

08000398 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b094      	sub	sp, #80	; 0x50
 800039c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800039e:	f107 0318 	add.w	r3, r7, #24
 80003a2:	2238      	movs	r2, #56	; 0x38
 80003a4:	2100      	movs	r1, #0
 80003a6:	4618      	mov	r0, r3
 80003a8:	f005 f8ae 	bl	8005508 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003ac:	1d3b      	adds	r3, r7, #4
 80003ae:	2200      	movs	r2, #0
 80003b0:	601a      	str	r2, [r3, #0]
 80003b2:	605a      	str	r2, [r3, #4]
 80003b4:	609a      	str	r2, [r3, #8]
 80003b6:	60da      	str	r2, [r3, #12]
 80003b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80003ba:	2000      	movs	r0, #0
 80003bc:	f000 fcd6 	bl	8000d6c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003c0:	2302      	movs	r3, #2
 80003c2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003ca:	2340      	movs	r3, #64	; 0x40
 80003cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003ce:	2302      	movs	r3, #2
 80003d0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003d2:	2302      	movs	r3, #2
 80003d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80003d6:	2304      	movs	r3, #4
 80003d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80003da:	2355      	movs	r3, #85	; 0x55
 80003dc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80003de:	2302      	movs	r3, #2
 80003e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80003e2:	2302      	movs	r3, #2
 80003e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80003e6:	2302      	movs	r3, #2
 80003e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ea:	f107 0318 	add.w	r3, r7, #24
 80003ee:	4618      	mov	r0, r3
 80003f0:	f000 fd70 	bl	8000ed4 <HAL_RCC_OscConfig>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <SystemClock_Config+0x66>
  {
    Error_Handler();
 80003fa:	f000 f8e7 	bl	80005cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003fe:	230f      	movs	r3, #15
 8000400:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000402:	2303      	movs	r3, #3
 8000404:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000406:	2300      	movs	r3, #0
 8000408:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800040a:	2300      	movs	r3, #0
 800040c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800040e:	2300      	movs	r3, #0
 8000410:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000412:	1d3b      	adds	r3, r7, #4
 8000414:	2104      	movs	r1, #4
 8000416:	4618      	mov	r0, r3
 8000418:	f001 f874 	bl	8001504 <HAL_RCC_ClockConfig>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000422:	f000 f8d3 	bl	80005cc <Error_Handler>
  }
}
 8000426:	bf00      	nop
 8000428:	3750      	adds	r7, #80	; 0x50
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
	...

08000430 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b08a      	sub	sp, #40	; 0x28
 8000434:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000436:	f107 0314 	add.w	r3, r7, #20
 800043a:	2200      	movs	r2, #0
 800043c:	601a      	str	r2, [r3, #0]
 800043e:	605a      	str	r2, [r3, #4]
 8000440:	609a      	str	r2, [r3, #8]
 8000442:	60da      	str	r2, [r3, #12]
 8000444:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000446:	4b38      	ldr	r3, [pc, #224]	; (8000528 <MX_GPIO_Init+0xf8>)
 8000448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800044a:	4a37      	ldr	r2, [pc, #220]	; (8000528 <MX_GPIO_Init+0xf8>)
 800044c:	f043 0304 	orr.w	r3, r3, #4
 8000450:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000452:	4b35      	ldr	r3, [pc, #212]	; (8000528 <MX_GPIO_Init+0xf8>)
 8000454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000456:	f003 0304 	and.w	r3, r3, #4
 800045a:	613b      	str	r3, [r7, #16]
 800045c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800045e:	4b32      	ldr	r3, [pc, #200]	; (8000528 <MX_GPIO_Init+0xf8>)
 8000460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000462:	4a31      	ldr	r2, [pc, #196]	; (8000528 <MX_GPIO_Init+0xf8>)
 8000464:	f043 0320 	orr.w	r3, r3, #32
 8000468:	64d3      	str	r3, [r2, #76]	; 0x4c
 800046a:	4b2f      	ldr	r3, [pc, #188]	; (8000528 <MX_GPIO_Init+0xf8>)
 800046c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800046e:	f003 0320 	and.w	r3, r3, #32
 8000472:	60fb      	str	r3, [r7, #12]
 8000474:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000476:	4b2c      	ldr	r3, [pc, #176]	; (8000528 <MX_GPIO_Init+0xf8>)
 8000478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800047a:	4a2b      	ldr	r2, [pc, #172]	; (8000528 <MX_GPIO_Init+0xf8>)
 800047c:	f043 0301 	orr.w	r3, r3, #1
 8000480:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000482:	4b29      	ldr	r3, [pc, #164]	; (8000528 <MX_GPIO_Init+0xf8>)
 8000484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000486:	f003 0301 	and.w	r3, r3, #1
 800048a:	60bb      	str	r3, [r7, #8]
 800048c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800048e:	4b26      	ldr	r3, [pc, #152]	; (8000528 <MX_GPIO_Init+0xf8>)
 8000490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000492:	4a25      	ldr	r2, [pc, #148]	; (8000528 <MX_GPIO_Init+0xf8>)
 8000494:	f043 0302 	orr.w	r3, r3, #2
 8000498:	64d3      	str	r3, [r2, #76]	; 0x4c
 800049a:	4b23      	ldr	r3, [pc, #140]	; (8000528 <MX_GPIO_Init+0xf8>)
 800049c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800049e:	f003 0302 	and.w	r3, r3, #2
 80004a2:	607b      	str	r3, [r7, #4]
 80004a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80004a6:	2200      	movs	r2, #0
 80004a8:	2120      	movs	r1, #32
 80004aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004ae:	f000 fc21 	bl	8000cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004b8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80004bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004be:	2300      	movs	r3, #0
 80004c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004c2:	f107 0314 	add.w	r3, r7, #20
 80004c6:	4619      	mov	r1, r3
 80004c8:	4818      	ldr	r0, [pc, #96]	; (800052c <MX_GPIO_Init+0xfc>)
 80004ca:	f000 fa91 	bl	80009f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPUART1_TX_Pin LPUART1_RX_Pin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80004ce:	230c      	movs	r3, #12
 80004d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004d2:	2302      	movs	r3, #2
 80004d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d6:	2300      	movs	r3, #0
 80004d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004da:	2300      	movs	r3, #0
 80004dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80004de:	230c      	movs	r3, #12
 80004e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e2:	f107 0314 	add.w	r3, r7, #20
 80004e6:	4619      	mov	r1, r3
 80004e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004ec:	f000 fa80 	bl	80009f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80004f0:	2320      	movs	r3, #32
 80004f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004f4:	2301      	movs	r3, #1
 80004f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f8:	2300      	movs	r3, #0
 80004fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004fc:	2300      	movs	r3, #0
 80004fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000500:	f107 0314 	add.w	r3, r7, #20
 8000504:	4619      	mov	r1, r3
 8000506:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800050a:	f000 fa71 	bl	80009f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800050e:	2200      	movs	r2, #0
 8000510:	2100      	movs	r1, #0
 8000512:	2028      	movs	r0, #40	; 0x28
 8000514:	f000 fa44 	bl	80009a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000518:	2028      	movs	r0, #40	; 0x28
 800051a:	f000 fa5b 	bl	80009d4 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800051e:	bf00      	nop
 8000520:	3728      	adds	r7, #40	; 0x28
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	40021000 	.word	0x40021000
 800052c:	48000800 	.word	0x48000800

08000530 <led_green_handler>:

/* USER CODE BEGIN 4 */
static void led_green_handler(void* parameters)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;

	last_wakeup_time = xTaskGetTickCount();
 8000538:	f002 f914 	bl	8002764 <xTaskGetTickCount>
 800053c:	4603      	mov	r3, r0
 800053e:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000540:	4804      	ldr	r0, [pc, #16]	; (8000554 <led_green_handler+0x24>)
 8000542:	f004 ff61 	bl	8005408 <SEGGER_SYSVIEW_PrintfTarget>
		//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
		//HAL_Delay(1000); // consumes the CPU --> continuous task <--> periodic task, Aperidoic task
		//taskYIELD();

		//vTaskDelay(pdMS_TO_TICKS(2));
		vTaskDelayUntil(&last_wakeup_time, pdMS_TO_TICKS(2));
 8000546:	f107 030c 	add.w	r3, r7, #12
 800054a:	2102      	movs	r1, #2
 800054c:	4618      	mov	r0, r3
 800054e:	f001 ff8b 	bl	8002468 <xTaskDelayUntil>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000552:	e7f5      	b.n	8000540 <led_green_handler+0x10>
 8000554:	080055c4 	.word	0x080055c4

08000558 <led_red_handler>:
	}
}

static void led_red_handler(void* parameters)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b084      	sub	sp, #16
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;

	last_wakeup_time = xTaskGetTickCount();
 8000560:	f002 f900 	bl	8002764 <xTaskGetTickCount>
 8000564:	4603      	mov	r3, r0
 8000566:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000568:	4804      	ldr	r0, [pc, #16]	; (800057c <led_red_handler+0x24>)
 800056a:	f004 ff4d 	bl	8005408 <SEGGER_SYSVIEW_PrintfTarget>
		//HAL_Delay(1);
		//taskYIELD();
		//vTaskDelay(pdMS_TO_TICKS(2));
		vTaskDelayUntil(&last_wakeup_time, pdMS_TO_TICKS(2));
 800056e:	f107 030c 	add.w	r3, r7, #12
 8000572:	2102      	movs	r1, #2
 8000574:	4618      	mov	r0, r3
 8000576:	f001 ff77 	bl	8002468 <xTaskDelayUntil>
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 800057a:	e7f5      	b.n	8000568 <led_red_handler+0x10>
 800057c:	080055d8 	.word	0x080055d8

08000580 <led_orange_handler>:
	}
}

static void led_orange_handler(void* parameters)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;

	last_wakeup_time = xTaskGetTickCount();
 8000588:	f002 f8ec 	bl	8002764 <xTaskGetTickCount>
 800058c:	4603      	mov	r3, r0
 800058e:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000590:	4804      	ldr	r0, [pc, #16]	; (80005a4 <led_orange_handler+0x24>)
 8000592:	f004 ff39 	bl	8005408 <SEGGER_SYSVIEW_PrintfTarget>
		//HAL_Delay(400);
		//taskYIELD();
		//vTaskDelay(pdMS_TO_TICKS(2));
		vTaskDelayUntil(&last_wakeup_time, pdMS_TO_TICKS(2));
 8000596:	f107 030c 	add.w	r3, r7, #12
 800059a:	2102      	movs	r1, #2
 800059c:	4618      	mov	r0, r3
 800059e:	f001 ff63 	bl	8002468 <xTaskDelayUntil>
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 80005a2:	e7f5      	b.n	8000590 <led_orange_handler+0x10>
 80005a4:	080055ec 	.word	0x080055ec

080005a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a04      	ldr	r2, [pc, #16]	; (80005c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d101      	bne.n	80005be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80005ba:	f000 f91b 	bl	80007f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005be:	bf00      	nop
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40001000 	.word	0x40001000

080005cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005d0:	b672      	cpsid	i
}
 80005d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005d4:	e7fe      	b.n	80005d4 <Error_Handler+0x8>
	...

080005d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005de:	4b10      	ldr	r3, [pc, #64]	; (8000620 <HAL_MspInit+0x48>)
 80005e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005e2:	4a0f      	ldr	r2, [pc, #60]	; (8000620 <HAL_MspInit+0x48>)
 80005e4:	f043 0301 	orr.w	r3, r3, #1
 80005e8:	6613      	str	r3, [r2, #96]	; 0x60
 80005ea:	4b0d      	ldr	r3, [pc, #52]	; (8000620 <HAL_MspInit+0x48>)
 80005ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f6:	4b0a      	ldr	r3, [pc, #40]	; (8000620 <HAL_MspInit+0x48>)
 80005f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005fa:	4a09      	ldr	r2, [pc, #36]	; (8000620 <HAL_MspInit+0x48>)
 80005fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000600:	6593      	str	r3, [r2, #88]	; 0x58
 8000602:	4b07      	ldr	r3, [pc, #28]	; (8000620 <HAL_MspInit+0x48>)
 8000604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800060a:	603b      	str	r3, [r7, #0]
 800060c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800060e:	f000 fc51 	bl	8000eb4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000612:	f002 fc21 	bl	8002e58 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000616:	bf00      	nop
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40021000 	.word	0x40021000

08000624 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b08c      	sub	sp, #48	; 0x30
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800062c:	2300      	movs	r3, #0
 800062e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000634:	4b2c      	ldr	r3, [pc, #176]	; (80006e8 <HAL_InitTick+0xc4>)
 8000636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000638:	4a2b      	ldr	r2, [pc, #172]	; (80006e8 <HAL_InitTick+0xc4>)
 800063a:	f043 0310 	orr.w	r3, r3, #16
 800063e:	6593      	str	r3, [r2, #88]	; 0x58
 8000640:	4b29      	ldr	r3, [pc, #164]	; (80006e8 <HAL_InitTick+0xc4>)
 8000642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000644:	f003 0310 	and.w	r3, r3, #16
 8000648:	60bb      	str	r3, [r7, #8]
 800064a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800064c:	f107 020c 	add.w	r2, r7, #12
 8000650:	f107 0310 	add.w	r3, r7, #16
 8000654:	4611      	mov	r1, r2
 8000656:	4618      	mov	r0, r3
 8000658:	f001 f914 	bl	8001884 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800065c:	f001 f8fc 	bl	8001858 <HAL_RCC_GetPCLK1Freq>
 8000660:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000664:	4a21      	ldr	r2, [pc, #132]	; (80006ec <HAL_InitTick+0xc8>)
 8000666:	fba2 2303 	umull	r2, r3, r2, r3
 800066a:	0c9b      	lsrs	r3, r3, #18
 800066c:	3b01      	subs	r3, #1
 800066e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000670:	4b1f      	ldr	r3, [pc, #124]	; (80006f0 <HAL_InitTick+0xcc>)
 8000672:	4a20      	ldr	r2, [pc, #128]	; (80006f4 <HAL_InitTick+0xd0>)
 8000674:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000676:	4b1e      	ldr	r3, [pc, #120]	; (80006f0 <HAL_InitTick+0xcc>)
 8000678:	f240 32e7 	movw	r2, #999	; 0x3e7
 800067c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800067e:	4a1c      	ldr	r2, [pc, #112]	; (80006f0 <HAL_InitTick+0xcc>)
 8000680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000682:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000684:	4b1a      	ldr	r3, [pc, #104]	; (80006f0 <HAL_InitTick+0xcc>)
 8000686:	2200      	movs	r2, #0
 8000688:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800068a:	4b19      	ldr	r3, [pc, #100]	; (80006f0 <HAL_InitTick+0xcc>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000690:	4817      	ldr	r0, [pc, #92]	; (80006f0 <HAL_InitTick+0xcc>)
 8000692:	f001 f96f 	bl	8001974 <HAL_TIM_Base_Init>
 8000696:	4603      	mov	r3, r0
 8000698:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800069c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d11b      	bne.n	80006dc <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80006a4:	4812      	ldr	r0, [pc, #72]	; (80006f0 <HAL_InitTick+0xcc>)
 80006a6:	f001 f9c7 	bl	8001a38 <HAL_TIM_Base_Start_IT>
 80006aa:	4603      	mov	r3, r0
 80006ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80006b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d111      	bne.n	80006dc <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80006b8:	2036      	movs	r0, #54	; 0x36
 80006ba:	f000 f98b 	bl	80009d4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	2b0f      	cmp	r3, #15
 80006c2:	d808      	bhi.n	80006d6 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80006c4:	2200      	movs	r2, #0
 80006c6:	6879      	ldr	r1, [r7, #4]
 80006c8:	2036      	movs	r0, #54	; 0x36
 80006ca:	f000 f969 	bl	80009a0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006ce:	4a0a      	ldr	r2, [pc, #40]	; (80006f8 <HAL_InitTick+0xd4>)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	6013      	str	r3, [r2, #0]
 80006d4:	e002      	b.n	80006dc <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80006d6:	2301      	movs	r3, #1
 80006d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80006dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3730      	adds	r7, #48	; 0x30
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	40021000 	.word	0x40021000
 80006ec:	431bde83 	.word	0x431bde83
 80006f0:	20000030 	.word	0x20000030
 80006f4:	40001000 	.word	0x40001000
 80006f8:	20000004 	.word	0x20000004

080006fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000700:	e7fe      	b.n	8000700 <NMI_Handler+0x4>

08000702 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000702:	b480      	push	{r7}
 8000704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000706:	e7fe      	b.n	8000706 <HardFault_Handler+0x4>

08000708 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800070c:	e7fe      	b.n	800070c <MemManage_Handler+0x4>

0800070e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800070e:	b480      	push	{r7}
 8000710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000712:	e7fe      	b.n	8000712 <BusFault_Handler+0x4>

08000714 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000718:	e7fe      	b.n	8000718 <UsageFault_Handler+0x4>

0800071a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800071a:	b480      	push	{r7}
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800071e:	bf00      	nop
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr

08000728 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800072c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000730:	f000 faf8 	bl	8000d24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000734:	bf00      	nop
 8000736:	bd80      	pop	{r7, pc}

08000738 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800073c:	4802      	ldr	r0, [pc, #8]	; (8000748 <TIM6_DAC_IRQHandler+0x10>)
 800073e:	f001 f9f3 	bl	8001b28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000030 	.word	0x20000030

0800074c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <SystemInit+0x20>)
 8000752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000756:	4a05      	ldr	r2, [pc, #20]	; (800076c <SystemInit+0x20>)
 8000758:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800075c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000760:	bf00      	nop
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	e000ed00 	.word	0xe000ed00

08000770 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000770:	480d      	ldr	r0, [pc, #52]	; (80007a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000772:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000774:	480d      	ldr	r0, [pc, #52]	; (80007ac <LoopForever+0x6>)
  ldr r1, =_edata
 8000776:	490e      	ldr	r1, [pc, #56]	; (80007b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000778:	4a0e      	ldr	r2, [pc, #56]	; (80007b4 <LoopForever+0xe>)
  movs r3, #0
 800077a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800077c:	e002      	b.n	8000784 <LoopCopyDataInit>

0800077e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800077e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000780:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000782:	3304      	adds	r3, #4

08000784 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000784:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000786:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000788:	d3f9      	bcc.n	800077e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800078a:	4a0b      	ldr	r2, [pc, #44]	; (80007b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800078c:	4c0b      	ldr	r4, [pc, #44]	; (80007bc <LoopForever+0x16>)
  movs r3, #0
 800078e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000790:	e001      	b.n	8000796 <LoopFillZerobss>

08000792 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000792:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000794:	3204      	adds	r2, #4

08000796 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000796:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000798:	d3fb      	bcc.n	8000792 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800079a:	f7ff ffd7 	bl	800074c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800079e:	f004 febb 	bl	8005518 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007a2:	f7ff fd87 	bl	80002b4 <main>

080007a6 <LoopForever>:

LoopForever:
    b LoopForever
 80007a6:	e7fe      	b.n	80007a6 <LoopForever>
  ldr   r0, =_estack
 80007a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007b0:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80007b4:	08005718 	.word	0x08005718
  ldr r2, =_sbss
 80007b8:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80007bc:	20014424 	.word	0x20014424

080007c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007c0:	e7fe      	b.n	80007c0 <ADC1_2_IRQHandler>

080007c2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b082      	sub	sp, #8
 80007c6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007c8:	2300      	movs	r3, #0
 80007ca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007cc:	2003      	movs	r0, #3
 80007ce:	f000 f8dc 	bl	800098a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007d2:	200f      	movs	r0, #15
 80007d4:	f7ff ff26 	bl	8000624 <HAL_InitTick>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d002      	beq.n	80007e4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80007de:	2301      	movs	r3, #1
 80007e0:	71fb      	strb	r3, [r7, #7]
 80007e2:	e001      	b.n	80007e8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80007e4:	f7ff fef8 	bl	80005d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007e8:	79fb      	ldrb	r3, [r7, #7]

}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
	...

080007f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007f8:	4b05      	ldr	r3, [pc, #20]	; (8000810 <HAL_IncTick+0x1c>)
 80007fa:	681a      	ldr	r2, [r3, #0]
 80007fc:	4b05      	ldr	r3, [pc, #20]	; (8000814 <HAL_IncTick+0x20>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4413      	add	r3, r2
 8000802:	4a03      	ldr	r2, [pc, #12]	; (8000810 <HAL_IncTick+0x1c>)
 8000804:	6013      	str	r3, [r2, #0]
}
 8000806:	bf00      	nop
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr
 8000810:	2000007c 	.word	0x2000007c
 8000814:	20000008 	.word	0x20000008

08000818 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  return uwTick;
 800081c:	4b03      	ldr	r3, [pc, #12]	; (800082c <HAL_GetTick+0x14>)
 800081e:	681b      	ldr	r3, [r3, #0]
}
 8000820:	4618      	mov	r0, r3
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	2000007c 	.word	0x2000007c

08000830 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000830:	b480      	push	{r7}
 8000832:	b085      	sub	sp, #20
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	f003 0307 	and.w	r3, r3, #7
 800083e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000840:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <__NVIC_SetPriorityGrouping+0x44>)
 8000842:	68db      	ldr	r3, [r3, #12]
 8000844:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000846:	68ba      	ldr	r2, [r7, #8]
 8000848:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800084c:	4013      	ands	r3, r2
 800084e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000858:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800085c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000860:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000862:	4a04      	ldr	r2, [pc, #16]	; (8000874 <__NVIC_SetPriorityGrouping+0x44>)
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	60d3      	str	r3, [r2, #12]
}
 8000868:	bf00      	nop
 800086a:	3714      	adds	r7, #20
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr
 8000874:	e000ed00 	.word	0xe000ed00

08000878 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800087c:	4b04      	ldr	r3, [pc, #16]	; (8000890 <__NVIC_GetPriorityGrouping+0x18>)
 800087e:	68db      	ldr	r3, [r3, #12]
 8000880:	0a1b      	lsrs	r3, r3, #8
 8000882:	f003 0307 	and.w	r3, r3, #7
}
 8000886:	4618      	mov	r0, r3
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr
 8000890:	e000ed00 	.word	0xe000ed00

08000894 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800089e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	db0b      	blt.n	80008be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	f003 021f 	and.w	r2, r3, #31
 80008ac:	4907      	ldr	r1, [pc, #28]	; (80008cc <__NVIC_EnableIRQ+0x38>)
 80008ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b2:	095b      	lsrs	r3, r3, #5
 80008b4:	2001      	movs	r0, #1
 80008b6:	fa00 f202 	lsl.w	r2, r0, r2
 80008ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80008be:	bf00      	nop
 80008c0:	370c      	adds	r7, #12
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	e000e100 	.word	0xe000e100

080008d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	6039      	str	r1, [r7, #0]
 80008da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	db0a      	blt.n	80008fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	b2da      	uxtb	r2, r3
 80008e8:	490c      	ldr	r1, [pc, #48]	; (800091c <__NVIC_SetPriority+0x4c>)
 80008ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ee:	0112      	lsls	r2, r2, #4
 80008f0:	b2d2      	uxtb	r2, r2
 80008f2:	440b      	add	r3, r1
 80008f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008f8:	e00a      	b.n	8000910 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	b2da      	uxtb	r2, r3
 80008fe:	4908      	ldr	r1, [pc, #32]	; (8000920 <__NVIC_SetPriority+0x50>)
 8000900:	79fb      	ldrb	r3, [r7, #7]
 8000902:	f003 030f 	and.w	r3, r3, #15
 8000906:	3b04      	subs	r3, #4
 8000908:	0112      	lsls	r2, r2, #4
 800090a:	b2d2      	uxtb	r2, r2
 800090c:	440b      	add	r3, r1
 800090e:	761a      	strb	r2, [r3, #24]
}
 8000910:	bf00      	nop
 8000912:	370c      	adds	r7, #12
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr
 800091c:	e000e100 	.word	0xe000e100
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000924:	b480      	push	{r7}
 8000926:	b089      	sub	sp, #36	; 0x24
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	60b9      	str	r1, [r7, #8]
 800092e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	f003 0307 	and.w	r3, r3, #7
 8000936:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000938:	69fb      	ldr	r3, [r7, #28]
 800093a:	f1c3 0307 	rsb	r3, r3, #7
 800093e:	2b04      	cmp	r3, #4
 8000940:	bf28      	it	cs
 8000942:	2304      	movcs	r3, #4
 8000944:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000946:	69fb      	ldr	r3, [r7, #28]
 8000948:	3304      	adds	r3, #4
 800094a:	2b06      	cmp	r3, #6
 800094c:	d902      	bls.n	8000954 <NVIC_EncodePriority+0x30>
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	3b03      	subs	r3, #3
 8000952:	e000      	b.n	8000956 <NVIC_EncodePriority+0x32>
 8000954:	2300      	movs	r3, #0
 8000956:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000958:	f04f 32ff 	mov.w	r2, #4294967295
 800095c:	69bb      	ldr	r3, [r7, #24]
 800095e:	fa02 f303 	lsl.w	r3, r2, r3
 8000962:	43da      	mvns	r2, r3
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	401a      	ands	r2, r3
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800096c:	f04f 31ff 	mov.w	r1, #4294967295
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	fa01 f303 	lsl.w	r3, r1, r3
 8000976:	43d9      	mvns	r1, r3
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800097c:	4313      	orrs	r3, r2
         );
}
 800097e:	4618      	mov	r0, r3
 8000980:	3724      	adds	r7, #36	; 0x24
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr

0800098a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800098a:	b580      	push	{r7, lr}
 800098c:	b082      	sub	sp, #8
 800098e:	af00      	add	r7, sp, #0
 8000990:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000992:	6878      	ldr	r0, [r7, #4]
 8000994:	f7ff ff4c 	bl	8000830 <__NVIC_SetPriorityGrouping>
}
 8000998:	bf00      	nop
 800099a:	3708      	adds	r7, #8
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}

080009a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b086      	sub	sp, #24
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	4603      	mov	r3, r0
 80009a8:	60b9      	str	r1, [r7, #8]
 80009aa:	607a      	str	r2, [r7, #4]
 80009ac:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80009ae:	f7ff ff63 	bl	8000878 <__NVIC_GetPriorityGrouping>
 80009b2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009b4:	687a      	ldr	r2, [r7, #4]
 80009b6:	68b9      	ldr	r1, [r7, #8]
 80009b8:	6978      	ldr	r0, [r7, #20]
 80009ba:	f7ff ffb3 	bl	8000924 <NVIC_EncodePriority>
 80009be:	4602      	mov	r2, r0
 80009c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009c4:	4611      	mov	r1, r2
 80009c6:	4618      	mov	r0, r3
 80009c8:	f7ff ff82 	bl	80008d0 <__NVIC_SetPriority>
}
 80009cc:	bf00      	nop
 80009ce:	3718      	adds	r7, #24
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e2:	4618      	mov	r0, r3
 80009e4:	f7ff ff56 	bl	8000894 <__NVIC_EnableIRQ>
}
 80009e8:	bf00      	nop
 80009ea:	3708      	adds	r7, #8
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b087      	sub	sp, #28
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80009fa:	2300      	movs	r3, #0
 80009fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80009fe:	e15a      	b.n	8000cb6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	2101      	movs	r1, #1
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	fa01 f303 	lsl.w	r3, r1, r3
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	f000 814c 	beq.w	8000cb0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	f003 0303 	and.w	r3, r3, #3
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d005      	beq.n	8000a30 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a2c:	2b02      	cmp	r3, #2
 8000a2e:	d130      	bne.n	8000a92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	689b      	ldr	r3, [r3, #8]
 8000a34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	005b      	lsls	r3, r3, #1
 8000a3a:	2203      	movs	r2, #3
 8000a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a40:	43db      	mvns	r3, r3
 8000a42:	693a      	ldr	r2, [r7, #16]
 8000a44:	4013      	ands	r3, r2
 8000a46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	68da      	ldr	r2, [r3, #12]
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	005b      	lsls	r3, r3, #1
 8000a50:	fa02 f303 	lsl.w	r3, r2, r3
 8000a54:	693a      	ldr	r2, [r7, #16]
 8000a56:	4313      	orrs	r3, r2
 8000a58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	693a      	ldr	r2, [r7, #16]
 8000a5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a66:	2201      	movs	r2, #1
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6e:	43db      	mvns	r3, r3
 8000a70:	693a      	ldr	r2, [r7, #16]
 8000a72:	4013      	ands	r3, r2
 8000a74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	091b      	lsrs	r3, r3, #4
 8000a7c:	f003 0201 	and.w	r2, r3, #1
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	fa02 f303 	lsl.w	r3, r2, r3
 8000a86:	693a      	ldr	r2, [r7, #16]
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	f003 0303 	and.w	r3, r3, #3
 8000a9a:	2b03      	cmp	r3, #3
 8000a9c:	d017      	beq.n	8000ace <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	68db      	ldr	r3, [r3, #12]
 8000aa2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	2203      	movs	r2, #3
 8000aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000aae:	43db      	mvns	r3, r3
 8000ab0:	693a      	ldr	r2, [r7, #16]
 8000ab2:	4013      	ands	r3, r2
 8000ab4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	689a      	ldr	r2, [r3, #8]
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	005b      	lsls	r3, r3, #1
 8000abe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	f003 0303 	and.w	r3, r3, #3
 8000ad6:	2b02      	cmp	r3, #2
 8000ad8:	d123      	bne.n	8000b22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	08da      	lsrs	r2, r3, #3
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	3208      	adds	r2, #8
 8000ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ae6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	f003 0307 	and.w	r3, r3, #7
 8000aee:	009b      	lsls	r3, r3, #2
 8000af0:	220f      	movs	r2, #15
 8000af2:	fa02 f303 	lsl.w	r3, r2, r3
 8000af6:	43db      	mvns	r3, r3
 8000af8:	693a      	ldr	r2, [r7, #16]
 8000afa:	4013      	ands	r3, r2
 8000afc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	691a      	ldr	r2, [r3, #16]
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	f003 0307 	and.w	r3, r3, #7
 8000b08:	009b      	lsls	r3, r3, #2
 8000b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	4313      	orrs	r3, r2
 8000b12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	08da      	lsrs	r2, r3, #3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	3208      	adds	r2, #8
 8000b1c:	6939      	ldr	r1, [r7, #16]
 8000b1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	2203      	movs	r2, #3
 8000b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b32:	43db      	mvns	r3, r3
 8000b34:	693a      	ldr	r2, [r7, #16]
 8000b36:	4013      	ands	r3, r2
 8000b38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	f003 0203 	and.w	r2, r3, #3
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	005b      	lsls	r3, r3, #1
 8000b46:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	f000 80a6 	beq.w	8000cb0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b64:	4b5b      	ldr	r3, [pc, #364]	; (8000cd4 <HAL_GPIO_Init+0x2e4>)
 8000b66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b68:	4a5a      	ldr	r2, [pc, #360]	; (8000cd4 <HAL_GPIO_Init+0x2e4>)
 8000b6a:	f043 0301 	orr.w	r3, r3, #1
 8000b6e:	6613      	str	r3, [r2, #96]	; 0x60
 8000b70:	4b58      	ldr	r3, [pc, #352]	; (8000cd4 <HAL_GPIO_Init+0x2e4>)
 8000b72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b74:	f003 0301 	and.w	r3, r3, #1
 8000b78:	60bb      	str	r3, [r7, #8]
 8000b7a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000b7c:	4a56      	ldr	r2, [pc, #344]	; (8000cd8 <HAL_GPIO_Init+0x2e8>)
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	089b      	lsrs	r3, r3, #2
 8000b82:	3302      	adds	r3, #2
 8000b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	f003 0303 	and.w	r3, r3, #3
 8000b90:	009b      	lsls	r3, r3, #2
 8000b92:	220f      	movs	r2, #15
 8000b94:	fa02 f303 	lsl.w	r3, r2, r3
 8000b98:	43db      	mvns	r3, r3
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ba6:	d01f      	beq.n	8000be8 <HAL_GPIO_Init+0x1f8>
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	4a4c      	ldr	r2, [pc, #304]	; (8000cdc <HAL_GPIO_Init+0x2ec>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d019      	beq.n	8000be4 <HAL_GPIO_Init+0x1f4>
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	4a4b      	ldr	r2, [pc, #300]	; (8000ce0 <HAL_GPIO_Init+0x2f0>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d013      	beq.n	8000be0 <HAL_GPIO_Init+0x1f0>
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	4a4a      	ldr	r2, [pc, #296]	; (8000ce4 <HAL_GPIO_Init+0x2f4>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d00d      	beq.n	8000bdc <HAL_GPIO_Init+0x1ec>
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4a49      	ldr	r2, [pc, #292]	; (8000ce8 <HAL_GPIO_Init+0x2f8>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d007      	beq.n	8000bd8 <HAL_GPIO_Init+0x1e8>
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4a48      	ldr	r2, [pc, #288]	; (8000cec <HAL_GPIO_Init+0x2fc>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d101      	bne.n	8000bd4 <HAL_GPIO_Init+0x1e4>
 8000bd0:	2305      	movs	r3, #5
 8000bd2:	e00a      	b.n	8000bea <HAL_GPIO_Init+0x1fa>
 8000bd4:	2306      	movs	r3, #6
 8000bd6:	e008      	b.n	8000bea <HAL_GPIO_Init+0x1fa>
 8000bd8:	2304      	movs	r3, #4
 8000bda:	e006      	b.n	8000bea <HAL_GPIO_Init+0x1fa>
 8000bdc:	2303      	movs	r3, #3
 8000bde:	e004      	b.n	8000bea <HAL_GPIO_Init+0x1fa>
 8000be0:	2302      	movs	r3, #2
 8000be2:	e002      	b.n	8000bea <HAL_GPIO_Init+0x1fa>
 8000be4:	2301      	movs	r3, #1
 8000be6:	e000      	b.n	8000bea <HAL_GPIO_Init+0x1fa>
 8000be8:	2300      	movs	r3, #0
 8000bea:	697a      	ldr	r2, [r7, #20]
 8000bec:	f002 0203 	and.w	r2, r2, #3
 8000bf0:	0092      	lsls	r2, r2, #2
 8000bf2:	4093      	lsls	r3, r2
 8000bf4:	693a      	ldr	r2, [r7, #16]
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000bfa:	4937      	ldr	r1, [pc, #220]	; (8000cd8 <HAL_GPIO_Init+0x2e8>)
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	089b      	lsrs	r3, r3, #2
 8000c00:	3302      	adds	r3, #2
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c08:	4b39      	ldr	r3, [pc, #228]	; (8000cf0 <HAL_GPIO_Init+0x300>)
 8000c0a:	689b      	ldr	r3, [r3, #8]
 8000c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	43db      	mvns	r3, r3
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	4013      	ands	r3, r2
 8000c16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d003      	beq.n	8000c2c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000c24:	693a      	ldr	r2, [r7, #16]
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c2c:	4a30      	ldr	r2, [pc, #192]	; (8000cf0 <HAL_GPIO_Init+0x300>)
 8000c2e:	693b      	ldr	r3, [r7, #16]
 8000c30:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000c32:	4b2f      	ldr	r3, [pc, #188]	; (8000cf0 <HAL_GPIO_Init+0x300>)
 8000c34:	68db      	ldr	r3, [r3, #12]
 8000c36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	43db      	mvns	r3, r3
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	4013      	ands	r3, r2
 8000c40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d003      	beq.n	8000c56 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	4313      	orrs	r3, r2
 8000c54:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000c56:	4a26      	ldr	r2, [pc, #152]	; (8000cf0 <HAL_GPIO_Init+0x300>)
 8000c58:	693b      	ldr	r3, [r7, #16]
 8000c5a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000c5c:	4b24      	ldr	r3, [pc, #144]	; (8000cf0 <HAL_GPIO_Init+0x300>)
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	43db      	mvns	r3, r3
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	4013      	ands	r3, r2
 8000c6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d003      	beq.n	8000c80 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000c78:	693a      	ldr	r2, [r7, #16]
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000c80:	4a1b      	ldr	r2, [pc, #108]	; (8000cf0 <HAL_GPIO_Init+0x300>)
 8000c82:	693b      	ldr	r3, [r7, #16]
 8000c84:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000c86:	4b1a      	ldr	r3, [pc, #104]	; (8000cf0 <HAL_GPIO_Init+0x300>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	43db      	mvns	r3, r3
 8000c90:	693a      	ldr	r2, [r7, #16]
 8000c92:	4013      	ands	r3, r2
 8000c94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d003      	beq.n	8000caa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000caa:	4a11      	ldr	r2, [pc, #68]	; (8000cf0 <HAL_GPIO_Init+0x300>)
 8000cac:	693b      	ldr	r3, [r7, #16]
 8000cae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	f47f ae9d 	bne.w	8000a00 <HAL_GPIO_Init+0x10>
  }
}
 8000cc6:	bf00      	nop
 8000cc8:	bf00      	nop
 8000cca:	371c      	adds	r7, #28
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	40010000 	.word	0x40010000
 8000cdc:	48000400 	.word	0x48000400
 8000ce0:	48000800 	.word	0x48000800
 8000ce4:	48000c00 	.word	0x48000c00
 8000ce8:	48001000 	.word	0x48001000
 8000cec:	48001400 	.word	0x48001400
 8000cf0:	40010400 	.word	0x40010400

08000cf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	807b      	strh	r3, [r7, #2]
 8000d00:	4613      	mov	r3, r2
 8000d02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d04:	787b      	ldrb	r3, [r7, #1]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d003      	beq.n	8000d12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d0a:	887a      	ldrh	r2, [r7, #2]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d10:	e002      	b.n	8000d18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d12:	887a      	ldrh	r2, [r7, #2]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d18:	bf00      	nop
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000d2e:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d30:	695a      	ldr	r2, [r3, #20]
 8000d32:	88fb      	ldrh	r3, [r7, #6]
 8000d34:	4013      	ands	r3, r2
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d006      	beq.n	8000d48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000d3a:	4a05      	ldr	r2, [pc, #20]	; (8000d50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d3c:	88fb      	ldrh	r3, [r7, #6]
 8000d3e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000d40:	88fb      	ldrh	r3, [r7, #6]
 8000d42:	4618      	mov	r0, r3
 8000d44:	f000 f806 	bl	8000d54 <HAL_GPIO_EXTI_Callback>
  }
}
 8000d48:	bf00      	nop
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	40010400 	.word	0x40010400

08000d54 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000d5e:	bf00      	nop
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
	...

08000d6c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d141      	bne.n	8000dfe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000d7a:	4b4b      	ldr	r3, [pc, #300]	; (8000ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000d82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d86:	d131      	bne.n	8000dec <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000d88:	4b47      	ldr	r3, [pc, #284]	; (8000ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d8e:	4a46      	ldr	r2, [pc, #280]	; (8000ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d94:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d98:	4b43      	ldr	r3, [pc, #268]	; (8000ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000da0:	4a41      	ldr	r2, [pc, #260]	; (8000ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000da2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000da6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000da8:	4b40      	ldr	r3, [pc, #256]	; (8000eac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2232      	movs	r2, #50	; 0x32
 8000dae:	fb02 f303 	mul.w	r3, r2, r3
 8000db2:	4a3f      	ldr	r2, [pc, #252]	; (8000eb0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000db4:	fba2 2303 	umull	r2, r3, r2, r3
 8000db8:	0c9b      	lsrs	r3, r3, #18
 8000dba:	3301      	adds	r3, #1
 8000dbc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000dbe:	e002      	b.n	8000dc6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	3b01      	subs	r3, #1
 8000dc4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000dc6:	4b38      	ldr	r3, [pc, #224]	; (8000ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dc8:	695b      	ldr	r3, [r3, #20]
 8000dca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000dd2:	d102      	bne.n	8000dda <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d1f2      	bne.n	8000dc0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000dda:	4b33      	ldr	r3, [pc, #204]	; (8000ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ddc:	695b      	ldr	r3, [r3, #20]
 8000dde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000de2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000de6:	d158      	bne.n	8000e9a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000de8:	2303      	movs	r3, #3
 8000dea:	e057      	b.n	8000e9c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000dec:	4b2e      	ldr	r3, [pc, #184]	; (8000ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000df2:	4a2d      	ldr	r2, [pc, #180]	; (8000ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000df4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000df8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000dfc:	e04d      	b.n	8000e9a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e04:	d141      	bne.n	8000e8a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e06:	4b28      	ldr	r3, [pc, #160]	; (8000ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e12:	d131      	bne.n	8000e78 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000e14:	4b24      	ldr	r3, [pc, #144]	; (8000ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e1a:	4a23      	ldr	r2, [pc, #140]	; (8000ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e20:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e24:	4b20      	ldr	r3, [pc, #128]	; (8000ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e2c:	4a1e      	ldr	r2, [pc, #120]	; (8000ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e32:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000e34:	4b1d      	ldr	r3, [pc, #116]	; (8000eac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2232      	movs	r2, #50	; 0x32
 8000e3a:	fb02 f303 	mul.w	r3, r2, r3
 8000e3e:	4a1c      	ldr	r2, [pc, #112]	; (8000eb0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000e40:	fba2 2303 	umull	r2, r3, r2, r3
 8000e44:	0c9b      	lsrs	r3, r3, #18
 8000e46:	3301      	adds	r3, #1
 8000e48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e4a:	e002      	b.n	8000e52 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	3b01      	subs	r3, #1
 8000e50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e52:	4b15      	ldr	r3, [pc, #84]	; (8000ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e54:	695b      	ldr	r3, [r3, #20]
 8000e56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e5e:	d102      	bne.n	8000e66 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d1f2      	bne.n	8000e4c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e66:	4b10      	ldr	r3, [pc, #64]	; (8000ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e68:	695b      	ldr	r3, [r3, #20]
 8000e6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e72:	d112      	bne.n	8000e9a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000e74:	2303      	movs	r3, #3
 8000e76:	e011      	b.n	8000e9c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000e78:	4b0b      	ldr	r3, [pc, #44]	; (8000ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e84:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000e88:	e007      	b.n	8000e9a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e8a:	4b07      	ldr	r3, [pc, #28]	; (8000ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e92:	4a05      	ldr	r2, [pc, #20]	; (8000ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e94:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e98:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8000e9a:	2300      	movs	r3, #0
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3714      	adds	r7, #20
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	40007000 	.word	0x40007000
 8000eac:	20000000 	.word	0x20000000
 8000eb0:	431bde83 	.word	0x431bde83

08000eb4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000eb8:	4b05      	ldr	r3, [pc, #20]	; (8000ed0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000eba:	689b      	ldr	r3, [r3, #8]
 8000ebc:	4a04      	ldr	r2, [pc, #16]	; (8000ed0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000ebe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ec2:	6093      	str	r3, [r2, #8]
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	40007000 	.word	0x40007000

08000ed4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b088      	sub	sp, #32
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d101      	bne.n	8000ee6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e306      	b.n	80014f4 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d075      	beq.n	8000fde <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ef2:	4b97      	ldr	r3, [pc, #604]	; (8001150 <HAL_RCC_OscConfig+0x27c>)
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	f003 030c 	and.w	r3, r3, #12
 8000efa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000efc:	4b94      	ldr	r3, [pc, #592]	; (8001150 <HAL_RCC_OscConfig+0x27c>)
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	f003 0303 	and.w	r3, r3, #3
 8000f04:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8000f06:	69bb      	ldr	r3, [r7, #24]
 8000f08:	2b0c      	cmp	r3, #12
 8000f0a:	d102      	bne.n	8000f12 <HAL_RCC_OscConfig+0x3e>
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	2b03      	cmp	r3, #3
 8000f10:	d002      	beq.n	8000f18 <HAL_RCC_OscConfig+0x44>
 8000f12:	69bb      	ldr	r3, [r7, #24]
 8000f14:	2b08      	cmp	r3, #8
 8000f16:	d10b      	bne.n	8000f30 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f18:	4b8d      	ldr	r3, [pc, #564]	; (8001150 <HAL_RCC_OscConfig+0x27c>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d05b      	beq.n	8000fdc <HAL_RCC_OscConfig+0x108>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d157      	bne.n	8000fdc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	e2e1      	b.n	80014f4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f38:	d106      	bne.n	8000f48 <HAL_RCC_OscConfig+0x74>
 8000f3a:	4b85      	ldr	r3, [pc, #532]	; (8001150 <HAL_RCC_OscConfig+0x27c>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a84      	ldr	r2, [pc, #528]	; (8001150 <HAL_RCC_OscConfig+0x27c>)
 8000f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f44:	6013      	str	r3, [r2, #0]
 8000f46:	e01d      	b.n	8000f84 <HAL_RCC_OscConfig+0xb0>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f50:	d10c      	bne.n	8000f6c <HAL_RCC_OscConfig+0x98>
 8000f52:	4b7f      	ldr	r3, [pc, #508]	; (8001150 <HAL_RCC_OscConfig+0x27c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a7e      	ldr	r2, [pc, #504]	; (8001150 <HAL_RCC_OscConfig+0x27c>)
 8000f58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f5c:	6013      	str	r3, [r2, #0]
 8000f5e:	4b7c      	ldr	r3, [pc, #496]	; (8001150 <HAL_RCC_OscConfig+0x27c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a7b      	ldr	r2, [pc, #492]	; (8001150 <HAL_RCC_OscConfig+0x27c>)
 8000f64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f68:	6013      	str	r3, [r2, #0]
 8000f6a:	e00b      	b.n	8000f84 <HAL_RCC_OscConfig+0xb0>
 8000f6c:	4b78      	ldr	r3, [pc, #480]	; (8001150 <HAL_RCC_OscConfig+0x27c>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a77      	ldr	r2, [pc, #476]	; (8001150 <HAL_RCC_OscConfig+0x27c>)
 8000f72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f76:	6013      	str	r3, [r2, #0]
 8000f78:	4b75      	ldr	r3, [pc, #468]	; (8001150 <HAL_RCC_OscConfig+0x27c>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a74      	ldr	r2, [pc, #464]	; (8001150 <HAL_RCC_OscConfig+0x27c>)
 8000f7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d013      	beq.n	8000fb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f8c:	f7ff fc44 	bl	8000818 <HAL_GetTick>
 8000f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f92:	e008      	b.n	8000fa6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f94:	f7ff fc40 	bl	8000818 <HAL_GetTick>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	2b64      	cmp	r3, #100	; 0x64
 8000fa0:	d901      	bls.n	8000fa6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	e2a6      	b.n	80014f4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fa6:	4b6a      	ldr	r3, [pc, #424]	; (8001150 <HAL_RCC_OscConfig+0x27c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d0f0      	beq.n	8000f94 <HAL_RCC_OscConfig+0xc0>
 8000fb2:	e014      	b.n	8000fde <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fb4:	f7ff fc30 	bl	8000818 <HAL_GetTick>
 8000fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000fba:	e008      	b.n	8000fce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fbc:	f7ff fc2c 	bl	8000818 <HAL_GetTick>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	2b64      	cmp	r3, #100	; 0x64
 8000fc8:	d901      	bls.n	8000fce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	e292      	b.n	80014f4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000fce:	4b60      	ldr	r3, [pc, #384]	; (8001150 <HAL_RCC_OscConfig+0x27c>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d1f0      	bne.n	8000fbc <HAL_RCC_OscConfig+0xe8>
 8000fda:	e000      	b.n	8000fde <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d075      	beq.n	80010d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000fea:	4b59      	ldr	r3, [pc, #356]	; (8001150 <HAL_RCC_OscConfig+0x27c>)
 8000fec:	689b      	ldr	r3, [r3, #8]
 8000fee:	f003 030c 	and.w	r3, r3, #12
 8000ff2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ff4:	4b56      	ldr	r3, [pc, #344]	; (8001150 <HAL_RCC_OscConfig+0x27c>)
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	f003 0303 	and.w	r3, r3, #3
 8000ffc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	2b0c      	cmp	r3, #12
 8001002:	d102      	bne.n	800100a <HAL_RCC_OscConfig+0x136>
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	2b02      	cmp	r3, #2
 8001008:	d002      	beq.n	8001010 <HAL_RCC_OscConfig+0x13c>
 800100a:	69bb      	ldr	r3, [r7, #24]
 800100c:	2b04      	cmp	r3, #4
 800100e:	d11f      	bne.n	8001050 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001010:	4b4f      	ldr	r3, [pc, #316]	; (8001150 <HAL_RCC_OscConfig+0x27c>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001018:	2b00      	cmp	r3, #0
 800101a:	d005      	beq.n	8001028 <HAL_RCC_OscConfig+0x154>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d101      	bne.n	8001028 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001024:	2301      	movs	r3, #1
 8001026:	e265      	b.n	80014f4 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001028:	4b49      	ldr	r3, [pc, #292]	; (8001150 <HAL_RCC_OscConfig+0x27c>)
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	691b      	ldr	r3, [r3, #16]
 8001034:	061b      	lsls	r3, r3, #24
 8001036:	4946      	ldr	r1, [pc, #280]	; (8001150 <HAL_RCC_OscConfig+0x27c>)
 8001038:	4313      	orrs	r3, r2
 800103a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800103c:	4b45      	ldr	r3, [pc, #276]	; (8001154 <HAL_RCC_OscConfig+0x280>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff faef 	bl	8000624 <HAL_InitTick>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d043      	beq.n	80010d4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800104c:	2301      	movs	r3, #1
 800104e:	e251      	b.n	80014f4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d023      	beq.n	80010a0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001058:	4b3d      	ldr	r3, [pc, #244]	; (8001150 <HAL_RCC_OscConfig+0x27c>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a3c      	ldr	r2, [pc, #240]	; (8001150 <HAL_RCC_OscConfig+0x27c>)
 800105e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001062:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001064:	f7ff fbd8 	bl	8000818 <HAL_GetTick>
 8001068:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800106a:	e008      	b.n	800107e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800106c:	f7ff fbd4 	bl	8000818 <HAL_GetTick>
 8001070:	4602      	mov	r2, r0
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	2b02      	cmp	r3, #2
 8001078:	d901      	bls.n	800107e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800107a:	2303      	movs	r3, #3
 800107c:	e23a      	b.n	80014f4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800107e:	4b34      	ldr	r3, [pc, #208]	; (8001150 <HAL_RCC_OscConfig+0x27c>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001086:	2b00      	cmp	r3, #0
 8001088:	d0f0      	beq.n	800106c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800108a:	4b31      	ldr	r3, [pc, #196]	; (8001150 <HAL_RCC_OscConfig+0x27c>)
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	691b      	ldr	r3, [r3, #16]
 8001096:	061b      	lsls	r3, r3, #24
 8001098:	492d      	ldr	r1, [pc, #180]	; (8001150 <HAL_RCC_OscConfig+0x27c>)
 800109a:	4313      	orrs	r3, r2
 800109c:	604b      	str	r3, [r1, #4]
 800109e:	e01a      	b.n	80010d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010a0:	4b2b      	ldr	r3, [pc, #172]	; (8001150 <HAL_RCC_OscConfig+0x27c>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a2a      	ldr	r2, [pc, #168]	; (8001150 <HAL_RCC_OscConfig+0x27c>)
 80010a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010ac:	f7ff fbb4 	bl	8000818 <HAL_GetTick>
 80010b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010b2:	e008      	b.n	80010c6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010b4:	f7ff fbb0 	bl	8000818 <HAL_GetTick>
 80010b8:	4602      	mov	r2, r0
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d901      	bls.n	80010c6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80010c2:	2303      	movs	r3, #3
 80010c4:	e216      	b.n	80014f4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010c6:	4b22      	ldr	r3, [pc, #136]	; (8001150 <HAL_RCC_OscConfig+0x27c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d1f0      	bne.n	80010b4 <HAL_RCC_OscConfig+0x1e0>
 80010d2:	e000      	b.n	80010d6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80010d4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f003 0308 	and.w	r3, r3, #8
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d041      	beq.n	8001166 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	695b      	ldr	r3, [r3, #20]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d01c      	beq.n	8001124 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010ea:	4b19      	ldr	r3, [pc, #100]	; (8001150 <HAL_RCC_OscConfig+0x27c>)
 80010ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010f0:	4a17      	ldr	r2, [pc, #92]	; (8001150 <HAL_RCC_OscConfig+0x27c>)
 80010f2:	f043 0301 	orr.w	r3, r3, #1
 80010f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010fa:	f7ff fb8d 	bl	8000818 <HAL_GetTick>
 80010fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001100:	e008      	b.n	8001114 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001102:	f7ff fb89 	bl	8000818 <HAL_GetTick>
 8001106:	4602      	mov	r2, r0
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	2b02      	cmp	r3, #2
 800110e:	d901      	bls.n	8001114 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001110:	2303      	movs	r3, #3
 8001112:	e1ef      	b.n	80014f4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001114:	4b0e      	ldr	r3, [pc, #56]	; (8001150 <HAL_RCC_OscConfig+0x27c>)
 8001116:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800111a:	f003 0302 	and.w	r3, r3, #2
 800111e:	2b00      	cmp	r3, #0
 8001120:	d0ef      	beq.n	8001102 <HAL_RCC_OscConfig+0x22e>
 8001122:	e020      	b.n	8001166 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001124:	4b0a      	ldr	r3, [pc, #40]	; (8001150 <HAL_RCC_OscConfig+0x27c>)
 8001126:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800112a:	4a09      	ldr	r2, [pc, #36]	; (8001150 <HAL_RCC_OscConfig+0x27c>)
 800112c:	f023 0301 	bic.w	r3, r3, #1
 8001130:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001134:	f7ff fb70 	bl	8000818 <HAL_GetTick>
 8001138:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800113a:	e00d      	b.n	8001158 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800113c:	f7ff fb6c 	bl	8000818 <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	2b02      	cmp	r3, #2
 8001148:	d906      	bls.n	8001158 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800114a:	2303      	movs	r3, #3
 800114c:	e1d2      	b.n	80014f4 <HAL_RCC_OscConfig+0x620>
 800114e:	bf00      	nop
 8001150:	40021000 	.word	0x40021000
 8001154:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001158:	4b8c      	ldr	r3, [pc, #560]	; (800138c <HAL_RCC_OscConfig+0x4b8>)
 800115a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	2b00      	cmp	r3, #0
 8001164:	d1ea      	bne.n	800113c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 0304 	and.w	r3, r3, #4
 800116e:	2b00      	cmp	r3, #0
 8001170:	f000 80a6 	beq.w	80012c0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001174:	2300      	movs	r3, #0
 8001176:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001178:	4b84      	ldr	r3, [pc, #528]	; (800138c <HAL_RCC_OscConfig+0x4b8>)
 800117a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800117c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001180:	2b00      	cmp	r3, #0
 8001182:	d101      	bne.n	8001188 <HAL_RCC_OscConfig+0x2b4>
 8001184:	2301      	movs	r3, #1
 8001186:	e000      	b.n	800118a <HAL_RCC_OscConfig+0x2b6>
 8001188:	2300      	movs	r3, #0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d00d      	beq.n	80011aa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800118e:	4b7f      	ldr	r3, [pc, #508]	; (800138c <HAL_RCC_OscConfig+0x4b8>)
 8001190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001192:	4a7e      	ldr	r2, [pc, #504]	; (800138c <HAL_RCC_OscConfig+0x4b8>)
 8001194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001198:	6593      	str	r3, [r2, #88]	; 0x58
 800119a:	4b7c      	ldr	r3, [pc, #496]	; (800138c <HAL_RCC_OscConfig+0x4b8>)
 800119c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800119e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80011a6:	2301      	movs	r3, #1
 80011a8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011aa:	4b79      	ldr	r3, [pc, #484]	; (8001390 <HAL_RCC_OscConfig+0x4bc>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d118      	bne.n	80011e8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80011b6:	4b76      	ldr	r3, [pc, #472]	; (8001390 <HAL_RCC_OscConfig+0x4bc>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a75      	ldr	r2, [pc, #468]	; (8001390 <HAL_RCC_OscConfig+0x4bc>)
 80011bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011c2:	f7ff fb29 	bl	8000818 <HAL_GetTick>
 80011c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011c8:	e008      	b.n	80011dc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011ca:	f7ff fb25 	bl	8000818 <HAL_GetTick>
 80011ce:	4602      	mov	r2, r0
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d901      	bls.n	80011dc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80011d8:	2303      	movs	r3, #3
 80011da:	e18b      	b.n	80014f4 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011dc:	4b6c      	ldr	r3, [pc, #432]	; (8001390 <HAL_RCC_OscConfig+0x4bc>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d0f0      	beq.n	80011ca <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d108      	bne.n	8001202 <HAL_RCC_OscConfig+0x32e>
 80011f0:	4b66      	ldr	r3, [pc, #408]	; (800138c <HAL_RCC_OscConfig+0x4b8>)
 80011f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011f6:	4a65      	ldr	r2, [pc, #404]	; (800138c <HAL_RCC_OscConfig+0x4b8>)
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001200:	e024      	b.n	800124c <HAL_RCC_OscConfig+0x378>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	2b05      	cmp	r3, #5
 8001208:	d110      	bne.n	800122c <HAL_RCC_OscConfig+0x358>
 800120a:	4b60      	ldr	r3, [pc, #384]	; (800138c <HAL_RCC_OscConfig+0x4b8>)
 800120c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001210:	4a5e      	ldr	r2, [pc, #376]	; (800138c <HAL_RCC_OscConfig+0x4b8>)
 8001212:	f043 0304 	orr.w	r3, r3, #4
 8001216:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800121a:	4b5c      	ldr	r3, [pc, #368]	; (800138c <HAL_RCC_OscConfig+0x4b8>)
 800121c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001220:	4a5a      	ldr	r2, [pc, #360]	; (800138c <HAL_RCC_OscConfig+0x4b8>)
 8001222:	f043 0301 	orr.w	r3, r3, #1
 8001226:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800122a:	e00f      	b.n	800124c <HAL_RCC_OscConfig+0x378>
 800122c:	4b57      	ldr	r3, [pc, #348]	; (800138c <HAL_RCC_OscConfig+0x4b8>)
 800122e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001232:	4a56      	ldr	r2, [pc, #344]	; (800138c <HAL_RCC_OscConfig+0x4b8>)
 8001234:	f023 0301 	bic.w	r3, r3, #1
 8001238:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800123c:	4b53      	ldr	r3, [pc, #332]	; (800138c <HAL_RCC_OscConfig+0x4b8>)
 800123e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001242:	4a52      	ldr	r2, [pc, #328]	; (800138c <HAL_RCC_OscConfig+0x4b8>)
 8001244:	f023 0304 	bic.w	r3, r3, #4
 8001248:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d016      	beq.n	8001282 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001254:	f7ff fae0 	bl	8000818 <HAL_GetTick>
 8001258:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800125a:	e00a      	b.n	8001272 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800125c:	f7ff fadc 	bl	8000818 <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	f241 3288 	movw	r2, #5000	; 0x1388
 800126a:	4293      	cmp	r3, r2
 800126c:	d901      	bls.n	8001272 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800126e:	2303      	movs	r3, #3
 8001270:	e140      	b.n	80014f4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001272:	4b46      	ldr	r3, [pc, #280]	; (800138c <HAL_RCC_OscConfig+0x4b8>)
 8001274:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001278:	f003 0302 	and.w	r3, r3, #2
 800127c:	2b00      	cmp	r3, #0
 800127e:	d0ed      	beq.n	800125c <HAL_RCC_OscConfig+0x388>
 8001280:	e015      	b.n	80012ae <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001282:	f7ff fac9 	bl	8000818 <HAL_GetTick>
 8001286:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001288:	e00a      	b.n	80012a0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800128a:	f7ff fac5 	bl	8000818 <HAL_GetTick>
 800128e:	4602      	mov	r2, r0
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	f241 3288 	movw	r2, #5000	; 0x1388
 8001298:	4293      	cmp	r3, r2
 800129a:	d901      	bls.n	80012a0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800129c:	2303      	movs	r3, #3
 800129e:	e129      	b.n	80014f4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012a0:	4b3a      	ldr	r3, [pc, #232]	; (800138c <HAL_RCC_OscConfig+0x4b8>)
 80012a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d1ed      	bne.n	800128a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80012ae:	7ffb      	ldrb	r3, [r7, #31]
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d105      	bne.n	80012c0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012b4:	4b35      	ldr	r3, [pc, #212]	; (800138c <HAL_RCC_OscConfig+0x4b8>)
 80012b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b8:	4a34      	ldr	r2, [pc, #208]	; (800138c <HAL_RCC_OscConfig+0x4b8>)
 80012ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012be:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 0320 	and.w	r3, r3, #32
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d03c      	beq.n	8001346 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d01c      	beq.n	800130e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80012d4:	4b2d      	ldr	r3, [pc, #180]	; (800138c <HAL_RCC_OscConfig+0x4b8>)
 80012d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012da:	4a2c      	ldr	r2, [pc, #176]	; (800138c <HAL_RCC_OscConfig+0x4b8>)
 80012dc:	f043 0301 	orr.w	r3, r3, #1
 80012e0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012e4:	f7ff fa98 	bl	8000818 <HAL_GetTick>
 80012e8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80012ea:	e008      	b.n	80012fe <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80012ec:	f7ff fa94 	bl	8000818 <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e0fa      	b.n	80014f4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80012fe:	4b23      	ldr	r3, [pc, #140]	; (800138c <HAL_RCC_OscConfig+0x4b8>)
 8001300:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001304:	f003 0302 	and.w	r3, r3, #2
 8001308:	2b00      	cmp	r3, #0
 800130a:	d0ef      	beq.n	80012ec <HAL_RCC_OscConfig+0x418>
 800130c:	e01b      	b.n	8001346 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800130e:	4b1f      	ldr	r3, [pc, #124]	; (800138c <HAL_RCC_OscConfig+0x4b8>)
 8001310:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001314:	4a1d      	ldr	r2, [pc, #116]	; (800138c <HAL_RCC_OscConfig+0x4b8>)
 8001316:	f023 0301 	bic.w	r3, r3, #1
 800131a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800131e:	f7ff fa7b 	bl	8000818 <HAL_GetTick>
 8001322:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001324:	e008      	b.n	8001338 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001326:	f7ff fa77 	bl	8000818 <HAL_GetTick>
 800132a:	4602      	mov	r2, r0
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	2b02      	cmp	r3, #2
 8001332:	d901      	bls.n	8001338 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001334:	2303      	movs	r3, #3
 8001336:	e0dd      	b.n	80014f4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001338:	4b14      	ldr	r3, [pc, #80]	; (800138c <HAL_RCC_OscConfig+0x4b8>)
 800133a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d1ef      	bne.n	8001326 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	69db      	ldr	r3, [r3, #28]
 800134a:	2b00      	cmp	r3, #0
 800134c:	f000 80d1 	beq.w	80014f2 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001350:	4b0e      	ldr	r3, [pc, #56]	; (800138c <HAL_RCC_OscConfig+0x4b8>)
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	f003 030c 	and.w	r3, r3, #12
 8001358:	2b0c      	cmp	r3, #12
 800135a:	f000 808b 	beq.w	8001474 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	69db      	ldr	r3, [r3, #28]
 8001362:	2b02      	cmp	r3, #2
 8001364:	d15e      	bne.n	8001424 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001366:	4b09      	ldr	r3, [pc, #36]	; (800138c <HAL_RCC_OscConfig+0x4b8>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a08      	ldr	r2, [pc, #32]	; (800138c <HAL_RCC_OscConfig+0x4b8>)
 800136c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001370:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001372:	f7ff fa51 	bl	8000818 <HAL_GetTick>
 8001376:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001378:	e00c      	b.n	8001394 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800137a:	f7ff fa4d 	bl	8000818 <HAL_GetTick>
 800137e:	4602      	mov	r2, r0
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	2b02      	cmp	r3, #2
 8001386:	d905      	bls.n	8001394 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001388:	2303      	movs	r3, #3
 800138a:	e0b3      	b.n	80014f4 <HAL_RCC_OscConfig+0x620>
 800138c:	40021000 	.word	0x40021000
 8001390:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001394:	4b59      	ldr	r3, [pc, #356]	; (80014fc <HAL_RCC_OscConfig+0x628>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d1ec      	bne.n	800137a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013a0:	4b56      	ldr	r3, [pc, #344]	; (80014fc <HAL_RCC_OscConfig+0x628>)
 80013a2:	68da      	ldr	r2, [r3, #12]
 80013a4:	4b56      	ldr	r3, [pc, #344]	; (8001500 <HAL_RCC_OscConfig+0x62c>)
 80013a6:	4013      	ands	r3, r2
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	6a11      	ldr	r1, [r2, #32]
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80013b0:	3a01      	subs	r2, #1
 80013b2:	0112      	lsls	r2, r2, #4
 80013b4:	4311      	orrs	r1, r2
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80013ba:	0212      	lsls	r2, r2, #8
 80013bc:	4311      	orrs	r1, r2
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80013c2:	0852      	lsrs	r2, r2, #1
 80013c4:	3a01      	subs	r2, #1
 80013c6:	0552      	lsls	r2, r2, #21
 80013c8:	4311      	orrs	r1, r2
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80013ce:	0852      	lsrs	r2, r2, #1
 80013d0:	3a01      	subs	r2, #1
 80013d2:	0652      	lsls	r2, r2, #25
 80013d4:	4311      	orrs	r1, r2
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80013da:	06d2      	lsls	r2, r2, #27
 80013dc:	430a      	orrs	r2, r1
 80013de:	4947      	ldr	r1, [pc, #284]	; (80014fc <HAL_RCC_OscConfig+0x628>)
 80013e0:	4313      	orrs	r3, r2
 80013e2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013e4:	4b45      	ldr	r3, [pc, #276]	; (80014fc <HAL_RCC_OscConfig+0x628>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a44      	ldr	r2, [pc, #272]	; (80014fc <HAL_RCC_OscConfig+0x628>)
 80013ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013ee:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80013f0:	4b42      	ldr	r3, [pc, #264]	; (80014fc <HAL_RCC_OscConfig+0x628>)
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	4a41      	ldr	r2, [pc, #260]	; (80014fc <HAL_RCC_OscConfig+0x628>)
 80013f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013fa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013fc:	f7ff fa0c 	bl	8000818 <HAL_GetTick>
 8001400:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001402:	e008      	b.n	8001416 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001404:	f7ff fa08 	bl	8000818 <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b02      	cmp	r3, #2
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e06e      	b.n	80014f4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001416:	4b39      	ldr	r3, [pc, #228]	; (80014fc <HAL_RCC_OscConfig+0x628>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d0f0      	beq.n	8001404 <HAL_RCC_OscConfig+0x530>
 8001422:	e066      	b.n	80014f2 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001424:	4b35      	ldr	r3, [pc, #212]	; (80014fc <HAL_RCC_OscConfig+0x628>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a34      	ldr	r2, [pc, #208]	; (80014fc <HAL_RCC_OscConfig+0x628>)
 800142a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800142e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001430:	4b32      	ldr	r3, [pc, #200]	; (80014fc <HAL_RCC_OscConfig+0x628>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	4a31      	ldr	r2, [pc, #196]	; (80014fc <HAL_RCC_OscConfig+0x628>)
 8001436:	f023 0303 	bic.w	r3, r3, #3
 800143a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800143c:	4b2f      	ldr	r3, [pc, #188]	; (80014fc <HAL_RCC_OscConfig+0x628>)
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	4a2e      	ldr	r2, [pc, #184]	; (80014fc <HAL_RCC_OscConfig+0x628>)
 8001442:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001446:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800144a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800144c:	f7ff f9e4 	bl	8000818 <HAL_GetTick>
 8001450:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001452:	e008      	b.n	8001466 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001454:	f7ff f9e0 	bl	8000818 <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	2b02      	cmp	r3, #2
 8001460:	d901      	bls.n	8001466 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e046      	b.n	80014f4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001466:	4b25      	ldr	r3, [pc, #148]	; (80014fc <HAL_RCC_OscConfig+0x628>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1f0      	bne.n	8001454 <HAL_RCC_OscConfig+0x580>
 8001472:	e03e      	b.n	80014f2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	69db      	ldr	r3, [r3, #28]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d101      	bne.n	8001480 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e039      	b.n	80014f4 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001480:	4b1e      	ldr	r3, [pc, #120]	; (80014fc <HAL_RCC_OscConfig+0x628>)
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	f003 0203 	and.w	r2, r3, #3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6a1b      	ldr	r3, [r3, #32]
 8001490:	429a      	cmp	r2, r3
 8001492:	d12c      	bne.n	80014ee <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149e:	3b01      	subs	r3, #1
 80014a0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d123      	bne.n	80014ee <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d11b      	bne.n	80014ee <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d113      	bne.n	80014ee <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d0:	085b      	lsrs	r3, r3, #1
 80014d2:	3b01      	subs	r3, #1
 80014d4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d109      	bne.n	80014ee <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014e4:	085b      	lsrs	r3, r3, #1
 80014e6:	3b01      	subs	r3, #1
 80014e8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d001      	beq.n	80014f2 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e000      	b.n	80014f4 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80014f2:	2300      	movs	r3, #0
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3720      	adds	r7, #32
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40021000 	.word	0x40021000
 8001500:	019f800c 	.word	0x019f800c

08001504 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b086      	sub	sp, #24
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800150e:	2300      	movs	r3, #0
 8001510:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d101      	bne.n	800151c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e11e      	b.n	800175a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800151c:	4b91      	ldr	r3, [pc, #580]	; (8001764 <HAL_RCC_ClockConfig+0x260>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 030f 	and.w	r3, r3, #15
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	429a      	cmp	r2, r3
 8001528:	d910      	bls.n	800154c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800152a:	4b8e      	ldr	r3, [pc, #568]	; (8001764 <HAL_RCC_ClockConfig+0x260>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f023 020f 	bic.w	r2, r3, #15
 8001532:	498c      	ldr	r1, [pc, #560]	; (8001764 <HAL_RCC_ClockConfig+0x260>)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	4313      	orrs	r3, r2
 8001538:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800153a:	4b8a      	ldr	r3, [pc, #552]	; (8001764 <HAL_RCC_ClockConfig+0x260>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 030f 	and.w	r3, r3, #15
 8001542:	683a      	ldr	r2, [r7, #0]
 8001544:	429a      	cmp	r2, r3
 8001546:	d001      	beq.n	800154c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e106      	b.n	800175a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0301 	and.w	r3, r3, #1
 8001554:	2b00      	cmp	r3, #0
 8001556:	d073      	beq.n	8001640 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	2b03      	cmp	r3, #3
 800155e:	d129      	bne.n	80015b4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001560:	4b81      	ldr	r3, [pc, #516]	; (8001768 <HAL_RCC_ClockConfig+0x264>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d101      	bne.n	8001570 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e0f4      	b.n	800175a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001570:	f000 f9ba 	bl	80018e8 <RCC_GetSysClockFreqFromPLLSource>
 8001574:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	4a7c      	ldr	r2, [pc, #496]	; (800176c <HAL_RCC_ClockConfig+0x268>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d93f      	bls.n	80015fe <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800157e:	4b7a      	ldr	r3, [pc, #488]	; (8001768 <HAL_RCC_ClockConfig+0x264>)
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d009      	beq.n	800159e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001592:	2b00      	cmp	r3, #0
 8001594:	d033      	beq.n	80015fe <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800159a:	2b00      	cmp	r3, #0
 800159c:	d12f      	bne.n	80015fe <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800159e:	4b72      	ldr	r3, [pc, #456]	; (8001768 <HAL_RCC_ClockConfig+0x264>)
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80015a6:	4a70      	ldr	r2, [pc, #448]	; (8001768 <HAL_RCC_ClockConfig+0x264>)
 80015a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015ac:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80015ae:	2380      	movs	r3, #128	; 0x80
 80015b0:	617b      	str	r3, [r7, #20]
 80015b2:	e024      	b.n	80015fe <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d107      	bne.n	80015cc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015bc:	4b6a      	ldr	r3, [pc, #424]	; (8001768 <HAL_RCC_ClockConfig+0x264>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d109      	bne.n	80015dc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e0c6      	b.n	800175a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015cc:	4b66      	ldr	r3, [pc, #408]	; (8001768 <HAL_RCC_ClockConfig+0x264>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d101      	bne.n	80015dc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e0be      	b.n	800175a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80015dc:	f000 f8ce 	bl	800177c <HAL_RCC_GetSysClockFreq>
 80015e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	4a61      	ldr	r2, [pc, #388]	; (800176c <HAL_RCC_ClockConfig+0x268>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d909      	bls.n	80015fe <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80015ea:	4b5f      	ldr	r3, [pc, #380]	; (8001768 <HAL_RCC_ClockConfig+0x264>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80015f2:	4a5d      	ldr	r2, [pc, #372]	; (8001768 <HAL_RCC_ClockConfig+0x264>)
 80015f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015f8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80015fa:	2380      	movs	r3, #128	; 0x80
 80015fc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80015fe:	4b5a      	ldr	r3, [pc, #360]	; (8001768 <HAL_RCC_ClockConfig+0x264>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f023 0203 	bic.w	r2, r3, #3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	4957      	ldr	r1, [pc, #348]	; (8001768 <HAL_RCC_ClockConfig+0x264>)
 800160c:	4313      	orrs	r3, r2
 800160e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001610:	f7ff f902 	bl	8000818 <HAL_GetTick>
 8001614:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001616:	e00a      	b.n	800162e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001618:	f7ff f8fe 	bl	8000818 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	f241 3288 	movw	r2, #5000	; 0x1388
 8001626:	4293      	cmp	r3, r2
 8001628:	d901      	bls.n	800162e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e095      	b.n	800175a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800162e:	4b4e      	ldr	r3, [pc, #312]	; (8001768 <HAL_RCC_ClockConfig+0x264>)
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f003 020c 	and.w	r2, r3, #12
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	429a      	cmp	r2, r3
 800163e:	d1eb      	bne.n	8001618 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0302 	and.w	r3, r3, #2
 8001648:	2b00      	cmp	r3, #0
 800164a:	d023      	beq.n	8001694 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0304 	and.w	r3, r3, #4
 8001654:	2b00      	cmp	r3, #0
 8001656:	d005      	beq.n	8001664 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001658:	4b43      	ldr	r3, [pc, #268]	; (8001768 <HAL_RCC_ClockConfig+0x264>)
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	4a42      	ldr	r2, [pc, #264]	; (8001768 <HAL_RCC_ClockConfig+0x264>)
 800165e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001662:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0308 	and.w	r3, r3, #8
 800166c:	2b00      	cmp	r3, #0
 800166e:	d007      	beq.n	8001680 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001670:	4b3d      	ldr	r3, [pc, #244]	; (8001768 <HAL_RCC_ClockConfig+0x264>)
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001678:	4a3b      	ldr	r2, [pc, #236]	; (8001768 <HAL_RCC_ClockConfig+0x264>)
 800167a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800167e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001680:	4b39      	ldr	r3, [pc, #228]	; (8001768 <HAL_RCC_ClockConfig+0x264>)
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	4936      	ldr	r1, [pc, #216]	; (8001768 <HAL_RCC_ClockConfig+0x264>)
 800168e:	4313      	orrs	r3, r2
 8001690:	608b      	str	r3, [r1, #8]
 8001692:	e008      	b.n	80016a6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	2b80      	cmp	r3, #128	; 0x80
 8001698:	d105      	bne.n	80016a6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800169a:	4b33      	ldr	r3, [pc, #204]	; (8001768 <HAL_RCC_ClockConfig+0x264>)
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	4a32      	ldr	r2, [pc, #200]	; (8001768 <HAL_RCC_ClockConfig+0x264>)
 80016a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80016a4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016a6:	4b2f      	ldr	r3, [pc, #188]	; (8001764 <HAL_RCC_ClockConfig+0x260>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 030f 	and.w	r3, r3, #15
 80016ae:	683a      	ldr	r2, [r7, #0]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d21d      	bcs.n	80016f0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016b4:	4b2b      	ldr	r3, [pc, #172]	; (8001764 <HAL_RCC_ClockConfig+0x260>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f023 020f 	bic.w	r2, r3, #15
 80016bc:	4929      	ldr	r1, [pc, #164]	; (8001764 <HAL_RCC_ClockConfig+0x260>)
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80016c4:	f7ff f8a8 	bl	8000818 <HAL_GetTick>
 80016c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ca:	e00a      	b.n	80016e2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016cc:	f7ff f8a4 	bl	8000818 <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016da:	4293      	cmp	r3, r2
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e03b      	b.n	800175a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016e2:	4b20      	ldr	r3, [pc, #128]	; (8001764 <HAL_RCC_ClockConfig+0x260>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 030f 	and.w	r3, r3, #15
 80016ea:	683a      	ldr	r2, [r7, #0]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d1ed      	bne.n	80016cc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0304 	and.w	r3, r3, #4
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d008      	beq.n	800170e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016fc:	4b1a      	ldr	r3, [pc, #104]	; (8001768 <HAL_RCC_ClockConfig+0x264>)
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	4917      	ldr	r1, [pc, #92]	; (8001768 <HAL_RCC_ClockConfig+0x264>)
 800170a:	4313      	orrs	r3, r2
 800170c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0308 	and.w	r3, r3, #8
 8001716:	2b00      	cmp	r3, #0
 8001718:	d009      	beq.n	800172e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800171a:	4b13      	ldr	r3, [pc, #76]	; (8001768 <HAL_RCC_ClockConfig+0x264>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	691b      	ldr	r3, [r3, #16]
 8001726:	00db      	lsls	r3, r3, #3
 8001728:	490f      	ldr	r1, [pc, #60]	; (8001768 <HAL_RCC_ClockConfig+0x264>)
 800172a:	4313      	orrs	r3, r2
 800172c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800172e:	f000 f825 	bl	800177c <HAL_RCC_GetSysClockFreq>
 8001732:	4602      	mov	r2, r0
 8001734:	4b0c      	ldr	r3, [pc, #48]	; (8001768 <HAL_RCC_ClockConfig+0x264>)
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	091b      	lsrs	r3, r3, #4
 800173a:	f003 030f 	and.w	r3, r3, #15
 800173e:	490c      	ldr	r1, [pc, #48]	; (8001770 <HAL_RCC_ClockConfig+0x26c>)
 8001740:	5ccb      	ldrb	r3, [r1, r3]
 8001742:	f003 031f 	and.w	r3, r3, #31
 8001746:	fa22 f303 	lsr.w	r3, r2, r3
 800174a:	4a0a      	ldr	r2, [pc, #40]	; (8001774 <HAL_RCC_ClockConfig+0x270>)
 800174c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800174e:	4b0a      	ldr	r3, [pc, #40]	; (8001778 <HAL_RCC_ClockConfig+0x274>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4618      	mov	r0, r3
 8001754:	f7fe ff66 	bl	8000624 <HAL_InitTick>
 8001758:	4603      	mov	r3, r0
}
 800175a:	4618      	mov	r0, r3
 800175c:	3718      	adds	r7, #24
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40022000 	.word	0x40022000
 8001768:	40021000 	.word	0x40021000
 800176c:	04c4b400 	.word	0x04c4b400
 8001770:	080056d4 	.word	0x080056d4
 8001774:	20000000 	.word	0x20000000
 8001778:	20000004 	.word	0x20000004

0800177c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800177c:	b480      	push	{r7}
 800177e:	b087      	sub	sp, #28
 8001780:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001782:	4b2c      	ldr	r3, [pc, #176]	; (8001834 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	f003 030c 	and.w	r3, r3, #12
 800178a:	2b04      	cmp	r3, #4
 800178c:	d102      	bne.n	8001794 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800178e:	4b2a      	ldr	r3, [pc, #168]	; (8001838 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001790:	613b      	str	r3, [r7, #16]
 8001792:	e047      	b.n	8001824 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001794:	4b27      	ldr	r3, [pc, #156]	; (8001834 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	f003 030c 	and.w	r3, r3, #12
 800179c:	2b08      	cmp	r3, #8
 800179e:	d102      	bne.n	80017a6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80017a0:	4b26      	ldr	r3, [pc, #152]	; (800183c <HAL_RCC_GetSysClockFreq+0xc0>)
 80017a2:	613b      	str	r3, [r7, #16]
 80017a4:	e03e      	b.n	8001824 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80017a6:	4b23      	ldr	r3, [pc, #140]	; (8001834 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	f003 030c 	and.w	r3, r3, #12
 80017ae:	2b0c      	cmp	r3, #12
 80017b0:	d136      	bne.n	8001820 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80017b2:	4b20      	ldr	r3, [pc, #128]	; (8001834 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	f003 0303 	and.w	r3, r3, #3
 80017ba:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80017bc:	4b1d      	ldr	r3, [pc, #116]	; (8001834 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	091b      	lsrs	r3, r3, #4
 80017c2:	f003 030f 	and.w	r3, r3, #15
 80017c6:	3301      	adds	r3, #1
 80017c8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2b03      	cmp	r3, #3
 80017ce:	d10c      	bne.n	80017ea <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80017d0:	4a1a      	ldr	r2, [pc, #104]	; (800183c <HAL_RCC_GetSysClockFreq+0xc0>)
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d8:	4a16      	ldr	r2, [pc, #88]	; (8001834 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017da:	68d2      	ldr	r2, [r2, #12]
 80017dc:	0a12      	lsrs	r2, r2, #8
 80017de:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80017e2:	fb02 f303 	mul.w	r3, r2, r3
 80017e6:	617b      	str	r3, [r7, #20]
      break;
 80017e8:	e00c      	b.n	8001804 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80017ea:	4a13      	ldr	r2, [pc, #76]	; (8001838 <HAL_RCC_GetSysClockFreq+0xbc>)
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f2:	4a10      	ldr	r2, [pc, #64]	; (8001834 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017f4:	68d2      	ldr	r2, [r2, #12]
 80017f6:	0a12      	lsrs	r2, r2, #8
 80017f8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80017fc:	fb02 f303 	mul.w	r3, r2, r3
 8001800:	617b      	str	r3, [r7, #20]
      break;
 8001802:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001804:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	0e5b      	lsrs	r3, r3, #25
 800180a:	f003 0303 	and.w	r3, r3, #3
 800180e:	3301      	adds	r3, #1
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001814:	697a      	ldr	r2, [r7, #20]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	fbb2 f3f3 	udiv	r3, r2, r3
 800181c:	613b      	str	r3, [r7, #16]
 800181e:	e001      	b.n	8001824 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001820:	2300      	movs	r3, #0
 8001822:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001824:	693b      	ldr	r3, [r7, #16]
}
 8001826:	4618      	mov	r0, r3
 8001828:	371c      	adds	r7, #28
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	40021000 	.word	0x40021000
 8001838:	00f42400 	.word	0x00f42400
 800183c:	016e3600 	.word	0x016e3600

08001840 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001844:	4b03      	ldr	r3, [pc, #12]	; (8001854 <HAL_RCC_GetHCLKFreq+0x14>)
 8001846:	681b      	ldr	r3, [r3, #0]
}
 8001848:	4618      	mov	r0, r3
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	20000000 	.word	0x20000000

08001858 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800185c:	f7ff fff0 	bl	8001840 <HAL_RCC_GetHCLKFreq>
 8001860:	4602      	mov	r2, r0
 8001862:	4b06      	ldr	r3, [pc, #24]	; (800187c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	0a1b      	lsrs	r3, r3, #8
 8001868:	f003 0307 	and.w	r3, r3, #7
 800186c:	4904      	ldr	r1, [pc, #16]	; (8001880 <HAL_RCC_GetPCLK1Freq+0x28>)
 800186e:	5ccb      	ldrb	r3, [r1, r3]
 8001870:	f003 031f 	and.w	r3, r3, #31
 8001874:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001878:	4618      	mov	r0, r3
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40021000 	.word	0x40021000
 8001880:	080056e4 	.word	0x080056e4

08001884 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	220f      	movs	r2, #15
 8001892:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001894:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <HAL_RCC_GetClockConfig+0x5c>)
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	f003 0203 	and.w	r2, r3, #3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80018a0:	4b0f      	ldr	r3, [pc, #60]	; (80018e0 <HAL_RCC_GetClockConfig+0x5c>)
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80018ac:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <HAL_RCC_GetClockConfig+0x5c>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80018b8:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <HAL_RCC_GetClockConfig+0x5c>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	08db      	lsrs	r3, r3, #3
 80018be:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80018c6:	4b07      	ldr	r3, [pc, #28]	; (80018e4 <HAL_RCC_GetClockConfig+0x60>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 020f 	and.w	r2, r3, #15
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	601a      	str	r2, [r3, #0]
}
 80018d2:	bf00      	nop
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	40021000 	.word	0x40021000
 80018e4:	40022000 	.word	0x40022000

080018e8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b087      	sub	sp, #28
 80018ec:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80018ee:	4b1e      	ldr	r3, [pc, #120]	; (8001968 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	f003 0303 	and.w	r3, r3, #3
 80018f6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80018f8:	4b1b      	ldr	r3, [pc, #108]	; (8001968 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	091b      	lsrs	r3, r3, #4
 80018fe:	f003 030f 	and.w	r3, r3, #15
 8001902:	3301      	adds	r3, #1
 8001904:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	2b03      	cmp	r3, #3
 800190a:	d10c      	bne.n	8001926 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800190c:	4a17      	ldr	r2, [pc, #92]	; (800196c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	fbb2 f3f3 	udiv	r3, r2, r3
 8001914:	4a14      	ldr	r2, [pc, #80]	; (8001968 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001916:	68d2      	ldr	r2, [r2, #12]
 8001918:	0a12      	lsrs	r2, r2, #8
 800191a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800191e:	fb02 f303 	mul.w	r3, r2, r3
 8001922:	617b      	str	r3, [r7, #20]
    break;
 8001924:	e00c      	b.n	8001940 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001926:	4a12      	ldr	r2, [pc, #72]	; (8001970 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	fbb2 f3f3 	udiv	r3, r2, r3
 800192e:	4a0e      	ldr	r2, [pc, #56]	; (8001968 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001930:	68d2      	ldr	r2, [r2, #12]
 8001932:	0a12      	lsrs	r2, r2, #8
 8001934:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001938:	fb02 f303 	mul.w	r3, r2, r3
 800193c:	617b      	str	r3, [r7, #20]
    break;
 800193e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001940:	4b09      	ldr	r3, [pc, #36]	; (8001968 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	0e5b      	lsrs	r3, r3, #25
 8001946:	f003 0303 	and.w	r3, r3, #3
 800194a:	3301      	adds	r3, #1
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001950:	697a      	ldr	r2, [r7, #20]
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	fbb2 f3f3 	udiv	r3, r2, r3
 8001958:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800195a:	687b      	ldr	r3, [r7, #4]
}
 800195c:	4618      	mov	r0, r3
 800195e:	371c      	adds	r7, #28
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	40021000 	.word	0x40021000
 800196c:	016e3600 	.word	0x016e3600
 8001970:	00f42400 	.word	0x00f42400

08001974 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d101      	bne.n	8001986 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e049      	b.n	8001a1a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800198c:	b2db      	uxtb	r3, r3
 800198e:	2b00      	cmp	r3, #0
 8001990:	d106      	bne.n	80019a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f000 f841 	bl	8001a22 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2202      	movs	r2, #2
 80019a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3304      	adds	r3, #4
 80019b0:	4619      	mov	r1, r3
 80019b2:	4610      	mov	r0, r2
 80019b4:	f000 fa60 	bl	8001e78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2201      	movs	r2, #1
 80019bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2201      	movs	r2, #1
 80019c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2201      	movs	r2, #1
 80019cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2201      	movs	r2, #1
 80019d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2201      	movs	r2, #1
 80019dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2201      	movs	r2, #1
 80019e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2201      	movs	r2, #1
 80019ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2201      	movs	r2, #1
 80019f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2201      	movs	r2, #1
 8001a04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a22:	b480      	push	{r7}
 8001a24:	b083      	sub	sp, #12
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
	...

08001a38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d001      	beq.n	8001a50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e054      	b.n	8001afa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2202      	movs	r2, #2
 8001a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	68da      	ldr	r2, [r3, #12]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f042 0201 	orr.w	r2, r2, #1
 8001a66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a26      	ldr	r2, [pc, #152]	; (8001b08 <HAL_TIM_Base_Start_IT+0xd0>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d022      	beq.n	8001ab8 <HAL_TIM_Base_Start_IT+0x80>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a7a:	d01d      	beq.n	8001ab8 <HAL_TIM_Base_Start_IT+0x80>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a22      	ldr	r2, [pc, #136]	; (8001b0c <HAL_TIM_Base_Start_IT+0xd4>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d018      	beq.n	8001ab8 <HAL_TIM_Base_Start_IT+0x80>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a21      	ldr	r2, [pc, #132]	; (8001b10 <HAL_TIM_Base_Start_IT+0xd8>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d013      	beq.n	8001ab8 <HAL_TIM_Base_Start_IT+0x80>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a1f      	ldr	r2, [pc, #124]	; (8001b14 <HAL_TIM_Base_Start_IT+0xdc>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d00e      	beq.n	8001ab8 <HAL_TIM_Base_Start_IT+0x80>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a1e      	ldr	r2, [pc, #120]	; (8001b18 <HAL_TIM_Base_Start_IT+0xe0>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d009      	beq.n	8001ab8 <HAL_TIM_Base_Start_IT+0x80>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a1c      	ldr	r2, [pc, #112]	; (8001b1c <HAL_TIM_Base_Start_IT+0xe4>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d004      	beq.n	8001ab8 <HAL_TIM_Base_Start_IT+0x80>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a1b      	ldr	r2, [pc, #108]	; (8001b20 <HAL_TIM_Base_Start_IT+0xe8>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d115      	bne.n	8001ae4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	689a      	ldr	r2, [r3, #8]
 8001abe:	4b19      	ldr	r3, [pc, #100]	; (8001b24 <HAL_TIM_Base_Start_IT+0xec>)
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2b06      	cmp	r3, #6
 8001ac8:	d015      	beq.n	8001af6 <HAL_TIM_Base_Start_IT+0xbe>
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ad0:	d011      	beq.n	8001af6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f042 0201 	orr.w	r2, r2, #1
 8001ae0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ae2:	e008      	b.n	8001af6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f042 0201 	orr.w	r2, r2, #1
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	e000      	b.n	8001af8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001af6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3714      	adds	r7, #20
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	40012c00 	.word	0x40012c00
 8001b0c:	40000400 	.word	0x40000400
 8001b10:	40000800 	.word	0x40000800
 8001b14:	40000c00 	.word	0x40000c00
 8001b18:	40013400 	.word	0x40013400
 8001b1c:	40014000 	.word	0x40014000
 8001b20:	40015000 	.word	0x40015000
 8001b24:	00010007 	.word	0x00010007

08001b28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	691b      	ldr	r3, [r3, #16]
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d122      	bne.n	8001b84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	f003 0302 	and.w	r3, r3, #2
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d11b      	bne.n	8001b84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f06f 0202 	mvn.w	r2, #2
 8001b54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	699b      	ldr	r3, [r3, #24]
 8001b62:	f003 0303 	and.w	r3, r3, #3
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d003      	beq.n	8001b72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f000 f965 	bl	8001e3a <HAL_TIM_IC_CaptureCallback>
 8001b70:	e005      	b.n	8001b7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f000 f957 	bl	8001e26 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f000 f968 	bl	8001e4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	691b      	ldr	r3, [r3, #16]
 8001b8a:	f003 0304 	and.w	r3, r3, #4
 8001b8e:	2b04      	cmp	r3, #4
 8001b90:	d122      	bne.n	8001bd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	f003 0304 	and.w	r3, r3, #4
 8001b9c:	2b04      	cmp	r3, #4
 8001b9e:	d11b      	bne.n	8001bd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f06f 0204 	mvn.w	r2, #4
 8001ba8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2202      	movs	r2, #2
 8001bae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	699b      	ldr	r3, [r3, #24]
 8001bb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d003      	beq.n	8001bc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f000 f93b 	bl	8001e3a <HAL_TIM_IC_CaptureCallback>
 8001bc4:	e005      	b.n	8001bd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f000 f92d 	bl	8001e26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f000 f93e 	bl	8001e4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	f003 0308 	and.w	r3, r3, #8
 8001be2:	2b08      	cmp	r3, #8
 8001be4:	d122      	bne.n	8001c2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	f003 0308 	and.w	r3, r3, #8
 8001bf0:	2b08      	cmp	r3, #8
 8001bf2:	d11b      	bne.n	8001c2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f06f 0208 	mvn.w	r2, #8
 8001bfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2204      	movs	r2, #4
 8001c02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	69db      	ldr	r3, [r3, #28]
 8001c0a:	f003 0303 	and.w	r3, r3, #3
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d003      	beq.n	8001c1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f000 f911 	bl	8001e3a <HAL_TIM_IC_CaptureCallback>
 8001c18:	e005      	b.n	8001c26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f000 f903 	bl	8001e26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f000 f914 	bl	8001e4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	691b      	ldr	r3, [r3, #16]
 8001c32:	f003 0310 	and.w	r3, r3, #16
 8001c36:	2b10      	cmp	r3, #16
 8001c38:	d122      	bne.n	8001c80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	f003 0310 	and.w	r3, r3, #16
 8001c44:	2b10      	cmp	r3, #16
 8001c46:	d11b      	bne.n	8001c80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f06f 0210 	mvn.w	r2, #16
 8001c50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2208      	movs	r2, #8
 8001c56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	69db      	ldr	r3, [r3, #28]
 8001c5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d003      	beq.n	8001c6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f000 f8e7 	bl	8001e3a <HAL_TIM_IC_CaptureCallback>
 8001c6c:	e005      	b.n	8001c7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 f8d9 	bl	8001e26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f000 f8ea 	bl	8001e4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	691b      	ldr	r3, [r3, #16]
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d10e      	bne.n	8001cac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	f003 0301 	and.w	r3, r3, #1
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d107      	bne.n	8001cac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f06f 0201 	mvn.w	r2, #1
 8001ca4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f7fe fc7e 	bl	80005a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cb6:	2b80      	cmp	r3, #128	; 0x80
 8001cb8:	d10e      	bne.n	8001cd8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cc4:	2b80      	cmp	r3, #128	; 0x80
 8001cc6:	d107      	bne.n	8001cd8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001cd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 f982 	bl	8001fdc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	691b      	ldr	r3, [r3, #16]
 8001cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ce6:	d10e      	bne.n	8001d06 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cf2:	2b80      	cmp	r3, #128	; 0x80
 8001cf4:	d107      	bne.n	8001d06 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001cfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f000 f975 	bl	8001ff0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	691b      	ldr	r3, [r3, #16]
 8001d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d10:	2b40      	cmp	r3, #64	; 0x40
 8001d12:	d10e      	bne.n	8001d32 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d1e:	2b40      	cmp	r3, #64	; 0x40
 8001d20:	d107      	bne.n	8001d32 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f000 f898 	bl	8001e62 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	691b      	ldr	r3, [r3, #16]
 8001d38:	f003 0320 	and.w	r3, r3, #32
 8001d3c:	2b20      	cmp	r3, #32
 8001d3e:	d10e      	bne.n	8001d5e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	f003 0320 	and.w	r3, r3, #32
 8001d4a:	2b20      	cmp	r3, #32
 8001d4c:	d107      	bne.n	8001d5e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f06f 0220 	mvn.w	r2, #32
 8001d56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f000 f935 	bl	8001fc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d6c:	d10f      	bne.n	8001d8e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d7c:	d107      	bne.n	8001d8e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8001d86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f000 f93b 	bl	8002004 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	691b      	ldr	r3, [r3, #16]
 8001d94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001d9c:	d10f      	bne.n	8001dbe <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001da8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001dac:	d107      	bne.n	8001dbe <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8001db6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f000 f92d 	bl	8002018 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dcc:	d10f      	bne.n	8001dee <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ddc:	d107      	bne.n	8001dee <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8001de6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f000 f91f 	bl	800202c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001df8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001dfc:	d10f      	bne.n	8001e1e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e08:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001e0c:	d107      	bne.n	8001e1e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8001e16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f000 f911 	bl	8002040 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e1e:	bf00      	nop
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e26:	b480      	push	{r7}
 8001e28:	b083      	sub	sp, #12
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e2e:	bf00      	nop
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	b083      	sub	sp, #12
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e42:	bf00      	nop
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr

08001e4e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	b083      	sub	sp, #12
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e56:	bf00      	nop
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e62:	b480      	push	{r7}
 8001e64:	b083      	sub	sp, #12
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e6a:	bf00      	nop
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
	...

08001e78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4a46      	ldr	r2, [pc, #280]	; (8001fa4 <TIM_Base_SetConfig+0x12c>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d017      	beq.n	8001ec0 <TIM_Base_SetConfig+0x48>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e96:	d013      	beq.n	8001ec0 <TIM_Base_SetConfig+0x48>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4a43      	ldr	r2, [pc, #268]	; (8001fa8 <TIM_Base_SetConfig+0x130>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d00f      	beq.n	8001ec0 <TIM_Base_SetConfig+0x48>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4a42      	ldr	r2, [pc, #264]	; (8001fac <TIM_Base_SetConfig+0x134>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d00b      	beq.n	8001ec0 <TIM_Base_SetConfig+0x48>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4a41      	ldr	r2, [pc, #260]	; (8001fb0 <TIM_Base_SetConfig+0x138>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d007      	beq.n	8001ec0 <TIM_Base_SetConfig+0x48>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4a40      	ldr	r2, [pc, #256]	; (8001fb4 <TIM_Base_SetConfig+0x13c>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d003      	beq.n	8001ec0 <TIM_Base_SetConfig+0x48>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a3f      	ldr	r2, [pc, #252]	; (8001fb8 <TIM_Base_SetConfig+0x140>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d108      	bne.n	8001ed2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ec6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	68fa      	ldr	r2, [r7, #12]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a33      	ldr	r2, [pc, #204]	; (8001fa4 <TIM_Base_SetConfig+0x12c>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d023      	beq.n	8001f22 <TIM_Base_SetConfig+0xaa>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ee0:	d01f      	beq.n	8001f22 <TIM_Base_SetConfig+0xaa>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a30      	ldr	r2, [pc, #192]	; (8001fa8 <TIM_Base_SetConfig+0x130>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d01b      	beq.n	8001f22 <TIM_Base_SetConfig+0xaa>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a2f      	ldr	r2, [pc, #188]	; (8001fac <TIM_Base_SetConfig+0x134>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d017      	beq.n	8001f22 <TIM_Base_SetConfig+0xaa>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a2e      	ldr	r2, [pc, #184]	; (8001fb0 <TIM_Base_SetConfig+0x138>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d013      	beq.n	8001f22 <TIM_Base_SetConfig+0xaa>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a2d      	ldr	r2, [pc, #180]	; (8001fb4 <TIM_Base_SetConfig+0x13c>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d00f      	beq.n	8001f22 <TIM_Base_SetConfig+0xaa>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a2d      	ldr	r2, [pc, #180]	; (8001fbc <TIM_Base_SetConfig+0x144>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d00b      	beq.n	8001f22 <TIM_Base_SetConfig+0xaa>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a2c      	ldr	r2, [pc, #176]	; (8001fc0 <TIM_Base_SetConfig+0x148>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d007      	beq.n	8001f22 <TIM_Base_SetConfig+0xaa>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a2b      	ldr	r2, [pc, #172]	; (8001fc4 <TIM_Base_SetConfig+0x14c>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d003      	beq.n	8001f22 <TIM_Base_SetConfig+0xaa>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a26      	ldr	r2, [pc, #152]	; (8001fb8 <TIM_Base_SetConfig+0x140>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d108      	bne.n	8001f34 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	68fa      	ldr	r2, [r7, #12]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	695b      	ldr	r3, [r3, #20]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	68fa      	ldr	r2, [r7, #12]
 8001f46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	689a      	ldr	r2, [r3, #8]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4a12      	ldr	r2, [pc, #72]	; (8001fa4 <TIM_Base_SetConfig+0x12c>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d013      	beq.n	8001f88 <TIM_Base_SetConfig+0x110>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a14      	ldr	r2, [pc, #80]	; (8001fb4 <TIM_Base_SetConfig+0x13c>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d00f      	beq.n	8001f88 <TIM_Base_SetConfig+0x110>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a14      	ldr	r2, [pc, #80]	; (8001fbc <TIM_Base_SetConfig+0x144>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d00b      	beq.n	8001f88 <TIM_Base_SetConfig+0x110>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a13      	ldr	r2, [pc, #76]	; (8001fc0 <TIM_Base_SetConfig+0x148>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d007      	beq.n	8001f88 <TIM_Base_SetConfig+0x110>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a12      	ldr	r2, [pc, #72]	; (8001fc4 <TIM_Base_SetConfig+0x14c>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d003      	beq.n	8001f88 <TIM_Base_SetConfig+0x110>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4a0d      	ldr	r2, [pc, #52]	; (8001fb8 <TIM_Base_SetConfig+0x140>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d103      	bne.n	8001f90 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	691a      	ldr	r2, [r3, #16]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	615a      	str	r2, [r3, #20]
}
 8001f96:	bf00      	nop
 8001f98:	3714      	adds	r7, #20
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	40012c00 	.word	0x40012c00
 8001fa8:	40000400 	.word	0x40000400
 8001fac:	40000800 	.word	0x40000800
 8001fb0:	40000c00 	.word	0x40000c00
 8001fb4:	40013400 	.word	0x40013400
 8001fb8:	40015000 	.word	0x40015000
 8001fbc:	40014000 	.word	0x40014000
 8001fc0:	40014400 	.word	0x40014400
 8001fc4:	40014800 	.word	0x40014800

08001fc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f103 0208 	add.w	r2, r3, #8
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f04f 32ff 	mov.w	r2, #4294967295
 800206c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f103 0208 	add.w	r2, r3, #8
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f103 0208 	add.w	r2, r3, #8
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80020a2:	bf00      	nop
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr

080020ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80020ae:	b480      	push	{r7}
 80020b0:	b085      	sub	sp, #20
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
 80020b6:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	689a      	ldr	r2, [r3, #8]
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	683a      	ldr	r2, [r7, #0]
 80020d8:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	1c5a      	adds	r2, r3, #1
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	601a      	str	r2, [r3, #0]
}
 80020ea:	bf00      	nop
 80020ec:	3714      	adds	r7, #20
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr

080020f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80020f6:	b480      	push	{r7}
 80020f8:	b085      	sub	sp, #20
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
 80020fe:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800210c:	d103      	bne.n	8002116 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	60fb      	str	r3, [r7, #12]
 8002114:	e00c      	b.n	8002130 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	3308      	adds	r3, #8
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	e002      	b.n	8002124 <vListInsert+0x2e>
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68ba      	ldr	r2, [r7, #8]
 800212c:	429a      	cmp	r2, r3
 800212e:	d2f6      	bcs.n	800211e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	685a      	ldr	r2, [r3, #4]
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	683a      	ldr	r2, [r7, #0]
 800214a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	1c5a      	adds	r2, r3, #1
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	601a      	str	r2, [r3, #0]
}
 800215c:	bf00      	nop
 800215e:	3714      	adds	r7, #20
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	691b      	ldr	r3, [r3, #16]
 8002174:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	6892      	ldr	r2, [r2, #8]
 800217e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	6852      	ldr	r2, [r2, #4]
 8002188:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	429a      	cmp	r2, r3
 8002192:	d103      	bne.n	800219c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	1e5a      	subs	r2, r3, #1
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3714      	adds	r7, #20
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80021bc:	b580      	push	{r7, lr}
 80021be:	b08c      	sub	sp, #48	; 0x30
 80021c0:	af04      	add	r7, sp, #16
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	603b      	str	r3, [r7, #0]
 80021c8:	4613      	mov	r3, r2
 80021ca:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80021cc:	88fb      	ldrh	r3, [r7, #6]
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	4618      	mov	r0, r3
 80021d2:	f000 ffeb 	bl	80031ac <pvPortMalloc>
 80021d6:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00e      	beq.n	80021fc <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80021de:	2058      	movs	r0, #88	; 0x58
 80021e0:	f000 ffe4 	bl	80031ac <pvPortMalloc>
 80021e4:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d003      	beq.n	80021f4 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	697a      	ldr	r2, [r7, #20]
 80021f0:	631a      	str	r2, [r3, #48]	; 0x30
 80021f2:	e005      	b.n	8002200 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80021f4:	6978      	ldr	r0, [r7, #20]
 80021f6:	f001 f8b9 	bl	800336c <vPortFree>
 80021fa:	e001      	b.n	8002200 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80021fc:	2300      	movs	r3, #0
 80021fe:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d013      	beq.n	800222e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002206:	88fa      	ldrh	r2, [r7, #6]
 8002208:	2300      	movs	r3, #0
 800220a:	9303      	str	r3, [sp, #12]
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	9302      	str	r3, [sp, #8]
 8002210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002212:	9301      	str	r3, [sp, #4]
 8002214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002216:	9300      	str	r3, [sp, #0]
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	68b9      	ldr	r1, [r7, #8]
 800221c:	68f8      	ldr	r0, [r7, #12]
 800221e:	f000 f80e 	bl	800223e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002222:	69f8      	ldr	r0, [r7, #28]
 8002224:	f000 f8a2 	bl	800236c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002228:	2301      	movs	r3, #1
 800222a:	61bb      	str	r3, [r7, #24]
 800222c:	e002      	b.n	8002234 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800222e:	f04f 33ff 	mov.w	r3, #4294967295
 8002232:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002234:	69bb      	ldr	r3, [r7, #24]
    }
 8002236:	4618      	mov	r0, r3
 8002238:	3720      	adds	r7, #32
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800223e:	b580      	push	{r7, lr}
 8002240:	b088      	sub	sp, #32
 8002242:	af00      	add	r7, sp, #0
 8002244:	60f8      	str	r0, [r7, #12]
 8002246:	60b9      	str	r1, [r7, #8]
 8002248:	607a      	str	r2, [r7, #4]
 800224a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800224c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800224e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	461a      	mov	r2, r3
 8002256:	21a5      	movs	r1, #165	; 0xa5
 8002258:	f003 f956 	bl	8005508 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800225c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800225e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002266:	3b01      	subs	r3, #1
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	4413      	add	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	f023 0307 	bic.w	r3, r3, #7
 8002274:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	f003 0307 	and.w	r3, r3, #7
 800227c:	2b00      	cmp	r3, #0
 800227e:	d00a      	beq.n	8002296 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002284:	f383 8811 	msr	BASEPRI, r3
 8002288:	f3bf 8f6f 	isb	sy
 800228c:	f3bf 8f4f 	dsb	sy
 8002290:	617b      	str	r3, [r7, #20]
    }
 8002292:	bf00      	nop
 8002294:	e7fe      	b.n	8002294 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d01f      	beq.n	80022dc <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800229c:	2300      	movs	r3, #0
 800229e:	61fb      	str	r3, [r7, #28]
 80022a0:	e012      	b.n	80022c8 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80022a2:	68ba      	ldr	r2, [r7, #8]
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	4413      	add	r3, r2
 80022a8:	7819      	ldrb	r1, [r3, #0]
 80022aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	4413      	add	r3, r2
 80022b0:	3334      	adds	r3, #52	; 0x34
 80022b2:	460a      	mov	r2, r1
 80022b4:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80022b6:	68ba      	ldr	r2, [r7, #8]
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	4413      	add	r3, r2
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d006      	beq.n	80022d0 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	3301      	adds	r3, #1
 80022c6:	61fb      	str	r3, [r7, #28]
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	2b09      	cmp	r3, #9
 80022cc:	d9e9      	bls.n	80022a2 <prvInitialiseNewTask+0x64>
 80022ce:	e000      	b.n	80022d2 <prvInitialiseNewTask+0x94>
            {
                break;
 80022d0:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80022d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80022da:	e003      	b.n	80022e4 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80022dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80022e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e6:	2b04      	cmp	r3, #4
 80022e8:	d901      	bls.n	80022ee <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80022ea:	2304      	movs	r3, #4
 80022ec:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80022ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022f2:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80022f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022f8:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80022fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022fc:	2200      	movs	r2, #0
 80022fe:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002302:	3304      	adds	r3, #4
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff fec5 	bl	8002094 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800230a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800230c:	3318      	adds	r3, #24
 800230e:	4618      	mov	r0, r3
 8002310:	f7ff fec0 	bl	8002094 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002316:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002318:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800231a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800231c:	f1c3 0205 	rsb	r2, r3, #5
 8002320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002322:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002326:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002328:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800232a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800232c:	3350      	adds	r3, #80	; 0x50
 800232e:	2204      	movs	r2, #4
 8002330:	2100      	movs	r1, #0
 8002332:	4618      	mov	r0, r3
 8002334:	f003 f8e8 	bl	8005508 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800233a:	3354      	adds	r3, #84	; 0x54
 800233c:	2201      	movs	r2, #1
 800233e:	2100      	movs	r1, #0
 8002340:	4618      	mov	r0, r3
 8002342:	f003 f8e1 	bl	8005508 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	68f9      	ldr	r1, [r7, #12]
 800234a:	69b8      	ldr	r0, [r7, #24]
 800234c:	f000 fc54 	bl	8002bf8 <pxPortInitialiseStack>
 8002350:	4602      	mov	r2, r0
 8002352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002354:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002358:	2b00      	cmp	r3, #0
 800235a:	d002      	beq.n	8002362 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800235c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800235e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002360:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002362:	bf00      	nop
 8002364:	3720      	adds	r7, #32
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
	...

0800236c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800236c:	b5b0      	push	{r4, r5, r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af02      	add	r7, sp, #8
 8002372:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002374:	f000 fdee 	bl	8002f54 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002378:	4b35      	ldr	r3, [pc, #212]	; (8002450 <prvAddNewTaskToReadyList+0xe4>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	3301      	adds	r3, #1
 800237e:	4a34      	ldr	r2, [pc, #208]	; (8002450 <prvAddNewTaskToReadyList+0xe4>)
 8002380:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002382:	4b34      	ldr	r3, [pc, #208]	; (8002454 <prvAddNewTaskToReadyList+0xe8>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d109      	bne.n	800239e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800238a:	4a32      	ldr	r2, [pc, #200]	; (8002454 <prvAddNewTaskToReadyList+0xe8>)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002390:	4b2f      	ldr	r3, [pc, #188]	; (8002450 <prvAddNewTaskToReadyList+0xe4>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d110      	bne.n	80023ba <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002398:	f000 fb1c 	bl	80029d4 <prvInitialiseTaskLists>
 800239c:	e00d      	b.n	80023ba <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800239e:	4b2e      	ldr	r3, [pc, #184]	; (8002458 <prvAddNewTaskToReadyList+0xec>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d109      	bne.n	80023ba <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80023a6:	4b2b      	ldr	r3, [pc, #172]	; (8002454 <prvAddNewTaskToReadyList+0xe8>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d802      	bhi.n	80023ba <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80023b4:	4a27      	ldr	r2, [pc, #156]	; (8002454 <prvAddNewTaskToReadyList+0xe8>)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80023ba:	4b28      	ldr	r3, [pc, #160]	; (800245c <prvAddNewTaskToReadyList+0xf0>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	3301      	adds	r3, #1
 80023c0:	4a26      	ldr	r2, [pc, #152]	; (800245c <prvAddNewTaskToReadyList+0xf0>)
 80023c2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80023c4:	4b25      	ldr	r3, [pc, #148]	; (800245c <prvAddNewTaskToReadyList+0xf0>)
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d016      	beq.n	8002400 <prvAddNewTaskToReadyList+0x94>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f002 fe15 	bl	8005004 <SEGGER_SYSVIEW_OnTaskCreate>
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	461d      	mov	r5, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	461c      	mov	r4, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	1ae3      	subs	r3, r4, r3
 80023f8:	9300      	str	r3, [sp, #0]
 80023fa:	462b      	mov	r3, r5
 80023fc:	f001 f984 	bl	8003708 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4618      	mov	r0, r3
 8002404:	f002 fe82 	bl	800510c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240c:	2201      	movs	r2, #1
 800240e:	409a      	lsls	r2, r3
 8002410:	4b13      	ldr	r3, [pc, #76]	; (8002460 <prvAddNewTaskToReadyList+0xf4>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4313      	orrs	r3, r2
 8002416:	4a12      	ldr	r2, [pc, #72]	; (8002460 <prvAddNewTaskToReadyList+0xf4>)
 8002418:	6013      	str	r3, [r2, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800241e:	4613      	mov	r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4413      	add	r3, r2
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	4a0f      	ldr	r2, [pc, #60]	; (8002464 <prvAddNewTaskToReadyList+0xf8>)
 8002428:	441a      	add	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	3304      	adds	r3, #4
 800242e:	4619      	mov	r1, r3
 8002430:	4610      	mov	r0, r2
 8002432:	f7ff fe3c 	bl	80020ae <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002436:	f000 fdbd 	bl	8002fb4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800243a:	4b07      	ldr	r3, [pc, #28]	; (8002458 <prvAddNewTaskToReadyList+0xec>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <prvAddNewTaskToReadyList+0xda>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002442:	4b04      	ldr	r3, [pc, #16]	; (8002454 <prvAddNewTaskToReadyList+0xe8>)
 8002444:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002446:	bf00      	nop
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bdb0      	pop	{r4, r5, r7, pc}
 800244e:	bf00      	nop
 8002450:	20000158 	.word	0x20000158
 8002454:	20000080 	.word	0x20000080
 8002458:	20000164 	.word	0x20000164
 800245c:	20000174 	.word	0x20000174
 8002460:	20000160 	.word	0x20000160
 8002464:	20000084 	.word	0x20000084

08002468 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 8002468:	b580      	push	{r7, lr}
 800246a:	b08a      	sub	sp, #40	; 0x28
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8002472:	2300      	movs	r3, #0
 8002474:	627b      	str	r3, [r7, #36]	; 0x24

        configASSERT( pxPreviousWakeTime );
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d10a      	bne.n	8002492 <xTaskDelayUntil+0x2a>
        __asm volatile
 800247c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002480:	f383 8811 	msr	BASEPRI, r3
 8002484:	f3bf 8f6f 	isb	sy
 8002488:	f3bf 8f4f 	dsb	sy
 800248c:	617b      	str	r3, [r7, #20]
    }
 800248e:	bf00      	nop
 8002490:	e7fe      	b.n	8002490 <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d10a      	bne.n	80024ae <xTaskDelayUntil+0x46>
        __asm volatile
 8002498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800249c:	f383 8811 	msr	BASEPRI, r3
 80024a0:	f3bf 8f6f 	isb	sy
 80024a4:	f3bf 8f4f 	dsb	sy
 80024a8:	613b      	str	r3, [r7, #16]
    }
 80024aa:	bf00      	nop
 80024ac:	e7fe      	b.n	80024ac <xTaskDelayUntil+0x44>
        configASSERT( uxSchedulerSuspended == 0 );
 80024ae:	4b2c      	ldr	r3, [pc, #176]	; (8002560 <xTaskDelayUntil+0xf8>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d00a      	beq.n	80024cc <xTaskDelayUntil+0x64>
        __asm volatile
 80024b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ba:	f383 8811 	msr	BASEPRI, r3
 80024be:	f3bf 8f6f 	isb	sy
 80024c2:	f3bf 8f4f 	dsb	sy
 80024c6:	60fb      	str	r3, [r7, #12]
    }
 80024c8:	bf00      	nop
 80024ca:	e7fe      	b.n	80024ca <xTaskDelayUntil+0x62>

        vTaskSuspendAll();
 80024cc:	f000 f8aa 	bl	8002624 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 80024d0:	4b24      	ldr	r3, [pc, #144]	; (8002564 <xTaskDelayUntil+0xfc>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	4413      	add	r3, r2
 80024de:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6a3a      	ldr	r2, [r7, #32]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d20b      	bcs.n	8002502 <xTaskDelayUntil+0x9a>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	69fa      	ldr	r2, [r7, #28]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d211      	bcs.n	8002518 <xTaskDelayUntil+0xb0>
 80024f4:	69fa      	ldr	r2, [r7, #28]
 80024f6:	6a3b      	ldr	r3, [r7, #32]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d90d      	bls.n	8002518 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 80024fc:	2301      	movs	r3, #1
 80024fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002500:	e00a      	b.n	8002518 <xTaskDelayUntil+0xb0>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	69fa      	ldr	r2, [r7, #28]
 8002508:	429a      	cmp	r2, r3
 800250a:	d303      	bcc.n	8002514 <xTaskDelayUntil+0xac>
 800250c:	69fa      	ldr	r2, [r7, #28]
 800250e:	6a3b      	ldr	r3, [r7, #32]
 8002510:	429a      	cmp	r2, r3
 8002512:	d901      	bls.n	8002518 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 8002514:	2301      	movs	r3, #1
 8002516:	627b      	str	r3, [r7, #36]	; 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	69fa      	ldr	r2, [r7, #28]
 800251c:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 800251e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002520:	2b00      	cmp	r3, #0
 8002522:	d009      	beq.n	8002538 <xTaskDelayUntil+0xd0>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );
 8002524:	2024      	movs	r0, #36	; 0x24
 8002526:	f002 f95b 	bl	80047e0 <SEGGER_SYSVIEW_RecordVoid>

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800252a:	69fa      	ldr	r2, [r7, #28]
 800252c:	6a3b      	ldr	r3, [r7, #32]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2100      	movs	r1, #0
 8002532:	4618      	mov	r0, r3
 8002534:	f000 fae8 	bl	8002b08 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8002538:	f000 f882 	bl	8002640 <xTaskResumeAll>
 800253c:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d107      	bne.n	8002554 <xTaskDelayUntil+0xec>
        {
            portYIELD_WITHIN_API();
 8002544:	4b08      	ldr	r3, [pc, #32]	; (8002568 <xTaskDelayUntil+0x100>)
 8002546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	f3bf 8f4f 	dsb	sy
 8002550:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 8002554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002556:	4618      	mov	r0, r3
 8002558:	3728      	adds	r7, #40	; 0x28
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	20000180 	.word	0x20000180
 8002564:	2000015c 	.word	0x2000015c
 8002568:	e000ed04 	.word	0xe000ed04

0800256c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b086      	sub	sp, #24
 8002570:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002572:	4b24      	ldr	r3, [pc, #144]	; (8002604 <vTaskStartScheduler+0x98>)
 8002574:	9301      	str	r3, [sp, #4]
 8002576:	2300      	movs	r3, #0
 8002578:	9300      	str	r3, [sp, #0]
 800257a:	2300      	movs	r3, #0
 800257c:	2282      	movs	r2, #130	; 0x82
 800257e:	4922      	ldr	r1, [pc, #136]	; (8002608 <vTaskStartScheduler+0x9c>)
 8002580:	4822      	ldr	r0, [pc, #136]	; (800260c <vTaskStartScheduler+0xa0>)
 8002582:	f7ff fe1b 	bl	80021bc <xTaskCreate>
 8002586:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d124      	bne.n	80025d8 <vTaskStartScheduler+0x6c>
        __asm volatile
 800258e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002592:	f383 8811 	msr	BASEPRI, r3
 8002596:	f3bf 8f6f 	isb	sy
 800259a:	f3bf 8f4f 	dsb	sy
 800259e:	60bb      	str	r3, [r7, #8]
    }
 80025a0:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80025a2:	4b1b      	ldr	r3, [pc, #108]	; (8002610 <vTaskStartScheduler+0xa4>)
 80025a4:	f04f 32ff 	mov.w	r2, #4294967295
 80025a8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80025aa:	4b1a      	ldr	r3, [pc, #104]	; (8002614 <vTaskStartScheduler+0xa8>)
 80025ac:	2201      	movs	r2, #1
 80025ae:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80025b0:	4b19      	ldr	r3, [pc, #100]	; (8002618 <vTaskStartScheduler+0xac>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80025b6:	4b19      	ldr	r3, [pc, #100]	; (800261c <vTaskStartScheduler+0xb0>)
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	4b12      	ldr	r3, [pc, #72]	; (8002604 <vTaskStartScheduler+0x98>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d102      	bne.n	80025c8 <vTaskStartScheduler+0x5c>
 80025c2:	f002 fd03 	bl	8004fcc <SEGGER_SYSVIEW_OnIdle>
 80025c6:	e004      	b.n	80025d2 <vTaskStartScheduler+0x66>
 80025c8:	4b14      	ldr	r3, [pc, #80]	; (800261c <vTaskStartScheduler+0xb0>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f002 fd5b 	bl	8005088 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80025d2:	f000 fb9f 	bl	8002d14 <xPortStartScheduler>
 80025d6:	e00e      	b.n	80025f6 <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025de:	d10a      	bne.n	80025f6 <vTaskStartScheduler+0x8a>
        __asm volatile
 80025e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025e4:	f383 8811 	msr	BASEPRI, r3
 80025e8:	f3bf 8f6f 	isb	sy
 80025ec:	f3bf 8f4f 	dsb	sy
 80025f0:	607b      	str	r3, [r7, #4]
    }
 80025f2:	bf00      	nop
 80025f4:	e7fe      	b.n	80025f4 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80025f6:	4b0a      	ldr	r3, [pc, #40]	; (8002620 <vTaskStartScheduler+0xb4>)
 80025f8:	681b      	ldr	r3, [r3, #0]
}
 80025fa:	bf00      	nop
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	2000017c 	.word	0x2000017c
 8002608:	08005600 	.word	0x08005600
 800260c:	080029b1 	.word	0x080029b1
 8002610:	20000178 	.word	0x20000178
 8002614:	20000164 	.word	0x20000164
 8002618:	2000015c 	.word	0x2000015c
 800261c:	20000080 	.word	0x20000080
 8002620:	2000000c 	.word	0x2000000c

08002624 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002628:	4b04      	ldr	r3, [pc, #16]	; (800263c <vTaskSuspendAll+0x18>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	3301      	adds	r3, #1
 800262e:	4a03      	ldr	r2, [pc, #12]	; (800263c <vTaskSuspendAll+0x18>)
 8002630:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002632:	bf00      	nop
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr
 800263c:	20000180 	.word	0x20000180

08002640 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002646:	2300      	movs	r3, #0
 8002648:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800264a:	2300      	movs	r3, #0
 800264c:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800264e:	4b3d      	ldr	r3, [pc, #244]	; (8002744 <xTaskResumeAll+0x104>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d10a      	bne.n	800266c <xTaskResumeAll+0x2c>
        __asm volatile
 8002656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800265a:	f383 8811 	msr	BASEPRI, r3
 800265e:	f3bf 8f6f 	isb	sy
 8002662:	f3bf 8f4f 	dsb	sy
 8002666:	603b      	str	r3, [r7, #0]
    }
 8002668:	bf00      	nop
 800266a:	e7fe      	b.n	800266a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800266c:	f000 fc72 	bl	8002f54 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002670:	4b34      	ldr	r3, [pc, #208]	; (8002744 <xTaskResumeAll+0x104>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	3b01      	subs	r3, #1
 8002676:	4a33      	ldr	r2, [pc, #204]	; (8002744 <xTaskResumeAll+0x104>)
 8002678:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800267a:	4b32      	ldr	r3, [pc, #200]	; (8002744 <xTaskResumeAll+0x104>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d159      	bne.n	8002736 <xTaskResumeAll+0xf6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002682:	4b31      	ldr	r3, [pc, #196]	; (8002748 <xTaskResumeAll+0x108>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d055      	beq.n	8002736 <xTaskResumeAll+0xf6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800268a:	e032      	b.n	80026f2 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800268c:	4b2f      	ldr	r3, [pc, #188]	; (800274c <xTaskResumeAll+0x10c>)
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	3318      	adds	r3, #24
 8002698:	4618      	mov	r0, r3
 800269a:	f7ff fd65 	bl	8002168 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	3304      	adds	r3, #4
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7ff fd60 	bl	8002168 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f002 fd2e 	bl	800510c <SEGGER_SYSVIEW_OnTaskStartReady>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b4:	2201      	movs	r2, #1
 80026b6:	409a      	lsls	r2, r3
 80026b8:	4b25      	ldr	r3, [pc, #148]	; (8002750 <xTaskResumeAll+0x110>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4313      	orrs	r3, r2
 80026be:	4a24      	ldr	r2, [pc, #144]	; (8002750 <xTaskResumeAll+0x110>)
 80026c0:	6013      	str	r3, [r2, #0]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026c6:	4613      	mov	r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	4413      	add	r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	4a21      	ldr	r2, [pc, #132]	; (8002754 <xTaskResumeAll+0x114>)
 80026d0:	441a      	add	r2, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	3304      	adds	r3, #4
 80026d6:	4619      	mov	r1, r3
 80026d8:	4610      	mov	r0, r2
 80026da:	f7ff fce8 	bl	80020ae <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026e2:	4b1d      	ldr	r3, [pc, #116]	; (8002758 <xTaskResumeAll+0x118>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d302      	bcc.n	80026f2 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80026ec:	4b1b      	ldr	r3, [pc, #108]	; (800275c <xTaskResumeAll+0x11c>)
 80026ee:	2201      	movs	r2, #1
 80026f0:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80026f2:	4b16      	ldr	r3, [pc, #88]	; (800274c <xTaskResumeAll+0x10c>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1c8      	bne.n	800268c <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002700:	f000 f9e6 	bl	8002ad0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002704:	4b16      	ldr	r3, [pc, #88]	; (8002760 <xTaskResumeAll+0x120>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d010      	beq.n	8002732 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002710:	f000 f84a 	bl	80027a8 <xTaskIncrementTick>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d002      	beq.n	8002720 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 800271a:	4b10      	ldr	r3, [pc, #64]	; (800275c <xTaskResumeAll+0x11c>)
 800271c:	2201      	movs	r2, #1
 800271e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	3b01      	subs	r3, #1
 8002724:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d1f1      	bne.n	8002710 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 800272c:	4b0c      	ldr	r3, [pc, #48]	; (8002760 <xTaskResumeAll+0x120>)
 800272e:	2200      	movs	r2, #0
 8002730:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002732:	4b0a      	ldr	r3, [pc, #40]	; (800275c <xTaskResumeAll+0x11c>)
 8002734:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002736:	f000 fc3d 	bl	8002fb4 <vPortExitCritical>

    return xAlreadyYielded;
 800273a:	687b      	ldr	r3, [r7, #4]
}
 800273c:	4618      	mov	r0, r3
 800273e:	3710      	adds	r7, #16
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	20000180 	.word	0x20000180
 8002748:	20000158 	.word	0x20000158
 800274c:	20000118 	.word	0x20000118
 8002750:	20000160 	.word	0x20000160
 8002754:	20000084 	.word	0x20000084
 8002758:	20000080 	.word	0x20000080
 800275c:	2000016c 	.word	0x2000016c
 8002760:	20000168 	.word	0x20000168

08002764 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800276a:	4b05      	ldr	r3, [pc, #20]	; (8002780 <xTaskGetTickCount+0x1c>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002770:	687b      	ldr	r3, [r7, #4]
}
 8002772:	4618      	mov	r0, r3
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	2000015c 	.word	0x2000015c

08002784 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800278a:	f000 fccf 	bl	800312c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800278e:	2300      	movs	r3, #0
 8002790:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002792:	4b04      	ldr	r3, [pc, #16]	; (80027a4 <xTaskGetTickCountFromISR+0x20>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002798:	683b      	ldr	r3, [r7, #0]
}
 800279a:	4618      	mov	r0, r3
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	2000015c 	.word	0x2000015c

080027a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80027ae:	2300      	movs	r3, #0
 80027b0:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80027b2:	4b41      	ldr	r3, [pc, #260]	; (80028b8 <xTaskIncrementTick+0x110>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d173      	bne.n	80028a2 <xTaskIncrementTick+0xfa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80027ba:	4b40      	ldr	r3, [pc, #256]	; (80028bc <xTaskIncrementTick+0x114>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	3301      	adds	r3, #1
 80027c0:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80027c2:	4a3e      	ldr	r2, [pc, #248]	; (80028bc <xTaskIncrementTick+0x114>)
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d120      	bne.n	8002810 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 80027ce:	4b3c      	ldr	r3, [pc, #240]	; (80028c0 <xTaskIncrementTick+0x118>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00a      	beq.n	80027ee <xTaskIncrementTick+0x46>
        __asm volatile
 80027d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027dc:	f383 8811 	msr	BASEPRI, r3
 80027e0:	f3bf 8f6f 	isb	sy
 80027e4:	f3bf 8f4f 	dsb	sy
 80027e8:	603b      	str	r3, [r7, #0]
    }
 80027ea:	bf00      	nop
 80027ec:	e7fe      	b.n	80027ec <xTaskIncrementTick+0x44>
 80027ee:	4b34      	ldr	r3, [pc, #208]	; (80028c0 <xTaskIncrementTick+0x118>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	60fb      	str	r3, [r7, #12]
 80027f4:	4b33      	ldr	r3, [pc, #204]	; (80028c4 <xTaskIncrementTick+0x11c>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a31      	ldr	r2, [pc, #196]	; (80028c0 <xTaskIncrementTick+0x118>)
 80027fa:	6013      	str	r3, [r2, #0]
 80027fc:	4a31      	ldr	r2, [pc, #196]	; (80028c4 <xTaskIncrementTick+0x11c>)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6013      	str	r3, [r2, #0]
 8002802:	4b31      	ldr	r3, [pc, #196]	; (80028c8 <xTaskIncrementTick+0x120>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	3301      	adds	r3, #1
 8002808:	4a2f      	ldr	r2, [pc, #188]	; (80028c8 <xTaskIncrementTick+0x120>)
 800280a:	6013      	str	r3, [r2, #0]
 800280c:	f000 f960 	bl	8002ad0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002810:	4b2e      	ldr	r3, [pc, #184]	; (80028cc <xTaskIncrementTick+0x124>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	693a      	ldr	r2, [r7, #16]
 8002816:	429a      	cmp	r2, r3
 8002818:	d348      	bcc.n	80028ac <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800281a:	4b29      	ldr	r3, [pc, #164]	; (80028c0 <xTaskIncrementTick+0x118>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d104      	bne.n	800282e <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002824:	4b29      	ldr	r3, [pc, #164]	; (80028cc <xTaskIncrementTick+0x124>)
 8002826:	f04f 32ff 	mov.w	r2, #4294967295
 800282a:	601a      	str	r2, [r3, #0]
                    break;
 800282c:	e03e      	b.n	80028ac <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800282e:	4b24      	ldr	r3, [pc, #144]	; (80028c0 <xTaskIncrementTick+0x118>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	429a      	cmp	r2, r3
 8002844:	d203      	bcs.n	800284e <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002846:	4a21      	ldr	r2, [pc, #132]	; (80028cc <xTaskIncrementTick+0x124>)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800284c:	e02e      	b.n	80028ac <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	3304      	adds	r3, #4
 8002852:	4618      	mov	r0, r3
 8002854:	f7ff fc88 	bl	8002168 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800285c:	2b00      	cmp	r3, #0
 800285e:	d004      	beq.n	800286a <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	3318      	adds	r3, #24
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff fc7f 	bl	8002168 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	4618      	mov	r0, r3
 800286e:	f002 fc4d 	bl	800510c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002876:	2201      	movs	r2, #1
 8002878:	409a      	lsls	r2, r3
 800287a:	4b15      	ldr	r3, [pc, #84]	; (80028d0 <xTaskIncrementTick+0x128>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4313      	orrs	r3, r2
 8002880:	4a13      	ldr	r2, [pc, #76]	; (80028d0 <xTaskIncrementTick+0x128>)
 8002882:	6013      	str	r3, [r2, #0]
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002888:	4613      	mov	r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	4413      	add	r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	4a10      	ldr	r2, [pc, #64]	; (80028d4 <xTaskIncrementTick+0x12c>)
 8002892:	441a      	add	r2, r3
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	3304      	adds	r3, #4
 8002898:	4619      	mov	r1, r3
 800289a:	4610      	mov	r0, r2
 800289c:	f7ff fc07 	bl	80020ae <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80028a0:	e7bb      	b.n	800281a <xTaskIncrementTick+0x72>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80028a2:	4b0d      	ldr	r3, [pc, #52]	; (80028d8 <xTaskIncrementTick+0x130>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	3301      	adds	r3, #1
 80028a8:	4a0b      	ldr	r2, [pc, #44]	; (80028d8 <xTaskIncrementTick+0x130>)
 80028aa:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80028ac:	697b      	ldr	r3, [r7, #20]
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3718      	adds	r7, #24
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	20000180 	.word	0x20000180
 80028bc:	2000015c 	.word	0x2000015c
 80028c0:	20000110 	.word	0x20000110
 80028c4:	20000114 	.word	0x20000114
 80028c8:	20000170 	.word	0x20000170
 80028cc:	20000178 	.word	0x20000178
 80028d0:	20000160 	.word	0x20000160
 80028d4:	20000084 	.word	0x20000084
 80028d8:	20000168 	.word	0x20000168

080028dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80028e2:	4b2d      	ldr	r3, [pc, #180]	; (8002998 <vTaskSwitchContext+0xbc>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d003      	beq.n	80028f2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80028ea:	4b2c      	ldr	r3, [pc, #176]	; (800299c <vTaskSwitchContext+0xc0>)
 80028ec:	2201      	movs	r2, #1
 80028ee:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80028f0:	e04d      	b.n	800298e <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 80028f2:	4b2a      	ldr	r3, [pc, #168]	; (800299c <vTaskSwitchContext+0xc0>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80028f8:	4b29      	ldr	r3, [pc, #164]	; (80029a0 <vTaskSwitchContext+0xc4>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	fab3 f383 	clz	r3, r3
 8002904:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002906:	7afb      	ldrb	r3, [r7, #11]
 8002908:	f1c3 031f 	rsb	r3, r3, #31
 800290c:	617b      	str	r3, [r7, #20]
 800290e:	4925      	ldr	r1, [pc, #148]	; (80029a4 <vTaskSwitchContext+0xc8>)
 8002910:	697a      	ldr	r2, [r7, #20]
 8002912:	4613      	mov	r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	4413      	add	r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	440b      	add	r3, r1
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d10a      	bne.n	8002938 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002926:	f383 8811 	msr	BASEPRI, r3
 800292a:	f3bf 8f6f 	isb	sy
 800292e:	f3bf 8f4f 	dsb	sy
 8002932:	607b      	str	r3, [r7, #4]
    }
 8002934:	bf00      	nop
 8002936:	e7fe      	b.n	8002936 <vTaskSwitchContext+0x5a>
 8002938:	697a      	ldr	r2, [r7, #20]
 800293a:	4613      	mov	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	4413      	add	r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	4a18      	ldr	r2, [pc, #96]	; (80029a4 <vTaskSwitchContext+0xc8>)
 8002944:	4413      	add	r3, r2
 8002946:	613b      	str	r3, [r7, #16]
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	685a      	ldr	r2, [r3, #4]
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	605a      	str	r2, [r3, #4]
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	685a      	ldr	r2, [r3, #4]
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	3308      	adds	r3, #8
 800295a:	429a      	cmp	r2, r3
 800295c:	d104      	bne.n	8002968 <vTaskSwitchContext+0x8c>
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	685a      	ldr	r2, [r3, #4]
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	605a      	str	r2, [r3, #4]
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	4a0e      	ldr	r2, [pc, #56]	; (80029a8 <vTaskSwitchContext+0xcc>)
 8002970:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002972:	4b0d      	ldr	r3, [pc, #52]	; (80029a8 <vTaskSwitchContext+0xcc>)
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	4b0d      	ldr	r3, [pc, #52]	; (80029ac <vTaskSwitchContext+0xd0>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	429a      	cmp	r2, r3
 800297c:	d102      	bne.n	8002984 <vTaskSwitchContext+0xa8>
 800297e:	f002 fb25 	bl	8004fcc <SEGGER_SYSVIEW_OnIdle>
}
 8002982:	e004      	b.n	800298e <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002984:	4b08      	ldr	r3, [pc, #32]	; (80029a8 <vTaskSwitchContext+0xcc>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4618      	mov	r0, r3
 800298a:	f002 fb7d 	bl	8005088 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800298e:	bf00      	nop
 8002990:	3718      	adds	r7, #24
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	20000180 	.word	0x20000180
 800299c:	2000016c 	.word	0x2000016c
 80029a0:	20000160 	.word	0x20000160
 80029a4:	20000084 	.word	0x20000084
 80029a8:	20000080 	.word	0x20000080
 80029ac:	2000017c 	.word	0x2000017c

080029b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80029b8:	f000 f84c 	bl	8002a54 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 80029bc:	4b04      	ldr	r3, [pc, #16]	; (80029d0 <prvIdleTask+0x20>)
 80029be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	f3bf 8f4f 	dsb	sy
 80029c8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80029cc:	e7f4      	b.n	80029b8 <prvIdleTask+0x8>
 80029ce:	bf00      	nop
 80029d0:	e000ed04 	.word	0xe000ed04

080029d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80029da:	2300      	movs	r3, #0
 80029dc:	607b      	str	r3, [r7, #4]
 80029de:	e00c      	b.n	80029fa <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	4613      	mov	r3, r2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	4413      	add	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4a12      	ldr	r2, [pc, #72]	; (8002a34 <prvInitialiseTaskLists+0x60>)
 80029ec:	4413      	add	r3, r2
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7ff fb30 	bl	8002054 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	3301      	adds	r3, #1
 80029f8:	607b      	str	r3, [r7, #4]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2b04      	cmp	r3, #4
 80029fe:	d9ef      	bls.n	80029e0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002a00:	480d      	ldr	r0, [pc, #52]	; (8002a38 <prvInitialiseTaskLists+0x64>)
 8002a02:	f7ff fb27 	bl	8002054 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002a06:	480d      	ldr	r0, [pc, #52]	; (8002a3c <prvInitialiseTaskLists+0x68>)
 8002a08:	f7ff fb24 	bl	8002054 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002a0c:	480c      	ldr	r0, [pc, #48]	; (8002a40 <prvInitialiseTaskLists+0x6c>)
 8002a0e:	f7ff fb21 	bl	8002054 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002a12:	480c      	ldr	r0, [pc, #48]	; (8002a44 <prvInitialiseTaskLists+0x70>)
 8002a14:	f7ff fb1e 	bl	8002054 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002a18:	480b      	ldr	r0, [pc, #44]	; (8002a48 <prvInitialiseTaskLists+0x74>)
 8002a1a:	f7ff fb1b 	bl	8002054 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002a1e:	4b0b      	ldr	r3, [pc, #44]	; (8002a4c <prvInitialiseTaskLists+0x78>)
 8002a20:	4a05      	ldr	r2, [pc, #20]	; (8002a38 <prvInitialiseTaskLists+0x64>)
 8002a22:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002a24:	4b0a      	ldr	r3, [pc, #40]	; (8002a50 <prvInitialiseTaskLists+0x7c>)
 8002a26:	4a05      	ldr	r2, [pc, #20]	; (8002a3c <prvInitialiseTaskLists+0x68>)
 8002a28:	601a      	str	r2, [r3, #0]
}
 8002a2a:	bf00      	nop
 8002a2c:	3708      	adds	r7, #8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	20000084 	.word	0x20000084
 8002a38:	200000e8 	.word	0x200000e8
 8002a3c:	200000fc 	.word	0x200000fc
 8002a40:	20000118 	.word	0x20000118
 8002a44:	2000012c 	.word	0x2000012c
 8002a48:	20000144 	.word	0x20000144
 8002a4c:	20000110 	.word	0x20000110
 8002a50:	20000114 	.word	0x20000114

08002a54 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002a5a:	e019      	b.n	8002a90 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002a5c:	f000 fa7a 	bl	8002f54 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a60:	4b10      	ldr	r3, [pc, #64]	; (8002aa4 <prvCheckTasksWaitingTermination+0x50>)
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	3304      	adds	r3, #4
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff fb7b 	bl	8002168 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002a72:	4b0d      	ldr	r3, [pc, #52]	; (8002aa8 <prvCheckTasksWaitingTermination+0x54>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	3b01      	subs	r3, #1
 8002a78:	4a0b      	ldr	r2, [pc, #44]	; (8002aa8 <prvCheckTasksWaitingTermination+0x54>)
 8002a7a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002a7c:	4b0b      	ldr	r3, [pc, #44]	; (8002aac <prvCheckTasksWaitingTermination+0x58>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	3b01      	subs	r3, #1
 8002a82:	4a0a      	ldr	r2, [pc, #40]	; (8002aac <prvCheckTasksWaitingTermination+0x58>)
 8002a84:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002a86:	f000 fa95 	bl	8002fb4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 f810 	bl	8002ab0 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002a90:	4b06      	ldr	r3, [pc, #24]	; (8002aac <prvCheckTasksWaitingTermination+0x58>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d1e1      	bne.n	8002a5c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002a98:	bf00      	nop
 8002a9a:	bf00      	nop
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	2000012c 	.word	0x2000012c
 8002aa8:	20000158 	.word	0x20000158
 8002aac:	20000140 	.word	0x20000140

08002ab0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abc:	4618      	mov	r0, r3
 8002abe:	f000 fc55 	bl	800336c <vPortFree>
                vPortFree( pxTCB );
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 fc52 	bl	800336c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002ac8:	bf00      	nop
 8002aca:	3708      	adds	r7, #8
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ad4:	4b0a      	ldr	r3, [pc, #40]	; (8002b00 <prvResetNextTaskUnblockTime+0x30>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d104      	bne.n	8002ae8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002ade:	4b09      	ldr	r3, [pc, #36]	; (8002b04 <prvResetNextTaskUnblockTime+0x34>)
 8002ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ae4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002ae6:	e005      	b.n	8002af4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002ae8:	4b05      	ldr	r3, [pc, #20]	; (8002b00 <prvResetNextTaskUnblockTime+0x30>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a04      	ldr	r2, [pc, #16]	; (8002b04 <prvResetNextTaskUnblockTime+0x34>)
 8002af2:	6013      	str	r3, [r2, #0]
}
 8002af4:	bf00      	nop
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	20000110 	.word	0x20000110
 8002b04:	20000178 	.word	0x20000178

08002b08 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002b12:	4b32      	ldr	r3, [pc, #200]	; (8002bdc <prvAddCurrentTaskToDelayedList+0xd4>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002b18:	4b31      	ldr	r3, [pc, #196]	; (8002be0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	3304      	adds	r3, #4
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7ff fb22 	bl	8002168 <uxListRemove>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d10b      	bne.n	8002b42 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002b2a:	4b2d      	ldr	r3, [pc, #180]	; (8002be0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b30:	2201      	movs	r2, #1
 8002b32:	fa02 f303 	lsl.w	r3, r2, r3
 8002b36:	43da      	mvns	r2, r3
 8002b38:	4b2a      	ldr	r3, [pc, #168]	; (8002be4 <prvAddCurrentTaskToDelayedList+0xdc>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	4a29      	ldr	r2, [pc, #164]	; (8002be4 <prvAddCurrentTaskToDelayedList+0xdc>)
 8002b40:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b48:	d110      	bne.n	8002b6c <prvAddCurrentTaskToDelayedList+0x64>
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00d      	beq.n	8002b6c <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8002b50:	4b23      	ldr	r3, [pc, #140]	; (8002be0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	211b      	movs	r1, #27
 8002b56:	4618      	mov	r0, r3
 8002b58:	f002 fb1a 	bl	8005190 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002b5c:	4b20      	ldr	r3, [pc, #128]	; (8002be0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	3304      	adds	r3, #4
 8002b62:	4619      	mov	r1, r3
 8002b64:	4820      	ldr	r0, [pc, #128]	; (8002be8 <prvAddCurrentTaskToDelayedList+0xe0>)
 8002b66:	f7ff faa2 	bl	80020ae <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002b6a:	e032      	b.n	8002bd2 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4413      	add	r3, r2
 8002b72:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002b74:	4b1a      	ldr	r3, [pc, #104]	; (8002be0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68ba      	ldr	r2, [r7, #8]
 8002b7a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8002b7c:	68ba      	ldr	r2, [r7, #8]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d20f      	bcs.n	8002ba4 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8002b84:	4b16      	ldr	r3, [pc, #88]	; (8002be0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2104      	movs	r1, #4
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f002 fb00 	bl	8005190 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002b90:	4b16      	ldr	r3, [pc, #88]	; (8002bec <prvAddCurrentTaskToDelayedList+0xe4>)
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	4b12      	ldr	r3, [pc, #72]	; (8002be0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	3304      	adds	r3, #4
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	4610      	mov	r0, r2
 8002b9e:	f7ff faaa 	bl	80020f6 <vListInsert>
}
 8002ba2:	e016      	b.n	8002bd2 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8002ba4:	4b0e      	ldr	r3, [pc, #56]	; (8002be0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2104      	movs	r1, #4
 8002baa:	4618      	mov	r0, r3
 8002bac:	f002 faf0 	bl	8005190 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002bb0:	4b0f      	ldr	r3, [pc, #60]	; (8002bf0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	4b0a      	ldr	r3, [pc, #40]	; (8002be0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	3304      	adds	r3, #4
 8002bba:	4619      	mov	r1, r3
 8002bbc:	4610      	mov	r0, r2
 8002bbe:	f7ff fa9a 	bl	80020f6 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8002bc2:	4b0c      	ldr	r3, [pc, #48]	; (8002bf4 <prvAddCurrentTaskToDelayedList+0xec>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68ba      	ldr	r2, [r7, #8]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d202      	bcs.n	8002bd2 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8002bcc:	4a09      	ldr	r2, [pc, #36]	; (8002bf4 <prvAddCurrentTaskToDelayedList+0xec>)
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	6013      	str	r3, [r2, #0]
}
 8002bd2:	bf00      	nop
 8002bd4:	3710      	adds	r7, #16
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	2000015c 	.word	0x2000015c
 8002be0:	20000080 	.word	0x20000080
 8002be4:	20000160 	.word	0x20000160
 8002be8:	20000144 	.word	0x20000144
 8002bec:	20000114 	.word	0x20000114
 8002bf0:	20000110 	.word	0x20000110
 8002bf4:	20000178 	.word	0x20000178

08002bf8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b085      	sub	sp, #20
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	3b04      	subs	r3, #4
 8002c08:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c10:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	3b04      	subs	r3, #4
 8002c16:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	f023 0201 	bic.w	r2, r3, #1
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	3b04      	subs	r3, #4
 8002c26:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002c28:	4a0c      	ldr	r2, [pc, #48]	; (8002c5c <pxPortInitialiseStack+0x64>)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	3b14      	subs	r3, #20
 8002c32:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	3b04      	subs	r3, #4
 8002c3e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f06f 0202 	mvn.w	r2, #2
 8002c46:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	3b20      	subs	r3, #32
 8002c4c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3714      	adds	r7, #20
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr
 8002c5c:	08002c61 	.word	0x08002c61

08002c60 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002c60:	b480      	push	{r7}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002c66:	2300      	movs	r3, #0
 8002c68:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002c6a:	4b12      	ldr	r3, [pc, #72]	; (8002cb4 <prvTaskExitError+0x54>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c72:	d00a      	beq.n	8002c8a <prvTaskExitError+0x2a>
        __asm volatile
 8002c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c78:	f383 8811 	msr	BASEPRI, r3
 8002c7c:	f3bf 8f6f 	isb	sy
 8002c80:	f3bf 8f4f 	dsb	sy
 8002c84:	60fb      	str	r3, [r7, #12]
    }
 8002c86:	bf00      	nop
 8002c88:	e7fe      	b.n	8002c88 <prvTaskExitError+0x28>
        __asm volatile
 8002c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c8e:	f383 8811 	msr	BASEPRI, r3
 8002c92:	f3bf 8f6f 	isb	sy
 8002c96:	f3bf 8f4f 	dsb	sy
 8002c9a:	60bb      	str	r3, [r7, #8]
    }
 8002c9c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002c9e:	bf00      	nop
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d0fc      	beq.n	8002ca0 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002ca6:	bf00      	nop
 8002ca8:	bf00      	nop
 8002caa:	3714      	adds	r7, #20
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr
 8002cb4:	20000010 	.word	0x20000010
	...

08002cc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002cc0:	4b07      	ldr	r3, [pc, #28]	; (8002ce0 <pxCurrentTCBConst2>)
 8002cc2:	6819      	ldr	r1, [r3, #0]
 8002cc4:	6808      	ldr	r0, [r1, #0]
 8002cc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cca:	f380 8809 	msr	PSP, r0
 8002cce:	f3bf 8f6f 	isb	sy
 8002cd2:	f04f 0000 	mov.w	r0, #0
 8002cd6:	f380 8811 	msr	BASEPRI, r0
 8002cda:	4770      	bx	lr
 8002cdc:	f3af 8000 	nop.w

08002ce0 <pxCurrentTCBConst2>:
 8002ce0:	20000080 	.word	0x20000080
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002ce4:	bf00      	nop
 8002ce6:	bf00      	nop

08002ce8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002ce8:	4808      	ldr	r0, [pc, #32]	; (8002d0c <prvPortStartFirstTask+0x24>)
 8002cea:	6800      	ldr	r0, [r0, #0]
 8002cec:	6800      	ldr	r0, [r0, #0]
 8002cee:	f380 8808 	msr	MSP, r0
 8002cf2:	f04f 0000 	mov.w	r0, #0
 8002cf6:	f380 8814 	msr	CONTROL, r0
 8002cfa:	b662      	cpsie	i
 8002cfc:	b661      	cpsie	f
 8002cfe:	f3bf 8f4f 	dsb	sy
 8002d02:	f3bf 8f6f 	isb	sy
 8002d06:	df00      	svc	0
 8002d08:	bf00      	nop
 8002d0a:	0000      	.short	0x0000
 8002d0c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002d10:	bf00      	nop
 8002d12:	bf00      	nop

08002d14 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002d1a:	4b46      	ldr	r3, [pc, #280]	; (8002e34 <xPortStartScheduler+0x120>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a46      	ldr	r2, [pc, #280]	; (8002e38 <xPortStartScheduler+0x124>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d10a      	bne.n	8002d3a <xPortStartScheduler+0x26>
        __asm volatile
 8002d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d28:	f383 8811 	msr	BASEPRI, r3
 8002d2c:	f3bf 8f6f 	isb	sy
 8002d30:	f3bf 8f4f 	dsb	sy
 8002d34:	613b      	str	r3, [r7, #16]
    }
 8002d36:	bf00      	nop
 8002d38:	e7fe      	b.n	8002d38 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002d3a:	4b3e      	ldr	r3, [pc, #248]	; (8002e34 <xPortStartScheduler+0x120>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a3f      	ldr	r2, [pc, #252]	; (8002e3c <xPortStartScheduler+0x128>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d10a      	bne.n	8002d5a <xPortStartScheduler+0x46>
        __asm volatile
 8002d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d48:	f383 8811 	msr	BASEPRI, r3
 8002d4c:	f3bf 8f6f 	isb	sy
 8002d50:	f3bf 8f4f 	dsb	sy
 8002d54:	60fb      	str	r3, [r7, #12]
    }
 8002d56:	bf00      	nop
 8002d58:	e7fe      	b.n	8002d58 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002d5a:	4b39      	ldr	r3, [pc, #228]	; (8002e40 <xPortStartScheduler+0x12c>)
 8002d5c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	22ff      	movs	r2, #255	; 0xff
 8002d6a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002d74:	78fb      	ldrb	r3, [r7, #3]
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002d7c:	b2da      	uxtb	r2, r3
 8002d7e:	4b31      	ldr	r3, [pc, #196]	; (8002e44 <xPortStartScheduler+0x130>)
 8002d80:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002d82:	4b31      	ldr	r3, [pc, #196]	; (8002e48 <xPortStartScheduler+0x134>)
 8002d84:	2207      	movs	r2, #7
 8002d86:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002d88:	e009      	b.n	8002d9e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002d8a:	4b2f      	ldr	r3, [pc, #188]	; (8002e48 <xPortStartScheduler+0x134>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	4a2d      	ldr	r2, [pc, #180]	; (8002e48 <xPortStartScheduler+0x134>)
 8002d92:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002d94:	78fb      	ldrb	r3, [r7, #3]
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002d9e:	78fb      	ldrb	r3, [r7, #3]
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002da6:	2b80      	cmp	r3, #128	; 0x80
 8002da8:	d0ef      	beq.n	8002d8a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002daa:	4b27      	ldr	r3, [pc, #156]	; (8002e48 <xPortStartScheduler+0x134>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f1c3 0307 	rsb	r3, r3, #7
 8002db2:	2b04      	cmp	r3, #4
 8002db4:	d00a      	beq.n	8002dcc <xPortStartScheduler+0xb8>
        __asm volatile
 8002db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dba:	f383 8811 	msr	BASEPRI, r3
 8002dbe:	f3bf 8f6f 	isb	sy
 8002dc2:	f3bf 8f4f 	dsb	sy
 8002dc6:	60bb      	str	r3, [r7, #8]
    }
 8002dc8:	bf00      	nop
 8002dca:	e7fe      	b.n	8002dca <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002dcc:	4b1e      	ldr	r3, [pc, #120]	; (8002e48 <xPortStartScheduler+0x134>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	021b      	lsls	r3, r3, #8
 8002dd2:	4a1d      	ldr	r2, [pc, #116]	; (8002e48 <xPortStartScheduler+0x134>)
 8002dd4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002dd6:	4b1c      	ldr	r3, [pc, #112]	; (8002e48 <xPortStartScheduler+0x134>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002dde:	4a1a      	ldr	r2, [pc, #104]	; (8002e48 <xPortStartScheduler+0x134>)
 8002de0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	b2da      	uxtb	r2, r3
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002dea:	4b18      	ldr	r3, [pc, #96]	; (8002e4c <xPortStartScheduler+0x138>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a17      	ldr	r2, [pc, #92]	; (8002e4c <xPortStartScheduler+0x138>)
 8002df0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002df4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002df6:	4b15      	ldr	r3, [pc, #84]	; (8002e4c <xPortStartScheduler+0x138>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a14      	ldr	r2, [pc, #80]	; (8002e4c <xPortStartScheduler+0x138>)
 8002dfc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002e00:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002e02:	f000 f963 	bl	80030cc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002e06:	4b12      	ldr	r3, [pc, #72]	; (8002e50 <xPortStartScheduler+0x13c>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002e0c:	f000 f982 	bl	8003114 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002e10:	4b10      	ldr	r3, [pc, #64]	; (8002e54 <xPortStartScheduler+0x140>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a0f      	ldr	r2, [pc, #60]	; (8002e54 <xPortStartScheduler+0x140>)
 8002e16:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002e1a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002e1c:	f7ff ff64 	bl	8002ce8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002e20:	f7ff fd5c 	bl	80028dc <vTaskSwitchContext>
    prvTaskExitError();
 8002e24:	f7ff ff1c 	bl	8002c60 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3718      	adds	r7, #24
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	e000ed00 	.word	0xe000ed00
 8002e38:	410fc271 	.word	0x410fc271
 8002e3c:	410fc270 	.word	0x410fc270
 8002e40:	e000e400 	.word	0xe000e400
 8002e44:	20000184 	.word	0x20000184
 8002e48:	20000188 	.word	0x20000188
 8002e4c:	e000ed20 	.word	0xe000ed20
 8002e50:	20000010 	.word	0x20000010
 8002e54:	e000ef34 	.word	0xe000ef34

08002e58 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b087      	sub	sp, #28
 8002e5c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002e5e:	4b37      	ldr	r3, [pc, #220]	; (8002f3c <vInitPrioGroupValue+0xe4>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a37      	ldr	r2, [pc, #220]	; (8002f40 <vInitPrioGroupValue+0xe8>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d10a      	bne.n	8002e7e <vInitPrioGroupValue+0x26>
        __asm volatile
 8002e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e6c:	f383 8811 	msr	BASEPRI, r3
 8002e70:	f3bf 8f6f 	isb	sy
 8002e74:	f3bf 8f4f 	dsb	sy
 8002e78:	613b      	str	r3, [r7, #16]
    }
 8002e7a:	bf00      	nop
 8002e7c:	e7fe      	b.n	8002e7c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002e7e:	4b2f      	ldr	r3, [pc, #188]	; (8002f3c <vInitPrioGroupValue+0xe4>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a30      	ldr	r2, [pc, #192]	; (8002f44 <vInitPrioGroupValue+0xec>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d10a      	bne.n	8002e9e <vInitPrioGroupValue+0x46>
        __asm volatile
 8002e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e8c:	f383 8811 	msr	BASEPRI, r3
 8002e90:	f3bf 8f6f 	isb	sy
 8002e94:	f3bf 8f4f 	dsb	sy
 8002e98:	60fb      	str	r3, [r7, #12]
    }
 8002e9a:	bf00      	nop
 8002e9c:	e7fe      	b.n	8002e9c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002e9e:	4b2a      	ldr	r3, [pc, #168]	; (8002f48 <vInitPrioGroupValue+0xf0>)
 8002ea0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	22ff      	movs	r2, #255	; 0xff
 8002eae:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002eb8:	78fb      	ldrb	r3, [r7, #3]
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002ec0:	b2da      	uxtb	r2, r3
 8002ec2:	4b22      	ldr	r3, [pc, #136]	; (8002f4c <vInitPrioGroupValue+0xf4>)
 8002ec4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002ec6:	4b22      	ldr	r3, [pc, #136]	; (8002f50 <vInitPrioGroupValue+0xf8>)
 8002ec8:	2207      	movs	r2, #7
 8002eca:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002ecc:	e009      	b.n	8002ee2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002ece:	4b20      	ldr	r3, [pc, #128]	; (8002f50 <vInitPrioGroupValue+0xf8>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	4a1e      	ldr	r2, [pc, #120]	; (8002f50 <vInitPrioGroupValue+0xf8>)
 8002ed6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002ed8:	78fb      	ldrb	r3, [r7, #3]
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002ee2:	78fb      	ldrb	r3, [r7, #3]
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eea:	2b80      	cmp	r3, #128	; 0x80
 8002eec:	d0ef      	beq.n	8002ece <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002eee:	4b18      	ldr	r3, [pc, #96]	; (8002f50 <vInitPrioGroupValue+0xf8>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f1c3 0307 	rsb	r3, r3, #7
 8002ef6:	2b04      	cmp	r3, #4
 8002ef8:	d00a      	beq.n	8002f10 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8002efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002efe:	f383 8811 	msr	BASEPRI, r3
 8002f02:	f3bf 8f6f 	isb	sy
 8002f06:	f3bf 8f4f 	dsb	sy
 8002f0a:	60bb      	str	r3, [r7, #8]
    }
 8002f0c:	bf00      	nop
 8002f0e:	e7fe      	b.n	8002f0e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002f10:	4b0f      	ldr	r3, [pc, #60]	; (8002f50 <vInitPrioGroupValue+0xf8>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	021b      	lsls	r3, r3, #8
 8002f16:	4a0e      	ldr	r2, [pc, #56]	; (8002f50 <vInitPrioGroupValue+0xf8>)
 8002f18:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002f1a:	4b0d      	ldr	r3, [pc, #52]	; (8002f50 <vInitPrioGroupValue+0xf8>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f22:	4a0b      	ldr	r2, [pc, #44]	; (8002f50 <vInitPrioGroupValue+0xf8>)
 8002f24:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	b2da      	uxtb	r2, r3
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8002f2e:	bf00      	nop
 8002f30:	371c      	adds	r7, #28
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	e000ed00 	.word	0xe000ed00
 8002f40:	410fc271 	.word	0x410fc271
 8002f44:	410fc270 	.word	0x410fc270
 8002f48:	e000e400 	.word	0xe000e400
 8002f4c:	20000184 	.word	0x20000184
 8002f50:	20000188 	.word	0x20000188

08002f54 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
        __asm volatile
 8002f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f5e:	f383 8811 	msr	BASEPRI, r3
 8002f62:	f3bf 8f6f 	isb	sy
 8002f66:	f3bf 8f4f 	dsb	sy
 8002f6a:	607b      	str	r3, [r7, #4]
    }
 8002f6c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002f6e:	4b0f      	ldr	r3, [pc, #60]	; (8002fac <vPortEnterCritical+0x58>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	3301      	adds	r3, #1
 8002f74:	4a0d      	ldr	r2, [pc, #52]	; (8002fac <vPortEnterCritical+0x58>)
 8002f76:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002f78:	4b0c      	ldr	r3, [pc, #48]	; (8002fac <vPortEnterCritical+0x58>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d10f      	bne.n	8002fa0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002f80:	4b0b      	ldr	r3, [pc, #44]	; (8002fb0 <vPortEnterCritical+0x5c>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d00a      	beq.n	8002fa0 <vPortEnterCritical+0x4c>
        __asm volatile
 8002f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f8e:	f383 8811 	msr	BASEPRI, r3
 8002f92:	f3bf 8f6f 	isb	sy
 8002f96:	f3bf 8f4f 	dsb	sy
 8002f9a:	603b      	str	r3, [r7, #0]
    }
 8002f9c:	bf00      	nop
 8002f9e:	e7fe      	b.n	8002f9e <vPortEnterCritical+0x4a>
    }
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr
 8002fac:	20000010 	.word	0x20000010
 8002fb0:	e000ed04 	.word	0xe000ed04

08002fb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002fba:	4b12      	ldr	r3, [pc, #72]	; (8003004 <vPortExitCritical+0x50>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10a      	bne.n	8002fd8 <vPortExitCritical+0x24>
        __asm volatile
 8002fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc6:	f383 8811 	msr	BASEPRI, r3
 8002fca:	f3bf 8f6f 	isb	sy
 8002fce:	f3bf 8f4f 	dsb	sy
 8002fd2:	607b      	str	r3, [r7, #4]
    }
 8002fd4:	bf00      	nop
 8002fd6:	e7fe      	b.n	8002fd6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002fd8:	4b0a      	ldr	r3, [pc, #40]	; (8003004 <vPortExitCritical+0x50>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	4a09      	ldr	r2, [pc, #36]	; (8003004 <vPortExitCritical+0x50>)
 8002fe0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002fe2:	4b08      	ldr	r3, [pc, #32]	; (8003004 <vPortExitCritical+0x50>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d105      	bne.n	8002ff6 <vPortExitCritical+0x42>
 8002fea:	2300      	movs	r3, #0
 8002fec:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002ff4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002ff6:	bf00      	nop
 8002ff8:	370c      	adds	r7, #12
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	20000010 	.word	0x20000010
	...

08003010 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003010:	f3ef 8009 	mrs	r0, PSP
 8003014:	f3bf 8f6f 	isb	sy
 8003018:	4b15      	ldr	r3, [pc, #84]	; (8003070 <pxCurrentTCBConst>)
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	f01e 0f10 	tst.w	lr, #16
 8003020:	bf08      	it	eq
 8003022:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003026:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800302a:	6010      	str	r0, [r2, #0]
 800302c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003030:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003034:	f380 8811 	msr	BASEPRI, r0
 8003038:	f3bf 8f4f 	dsb	sy
 800303c:	f3bf 8f6f 	isb	sy
 8003040:	f7ff fc4c 	bl	80028dc <vTaskSwitchContext>
 8003044:	f04f 0000 	mov.w	r0, #0
 8003048:	f380 8811 	msr	BASEPRI, r0
 800304c:	bc09      	pop	{r0, r3}
 800304e:	6819      	ldr	r1, [r3, #0]
 8003050:	6808      	ldr	r0, [r1, #0]
 8003052:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003056:	f01e 0f10 	tst.w	lr, #16
 800305a:	bf08      	it	eq
 800305c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003060:	f380 8809 	msr	PSP, r0
 8003064:	f3bf 8f6f 	isb	sy
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	f3af 8000 	nop.w

08003070 <pxCurrentTCBConst>:
 8003070:	20000080 	.word	0x20000080
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003074:	bf00      	nop
 8003076:	bf00      	nop

08003078 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
        __asm volatile
 800307e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003082:	f383 8811 	msr	BASEPRI, r3
 8003086:	f3bf 8f6f 	isb	sy
 800308a:	f3bf 8f4f 	dsb	sy
 800308e:	607b      	str	r3, [r7, #4]
    }
 8003090:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003092:	f001 ff21 	bl	8004ed8 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003096:	f7ff fb87 	bl	80027a8 <xTaskIncrementTick>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d006      	beq.n	80030ae <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80030a0:	f001 ff78 	bl	8004f94 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80030a4:	4b08      	ldr	r3, [pc, #32]	; (80030c8 <SysTick_Handler+0x50>)
 80030a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030aa:	601a      	str	r2, [r3, #0]
 80030ac:	e001      	b.n	80030b2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80030ae:	f001 ff55 	bl	8004f5c <SEGGER_SYSVIEW_RecordExitISR>
 80030b2:	2300      	movs	r3, #0
 80030b4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	f383 8811 	msr	BASEPRI, r3
    }
 80030bc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80030be:	bf00      	nop
 80030c0:	3708      	adds	r7, #8
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	e000ed04 	.word	0xe000ed04

080030cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80030d0:	4b0b      	ldr	r3, [pc, #44]	; (8003100 <vPortSetupTimerInterrupt+0x34>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80030d6:	4b0b      	ldr	r3, [pc, #44]	; (8003104 <vPortSetupTimerInterrupt+0x38>)
 80030d8:	2200      	movs	r2, #0
 80030da:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80030dc:	4b0a      	ldr	r3, [pc, #40]	; (8003108 <vPortSetupTimerInterrupt+0x3c>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a0a      	ldr	r2, [pc, #40]	; (800310c <vPortSetupTimerInterrupt+0x40>)
 80030e2:	fba2 2303 	umull	r2, r3, r2, r3
 80030e6:	099b      	lsrs	r3, r3, #6
 80030e8:	4a09      	ldr	r2, [pc, #36]	; (8003110 <vPortSetupTimerInterrupt+0x44>)
 80030ea:	3b01      	subs	r3, #1
 80030ec:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80030ee:	4b04      	ldr	r3, [pc, #16]	; (8003100 <vPortSetupTimerInterrupt+0x34>)
 80030f0:	2207      	movs	r2, #7
 80030f2:	601a      	str	r2, [r3, #0]
}
 80030f4:	bf00      	nop
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	e000e010 	.word	0xe000e010
 8003104:	e000e018 	.word	0xe000e018
 8003108:	20000000 	.word	0x20000000
 800310c:	10624dd3 	.word	0x10624dd3
 8003110:	e000e014 	.word	0xe000e014

08003114 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003114:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003124 <vPortEnableVFP+0x10>
 8003118:	6801      	ldr	r1, [r0, #0]
 800311a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800311e:	6001      	str	r1, [r0, #0]
 8003120:	4770      	bx	lr
 8003122:	0000      	.short	0x0000
 8003124:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003128:	bf00      	nop
 800312a:	bf00      	nop

0800312c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800312c:	b480      	push	{r7}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003132:	f3ef 8305 	mrs	r3, IPSR
 8003136:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2b0f      	cmp	r3, #15
 800313c:	d914      	bls.n	8003168 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800313e:	4a17      	ldr	r2, [pc, #92]	; (800319c <vPortValidateInterruptPriority+0x70>)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	4413      	add	r3, r2
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003148:	4b15      	ldr	r3, [pc, #84]	; (80031a0 <vPortValidateInterruptPriority+0x74>)
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	7afa      	ldrb	r2, [r7, #11]
 800314e:	429a      	cmp	r2, r3
 8003150:	d20a      	bcs.n	8003168 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003156:	f383 8811 	msr	BASEPRI, r3
 800315a:	f3bf 8f6f 	isb	sy
 800315e:	f3bf 8f4f 	dsb	sy
 8003162:	607b      	str	r3, [r7, #4]
    }
 8003164:	bf00      	nop
 8003166:	e7fe      	b.n	8003166 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003168:	4b0e      	ldr	r3, [pc, #56]	; (80031a4 <vPortValidateInterruptPriority+0x78>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003170:	4b0d      	ldr	r3, [pc, #52]	; (80031a8 <vPortValidateInterruptPriority+0x7c>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	429a      	cmp	r2, r3
 8003176:	d90a      	bls.n	800318e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8003178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800317c:	f383 8811 	msr	BASEPRI, r3
 8003180:	f3bf 8f6f 	isb	sy
 8003184:	f3bf 8f4f 	dsb	sy
 8003188:	603b      	str	r3, [r7, #0]
    }
 800318a:	bf00      	nop
 800318c:	e7fe      	b.n	800318c <vPortValidateInterruptPriority+0x60>
    }
 800318e:	bf00      	nop
 8003190:	3714      	adds	r7, #20
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	e000e3f0 	.word	0xe000e3f0
 80031a0:	20000184 	.word	0x20000184
 80031a4:	e000ed0c 	.word	0xe000ed0c
 80031a8:	20000188 	.word	0x20000188

080031ac <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b08a      	sub	sp, #40	; 0x28
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80031b4:	2300      	movs	r3, #0
 80031b6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80031b8:	f7ff fa34 	bl	8002624 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80031bc:	4b65      	ldr	r3, [pc, #404]	; (8003354 <pvPortMalloc+0x1a8>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d101      	bne.n	80031c8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80031c4:	f000 f934 	bl	8003430 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80031c8:	4b63      	ldr	r3, [pc, #396]	; (8003358 <pvPortMalloc+0x1ac>)
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4013      	ands	r3, r2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	f040 80a7 	bne.w	8003324 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d02d      	beq.n	8003238 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80031dc:	2208      	movs	r2, #8
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d227      	bcs.n	8003238 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80031e8:	2208      	movs	r2, #8
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4413      	add	r3, r2
 80031ee:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f003 0307 	and.w	r3, r3, #7
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d021      	beq.n	800323e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f023 0307 	bic.w	r3, r3, #7
 8003200:	3308      	adds	r3, #8
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	429a      	cmp	r2, r3
 8003206:	d214      	bcs.n	8003232 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f023 0307 	bic.w	r3, r3, #7
 800320e:	3308      	adds	r3, #8
 8003210:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f003 0307 	and.w	r3, r3, #7
 8003218:	2b00      	cmp	r3, #0
 800321a:	d010      	beq.n	800323e <pvPortMalloc+0x92>
        __asm volatile
 800321c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003220:	f383 8811 	msr	BASEPRI, r3
 8003224:	f3bf 8f6f 	isb	sy
 8003228:	f3bf 8f4f 	dsb	sy
 800322c:	617b      	str	r3, [r7, #20]
    }
 800322e:	bf00      	nop
 8003230:	e7fe      	b.n	8003230 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003232:	2300      	movs	r3, #0
 8003234:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003236:	e002      	b.n	800323e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8003238:	2300      	movs	r3, #0
 800323a:	607b      	str	r3, [r7, #4]
 800323c:	e000      	b.n	8003240 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800323e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d06e      	beq.n	8003324 <pvPortMalloc+0x178>
 8003246:	4b45      	ldr	r3, [pc, #276]	; (800335c <pvPortMalloc+0x1b0>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	429a      	cmp	r2, r3
 800324e:	d869      	bhi.n	8003324 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003250:	4b43      	ldr	r3, [pc, #268]	; (8003360 <pvPortMalloc+0x1b4>)
 8003252:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003254:	4b42      	ldr	r3, [pc, #264]	; (8003360 <pvPortMalloc+0x1b4>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800325a:	e004      	b.n	8003266 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800325c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	429a      	cmp	r2, r3
 800326e:	d903      	bls.n	8003278 <pvPortMalloc+0xcc>
 8003270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d1f1      	bne.n	800325c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003278:	4b36      	ldr	r3, [pc, #216]	; (8003354 <pvPortMalloc+0x1a8>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800327e:	429a      	cmp	r2, r3
 8003280:	d050      	beq.n	8003324 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003282:	6a3b      	ldr	r3, [r7, #32]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2208      	movs	r2, #8
 8003288:	4413      	add	r3, r2
 800328a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800328c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	6a3b      	ldr	r3, [r7, #32]
 8003292:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003296:	685a      	ldr	r2, [r3, #4]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	1ad2      	subs	r2, r2, r3
 800329c:	2308      	movs	r3, #8
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d91f      	bls.n	80032e4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80032a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4413      	add	r3, r2
 80032aa:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	f003 0307 	and.w	r3, r3, #7
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00a      	beq.n	80032cc <pvPortMalloc+0x120>
        __asm volatile
 80032b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ba:	f383 8811 	msr	BASEPRI, r3
 80032be:	f3bf 8f6f 	isb	sy
 80032c2:	f3bf 8f4f 	dsb	sy
 80032c6:	613b      	str	r3, [r7, #16]
    }
 80032c8:	bf00      	nop
 80032ca:	e7fe      	b.n	80032ca <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80032cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ce:	685a      	ldr	r2, [r3, #4]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	1ad2      	subs	r2, r2, r3
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80032d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80032de:	69b8      	ldr	r0, [r7, #24]
 80032e0:	f000 f908 	bl	80034f4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80032e4:	4b1d      	ldr	r3, [pc, #116]	; (800335c <pvPortMalloc+0x1b0>)
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	4a1b      	ldr	r2, [pc, #108]	; (800335c <pvPortMalloc+0x1b0>)
 80032f0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80032f2:	4b1a      	ldr	r3, [pc, #104]	; (800335c <pvPortMalloc+0x1b0>)
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	4b1b      	ldr	r3, [pc, #108]	; (8003364 <pvPortMalloc+0x1b8>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d203      	bcs.n	8003306 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80032fe:	4b17      	ldr	r3, [pc, #92]	; (800335c <pvPortMalloc+0x1b0>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a18      	ldr	r2, [pc, #96]	; (8003364 <pvPortMalloc+0x1b8>)
 8003304:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003308:	685a      	ldr	r2, [r3, #4]
 800330a:	4b13      	ldr	r3, [pc, #76]	; (8003358 <pvPortMalloc+0x1ac>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	431a      	orrs	r2, r3
 8003310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003312:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003316:	2200      	movs	r2, #0
 8003318:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800331a:	4b13      	ldr	r3, [pc, #76]	; (8003368 <pvPortMalloc+0x1bc>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	3301      	adds	r3, #1
 8003320:	4a11      	ldr	r2, [pc, #68]	; (8003368 <pvPortMalloc+0x1bc>)
 8003322:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003324:	f7ff f98c 	bl	8002640 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	f003 0307 	and.w	r3, r3, #7
 800332e:	2b00      	cmp	r3, #0
 8003330:	d00a      	beq.n	8003348 <pvPortMalloc+0x19c>
        __asm volatile
 8003332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003336:	f383 8811 	msr	BASEPRI, r3
 800333a:	f3bf 8f6f 	isb	sy
 800333e:	f3bf 8f4f 	dsb	sy
 8003342:	60fb      	str	r3, [r7, #12]
    }
 8003344:	bf00      	nop
 8003346:	e7fe      	b.n	8003346 <pvPortMalloc+0x19a>
    return pvReturn;
 8003348:	69fb      	ldr	r3, [r7, #28]
}
 800334a:	4618      	mov	r0, r3
 800334c:	3728      	adds	r7, #40	; 0x28
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	20012d94 	.word	0x20012d94
 8003358:	20012da8 	.word	0x20012da8
 800335c:	20012d98 	.word	0x20012d98
 8003360:	20012d8c 	.word	0x20012d8c
 8003364:	20012d9c 	.word	0x20012d9c
 8003368:	20012da0 	.word	0x20012da0

0800336c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b086      	sub	sp, #24
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d04d      	beq.n	800341a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800337e:	2308      	movs	r3, #8
 8003380:	425b      	negs	r3, r3
 8003382:	697a      	ldr	r2, [r7, #20]
 8003384:	4413      	add	r3, r2
 8003386:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	685a      	ldr	r2, [r3, #4]
 8003390:	4b24      	ldr	r3, [pc, #144]	; (8003424 <vPortFree+0xb8>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4013      	ands	r3, r2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d10a      	bne.n	80033b0 <vPortFree+0x44>
        __asm volatile
 800339a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800339e:	f383 8811 	msr	BASEPRI, r3
 80033a2:	f3bf 8f6f 	isb	sy
 80033a6:	f3bf 8f4f 	dsb	sy
 80033aa:	60fb      	str	r3, [r7, #12]
    }
 80033ac:	bf00      	nop
 80033ae:	e7fe      	b.n	80033ae <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00a      	beq.n	80033ce <vPortFree+0x62>
        __asm volatile
 80033b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033bc:	f383 8811 	msr	BASEPRI, r3
 80033c0:	f3bf 8f6f 	isb	sy
 80033c4:	f3bf 8f4f 	dsb	sy
 80033c8:	60bb      	str	r3, [r7, #8]
    }
 80033ca:	bf00      	nop
 80033cc:	e7fe      	b.n	80033cc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	685a      	ldr	r2, [r3, #4]
 80033d2:	4b14      	ldr	r3, [pc, #80]	; (8003424 <vPortFree+0xb8>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4013      	ands	r3, r2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d01e      	beq.n	800341a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d11a      	bne.n	800341a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	685a      	ldr	r2, [r3, #4]
 80033e8:	4b0e      	ldr	r3, [pc, #56]	; (8003424 <vPortFree+0xb8>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	43db      	mvns	r3, r3
 80033ee:	401a      	ands	r2, r3
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80033f4:	f7ff f916 	bl	8002624 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	685a      	ldr	r2, [r3, #4]
 80033fc:	4b0a      	ldr	r3, [pc, #40]	; (8003428 <vPortFree+0xbc>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4413      	add	r3, r2
 8003402:	4a09      	ldr	r2, [pc, #36]	; (8003428 <vPortFree+0xbc>)
 8003404:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003406:	6938      	ldr	r0, [r7, #16]
 8003408:	f000 f874 	bl	80034f4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800340c:	4b07      	ldr	r3, [pc, #28]	; (800342c <vPortFree+0xc0>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	3301      	adds	r3, #1
 8003412:	4a06      	ldr	r2, [pc, #24]	; (800342c <vPortFree+0xc0>)
 8003414:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003416:	f7ff f913 	bl	8002640 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800341a:	bf00      	nop
 800341c:	3718      	adds	r7, #24
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	20012da8 	.word	0x20012da8
 8003428:	20012d98 	.word	0x20012d98
 800342c:	20012da4 	.word	0x20012da4

08003430 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003430:	b480      	push	{r7}
 8003432:	b085      	sub	sp, #20
 8003434:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003436:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800343a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800343c:	4b27      	ldr	r3, [pc, #156]	; (80034dc <prvHeapInit+0xac>)
 800343e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f003 0307 	and.w	r3, r3, #7
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00c      	beq.n	8003464 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	3307      	adds	r3, #7
 800344e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f023 0307 	bic.w	r3, r3, #7
 8003456:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003458:	68ba      	ldr	r2, [r7, #8]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	4a1f      	ldr	r2, [pc, #124]	; (80034dc <prvHeapInit+0xac>)
 8003460:	4413      	add	r3, r2
 8003462:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003468:	4a1d      	ldr	r2, [pc, #116]	; (80034e0 <prvHeapInit+0xb0>)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800346e:	4b1c      	ldr	r3, [pc, #112]	; (80034e0 <prvHeapInit+0xb0>)
 8003470:	2200      	movs	r2, #0
 8003472:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	68ba      	ldr	r2, [r7, #8]
 8003478:	4413      	add	r3, r2
 800347a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800347c:	2208      	movs	r2, #8
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	1a9b      	subs	r3, r3, r2
 8003482:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f023 0307 	bic.w	r3, r3, #7
 800348a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	4a15      	ldr	r2, [pc, #84]	; (80034e4 <prvHeapInit+0xb4>)
 8003490:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003492:	4b14      	ldr	r3, [pc, #80]	; (80034e4 <prvHeapInit+0xb4>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2200      	movs	r2, #0
 8003498:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800349a:	4b12      	ldr	r3, [pc, #72]	; (80034e4 <prvHeapInit+0xb4>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2200      	movs	r2, #0
 80034a0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	68fa      	ldr	r2, [r7, #12]
 80034aa:	1ad2      	subs	r2, r2, r3
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80034b0:	4b0c      	ldr	r3, [pc, #48]	; (80034e4 <prvHeapInit+0xb4>)
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	4a0a      	ldr	r2, [pc, #40]	; (80034e8 <prvHeapInit+0xb8>)
 80034be:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	4a09      	ldr	r2, [pc, #36]	; (80034ec <prvHeapInit+0xbc>)
 80034c6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80034c8:	4b09      	ldr	r3, [pc, #36]	; (80034f0 <prvHeapInit+0xc0>)
 80034ca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80034ce:	601a      	str	r2, [r3, #0]
}
 80034d0:	bf00      	nop
 80034d2:	3714      	adds	r7, #20
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr
 80034dc:	2000018c 	.word	0x2000018c
 80034e0:	20012d8c 	.word	0x20012d8c
 80034e4:	20012d94 	.word	0x20012d94
 80034e8:	20012d9c 	.word	0x20012d9c
 80034ec:	20012d98 	.word	0x20012d98
 80034f0:	20012da8 	.word	0x20012da8

080034f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80034f4:	b480      	push	{r7}
 80034f6:	b085      	sub	sp, #20
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80034fc:	4b28      	ldr	r3, [pc, #160]	; (80035a0 <prvInsertBlockIntoFreeList+0xac>)
 80034fe:	60fb      	str	r3, [r7, #12]
 8003500:	e002      	b.n	8003508 <prvInsertBlockIntoFreeList+0x14>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	60fb      	str	r3, [r7, #12]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	429a      	cmp	r2, r3
 8003510:	d8f7      	bhi.n	8003502 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	68ba      	ldr	r2, [r7, #8]
 800351c:	4413      	add	r3, r2
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	429a      	cmp	r2, r3
 8003522:	d108      	bne.n	8003536 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	685a      	ldr	r2, [r3, #4]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	441a      	add	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	68ba      	ldr	r2, [r7, #8]
 8003540:	441a      	add	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	429a      	cmp	r2, r3
 8003548:	d118      	bne.n	800357c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	4b15      	ldr	r3, [pc, #84]	; (80035a4 <prvInsertBlockIntoFreeList+0xb0>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	429a      	cmp	r2, r3
 8003554:	d00d      	beq.n	8003572 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685a      	ldr	r2, [r3, #4]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	441a      	add	r2, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	601a      	str	r2, [r3, #0]
 8003570:	e008      	b.n	8003584 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003572:	4b0c      	ldr	r3, [pc, #48]	; (80035a4 <prvInsertBlockIntoFreeList+0xb0>)
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	601a      	str	r2, [r3, #0]
 800357a:	e003      	b.n	8003584 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003584:	68fa      	ldr	r2, [r7, #12]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	429a      	cmp	r2, r3
 800358a:	d002      	beq.n	8003592 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003592:	bf00      	nop
 8003594:	3714      	adds	r7, #20
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	20012d8c 	.word	0x20012d8c
 80035a4:	20012d94 	.word	0x20012d94

080035a8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80035a8:	b580      	push	{r7, lr}
 80035aa:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80035ac:	4803      	ldr	r0, [pc, #12]	; (80035bc <_cbSendSystemDesc+0x14>)
 80035ae:	f001 fc3d 	bl	8004e2c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80035b2:	4803      	ldr	r0, [pc, #12]	; (80035c0 <_cbSendSystemDesc+0x18>)
 80035b4:	f001 fc3a 	bl	8004e2c <SEGGER_SYSVIEW_SendSysDesc>
}
 80035b8:	bf00      	nop
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	08005608 	.word	0x08005608
 80035c0:	0800564c 	.word	0x0800564c

080035c4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80035c8:	4b06      	ldr	r3, [pc, #24]	; (80035e4 <SEGGER_SYSVIEW_Conf+0x20>)
 80035ca:	6818      	ldr	r0, [r3, #0]
 80035cc:	4b05      	ldr	r3, [pc, #20]	; (80035e4 <SEGGER_SYSVIEW_Conf+0x20>)
 80035ce:	6819      	ldr	r1, [r3, #0]
 80035d0:	4b05      	ldr	r3, [pc, #20]	; (80035e8 <SEGGER_SYSVIEW_Conf+0x24>)
 80035d2:	4a06      	ldr	r2, [pc, #24]	; (80035ec <SEGGER_SYSVIEW_Conf+0x28>)
 80035d4:	f001 f8b0 	bl	8004738 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80035d8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80035dc:	f001 f8f0 	bl	80047c0 <SEGGER_SYSVIEW_SetRAMBase>
}
 80035e0:	bf00      	nop
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	20000000 	.word	0x20000000
 80035e8:	080035a9 	.word	0x080035a9
 80035ec:	080056ec 	.word	0x080056ec

080035f0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80035f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035f2:	b085      	sub	sp, #20
 80035f4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80035f6:	2300      	movs	r3, #0
 80035f8:	607b      	str	r3, [r7, #4]
 80035fa:	e033      	b.n	8003664 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80035fc:	491e      	ldr	r1, [pc, #120]	; (8003678 <_cbSendTaskList+0x88>)
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	4613      	mov	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	4413      	add	r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	440b      	add	r3, r1
 800360a:	6818      	ldr	r0, [r3, #0]
 800360c:	491a      	ldr	r1, [pc, #104]	; (8003678 <_cbSendTaskList+0x88>)
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	4613      	mov	r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	4413      	add	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	440b      	add	r3, r1
 800361a:	3304      	adds	r3, #4
 800361c:	6819      	ldr	r1, [r3, #0]
 800361e:	4c16      	ldr	r4, [pc, #88]	; (8003678 <_cbSendTaskList+0x88>)
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	4613      	mov	r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	4413      	add	r3, r2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	4423      	add	r3, r4
 800362c:	3308      	adds	r3, #8
 800362e:	681c      	ldr	r4, [r3, #0]
 8003630:	4d11      	ldr	r5, [pc, #68]	; (8003678 <_cbSendTaskList+0x88>)
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	4613      	mov	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	4413      	add	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	442b      	add	r3, r5
 800363e:	330c      	adds	r3, #12
 8003640:	681d      	ldr	r5, [r3, #0]
 8003642:	4e0d      	ldr	r6, [pc, #52]	; (8003678 <_cbSendTaskList+0x88>)
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	4613      	mov	r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	4413      	add	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4433      	add	r3, r6
 8003650:	3310      	adds	r3, #16
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	9300      	str	r3, [sp, #0]
 8003656:	462b      	mov	r3, r5
 8003658:	4622      	mov	r2, r4
 800365a:	f000 f8bd 	bl	80037d8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	3301      	adds	r3, #1
 8003662:	607b      	str	r3, [r7, #4]
 8003664:	4b05      	ldr	r3, [pc, #20]	; (800367c <_cbSendTaskList+0x8c>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	429a      	cmp	r2, r3
 800366c:	d3c6      	bcc.n	80035fc <_cbSendTaskList+0xc>
  }
}
 800366e:	bf00      	nop
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003678:	20012dac 	.word	0x20012dac
 800367c:	20012e4c 	.word	0x20012e4c

08003680 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003680:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003684:	b082      	sub	sp, #8
 8003686:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003688:	f7ff f87c 	bl	8002784 <xTaskGetTickCountFromISR>
 800368c:	4603      	mov	r3, r0
 800368e:	2200      	movs	r2, #0
 8003690:	469a      	mov	sl, r3
 8003692:	4693      	mov	fp, r2
 8003694:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003698:	e9d7 0100 	ldrd	r0, r1, [r7]
 800369c:	4602      	mov	r2, r0
 800369e:	460b      	mov	r3, r1
 80036a0:	f04f 0a00 	mov.w	sl, #0
 80036a4:	f04f 0b00 	mov.w	fp, #0
 80036a8:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80036ac:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80036b0:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80036b4:	4652      	mov	r2, sl
 80036b6:	465b      	mov	r3, fp
 80036b8:	1a14      	subs	r4, r2, r0
 80036ba:	eb63 0501 	sbc.w	r5, r3, r1
 80036be:	f04f 0200 	mov.w	r2, #0
 80036c2:	f04f 0300 	mov.w	r3, #0
 80036c6:	00ab      	lsls	r3, r5, #2
 80036c8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80036cc:	00a2      	lsls	r2, r4, #2
 80036ce:	4614      	mov	r4, r2
 80036d0:	461d      	mov	r5, r3
 80036d2:	eb14 0800 	adds.w	r8, r4, r0
 80036d6:	eb45 0901 	adc.w	r9, r5, r1
 80036da:	f04f 0200 	mov.w	r2, #0
 80036de:	f04f 0300 	mov.w	r3, #0
 80036e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036ee:	4690      	mov	r8, r2
 80036f0:	4699      	mov	r9, r3
 80036f2:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80036f6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80036fa:	4610      	mov	r0, r2
 80036fc:	4619      	mov	r1, r3
 80036fe:	3708      	adds	r7, #8
 8003700:	46bd      	mov	sp, r7
 8003702:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003708 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003708:	b580      	push	{r7, lr}
 800370a:	b086      	sub	sp, #24
 800370c:	af02      	add	r7, sp, #8
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]
 8003714:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003716:	2205      	movs	r2, #5
 8003718:	492b      	ldr	r1, [pc, #172]	; (80037c8 <SYSVIEW_AddTask+0xc0>)
 800371a:	68b8      	ldr	r0, [r7, #8]
 800371c:	f001 fee4 	bl	80054e8 <memcmp>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d04b      	beq.n	80037be <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003726:	4b29      	ldr	r3, [pc, #164]	; (80037cc <SYSVIEW_AddTask+0xc4>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2b07      	cmp	r3, #7
 800372c:	d903      	bls.n	8003736 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800372e:	4828      	ldr	r0, [pc, #160]	; (80037d0 <SYSVIEW_AddTask+0xc8>)
 8003730:	f001 fe7e 	bl	8005430 <SEGGER_SYSVIEW_Warn>
    return;
 8003734:	e044      	b.n	80037c0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003736:	4b25      	ldr	r3, [pc, #148]	; (80037cc <SYSVIEW_AddTask+0xc4>)
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	4926      	ldr	r1, [pc, #152]	; (80037d4 <SYSVIEW_AddTask+0xcc>)
 800373c:	4613      	mov	r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	4413      	add	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	440b      	add	r3, r1
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800374a:	4b20      	ldr	r3, [pc, #128]	; (80037cc <SYSVIEW_AddTask+0xc4>)
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	4921      	ldr	r1, [pc, #132]	; (80037d4 <SYSVIEW_AddTask+0xcc>)
 8003750:	4613      	mov	r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	4413      	add	r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	440b      	add	r3, r1
 800375a:	3304      	adds	r3, #4
 800375c:	68ba      	ldr	r2, [r7, #8]
 800375e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003760:	4b1a      	ldr	r3, [pc, #104]	; (80037cc <SYSVIEW_AddTask+0xc4>)
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	491b      	ldr	r1, [pc, #108]	; (80037d4 <SYSVIEW_AddTask+0xcc>)
 8003766:	4613      	mov	r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	4413      	add	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	440b      	add	r3, r1
 8003770:	3308      	adds	r3, #8
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003776:	4b15      	ldr	r3, [pc, #84]	; (80037cc <SYSVIEW_AddTask+0xc4>)
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	4916      	ldr	r1, [pc, #88]	; (80037d4 <SYSVIEW_AddTask+0xcc>)
 800377c:	4613      	mov	r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	4413      	add	r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	440b      	add	r3, r1
 8003786:	330c      	adds	r3, #12
 8003788:	683a      	ldr	r2, [r7, #0]
 800378a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800378c:	4b0f      	ldr	r3, [pc, #60]	; (80037cc <SYSVIEW_AddTask+0xc4>)
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	4910      	ldr	r1, [pc, #64]	; (80037d4 <SYSVIEW_AddTask+0xcc>)
 8003792:	4613      	mov	r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	4413      	add	r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	440b      	add	r3, r1
 800379c:	3310      	adds	r3, #16
 800379e:	69ba      	ldr	r2, [r7, #24]
 80037a0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80037a2:	4b0a      	ldr	r3, [pc, #40]	; (80037cc <SYSVIEW_AddTask+0xc4>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	3301      	adds	r3, #1
 80037a8:	4a08      	ldr	r2, [pc, #32]	; (80037cc <SYSVIEW_AddTask+0xc4>)
 80037aa:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	9300      	str	r3, [sp, #0]
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	68b9      	ldr	r1, [r7, #8]
 80037b6:	68f8      	ldr	r0, [r7, #12]
 80037b8:	f000 f80e 	bl	80037d8 <SYSVIEW_SendTaskInfo>
 80037bc:	e000      	b.n	80037c0 <SYSVIEW_AddTask+0xb8>
    return;
 80037be:	bf00      	nop

}
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	0800565c 	.word	0x0800565c
 80037cc:	20012e4c 	.word	0x20012e4c
 80037d0:	08005664 	.word	0x08005664
 80037d4:	20012dac 	.word	0x20012dac

080037d8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80037d8:	b580      	push	{r7, lr}
 80037da:	b08a      	sub	sp, #40	; 0x28
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	607a      	str	r2, [r7, #4]
 80037e4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80037e6:	f107 0314 	add.w	r3, r7, #20
 80037ea:	2214      	movs	r2, #20
 80037ec:	2100      	movs	r1, #0
 80037ee:	4618      	mov	r0, r3
 80037f0:	f001 fe8a 	bl	8005508 <memset>
  TaskInfo.TaskID     = TaskID;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003806:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003808:	f107 0314 	add.w	r3, r7, #20
 800380c:	4618      	mov	r0, r3
 800380e:	f001 fa15 	bl	8004c3c <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003812:	bf00      	nop
 8003814:	3728      	adds	r7, #40	; 0x28
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
	...

0800381c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003822:	4b24      	ldr	r3, [pc, #144]	; (80038b4 <_DoInit+0x98>)
 8003824:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2203      	movs	r2, #3
 800382a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2203      	movs	r2, #3
 8003830:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a20      	ldr	r2, [pc, #128]	; (80038b8 <_DoInit+0x9c>)
 8003836:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4a20      	ldr	r2, [pc, #128]	; (80038bc <_DoInit+0xa0>)
 800383c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003844:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a17      	ldr	r2, [pc, #92]	; (80038b8 <_DoInit+0x9c>)
 800385c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a17      	ldr	r2, [pc, #92]	; (80038c0 <_DoInit+0xa4>)
 8003862:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2210      	movs	r2, #16
 8003868:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	3307      	adds	r3, #7
 8003880:	4a10      	ldr	r2, [pc, #64]	; (80038c4 <_DoInit+0xa8>)
 8003882:	6810      	ldr	r0, [r2, #0]
 8003884:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003886:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a0e      	ldr	r2, [pc, #56]	; (80038c8 <_DoInit+0xac>)
 800388e:	6810      	ldr	r0, [r2, #0]
 8003890:	6018      	str	r0, [r3, #0]
 8003892:	8891      	ldrh	r1, [r2, #4]
 8003894:	7992      	ldrb	r2, [r2, #6]
 8003896:	8099      	strh	r1, [r3, #4]
 8003898:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800389a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2220      	movs	r2, #32
 80038a2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80038a4:	f3bf 8f5f 	dmb	sy
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr
 80038b4:	20012e50 	.word	0x20012e50
 80038b8:	080056b4 	.word	0x080056b4
 80038bc:	20012ef8 	.word	0x20012ef8
 80038c0:	200132f8 	.word	0x200132f8
 80038c4:	080056c0 	.word	0x080056c0
 80038c8:	080056c4 	.word	0x080056c4

080038cc <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b08c      	sub	sp, #48	; 0x30
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80038d8:	4b3e      	ldr	r3, [pc, #248]	; (80039d4 <SEGGER_RTT_ReadNoLock+0x108>)
 80038da:	623b      	str	r3, [r7, #32]
 80038dc:	6a3b      	ldr	r3, [r7, #32]
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d101      	bne.n	80038ea <SEGGER_RTT_ReadNoLock+0x1e>
 80038e6:	f7ff ff99 	bl	800381c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	4613      	mov	r3, r2
 80038ee:	005b      	lsls	r3, r3, #1
 80038f0:	4413      	add	r3, r2
 80038f2:	00db      	lsls	r3, r3, #3
 80038f4:	3360      	adds	r3, #96	; 0x60
 80038f6:	4a37      	ldr	r2, [pc, #220]	; (80039d4 <SEGGER_RTT_ReadNoLock+0x108>)
 80038f8:	4413      	add	r3, r2
 80038fa:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	691b      	ldr	r3, [r3, #16]
 8003904:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800390c:	2300      	movs	r3, #0
 800390e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003910:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	429a      	cmp	r2, r3
 8003916:	d92b      	bls.n	8003970 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	689a      	ldr	r2, [r3, #8]
 800391c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003922:	697a      	ldr	r2, [r7, #20]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4293      	cmp	r3, r2
 8003928:	bf28      	it	cs
 800392a:	4613      	movcs	r3, r2
 800392c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	685a      	ldr	r2, [r3, #4]
 8003932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003934:	4413      	add	r3, r2
 8003936:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003938:	697a      	ldr	r2, [r7, #20]
 800393a:	6939      	ldr	r1, [r7, #16]
 800393c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800393e:	f001 fe0f 	bl	8005560 <memcpy>
    NumBytesRead += NumBytesRem;
 8003942:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	4413      	add	r3, r2
 8003948:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800394a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	4413      	add	r3, r2
 8003950:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800395a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	4413      	add	r3, r2
 8003960:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003968:	429a      	cmp	r2, r3
 800396a:	d101      	bne.n	8003970 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800396c:	2300      	movs	r3, #0
 800396e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003978:	697a      	ldr	r2, [r7, #20]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4293      	cmp	r3, r2
 800397e:	bf28      	it	cs
 8003980:	4613      	movcs	r3, r2
 8003982:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d019      	beq.n	80039be <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	685a      	ldr	r2, [r3, #4]
 800398e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003990:	4413      	add	r3, r2
 8003992:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003994:	697a      	ldr	r2, [r7, #20]
 8003996:	6939      	ldr	r1, [r7, #16]
 8003998:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800399a:	f001 fde1 	bl	8005560 <memcpy>
    NumBytesRead += NumBytesRem;
 800399e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	4413      	add	r3, r2
 80039a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80039a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	4413      	add	r3, r2
 80039ac:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80039b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	4413      	add	r3, r2
 80039bc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80039be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d002      	beq.n	80039ca <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039c8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80039ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3730      	adds	r7, #48	; 0x30
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	20012e50 	.word	0x20012e50

080039d8 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80039d8:	b580      	push	{r7, lr}
 80039da:	b088      	sub	sp, #32
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	607a      	str	r2, [r7, #4]
 80039e4:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80039e6:	4b3d      	ldr	r3, [pc, #244]	; (8003adc <SEGGER_RTT_AllocUpBuffer+0x104>)
 80039e8:	61bb      	str	r3, [r7, #24]
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d101      	bne.n	80039f8 <SEGGER_RTT_AllocUpBuffer+0x20>
 80039f4:	f7ff ff12 	bl	800381c <_DoInit>
  SEGGER_RTT_LOCK();
 80039f8:	f3ef 8311 	mrs	r3, BASEPRI
 80039fc:	f04f 0120 	mov.w	r1, #32
 8003a00:	f381 8811 	msr	BASEPRI, r1
 8003a04:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003a06:	4b35      	ldr	r3, [pc, #212]	; (8003adc <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003a08:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8003a0e:	6939      	ldr	r1, [r7, #16]
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	1c5a      	adds	r2, r3, #1
 8003a14:	4613      	mov	r3, r2
 8003a16:	005b      	lsls	r3, r3, #1
 8003a18:	4413      	add	r3, r2
 8003a1a:	00db      	lsls	r3, r3, #3
 8003a1c:	440b      	add	r3, r1
 8003a1e:	3304      	adds	r3, #4
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d008      	beq.n	8003a38 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	3301      	adds	r3, #1
 8003a2a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	69fa      	ldr	r2, [r7, #28]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	dbeb      	blt.n	8003a0e <SEGGER_RTT_AllocUpBuffer+0x36>
 8003a36:	e000      	b.n	8003a3a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8003a38:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	69fa      	ldr	r2, [r7, #28]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	da3f      	bge.n	8003ac4 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8003a44:	6939      	ldr	r1, [r7, #16]
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	1c5a      	adds	r2, r3, #1
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	005b      	lsls	r3, r3, #1
 8003a4e:	4413      	add	r3, r2
 8003a50:	00db      	lsls	r3, r3, #3
 8003a52:	440b      	add	r3, r1
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003a58:	6939      	ldr	r1, [r7, #16]
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	1c5a      	adds	r2, r3, #1
 8003a5e:	4613      	mov	r3, r2
 8003a60:	005b      	lsls	r3, r3, #1
 8003a62:	4413      	add	r3, r2
 8003a64:	00db      	lsls	r3, r3, #3
 8003a66:	440b      	add	r3, r1
 8003a68:	3304      	adds	r3, #4
 8003a6a:	68ba      	ldr	r2, [r7, #8]
 8003a6c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8003a6e:	6939      	ldr	r1, [r7, #16]
 8003a70:	69fa      	ldr	r2, [r7, #28]
 8003a72:	4613      	mov	r3, r2
 8003a74:	005b      	lsls	r3, r3, #1
 8003a76:	4413      	add	r3, r2
 8003a78:	00db      	lsls	r3, r3, #3
 8003a7a:	440b      	add	r3, r1
 8003a7c:	3320      	adds	r3, #32
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8003a82:	6939      	ldr	r1, [r7, #16]
 8003a84:	69fa      	ldr	r2, [r7, #28]
 8003a86:	4613      	mov	r3, r2
 8003a88:	005b      	lsls	r3, r3, #1
 8003a8a:	4413      	add	r3, r2
 8003a8c:	00db      	lsls	r3, r3, #3
 8003a8e:	440b      	add	r3, r1
 8003a90:	3328      	adds	r3, #40	; 0x28
 8003a92:	2200      	movs	r2, #0
 8003a94:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8003a96:	6939      	ldr	r1, [r7, #16]
 8003a98:	69fa      	ldr	r2, [r7, #28]
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	005b      	lsls	r3, r3, #1
 8003a9e:	4413      	add	r3, r2
 8003aa0:	00db      	lsls	r3, r3, #3
 8003aa2:	440b      	add	r3, r1
 8003aa4:	3324      	adds	r3, #36	; 0x24
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8003aaa:	6939      	ldr	r1, [r7, #16]
 8003aac:	69fa      	ldr	r2, [r7, #28]
 8003aae:	4613      	mov	r3, r2
 8003ab0:	005b      	lsls	r3, r3, #1
 8003ab2:	4413      	add	r3, r2
 8003ab4:	00db      	lsls	r3, r3, #3
 8003ab6:	440b      	add	r3, r1
 8003ab8:	332c      	adds	r3, #44	; 0x2c
 8003aba:	683a      	ldr	r2, [r7, #0]
 8003abc:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003abe:	f3bf 8f5f 	dmb	sy
 8003ac2:	e002      	b.n	8003aca <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8003ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ac8:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8003ad0:	69fb      	ldr	r3, [r7, #28]
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3720      	adds	r7, #32
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	20012e50 	.word	0x20012e50

08003ae0 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b088      	sub	sp, #32
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
 8003aec:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003aee:	4b33      	ldr	r3, [pc, #204]	; (8003bbc <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8003af0:	61bb      	str	r3, [r7, #24]
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d101      	bne.n	8003b00 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8003afc:	f7ff fe8e 	bl	800381c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003b00:	4b2e      	ldr	r3, [pc, #184]	; (8003bbc <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8003b02:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	695b      	ldr	r3, [r3, #20]
 8003b08:	461a      	mov	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d24d      	bcs.n	8003bac <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8003b10:	f3ef 8311 	mrs	r3, BASEPRI
 8003b14:	f04f 0120 	mov.w	r1, #32
 8003b18:	f381 8811 	msr	BASEPRI, r1
 8003b1c:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d031      	beq.n	8003b88 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8003b24:	6979      	ldr	r1, [r7, #20]
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	005b      	lsls	r3, r3, #1
 8003b2c:	4413      	add	r3, r2
 8003b2e:	00db      	lsls	r3, r3, #3
 8003b30:	440b      	add	r3, r1
 8003b32:	3360      	adds	r3, #96	; 0x60
 8003b34:	68ba      	ldr	r2, [r7, #8]
 8003b36:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8003b38:	6979      	ldr	r1, [r7, #20]
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	005b      	lsls	r3, r3, #1
 8003b40:	4413      	add	r3, r2
 8003b42:	00db      	lsls	r3, r3, #3
 8003b44:	440b      	add	r3, r1
 8003b46:	3364      	adds	r3, #100	; 0x64
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8003b4c:	6979      	ldr	r1, [r7, #20]
 8003b4e:	68fa      	ldr	r2, [r7, #12]
 8003b50:	4613      	mov	r3, r2
 8003b52:	005b      	lsls	r3, r3, #1
 8003b54:	4413      	add	r3, r2
 8003b56:	00db      	lsls	r3, r3, #3
 8003b58:	440b      	add	r3, r1
 8003b5a:	3368      	adds	r3, #104	; 0x68
 8003b5c:	683a      	ldr	r2, [r7, #0]
 8003b5e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8003b60:	6979      	ldr	r1, [r7, #20]
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	4613      	mov	r3, r2
 8003b66:	005b      	lsls	r3, r3, #1
 8003b68:	4413      	add	r3, r2
 8003b6a:	00db      	lsls	r3, r3, #3
 8003b6c:	440b      	add	r3, r1
 8003b6e:	3370      	adds	r3, #112	; 0x70
 8003b70:	2200      	movs	r2, #0
 8003b72:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8003b74:	6979      	ldr	r1, [r7, #20]
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	4613      	mov	r3, r2
 8003b7a:	005b      	lsls	r3, r3, #1
 8003b7c:	4413      	add	r3, r2
 8003b7e:	00db      	lsls	r3, r3, #3
 8003b80:	440b      	add	r3, r1
 8003b82:	336c      	adds	r3, #108	; 0x6c
 8003b84:	2200      	movs	r2, #0
 8003b86:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8003b88:	6979      	ldr	r1, [r7, #20]
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	005b      	lsls	r3, r3, #1
 8003b90:	4413      	add	r3, r2
 8003b92:	00db      	lsls	r3, r3, #3
 8003b94:	440b      	add	r3, r1
 8003b96:	3374      	adds	r3, #116	; 0x74
 8003b98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b9a:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003b9c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	61fb      	str	r3, [r7, #28]
 8003baa:	e002      	b.n	8003bb2 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8003bac:	f04f 33ff 	mov.w	r3, #4294967295
 8003bb0:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8003bb2:	69fb      	ldr	r3, [r7, #28]
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3720      	adds	r7, #32
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	20012e50 	.word	0x20012e50

08003bc0 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003bc0:	b480      	push	{r7}
 8003bc2:	b087      	sub	sp, #28
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003bd0:	e002      	b.n	8003bd8 <_EncodeStr+0x18>
    Len++;
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003bd8:	68ba      	ldr	r2, [r7, #8]
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	4413      	add	r3, r2
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d1f6      	bne.n	8003bd2 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d901      	bls.n	8003bf0 <_EncodeStr+0x30>
    Len = Limit;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	2bfe      	cmp	r3, #254	; 0xfe
 8003bf4:	d806      	bhi.n	8003c04 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	1c5a      	adds	r2, r3, #1
 8003bfa:	60fa      	str	r2, [r7, #12]
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	b2d2      	uxtb	r2, r2
 8003c00:	701a      	strb	r2, [r3, #0]
 8003c02:	e011      	b.n	8003c28 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	1c5a      	adds	r2, r3, #1
 8003c08:	60fa      	str	r2, [r7, #12]
 8003c0a:	22ff      	movs	r2, #255	; 0xff
 8003c0c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	1c5a      	adds	r2, r3, #1
 8003c12:	60fa      	str	r2, [r7, #12]
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	b2d2      	uxtb	r2, r2
 8003c18:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	0a19      	lsrs	r1, r3, #8
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	1c5a      	adds	r2, r3, #1
 8003c22:	60fa      	str	r2, [r7, #12]
 8003c24:	b2ca      	uxtb	r2, r1
 8003c26:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003c2c:	e00a      	b.n	8003c44 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8003c2e:	68ba      	ldr	r2, [r7, #8]
 8003c30:	1c53      	adds	r3, r2, #1
 8003c32:	60bb      	str	r3, [r7, #8]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	1c59      	adds	r1, r3, #1
 8003c38:	60f9      	str	r1, [r7, #12]
 8003c3a:	7812      	ldrb	r2, [r2, #0]
 8003c3c:	701a      	strb	r2, [r3, #0]
    n++;
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	3301      	adds	r3, #1
 8003c42:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003c44:	697a      	ldr	r2, [r7, #20]
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d3f0      	bcc.n	8003c2e <_EncodeStr+0x6e>
  }
  return pPayload;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	371c      	adds	r7, #28
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr

08003c5a <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8003c5a:	b480      	push	{r7}
 8003c5c:	b083      	sub	sp, #12
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	3304      	adds	r3, #4
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
	...

08003c74 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003c7a:	4b35      	ldr	r3, [pc, #212]	; (8003d50 <_HandleIncomingPacket+0xdc>)
 8003c7c:	7e1b      	ldrb	r3, [r3, #24]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	1cfb      	adds	r3, r7, #3
 8003c82:	2201      	movs	r2, #1
 8003c84:	4619      	mov	r1, r3
 8003c86:	f7ff fe21 	bl	80038cc <SEGGER_RTT_ReadNoLock>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	dd59      	ble.n	8003d48 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8003c94:	78fb      	ldrb	r3, [r7, #3]
 8003c96:	2b80      	cmp	r3, #128	; 0x80
 8003c98:	d032      	beq.n	8003d00 <_HandleIncomingPacket+0x8c>
 8003c9a:	2b80      	cmp	r3, #128	; 0x80
 8003c9c:	dc42      	bgt.n	8003d24 <_HandleIncomingPacket+0xb0>
 8003c9e:	2b07      	cmp	r3, #7
 8003ca0:	dc16      	bgt.n	8003cd0 <_HandleIncomingPacket+0x5c>
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	dd3e      	ble.n	8003d24 <_HandleIncomingPacket+0xb0>
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	2b06      	cmp	r3, #6
 8003caa:	d83b      	bhi.n	8003d24 <_HandleIncomingPacket+0xb0>
 8003cac:	a201      	add	r2, pc, #4	; (adr r2, 8003cb4 <_HandleIncomingPacket+0x40>)
 8003cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb2:	bf00      	nop
 8003cb4:	08003cd7 	.word	0x08003cd7
 8003cb8:	08003cdd 	.word	0x08003cdd
 8003cbc:	08003ce3 	.word	0x08003ce3
 8003cc0:	08003ce9 	.word	0x08003ce9
 8003cc4:	08003cef 	.word	0x08003cef
 8003cc8:	08003cf5 	.word	0x08003cf5
 8003ccc:	08003cfb 	.word	0x08003cfb
 8003cd0:	2b7f      	cmp	r3, #127	; 0x7f
 8003cd2:	d034      	beq.n	8003d3e <_HandleIncomingPacket+0xca>
 8003cd4:	e026      	b.n	8003d24 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8003cd6:	f000 fe37 	bl	8004948 <SEGGER_SYSVIEW_Start>
      break;
 8003cda:	e035      	b.n	8003d48 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8003cdc:	f000 feee 	bl	8004abc <SEGGER_SYSVIEW_Stop>
      break;
 8003ce0:	e032      	b.n	8003d48 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8003ce2:	f001 f8c7 	bl	8004e74 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8003ce6:	e02f      	b.n	8003d48 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8003ce8:	f001 f88c 	bl	8004e04 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8003cec:	e02c      	b.n	8003d48 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8003cee:	f000 ff0b 	bl	8004b08 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8003cf2:	e029      	b.n	8003d48 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8003cf4:	f001 fb4a 	bl	800538c <SEGGER_SYSVIEW_SendNumModules>
      break;
 8003cf8:	e026      	b.n	8003d48 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8003cfa:	f001 fb29 	bl	8005350 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8003cfe:	e023      	b.n	8003d48 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003d00:	4b13      	ldr	r3, [pc, #76]	; (8003d50 <_HandleIncomingPacket+0xdc>)
 8003d02:	7e1b      	ldrb	r3, [r3, #24]
 8003d04:	4618      	mov	r0, r3
 8003d06:	1cfb      	adds	r3, r7, #3
 8003d08:	2201      	movs	r2, #1
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	f7ff fdde 	bl	80038cc <SEGGER_RTT_ReadNoLock>
 8003d10:	4603      	mov	r3, r0
 8003d12:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	dd13      	ble.n	8003d42 <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8003d1a:	78fb      	ldrb	r3, [r7, #3]
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f001 fa97 	bl	8005250 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8003d22:	e00e      	b.n	8003d42 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8003d24:	78fb      	ldrb	r3, [r7, #3]
 8003d26:	b25b      	sxtb	r3, r3
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	da0c      	bge.n	8003d46 <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003d2c:	4b08      	ldr	r3, [pc, #32]	; (8003d50 <_HandleIncomingPacket+0xdc>)
 8003d2e:	7e1b      	ldrb	r3, [r3, #24]
 8003d30:	4618      	mov	r0, r3
 8003d32:	1cfb      	adds	r3, r7, #3
 8003d34:	2201      	movs	r2, #1
 8003d36:	4619      	mov	r1, r3
 8003d38:	f7ff fdc8 	bl	80038cc <SEGGER_RTT_ReadNoLock>
      }
      break;
 8003d3c:	e003      	b.n	8003d46 <_HandleIncomingPacket+0xd2>
      break;
 8003d3e:	bf00      	nop
 8003d40:	e002      	b.n	8003d48 <_HandleIncomingPacket+0xd4>
      break;
 8003d42:	bf00      	nop
 8003d44:	e000      	b.n	8003d48 <_HandleIncomingPacket+0xd4>
      break;
 8003d46:	bf00      	nop
    }
  }
}
 8003d48:	bf00      	nop
 8003d4a:	3708      	adds	r7, #8
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	20014310 	.word	0x20014310

08003d54 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b08c      	sub	sp, #48	; 0x30
 8003d58:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8003d5e:	1d3b      	adds	r3, r7, #4
 8003d60:	3301      	adds	r3, #1
 8003d62:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d68:	4b31      	ldr	r3, [pc, #196]	; (8003e30 <_TrySendOverflowPacket+0xdc>)
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d6e:	e00b      	b.n	8003d88 <_TrySendOverflowPacket+0x34>
 8003d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d72:	b2da      	uxtb	r2, r3
 8003d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d76:	1c59      	adds	r1, r3, #1
 8003d78:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003d7a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d7e:	b2d2      	uxtb	r2, r2
 8003d80:	701a      	strb	r2, [r3, #0]
 8003d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d84:	09db      	lsrs	r3, r3, #7
 8003d86:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d8a:	2b7f      	cmp	r3, #127	; 0x7f
 8003d8c:	d8f0      	bhi.n	8003d70 <_TrySendOverflowPacket+0x1c>
 8003d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d90:	1c5a      	adds	r2, r3, #1
 8003d92:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d96:	b2d2      	uxtb	r2, r2
 8003d98:	701a      	strb	r2, [r3, #0]
 8003d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d9c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003d9e:	4b25      	ldr	r3, [pc, #148]	; (8003e34 <_TrySendOverflowPacket+0xe0>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003da4:	4b22      	ldr	r3, [pc, #136]	; (8003e30 <_TrySendOverflowPacket+0xdc>)
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	69ba      	ldr	r2, [r7, #24]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	627b      	str	r3, [r7, #36]	; 0x24
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	623b      	str	r3, [r7, #32]
 8003db6:	e00b      	b.n	8003dd0 <_TrySendOverflowPacket+0x7c>
 8003db8:	6a3b      	ldr	r3, [r7, #32]
 8003dba:	b2da      	uxtb	r2, r3
 8003dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbe:	1c59      	adds	r1, r3, #1
 8003dc0:	6279      	str	r1, [r7, #36]	; 0x24
 8003dc2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003dc6:	b2d2      	uxtb	r2, r2
 8003dc8:	701a      	strb	r2, [r3, #0]
 8003dca:	6a3b      	ldr	r3, [r7, #32]
 8003dcc:	09db      	lsrs	r3, r3, #7
 8003dce:	623b      	str	r3, [r7, #32]
 8003dd0:	6a3b      	ldr	r3, [r7, #32]
 8003dd2:	2b7f      	cmp	r3, #127	; 0x7f
 8003dd4:	d8f0      	bhi.n	8003db8 <_TrySendOverflowPacket+0x64>
 8003dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd8:	1c5a      	adds	r2, r3, #1
 8003dda:	627a      	str	r2, [r7, #36]	; 0x24
 8003ddc:	6a3a      	ldr	r2, [r7, #32]
 8003dde:	b2d2      	uxtb	r2, r2
 8003de0:	701a      	strb	r2, [r3, #0]
 8003de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de4:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8003de6:	4b12      	ldr	r3, [pc, #72]	; (8003e30 <_TrySendOverflowPacket+0xdc>)
 8003de8:	785b      	ldrb	r3, [r3, #1]
 8003dea:	4618      	mov	r0, r3
 8003dec:	1d3b      	adds	r3, r7, #4
 8003dee:	69fa      	ldr	r2, [r7, #28]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	461a      	mov	r2, r3
 8003df4:	1d3b      	adds	r3, r7, #4
 8003df6:	4619      	mov	r1, r3
 8003df8:	f7fc fa12 	bl	8000220 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d009      	beq.n	8003e1a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003e06:	4a0a      	ldr	r2, [pc, #40]	; (8003e30 <_TrySendOverflowPacket+0xdc>)
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8003e0c:	4b08      	ldr	r3, [pc, #32]	; (8003e30 <_TrySendOverflowPacket+0xdc>)
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	3b01      	subs	r3, #1
 8003e12:	b2da      	uxtb	r2, r3
 8003e14:	4b06      	ldr	r3, [pc, #24]	; (8003e30 <_TrySendOverflowPacket+0xdc>)
 8003e16:	701a      	strb	r2, [r3, #0]
 8003e18:	e004      	b.n	8003e24 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8003e1a:	4b05      	ldr	r3, [pc, #20]	; (8003e30 <_TrySendOverflowPacket+0xdc>)
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	3301      	adds	r3, #1
 8003e20:	4a03      	ldr	r2, [pc, #12]	; (8003e30 <_TrySendOverflowPacket+0xdc>)
 8003e22:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8003e24:	693b      	ldr	r3, [r7, #16]
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3730      	adds	r7, #48	; 0x30
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	20014310 	.word	0x20014310
 8003e34:	e0001004 	.word	0xe0001004

08003e38 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b08a      	sub	sp, #40	; 0x28
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8003e44:	4b6c      	ldr	r3, [pc, #432]	; (8003ff8 <_SendPacket+0x1c0>)
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d010      	beq.n	8003e6e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003e4c:	4b6a      	ldr	r3, [pc, #424]	; (8003ff8 <_SendPacket+0x1c0>)
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	f000 80a3 	beq.w	8003f9c <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8003e56:	4b68      	ldr	r3, [pc, #416]	; (8003ff8 <_SendPacket+0x1c0>)
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d109      	bne.n	8003e72 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8003e5e:	f7ff ff79 	bl	8003d54 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8003e62:	4b65      	ldr	r3, [pc, #404]	; (8003ff8 <_SendPacket+0x1c0>)
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	f040 809a 	bne.w	8003fa0 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8003e6c:	e001      	b.n	8003e72 <_SendPacket+0x3a>
    goto Send;
 8003e6e:	bf00      	nop
 8003e70:	e000      	b.n	8003e74 <_SendPacket+0x3c>
Send:
 8003e72:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2b1f      	cmp	r3, #31
 8003e78:	d809      	bhi.n	8003e8e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8003e7a:	4b5f      	ldr	r3, [pc, #380]	; (8003ff8 <_SendPacket+0x1c0>)
 8003e7c:	69da      	ldr	r2, [r3, #28]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	fa22 f303 	lsr.w	r3, r2, r3
 8003e84:	f003 0301 	and.w	r3, r3, #1
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	f040 808b 	bne.w	8003fa4 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2b17      	cmp	r3, #23
 8003e92:	d807      	bhi.n	8003ea4 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	3b01      	subs	r3, #1
 8003e98:	60fb      	str	r3, [r7, #12]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	b2da      	uxtb	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	701a      	strb	r2, [r3, #0]
 8003ea2:	e03d      	b.n	8003f20 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8003ea4:	68ba      	ldr	r2, [r7, #8]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	2b7f      	cmp	r3, #127	; 0x7f
 8003eb0:	d912      	bls.n	8003ed8 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	09da      	lsrs	r2, r3, #7
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	60fb      	str	r3, [r7, #12]
 8003ebc:	b2d2      	uxtb	r2, r2
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	3a01      	subs	r2, #1
 8003eca:	60fa      	str	r2, [r7, #12]
 8003ecc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003ed0:	b2da      	uxtb	r2, r3
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	701a      	strb	r2, [r3, #0]
 8003ed6:	e006      	b.n	8003ee6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	3b01      	subs	r3, #1
 8003edc:	60fb      	str	r3, [r7, #12]
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	b2da      	uxtb	r2, r3
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2b7f      	cmp	r3, #127	; 0x7f
 8003eea:	d912      	bls.n	8003f12 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	09da      	lsrs	r2, r3, #7
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	60fb      	str	r3, [r7, #12]
 8003ef6:	b2d2      	uxtb	r2, r2
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	3a01      	subs	r2, #1
 8003f04:	60fa      	str	r2, [r7, #12]
 8003f06:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003f0a:	b2da      	uxtb	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	701a      	strb	r2, [r3, #0]
 8003f10:	e006      	b.n	8003f20 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	3b01      	subs	r3, #1
 8003f16:	60fb      	str	r3, [r7, #12]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	b2da      	uxtb	r2, r3
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003f20:	4b36      	ldr	r3, [pc, #216]	; (8003ffc <_SendPacket+0x1c4>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003f26:	4b34      	ldr	r3, [pc, #208]	; (8003ff8 <_SendPacket+0x1c0>)
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	69ba      	ldr	r2, [r7, #24]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	627b      	str	r3, [r7, #36]	; 0x24
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	623b      	str	r3, [r7, #32]
 8003f38:	e00b      	b.n	8003f52 <_SendPacket+0x11a>
 8003f3a:	6a3b      	ldr	r3, [r7, #32]
 8003f3c:	b2da      	uxtb	r2, r3
 8003f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f40:	1c59      	adds	r1, r3, #1
 8003f42:	6279      	str	r1, [r7, #36]	; 0x24
 8003f44:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f48:	b2d2      	uxtb	r2, r2
 8003f4a:	701a      	strb	r2, [r3, #0]
 8003f4c:	6a3b      	ldr	r3, [r7, #32]
 8003f4e:	09db      	lsrs	r3, r3, #7
 8003f50:	623b      	str	r3, [r7, #32]
 8003f52:	6a3b      	ldr	r3, [r7, #32]
 8003f54:	2b7f      	cmp	r3, #127	; 0x7f
 8003f56:	d8f0      	bhi.n	8003f3a <_SendPacket+0x102>
 8003f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5a:	1c5a      	adds	r2, r3, #1
 8003f5c:	627a      	str	r2, [r7, #36]	; 0x24
 8003f5e:	6a3a      	ldr	r2, [r7, #32]
 8003f60:	b2d2      	uxtb	r2, r2
 8003f62:	701a      	strb	r2, [r3, #0]
 8003f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f66:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8003f68:	4b23      	ldr	r3, [pc, #140]	; (8003ff8 <_SendPacket+0x1c0>)
 8003f6a:	785b      	ldrb	r3, [r3, #1]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	68ba      	ldr	r2, [r7, #8]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	461a      	mov	r2, r3
 8003f76:	68f9      	ldr	r1, [r7, #12]
 8003f78:	f7fc f952 	bl	8000220 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d003      	beq.n	8003f8e <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003f86:	4a1c      	ldr	r2, [pc, #112]	; (8003ff8 <_SendPacket+0x1c0>)
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	60d3      	str	r3, [r2, #12]
 8003f8c:	e00b      	b.n	8003fa6 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8003f8e:	4b1a      	ldr	r3, [pc, #104]	; (8003ff8 <_SendPacket+0x1c0>)
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	3301      	adds	r3, #1
 8003f94:	b2da      	uxtb	r2, r3
 8003f96:	4b18      	ldr	r3, [pc, #96]	; (8003ff8 <_SendPacket+0x1c0>)
 8003f98:	701a      	strb	r2, [r3, #0]
 8003f9a:	e004      	b.n	8003fa6 <_SendPacket+0x16e>
    goto SendDone;
 8003f9c:	bf00      	nop
 8003f9e:	e002      	b.n	8003fa6 <_SendPacket+0x16e>
      goto SendDone;
 8003fa0:	bf00      	nop
 8003fa2:	e000      	b.n	8003fa6 <_SendPacket+0x16e>
      goto SendDone;
 8003fa4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8003fa6:	4b14      	ldr	r3, [pc, #80]	; (8003ff8 <_SendPacket+0x1c0>)
 8003fa8:	7e1b      	ldrb	r3, [r3, #24]
 8003faa:	4619      	mov	r1, r3
 8003fac:	4a14      	ldr	r2, [pc, #80]	; (8004000 <_SendPacket+0x1c8>)
 8003fae:	460b      	mov	r3, r1
 8003fb0:	005b      	lsls	r3, r3, #1
 8003fb2:	440b      	add	r3, r1
 8003fb4:	00db      	lsls	r3, r3, #3
 8003fb6:	4413      	add	r3, r2
 8003fb8:	336c      	adds	r3, #108	; 0x6c
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	4b0e      	ldr	r3, [pc, #56]	; (8003ff8 <_SendPacket+0x1c0>)
 8003fbe:	7e1b      	ldrb	r3, [r3, #24]
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	490f      	ldr	r1, [pc, #60]	; (8004000 <_SendPacket+0x1c8>)
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	005b      	lsls	r3, r3, #1
 8003fc8:	4403      	add	r3, r0
 8003fca:	00db      	lsls	r3, r3, #3
 8003fcc:	440b      	add	r3, r1
 8003fce:	3370      	adds	r3, #112	; 0x70
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d00b      	beq.n	8003fee <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8003fd6:	4b08      	ldr	r3, [pc, #32]	; (8003ff8 <_SendPacket+0x1c0>)
 8003fd8:	789b      	ldrb	r3, [r3, #2]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d107      	bne.n	8003fee <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8003fde:	4b06      	ldr	r3, [pc, #24]	; (8003ff8 <_SendPacket+0x1c0>)
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8003fe4:	f7ff fe46 	bl	8003c74 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8003fe8:	4b03      	ldr	r3, [pc, #12]	; (8003ff8 <_SendPacket+0x1c0>)
 8003fea:	2200      	movs	r2, #0
 8003fec:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8003fee:	bf00      	nop
 8003ff0:	3728      	adds	r7, #40	; 0x28
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	20014310 	.word	0x20014310
 8003ffc:	e0001004 	.word	0xe0001004
 8004000:	20012e50 	.word	0x20012e50

08004004 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8004004:	b580      	push	{r7, lr}
 8004006:	b08a      	sub	sp, #40	; 0x28
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	460b      	mov	r3, r1
 800400e:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	3301      	adds	r3, #1
 800401a:	2b80      	cmp	r3, #128	; 0x80
 800401c:	d80a      	bhi.n	8004034 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	1c59      	adds	r1, r3, #1
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	6051      	str	r1, [r2, #4]
 8004028:	78fa      	ldrb	r2, [r7, #3]
 800402a:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	1c5a      	adds	r2, r3, #1
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	2b80      	cmp	r3, #128	; 0x80
 800403a:	d15a      	bne.n	80040f2 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	691a      	ldr	r2, [r3, #16]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	b2d2      	uxtb	r2, r2
 8004046:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	627b      	str	r3, [r7, #36]	; 0x24
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	623b      	str	r3, [r7, #32]
 800405c:	e00b      	b.n	8004076 <_StoreChar+0x72>
 800405e:	6a3b      	ldr	r3, [r7, #32]
 8004060:	b2da      	uxtb	r2, r3
 8004062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004064:	1c59      	adds	r1, r3, #1
 8004066:	6279      	str	r1, [r7, #36]	; 0x24
 8004068:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800406c:	b2d2      	uxtb	r2, r2
 800406e:	701a      	strb	r2, [r3, #0]
 8004070:	6a3b      	ldr	r3, [r7, #32]
 8004072:	09db      	lsrs	r3, r3, #7
 8004074:	623b      	str	r3, [r7, #32]
 8004076:	6a3b      	ldr	r3, [r7, #32]
 8004078:	2b7f      	cmp	r3, #127	; 0x7f
 800407a:	d8f0      	bhi.n	800405e <_StoreChar+0x5a>
 800407c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407e:	1c5a      	adds	r2, r3, #1
 8004080:	627a      	str	r2, [r7, #36]	; 0x24
 8004082:	6a3a      	ldr	r2, [r7, #32]
 8004084:	b2d2      	uxtb	r2, r2
 8004086:	701a      	strb	r2, [r3, #0]
 8004088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408a:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	61fb      	str	r3, [r7, #28]
 8004090:	2300      	movs	r3, #0
 8004092:	61bb      	str	r3, [r7, #24]
 8004094:	e00b      	b.n	80040ae <_StoreChar+0xaa>
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	b2da      	uxtb	r2, r3
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	1c59      	adds	r1, r3, #1
 800409e:	61f9      	str	r1, [r7, #28]
 80040a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80040a4:	b2d2      	uxtb	r2, r2
 80040a6:	701a      	strb	r2, [r3, #0]
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	09db      	lsrs	r3, r3, #7
 80040ac:	61bb      	str	r3, [r7, #24]
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	2b7f      	cmp	r3, #127	; 0x7f
 80040b2:	d8f0      	bhi.n	8004096 <_StoreChar+0x92>
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	1c5a      	adds	r2, r3, #1
 80040b8:	61fa      	str	r2, [r7, #28]
 80040ba:	69ba      	ldr	r2, [r7, #24]
 80040bc:	b2d2      	uxtb	r2, r2
 80040be:	701a      	strb	r2, [r3, #0]
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	221a      	movs	r2, #26
 80040ca:	6939      	ldr	r1, [r7, #16]
 80040cc:	4618      	mov	r0, r3
 80040ce:	f7ff feb3 	bl	8003e38 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7ff fdbf 	bl	8003c5a <_PreparePacket>
 80040dc:	4602      	mov	r2, r0
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	1c5a      	adds	r2, r3, #1
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	611a      	str	r2, [r3, #16]
  }
}
 80040f2:	bf00      	nop
 80040f4:	3728      	adds	r7, #40	; 0x28
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
	...

080040fc <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b08a      	sub	sp, #40	; 0x28
 8004100:	af00      	add	r7, sp, #0
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	607a      	str	r2, [r7, #4]
 8004108:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800410e:	2301      	movs	r3, #1
 8004110:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8004112:	2301      	movs	r3, #1
 8004114:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004116:	e007      	b.n	8004128 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8004118:	6a3a      	ldr	r2, [r7, #32]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004120:	623b      	str	r3, [r7, #32]
    Width++;
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	3301      	adds	r3, #1
 8004126:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004128:	6a3a      	ldr	r2, [r7, #32]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	429a      	cmp	r2, r3
 800412e:	d2f3      	bcs.n	8004118 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8004130:	683a      	ldr	r2, [r7, #0]
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	429a      	cmp	r2, r3
 8004136:	d901      	bls.n	800413c <_PrintUnsigned+0x40>
    Width = NumDigits;
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 800413c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800413e:	f003 0301 	and.w	r3, r3, #1
 8004142:	2b00      	cmp	r3, #0
 8004144:	d11f      	bne.n	8004186 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8004146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004148:	2b00      	cmp	r3, #0
 800414a:	d01c      	beq.n	8004186 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 800414c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800414e:	f003 0302 	and.w	r3, r3, #2
 8004152:	2b00      	cmp	r3, #0
 8004154:	d005      	beq.n	8004162 <_PrintUnsigned+0x66>
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d102      	bne.n	8004162 <_PrintUnsigned+0x66>
        c = '0';
 800415c:	2330      	movs	r3, #48	; 0x30
 800415e:	76fb      	strb	r3, [r7, #27]
 8004160:	e001      	b.n	8004166 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8004162:	2320      	movs	r3, #32
 8004164:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004166:	e007      	b.n	8004178 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8004168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800416a:	3b01      	subs	r3, #1
 800416c:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 800416e:	7efb      	ldrb	r3, [r7, #27]
 8004170:	4619      	mov	r1, r3
 8004172:	68f8      	ldr	r0, [r7, #12]
 8004174:	f7ff ff46 	bl	8004004 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800417a:	2b00      	cmp	r3, #0
 800417c:	d003      	beq.n	8004186 <_PrintUnsigned+0x8a>
 800417e:	69fa      	ldr	r2, [r7, #28]
 8004180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004182:	429a      	cmp	r2, r3
 8004184:	d3f0      	bcc.n	8004168 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d903      	bls.n	8004194 <_PrintUnsigned+0x98>
      NumDigits--;
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	3b01      	subs	r3, #1
 8004190:	603b      	str	r3, [r7, #0]
 8004192:	e009      	b.n	80041a8 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8004194:	68ba      	ldr	r2, [r7, #8]
 8004196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004198:	fbb2 f3f3 	udiv	r3, r2, r3
 800419c:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 800419e:	697a      	ldr	r2, [r7, #20]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d200      	bcs.n	80041a8 <_PrintUnsigned+0xac>
        break;
 80041a6:	e005      	b.n	80041b4 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 80041a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	fb02 f303 	mul.w	r3, r2, r3
 80041b0:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80041b2:	e7e8      	b.n	8004186 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 80041b4:	68ba      	ldr	r2, [r7, #8]
 80041b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041bc:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041c2:	fb02 f303 	mul.w	r3, r2, r3
 80041c6:	68ba      	ldr	r2, [r7, #8]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80041cc:	4a15      	ldr	r2, [pc, #84]	; (8004224 <_PrintUnsigned+0x128>)
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	4413      	add	r3, r2
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	4619      	mov	r1, r3
 80041d6:	68f8      	ldr	r0, [r7, #12]
 80041d8:	f7ff ff14 	bl	8004004 <_StoreChar>
    Digit /= Base;
 80041dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e4:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 80041e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d1e3      	bne.n	80041b4 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80041ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d011      	beq.n	800421a <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 80041f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00e      	beq.n	800421a <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80041fc:	e006      	b.n	800420c <_PrintUnsigned+0x110>
        FieldWidth--;
 80041fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004200:	3b01      	subs	r3, #1
 8004202:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8004204:	2120      	movs	r1, #32
 8004206:	68f8      	ldr	r0, [r7, #12]
 8004208:	f7ff fefc 	bl	8004004 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800420c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800420e:	2b00      	cmp	r3, #0
 8004210:	d003      	beq.n	800421a <_PrintUnsigned+0x11e>
 8004212:	69fa      	ldr	r2, [r7, #28]
 8004214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004216:	429a      	cmp	r2, r3
 8004218:	d3f1      	bcc.n	80041fe <_PrintUnsigned+0x102>
      }
    }
  }
}
 800421a:	bf00      	nop
 800421c:	3728      	adds	r7, #40	; 0x28
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	08005700 	.word	0x08005700

08004228 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004228:	b580      	push	{r7, lr}
 800422a:	b088      	sub	sp, #32
 800422c:	af02      	add	r7, sp, #8
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	607a      	str	r2, [r7, #4]
 8004234:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	2b00      	cmp	r3, #0
 800423a:	bfb8      	it	lt
 800423c:	425b      	neglt	r3, r3
 800423e:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8004240:	2301      	movs	r3, #1
 8004242:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004244:	e007      	b.n	8004256 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	693a      	ldr	r2, [r7, #16]
 800424a:	fb92 f3f3 	sdiv	r3, r2, r3
 800424e:	613b      	str	r3, [r7, #16]
    Width++;
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	3301      	adds	r3, #1
 8004254:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	693a      	ldr	r2, [r7, #16]
 800425a:	429a      	cmp	r2, r3
 800425c:	daf3      	bge.n	8004246 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 800425e:	683a      	ldr	r2, [r7, #0]
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	429a      	cmp	r2, r3
 8004264:	d901      	bls.n	800426a <_PrintInt+0x42>
    Width = NumDigits;
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800426a:	6a3b      	ldr	r3, [r7, #32]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d00a      	beq.n	8004286 <_PrintInt+0x5e>
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	2b00      	cmp	r3, #0
 8004274:	db04      	blt.n	8004280 <_PrintInt+0x58>
 8004276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004278:	f003 0304 	and.w	r3, r3, #4
 800427c:	2b00      	cmp	r3, #0
 800427e:	d002      	beq.n	8004286 <_PrintInt+0x5e>
    FieldWidth--;
 8004280:	6a3b      	ldr	r3, [r7, #32]
 8004282:	3b01      	subs	r3, #1
 8004284:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8004286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004288:	f003 0302 	and.w	r3, r3, #2
 800428c:	2b00      	cmp	r3, #0
 800428e:	d002      	beq.n	8004296 <_PrintInt+0x6e>
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d016      	beq.n	80042c4 <_PrintInt+0x9c>
 8004296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004298:	f003 0301 	and.w	r3, r3, #1
 800429c:	2b00      	cmp	r3, #0
 800429e:	d111      	bne.n	80042c4 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 80042a0:	6a3b      	ldr	r3, [r7, #32]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00e      	beq.n	80042c4 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80042a6:	e006      	b.n	80042b6 <_PrintInt+0x8e>
        FieldWidth--;
 80042a8:	6a3b      	ldr	r3, [r7, #32]
 80042aa:	3b01      	subs	r3, #1
 80042ac:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 80042ae:	2120      	movs	r1, #32
 80042b0:	68f8      	ldr	r0, [r7, #12]
 80042b2:	f7ff fea7 	bl	8004004 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80042b6:	6a3b      	ldr	r3, [r7, #32]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d003      	beq.n	80042c4 <_PrintInt+0x9c>
 80042bc:	697a      	ldr	r2, [r7, #20]
 80042be:	6a3b      	ldr	r3, [r7, #32]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d3f1      	bcc.n	80042a8 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	da07      	bge.n	80042da <_PrintInt+0xb2>
    v = -v;
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	425b      	negs	r3, r3
 80042ce:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 80042d0:	212d      	movs	r1, #45	; 0x2d
 80042d2:	68f8      	ldr	r0, [r7, #12]
 80042d4:	f7ff fe96 	bl	8004004 <_StoreChar>
 80042d8:	e008      	b.n	80042ec <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80042da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042dc:	f003 0304 	and.w	r3, r3, #4
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d003      	beq.n	80042ec <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80042e4:	212b      	movs	r1, #43	; 0x2b
 80042e6:	68f8      	ldr	r0, [r7, #12]
 80042e8:	f7ff fe8c 	bl	8004004 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80042ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d019      	beq.n	800432a <_PrintInt+0x102>
 80042f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f8:	f003 0301 	and.w	r3, r3, #1
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d114      	bne.n	800432a <_PrintInt+0x102>
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d111      	bne.n	800432a <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8004306:	6a3b      	ldr	r3, [r7, #32]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d00e      	beq.n	800432a <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800430c:	e006      	b.n	800431c <_PrintInt+0xf4>
        FieldWidth--;
 800430e:	6a3b      	ldr	r3, [r7, #32]
 8004310:	3b01      	subs	r3, #1
 8004312:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8004314:	2130      	movs	r1, #48	; 0x30
 8004316:	68f8      	ldr	r0, [r7, #12]
 8004318:	f7ff fe74 	bl	8004004 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800431c:	6a3b      	ldr	r3, [r7, #32]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d003      	beq.n	800432a <_PrintInt+0x102>
 8004322:	697a      	ldr	r2, [r7, #20]
 8004324:	6a3b      	ldr	r3, [r7, #32]
 8004326:	429a      	cmp	r2, r3
 8004328:	d3f1      	bcc.n	800430e <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 800432a:	68b9      	ldr	r1, [r7, #8]
 800432c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432e:	9301      	str	r3, [sp, #4]
 8004330:	6a3b      	ldr	r3, [r7, #32]
 8004332:	9300      	str	r3, [sp, #0]
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	68f8      	ldr	r0, [r7, #12]
 800433a:	f7ff fedf 	bl	80040fc <_PrintUnsigned>
}
 800433e:	bf00      	nop
 8004340:	3718      	adds	r7, #24
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
	...

08004348 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8004348:	b580      	push	{r7, lr}
 800434a:	b098      	sub	sp, #96	; 0x60
 800434c:	af02      	add	r7, sp, #8
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004354:	f3ef 8311 	mrs	r3, BASEPRI
 8004358:	f04f 0120 	mov.w	r1, #32
 800435c:	f381 8811 	msr	BASEPRI, r1
 8004360:	633b      	str	r3, [r7, #48]	; 0x30
 8004362:	48b7      	ldr	r0, [pc, #732]	; (8004640 <_VPrintTarget+0x2f8>)
 8004364:	f7ff fc79 	bl	8003c5a <_PreparePacket>
 8004368:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 800436a:	4bb5      	ldr	r3, [pc, #724]	; (8004640 <_VPrintTarget+0x2f8>)
 800436c:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 800436e:	2300      	movs	r3, #0
 8004370:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8004372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004374:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	3301      	adds	r3, #1
 800437a:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	3301      	adds	r3, #1
 800438c:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 800438e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004392:	2b00      	cmp	r3, #0
 8004394:	f000 8183 	beq.w	800469e <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8004398:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800439c:	2b25      	cmp	r3, #37	; 0x25
 800439e:	f040 8170 	bne.w	8004682 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 80043a2:	2300      	movs	r3, #0
 80043a4:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 80043a6:	2301      	movs	r3, #1
 80043a8:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 80043b2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80043b6:	3b23      	subs	r3, #35	; 0x23
 80043b8:	2b0d      	cmp	r3, #13
 80043ba:	d83f      	bhi.n	800443c <_VPrintTarget+0xf4>
 80043bc:	a201      	add	r2, pc, #4	; (adr r2, 80043c4 <_VPrintTarget+0x7c>)
 80043be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c2:	bf00      	nop
 80043c4:	0800442d 	.word	0x0800442d
 80043c8:	0800443d 	.word	0x0800443d
 80043cc:	0800443d 	.word	0x0800443d
 80043d0:	0800443d 	.word	0x0800443d
 80043d4:	0800443d 	.word	0x0800443d
 80043d8:	0800443d 	.word	0x0800443d
 80043dc:	0800443d 	.word	0x0800443d
 80043e0:	0800443d 	.word	0x0800443d
 80043e4:	0800441d 	.word	0x0800441d
 80043e8:	0800443d 	.word	0x0800443d
 80043ec:	080043fd 	.word	0x080043fd
 80043f0:	0800443d 	.word	0x0800443d
 80043f4:	0800443d 	.word	0x0800443d
 80043f8:	0800440d 	.word	0x0800440d
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80043fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043fe:	f043 0301 	orr.w	r3, r3, #1
 8004402:	64bb      	str	r3, [r7, #72]	; 0x48
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	3301      	adds	r3, #1
 8004408:	60fb      	str	r3, [r7, #12]
 800440a:	e01a      	b.n	8004442 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 800440c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800440e:	f043 0302 	orr.w	r3, r3, #2
 8004412:	64bb      	str	r3, [r7, #72]	; 0x48
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	3301      	adds	r3, #1
 8004418:	60fb      	str	r3, [r7, #12]
 800441a:	e012      	b.n	8004442 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 800441c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800441e:	f043 0304 	orr.w	r3, r3, #4
 8004422:	64bb      	str	r3, [r7, #72]	; 0x48
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	3301      	adds	r3, #1
 8004428:	60fb      	str	r3, [r7, #12]
 800442a:	e00a      	b.n	8004442 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 800442c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800442e:	f043 0308 	orr.w	r3, r3, #8
 8004432:	64bb      	str	r3, [r7, #72]	; 0x48
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	3301      	adds	r3, #1
 8004438:	60fb      	str	r3, [r7, #12]
 800443a:	e002      	b.n	8004442 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 800443c:	2300      	movs	r3, #0
 800443e:	653b      	str	r3, [r7, #80]	; 0x50
 8004440:	bf00      	nop
        }
      } while (v);
 8004442:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004444:	2b00      	cmp	r3, #0
 8004446:	d1b0      	bne.n	80043aa <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8004448:	2300      	movs	r3, #0
 800444a:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8004454:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004458:	2b2f      	cmp	r3, #47	; 0x2f
 800445a:	d912      	bls.n	8004482 <_VPrintTarget+0x13a>
 800445c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004460:	2b39      	cmp	r3, #57	; 0x39
 8004462:	d80e      	bhi.n	8004482 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	3301      	adds	r3, #1
 8004468:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 800446a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800446c:	4613      	mov	r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	4413      	add	r3, r2
 8004472:	005b      	lsls	r3, r3, #1
 8004474:	461a      	mov	r2, r3
 8004476:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800447a:	4413      	add	r3, r2
 800447c:	3b30      	subs	r3, #48	; 0x30
 800447e:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8004480:	e7e4      	b.n	800444c <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8004482:	2300      	movs	r3, #0
 8004484:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 800448e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004492:	2b2e      	cmp	r3, #46	; 0x2e
 8004494:	d11d      	bne.n	80044d2 <_VPrintTarget+0x18a>
        sFormat++;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	3301      	adds	r3, #1
 800449a:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 80044a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80044a8:	2b2f      	cmp	r3, #47	; 0x2f
 80044aa:	d912      	bls.n	80044d2 <_VPrintTarget+0x18a>
 80044ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80044b0:	2b39      	cmp	r3, #57	; 0x39
 80044b2:	d80e      	bhi.n	80044d2 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	3301      	adds	r3, #1
 80044b8:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 80044ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044bc:	4613      	mov	r3, r2
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	4413      	add	r3, r2
 80044c2:	005b      	lsls	r3, r3, #1
 80044c4:	461a      	mov	r2, r3
 80044c6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80044ca:	4413      	add	r3, r2
 80044cc:	3b30      	subs	r3, #48	; 0x30
 80044ce:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 80044d0:	e7e4      	b.n	800449c <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 80044da:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80044de:	2b6c      	cmp	r3, #108	; 0x6c
 80044e0:	d003      	beq.n	80044ea <_VPrintTarget+0x1a2>
 80044e2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80044e6:	2b68      	cmp	r3, #104	; 0x68
 80044e8:	d107      	bne.n	80044fa <_VPrintTarget+0x1b2>
          c = *sFormat;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	3301      	adds	r3, #1
 80044f6:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80044f8:	e7ef      	b.n	80044da <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80044fa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80044fe:	2b25      	cmp	r3, #37	; 0x25
 8004500:	f000 80b3 	beq.w	800466a <_VPrintTarget+0x322>
 8004504:	2b25      	cmp	r3, #37	; 0x25
 8004506:	f2c0 80b7 	blt.w	8004678 <_VPrintTarget+0x330>
 800450a:	2b78      	cmp	r3, #120	; 0x78
 800450c:	f300 80b4 	bgt.w	8004678 <_VPrintTarget+0x330>
 8004510:	2b58      	cmp	r3, #88	; 0x58
 8004512:	f2c0 80b1 	blt.w	8004678 <_VPrintTarget+0x330>
 8004516:	3b58      	subs	r3, #88	; 0x58
 8004518:	2b20      	cmp	r3, #32
 800451a:	f200 80ad 	bhi.w	8004678 <_VPrintTarget+0x330>
 800451e:	a201      	add	r2, pc, #4	; (adr r2, 8004524 <_VPrintTarget+0x1dc>)
 8004520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004524:	0800461b 	.word	0x0800461b
 8004528:	08004679 	.word	0x08004679
 800452c:	08004679 	.word	0x08004679
 8004530:	08004679 	.word	0x08004679
 8004534:	08004679 	.word	0x08004679
 8004538:	08004679 	.word	0x08004679
 800453c:	08004679 	.word	0x08004679
 8004540:	08004679 	.word	0x08004679
 8004544:	08004679 	.word	0x08004679
 8004548:	08004679 	.word	0x08004679
 800454c:	08004679 	.word	0x08004679
 8004550:	080045a9 	.word	0x080045a9
 8004554:	080045cf 	.word	0x080045cf
 8004558:	08004679 	.word	0x08004679
 800455c:	08004679 	.word	0x08004679
 8004560:	08004679 	.word	0x08004679
 8004564:	08004679 	.word	0x08004679
 8004568:	08004679 	.word	0x08004679
 800456c:	08004679 	.word	0x08004679
 8004570:	08004679 	.word	0x08004679
 8004574:	08004679 	.word	0x08004679
 8004578:	08004679 	.word	0x08004679
 800457c:	08004679 	.word	0x08004679
 8004580:	08004679 	.word	0x08004679
 8004584:	08004645 	.word	0x08004645
 8004588:	08004679 	.word	0x08004679
 800458c:	08004679 	.word	0x08004679
 8004590:	08004679 	.word	0x08004679
 8004594:	08004679 	.word	0x08004679
 8004598:	080045f5 	.word	0x080045f5
 800459c:	08004679 	.word	0x08004679
 80045a0:	08004679 	.word	0x08004679
 80045a4:	0800461b 	.word	0x0800461b
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	1d19      	adds	r1, r3, #4
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	6011      	str	r1, [r2, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 80045b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 80045bc:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80045c0:	f107 0314 	add.w	r3, r7, #20
 80045c4:	4611      	mov	r1, r2
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7ff fd1c 	bl	8004004 <_StoreChar>
        break;
 80045cc:	e055      	b.n	800467a <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	1d19      	adds	r1, r3, #4
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	6011      	str	r1, [r2, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80045dc:	f107 0014 	add.w	r0, r7, #20
 80045e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045e2:	9301      	str	r3, [sp, #4]
 80045e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045e6:	9300      	str	r3, [sp, #0]
 80045e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045ea:	220a      	movs	r2, #10
 80045ec:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80045ee:	f7ff fe1b 	bl	8004228 <_PrintInt>
        break;
 80045f2:	e042      	b.n	800467a <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	1d19      	adds	r1, r3, #4
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	6011      	str	r1, [r2, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004602:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004604:	f107 0014 	add.w	r0, r7, #20
 8004608:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800460a:	9301      	str	r3, [sp, #4]
 800460c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800460e:	9300      	str	r3, [sp, #0]
 8004610:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004612:	220a      	movs	r2, #10
 8004614:	f7ff fd72 	bl	80040fc <_PrintUnsigned>
        break;
 8004618:	e02f      	b.n	800467a <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	1d19      	adds	r1, r3, #4
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	6011      	str	r1, [r2, #0]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8004628:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800462a:	f107 0014 	add.w	r0, r7, #20
 800462e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004630:	9301      	str	r3, [sp, #4]
 8004632:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004634:	9300      	str	r3, [sp, #0]
 8004636:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004638:	2210      	movs	r2, #16
 800463a:	f7ff fd5f 	bl	80040fc <_PrintUnsigned>
        break;
 800463e:	e01c      	b.n	800467a <_VPrintTarget+0x332>
 8004640:	20014340 	.word	0x20014340
      case 'p':
        v = va_arg(*pParamList, int);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	1d19      	adds	r1, r3, #4
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	6011      	str	r1, [r2, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8004652:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004654:	f107 0014 	add.w	r0, r7, #20
 8004658:	2300      	movs	r3, #0
 800465a:	9301      	str	r3, [sp, #4]
 800465c:	2308      	movs	r3, #8
 800465e:	9300      	str	r3, [sp, #0]
 8004660:	2308      	movs	r3, #8
 8004662:	2210      	movs	r2, #16
 8004664:	f7ff fd4a 	bl	80040fc <_PrintUnsigned>
        break;
 8004668:	e007      	b.n	800467a <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 800466a:	f107 0314 	add.w	r3, r7, #20
 800466e:	2125      	movs	r1, #37	; 0x25
 8004670:	4618      	mov	r0, r3
 8004672:	f7ff fcc7 	bl	8004004 <_StoreChar>
        break;
 8004676:	e000      	b.n	800467a <_VPrintTarget+0x332>
      default:
        break;
 8004678:	bf00      	nop
      }
      sFormat++;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	3301      	adds	r3, #1
 800467e:	60fb      	str	r3, [r7, #12]
 8004680:	e007      	b.n	8004692 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8004682:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004686:	f107 0314 	add.w	r3, r7, #20
 800468a:	4611      	mov	r1, r2
 800468c:	4618      	mov	r0, r3
 800468e:	f7ff fcb9 	bl	8004004 <_StoreChar>
    }
  } while (*sFormat);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	2b00      	cmp	r3, #0
 8004698:	f47f ae72 	bne.w	8004380 <_VPrintTarget+0x38>
 800469c:	e000      	b.n	80046a0 <_VPrintTarget+0x358>
      break;
 800469e:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 80046a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d041      	beq.n	800472a <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 80046a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	b2d2      	uxtb	r2, r2
 80046ac:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	643b      	str	r3, [r7, #64]	; 0x40
 80046b2:	6a3b      	ldr	r3, [r7, #32]
 80046b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046b6:	e00b      	b.n	80046d0 <_VPrintTarget+0x388>
 80046b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046ba:	b2da      	uxtb	r2, r3
 80046bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046be:	1c59      	adds	r1, r3, #1
 80046c0:	6439      	str	r1, [r7, #64]	; 0x40
 80046c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046c6:	b2d2      	uxtb	r2, r2
 80046c8:	701a      	strb	r2, [r3, #0]
 80046ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046cc:	09db      	lsrs	r3, r3, #7
 80046ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046d2:	2b7f      	cmp	r3, #127	; 0x7f
 80046d4:	d8f0      	bhi.n	80046b8 <_VPrintTarget+0x370>
 80046d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046d8:	1c5a      	adds	r2, r3, #1
 80046da:	643a      	str	r2, [r7, #64]	; 0x40
 80046dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80046de:	b2d2      	uxtb	r2, r2
 80046e0:	701a      	strb	r2, [r3, #0]
 80046e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046e4:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80046ea:	2300      	movs	r3, #0
 80046ec:	637b      	str	r3, [r7, #52]	; 0x34
 80046ee:	e00b      	b.n	8004708 <_VPrintTarget+0x3c0>
 80046f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046f2:	b2da      	uxtb	r2, r3
 80046f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046f6:	1c59      	adds	r1, r3, #1
 80046f8:	63b9      	str	r1, [r7, #56]	; 0x38
 80046fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046fe:	b2d2      	uxtb	r2, r2
 8004700:	701a      	strb	r2, [r3, #0]
 8004702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004704:	09db      	lsrs	r3, r3, #7
 8004706:	637b      	str	r3, [r7, #52]	; 0x34
 8004708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800470a:	2b7f      	cmp	r3, #127	; 0x7f
 800470c:	d8f0      	bhi.n	80046f0 <_VPrintTarget+0x3a8>
 800470e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004710:	1c5a      	adds	r2, r3, #1
 8004712:	63ba      	str	r2, [r7, #56]	; 0x38
 8004714:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004716:	b2d2      	uxtb	r2, r2
 8004718:	701a      	strb	r2, [r3, #0]
 800471a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800471c:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	69b9      	ldr	r1, [r7, #24]
 8004722:	221a      	movs	r2, #26
 8004724:	4618      	mov	r0, r3
 8004726:	f7ff fb87 	bl	8003e38 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 800472a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800472c:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8004730:	bf00      	nop
 8004732:	3758      	adds	r7, #88	; 0x58
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004738:	b580      	push	{r7, lr}
 800473a:	b086      	sub	sp, #24
 800473c:	af02      	add	r7, sp, #8
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	607a      	str	r2, [r7, #4]
 8004744:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004746:	2300      	movs	r3, #0
 8004748:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800474c:	4917      	ldr	r1, [pc, #92]	; (80047ac <SEGGER_SYSVIEW_Init+0x74>)
 800474e:	4818      	ldr	r0, [pc, #96]	; (80047b0 <SEGGER_SYSVIEW_Init+0x78>)
 8004750:	f7ff f942 	bl	80039d8 <SEGGER_RTT_AllocUpBuffer>
 8004754:	4603      	mov	r3, r0
 8004756:	b2da      	uxtb	r2, r3
 8004758:	4b16      	ldr	r3, [pc, #88]	; (80047b4 <SEGGER_SYSVIEW_Init+0x7c>)
 800475a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800475c:	4b15      	ldr	r3, [pc, #84]	; (80047b4 <SEGGER_SYSVIEW_Init+0x7c>)
 800475e:	785a      	ldrb	r2, [r3, #1]
 8004760:	4b14      	ldr	r3, [pc, #80]	; (80047b4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004762:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004764:	4b13      	ldr	r3, [pc, #76]	; (80047b4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004766:	7e1b      	ldrb	r3, [r3, #24]
 8004768:	4618      	mov	r0, r3
 800476a:	2300      	movs	r3, #0
 800476c:	9300      	str	r3, [sp, #0]
 800476e:	2308      	movs	r3, #8
 8004770:	4a11      	ldr	r2, [pc, #68]	; (80047b8 <SEGGER_SYSVIEW_Init+0x80>)
 8004772:	490f      	ldr	r1, [pc, #60]	; (80047b0 <SEGGER_SYSVIEW_Init+0x78>)
 8004774:	f7ff f9b4 	bl	8003ae0 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004778:	4b0e      	ldr	r3, [pc, #56]	; (80047b4 <SEGGER_SYSVIEW_Init+0x7c>)
 800477a:	2200      	movs	r2, #0
 800477c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800477e:	4b0f      	ldr	r3, [pc, #60]	; (80047bc <SEGGER_SYSVIEW_Init+0x84>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a0c      	ldr	r2, [pc, #48]	; (80047b4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004784:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004786:	4a0b      	ldr	r2, [pc, #44]	; (80047b4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800478c:	4a09      	ldr	r2, [pc, #36]	; (80047b4 <SEGGER_SYSVIEW_Init+0x7c>)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004792:	4a08      	ldr	r2, [pc, #32]	; (80047b4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004798:	4a06      	ldr	r2, [pc, #24]	; (80047b4 <SEGGER_SYSVIEW_Init+0x7c>)
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800479e:	4b05      	ldr	r3, [pc, #20]	; (80047b4 <SEGGER_SYSVIEW_Init+0x7c>)
 80047a0:	2200      	movs	r2, #0
 80047a2:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80047a4:	bf00      	nop
 80047a6:	3710      	adds	r7, #16
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	20013308 	.word	0x20013308
 80047b0:	080056cc 	.word	0x080056cc
 80047b4:	20014310 	.word	0x20014310
 80047b8:	20014308 	.word	0x20014308
 80047bc:	e0001004 	.word	0xe0001004

080047c0 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80047c8:	4a04      	ldr	r2, [pc, #16]	; (80047dc <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6113      	str	r3, [r2, #16]
}
 80047ce:	bf00      	nop
 80047d0:	370c      	adds	r7, #12
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	20014310 	.word	0x20014310

080047e0 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80047e8:	f3ef 8311 	mrs	r3, BASEPRI
 80047ec:	f04f 0120 	mov.w	r1, #32
 80047f0:	f381 8811 	msr	BASEPRI, r1
 80047f4:	60fb      	str	r3, [r7, #12]
 80047f6:	4808      	ldr	r0, [pc, #32]	; (8004818 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80047f8:	f7ff fa2f 	bl	8003c5a <_PreparePacket>
 80047fc:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	68b9      	ldr	r1, [r7, #8]
 8004802:	68b8      	ldr	r0, [r7, #8]
 8004804:	f7ff fb18 	bl	8003e38 <_SendPacket>
  RECORD_END();
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f383 8811 	msr	BASEPRI, r3
}
 800480e:	bf00      	nop
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	20014340 	.word	0x20014340

0800481c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800481c:	b580      	push	{r7, lr}
 800481e:	b088      	sub	sp, #32
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004826:	f3ef 8311 	mrs	r3, BASEPRI
 800482a:	f04f 0120 	mov.w	r1, #32
 800482e:	f381 8811 	msr	BASEPRI, r1
 8004832:	617b      	str	r3, [r7, #20]
 8004834:	4816      	ldr	r0, [pc, #88]	; (8004890 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004836:	f7ff fa10 	bl	8003c5a <_PreparePacket>
 800483a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	61fb      	str	r3, [r7, #28]
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	61bb      	str	r3, [r7, #24]
 8004848:	e00b      	b.n	8004862 <SEGGER_SYSVIEW_RecordU32+0x46>
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	b2da      	uxtb	r2, r3
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	1c59      	adds	r1, r3, #1
 8004852:	61f9      	str	r1, [r7, #28]
 8004854:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004858:	b2d2      	uxtb	r2, r2
 800485a:	701a      	strb	r2, [r3, #0]
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	09db      	lsrs	r3, r3, #7
 8004860:	61bb      	str	r3, [r7, #24]
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	2b7f      	cmp	r3, #127	; 0x7f
 8004866:	d8f0      	bhi.n	800484a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	1c5a      	adds	r2, r3, #1
 800486c:	61fa      	str	r2, [r7, #28]
 800486e:	69ba      	ldr	r2, [r7, #24]
 8004870:	b2d2      	uxtb	r2, r2
 8004872:	701a      	strb	r2, [r3, #0]
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	68f9      	ldr	r1, [r7, #12]
 800487c:	6938      	ldr	r0, [r7, #16]
 800487e:	f7ff fadb 	bl	8003e38 <_SendPacket>
  RECORD_END();
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	f383 8811 	msr	BASEPRI, r3
}
 8004888:	bf00      	nop
 800488a:	3720      	adds	r7, #32
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}
 8004890:	20014340 	.word	0x20014340

08004894 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004894:	b580      	push	{r7, lr}
 8004896:	b08c      	sub	sp, #48	; 0x30
 8004898:	af00      	add	r7, sp, #0
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80048a0:	f3ef 8311 	mrs	r3, BASEPRI
 80048a4:	f04f 0120 	mov.w	r1, #32
 80048a8:	f381 8811 	msr	BASEPRI, r1
 80048ac:	61fb      	str	r3, [r7, #28]
 80048ae:	4825      	ldr	r0, [pc, #148]	; (8004944 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80048b0:	f7ff f9d3 	bl	8003c5a <_PreparePacket>
 80048b4:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80048c2:	e00b      	b.n	80048dc <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80048c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c6:	b2da      	uxtb	r2, r3
 80048c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ca:	1c59      	adds	r1, r3, #1
 80048cc:	62f9      	str	r1, [r7, #44]	; 0x2c
 80048ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80048d2:	b2d2      	uxtb	r2, r2
 80048d4:	701a      	strb	r2, [r3, #0]
 80048d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d8:	09db      	lsrs	r3, r3, #7
 80048da:	62bb      	str	r3, [r7, #40]	; 0x28
 80048dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048de:	2b7f      	cmp	r3, #127	; 0x7f
 80048e0:	d8f0      	bhi.n	80048c4 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80048e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e4:	1c5a      	adds	r2, r3, #1
 80048e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048ea:	b2d2      	uxtb	r2, r2
 80048ec:	701a      	strb	r2, [r3, #0]
 80048ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	627b      	str	r3, [r7, #36]	; 0x24
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	623b      	str	r3, [r7, #32]
 80048fa:	e00b      	b.n	8004914 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80048fc:	6a3b      	ldr	r3, [r7, #32]
 80048fe:	b2da      	uxtb	r2, r3
 8004900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004902:	1c59      	adds	r1, r3, #1
 8004904:	6279      	str	r1, [r7, #36]	; 0x24
 8004906:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800490a:	b2d2      	uxtb	r2, r2
 800490c:	701a      	strb	r2, [r3, #0]
 800490e:	6a3b      	ldr	r3, [r7, #32]
 8004910:	09db      	lsrs	r3, r3, #7
 8004912:	623b      	str	r3, [r7, #32]
 8004914:	6a3b      	ldr	r3, [r7, #32]
 8004916:	2b7f      	cmp	r3, #127	; 0x7f
 8004918:	d8f0      	bhi.n	80048fc <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800491a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491c:	1c5a      	adds	r2, r3, #1
 800491e:	627a      	str	r2, [r7, #36]	; 0x24
 8004920:	6a3a      	ldr	r2, [r7, #32]
 8004922:	b2d2      	uxtb	r2, r2
 8004924:	701a      	strb	r2, [r3, #0]
 8004926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004928:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	6979      	ldr	r1, [r7, #20]
 800492e:	69b8      	ldr	r0, [r7, #24]
 8004930:	f7ff fa82 	bl	8003e38 <_SendPacket>
  RECORD_END();
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	f383 8811 	msr	BASEPRI, r3
}
 800493a:	bf00      	nop
 800493c:	3730      	adds	r7, #48	; 0x30
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	20014340 	.word	0x20014340

08004948 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004948:	b580      	push	{r7, lr}
 800494a:	b08c      	sub	sp, #48	; 0x30
 800494c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800494e:	4b58      	ldr	r3, [pc, #352]	; (8004ab0 <SEGGER_SYSVIEW_Start+0x168>)
 8004950:	2201      	movs	r2, #1
 8004952:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004954:	f3ef 8311 	mrs	r3, BASEPRI
 8004958:	f04f 0120 	mov.w	r1, #32
 800495c:	f381 8811 	msr	BASEPRI, r1
 8004960:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004962:	4b53      	ldr	r3, [pc, #332]	; (8004ab0 <SEGGER_SYSVIEW_Start+0x168>)
 8004964:	785b      	ldrb	r3, [r3, #1]
 8004966:	220a      	movs	r2, #10
 8004968:	4952      	ldr	r1, [pc, #328]	; (8004ab4 <SEGGER_SYSVIEW_Start+0x16c>)
 800496a:	4618      	mov	r0, r3
 800496c:	f7fb fc58 	bl	8000220 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004976:	200a      	movs	r0, #10
 8004978:	f7ff ff32 	bl	80047e0 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800497c:	f3ef 8311 	mrs	r3, BASEPRI
 8004980:	f04f 0120 	mov.w	r1, #32
 8004984:	f381 8811 	msr	BASEPRI, r1
 8004988:	60bb      	str	r3, [r7, #8]
 800498a:	484b      	ldr	r0, [pc, #300]	; (8004ab8 <SEGGER_SYSVIEW_Start+0x170>)
 800498c:	f7ff f965 	bl	8003c5a <_PreparePacket>
 8004990:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	62fb      	str	r3, [r7, #44]	; 0x2c
 800499a:	4b45      	ldr	r3, [pc, #276]	; (8004ab0 <SEGGER_SYSVIEW_Start+0x168>)
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	62bb      	str	r3, [r7, #40]	; 0x28
 80049a0:	e00b      	b.n	80049ba <SEGGER_SYSVIEW_Start+0x72>
 80049a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a4:	b2da      	uxtb	r2, r3
 80049a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049a8:	1c59      	adds	r1, r3, #1
 80049aa:	62f9      	str	r1, [r7, #44]	; 0x2c
 80049ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049b0:	b2d2      	uxtb	r2, r2
 80049b2:	701a      	strb	r2, [r3, #0]
 80049b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b6:	09db      	lsrs	r3, r3, #7
 80049b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80049ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049bc:	2b7f      	cmp	r3, #127	; 0x7f
 80049be:	d8f0      	bhi.n	80049a2 <SEGGER_SYSVIEW_Start+0x5a>
 80049c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c2:	1c5a      	adds	r2, r3, #1
 80049c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049c8:	b2d2      	uxtb	r2, r2
 80049ca:	701a      	strb	r2, [r3, #0]
 80049cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ce:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	627b      	str	r3, [r7, #36]	; 0x24
 80049d4:	4b36      	ldr	r3, [pc, #216]	; (8004ab0 <SEGGER_SYSVIEW_Start+0x168>)
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	623b      	str	r3, [r7, #32]
 80049da:	e00b      	b.n	80049f4 <SEGGER_SYSVIEW_Start+0xac>
 80049dc:	6a3b      	ldr	r3, [r7, #32]
 80049de:	b2da      	uxtb	r2, r3
 80049e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e2:	1c59      	adds	r1, r3, #1
 80049e4:	6279      	str	r1, [r7, #36]	; 0x24
 80049e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049ea:	b2d2      	uxtb	r2, r2
 80049ec:	701a      	strb	r2, [r3, #0]
 80049ee:	6a3b      	ldr	r3, [r7, #32]
 80049f0:	09db      	lsrs	r3, r3, #7
 80049f2:	623b      	str	r3, [r7, #32]
 80049f4:	6a3b      	ldr	r3, [r7, #32]
 80049f6:	2b7f      	cmp	r3, #127	; 0x7f
 80049f8:	d8f0      	bhi.n	80049dc <SEGGER_SYSVIEW_Start+0x94>
 80049fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fc:	1c5a      	adds	r2, r3, #1
 80049fe:	627a      	str	r2, [r7, #36]	; 0x24
 8004a00:	6a3a      	ldr	r2, [r7, #32]
 8004a02:	b2d2      	uxtb	r2, r2
 8004a04:	701a      	strb	r2, [r3, #0]
 8004a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a08:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	61fb      	str	r3, [r7, #28]
 8004a0e:	4b28      	ldr	r3, [pc, #160]	; (8004ab0 <SEGGER_SYSVIEW_Start+0x168>)
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	61bb      	str	r3, [r7, #24]
 8004a14:	e00b      	b.n	8004a2e <SEGGER_SYSVIEW_Start+0xe6>
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	b2da      	uxtb	r2, r3
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	1c59      	adds	r1, r3, #1
 8004a1e:	61f9      	str	r1, [r7, #28]
 8004a20:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a24:	b2d2      	uxtb	r2, r2
 8004a26:	701a      	strb	r2, [r3, #0]
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	09db      	lsrs	r3, r3, #7
 8004a2c:	61bb      	str	r3, [r7, #24]
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	2b7f      	cmp	r3, #127	; 0x7f
 8004a32:	d8f0      	bhi.n	8004a16 <SEGGER_SYSVIEW_Start+0xce>
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	1c5a      	adds	r2, r3, #1
 8004a38:	61fa      	str	r2, [r7, #28]
 8004a3a:	69ba      	ldr	r2, [r7, #24]
 8004a3c:	b2d2      	uxtb	r2, r2
 8004a3e:	701a      	strb	r2, [r3, #0]
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	617b      	str	r3, [r7, #20]
 8004a48:	2300      	movs	r3, #0
 8004a4a:	613b      	str	r3, [r7, #16]
 8004a4c:	e00b      	b.n	8004a66 <SEGGER_SYSVIEW_Start+0x11e>
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	b2da      	uxtb	r2, r3
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	1c59      	adds	r1, r3, #1
 8004a56:	6179      	str	r1, [r7, #20]
 8004a58:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a5c:	b2d2      	uxtb	r2, r2
 8004a5e:	701a      	strb	r2, [r3, #0]
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	09db      	lsrs	r3, r3, #7
 8004a64:	613b      	str	r3, [r7, #16]
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	2b7f      	cmp	r3, #127	; 0x7f
 8004a6a:	d8f0      	bhi.n	8004a4e <SEGGER_SYSVIEW_Start+0x106>
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	1c5a      	adds	r2, r3, #1
 8004a70:	617a      	str	r2, [r7, #20]
 8004a72:	693a      	ldr	r2, [r7, #16]
 8004a74:	b2d2      	uxtb	r2, r2
 8004a76:	701a      	strb	r2, [r3, #0]
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004a7c:	2218      	movs	r2, #24
 8004a7e:	6839      	ldr	r1, [r7, #0]
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f7ff f9d9 	bl	8003e38 <_SendPacket>
      RECORD_END();
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004a8c:	4b08      	ldr	r3, [pc, #32]	; (8004ab0 <SEGGER_SYSVIEW_Start+0x168>)
 8004a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d002      	beq.n	8004a9a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004a94:	4b06      	ldr	r3, [pc, #24]	; (8004ab0 <SEGGER_SYSVIEW_Start+0x168>)
 8004a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a98:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004a9a:	f000 f9eb 	bl	8004e74 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004a9e:	f000 f9b1 	bl	8004e04 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004aa2:	f000 fc73 	bl	800538c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8004aa6:	bf00      	nop
 8004aa8:	3730      	adds	r7, #48	; 0x30
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	20014310 	.word	0x20014310
 8004ab4:	080056f4 	.word	0x080056f4
 8004ab8:	20014340 	.word	0x20014340

08004abc <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004ac2:	f3ef 8311 	mrs	r3, BASEPRI
 8004ac6:	f04f 0120 	mov.w	r1, #32
 8004aca:	f381 8811 	msr	BASEPRI, r1
 8004ace:	607b      	str	r3, [r7, #4]
 8004ad0:	480b      	ldr	r0, [pc, #44]	; (8004b00 <SEGGER_SYSVIEW_Stop+0x44>)
 8004ad2:	f7ff f8c2 	bl	8003c5a <_PreparePacket>
 8004ad6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004ad8:	4b0a      	ldr	r3, [pc, #40]	; (8004b04 <SEGGER_SYSVIEW_Stop+0x48>)
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d007      	beq.n	8004af0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004ae0:	220b      	movs	r2, #11
 8004ae2:	6839      	ldr	r1, [r7, #0]
 8004ae4:	6838      	ldr	r0, [r7, #0]
 8004ae6:	f7ff f9a7 	bl	8003e38 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8004aea:	4b06      	ldr	r3, [pc, #24]	; (8004b04 <SEGGER_SYSVIEW_Stop+0x48>)
 8004aec:	2200      	movs	r2, #0
 8004aee:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f383 8811 	msr	BASEPRI, r3
}
 8004af6:	bf00      	nop
 8004af8:	3708      	adds	r7, #8
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	20014340 	.word	0x20014340
 8004b04:	20014310 	.word	0x20014310

08004b08 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b08c      	sub	sp, #48	; 0x30
 8004b0c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004b0e:	f3ef 8311 	mrs	r3, BASEPRI
 8004b12:	f04f 0120 	mov.w	r1, #32
 8004b16:	f381 8811 	msr	BASEPRI, r1
 8004b1a:	60fb      	str	r3, [r7, #12]
 8004b1c:	4845      	ldr	r0, [pc, #276]	; (8004c34 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8004b1e:	f7ff f89c 	bl	8003c5a <_PreparePacket>
 8004b22:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b2c:	4b42      	ldr	r3, [pc, #264]	; (8004c38 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b32:	e00b      	b.n	8004b4c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b36:	b2da      	uxtb	r2, r3
 8004b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b3a:	1c59      	adds	r1, r3, #1
 8004b3c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004b3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b42:	b2d2      	uxtb	r2, r2
 8004b44:	701a      	strb	r2, [r3, #0]
 8004b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b48:	09db      	lsrs	r3, r3, #7
 8004b4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b4e:	2b7f      	cmp	r3, #127	; 0x7f
 8004b50:	d8f0      	bhi.n	8004b34 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b54:	1c5a      	adds	r2, r3, #1
 8004b56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b5a:	b2d2      	uxtb	r2, r2
 8004b5c:	701a      	strb	r2, [r3, #0]
 8004b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b60:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	627b      	str	r3, [r7, #36]	; 0x24
 8004b66:	4b34      	ldr	r3, [pc, #208]	; (8004c38 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	623b      	str	r3, [r7, #32]
 8004b6c:	e00b      	b.n	8004b86 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8004b6e:	6a3b      	ldr	r3, [r7, #32]
 8004b70:	b2da      	uxtb	r2, r3
 8004b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b74:	1c59      	adds	r1, r3, #1
 8004b76:	6279      	str	r1, [r7, #36]	; 0x24
 8004b78:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b7c:	b2d2      	uxtb	r2, r2
 8004b7e:	701a      	strb	r2, [r3, #0]
 8004b80:	6a3b      	ldr	r3, [r7, #32]
 8004b82:	09db      	lsrs	r3, r3, #7
 8004b84:	623b      	str	r3, [r7, #32]
 8004b86:	6a3b      	ldr	r3, [r7, #32]
 8004b88:	2b7f      	cmp	r3, #127	; 0x7f
 8004b8a:	d8f0      	bhi.n	8004b6e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8e:	1c5a      	adds	r2, r3, #1
 8004b90:	627a      	str	r2, [r7, #36]	; 0x24
 8004b92:	6a3a      	ldr	r2, [r7, #32]
 8004b94:	b2d2      	uxtb	r2, r2
 8004b96:	701a      	strb	r2, [r3, #0]
 8004b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	61fb      	str	r3, [r7, #28]
 8004ba0:	4b25      	ldr	r3, [pc, #148]	; (8004c38 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	61bb      	str	r3, [r7, #24]
 8004ba6:	e00b      	b.n	8004bc0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	b2da      	uxtb	r2, r3
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	1c59      	adds	r1, r3, #1
 8004bb0:	61f9      	str	r1, [r7, #28]
 8004bb2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004bb6:	b2d2      	uxtb	r2, r2
 8004bb8:	701a      	strb	r2, [r3, #0]
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	09db      	lsrs	r3, r3, #7
 8004bbe:	61bb      	str	r3, [r7, #24]
 8004bc0:	69bb      	ldr	r3, [r7, #24]
 8004bc2:	2b7f      	cmp	r3, #127	; 0x7f
 8004bc4:	d8f0      	bhi.n	8004ba8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	1c5a      	adds	r2, r3, #1
 8004bca:	61fa      	str	r2, [r7, #28]
 8004bcc:	69ba      	ldr	r2, [r7, #24]
 8004bce:	b2d2      	uxtb	r2, r2
 8004bd0:	701a      	strb	r2, [r3, #0]
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	617b      	str	r3, [r7, #20]
 8004bda:	2300      	movs	r3, #0
 8004bdc:	613b      	str	r3, [r7, #16]
 8004bde:	e00b      	b.n	8004bf8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	b2da      	uxtb	r2, r3
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	1c59      	adds	r1, r3, #1
 8004be8:	6179      	str	r1, [r7, #20]
 8004bea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004bee:	b2d2      	uxtb	r2, r2
 8004bf0:	701a      	strb	r2, [r3, #0]
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	09db      	lsrs	r3, r3, #7
 8004bf6:	613b      	str	r3, [r7, #16]
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	2b7f      	cmp	r3, #127	; 0x7f
 8004bfc:	d8f0      	bhi.n	8004be0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	1c5a      	adds	r2, r3, #1
 8004c02:	617a      	str	r2, [r7, #20]
 8004c04:	693a      	ldr	r2, [r7, #16]
 8004c06:	b2d2      	uxtb	r2, r2
 8004c08:	701a      	strb	r2, [r3, #0]
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004c0e:	2218      	movs	r2, #24
 8004c10:	6879      	ldr	r1, [r7, #4]
 8004c12:	68b8      	ldr	r0, [r7, #8]
 8004c14:	f7ff f910 	bl	8003e38 <_SendPacket>
  RECORD_END();
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004c1e:	4b06      	ldr	r3, [pc, #24]	; (8004c38 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d002      	beq.n	8004c2c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8004c26:	4b04      	ldr	r3, [pc, #16]	; (8004c38 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2a:	4798      	blx	r3
  }
}
 8004c2c:	bf00      	nop
 8004c2e:	3730      	adds	r7, #48	; 0x30
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	20014340 	.word	0x20014340
 8004c38:	20014310 	.word	0x20014310

08004c3c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b092      	sub	sp, #72	; 0x48
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004c44:	f3ef 8311 	mrs	r3, BASEPRI
 8004c48:	f04f 0120 	mov.w	r1, #32
 8004c4c:	f381 8811 	msr	BASEPRI, r1
 8004c50:	617b      	str	r3, [r7, #20]
 8004c52:	486a      	ldr	r0, [pc, #424]	; (8004dfc <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8004c54:	f7ff f801 	bl	8003c5a <_PreparePacket>
 8004c58:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	647b      	str	r3, [r7, #68]	; 0x44
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	4b66      	ldr	r3, [pc, #408]	; (8004e00 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	643b      	str	r3, [r7, #64]	; 0x40
 8004c6e:	e00b      	b.n	8004c88 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8004c70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c72:	b2da      	uxtb	r2, r3
 8004c74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c76:	1c59      	adds	r1, r3, #1
 8004c78:	6479      	str	r1, [r7, #68]	; 0x44
 8004c7a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c7e:	b2d2      	uxtb	r2, r2
 8004c80:	701a      	strb	r2, [r3, #0]
 8004c82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c84:	09db      	lsrs	r3, r3, #7
 8004c86:	643b      	str	r3, [r7, #64]	; 0x40
 8004c88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c8a:	2b7f      	cmp	r3, #127	; 0x7f
 8004c8c:	d8f0      	bhi.n	8004c70 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8004c8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c90:	1c5a      	adds	r2, r3, #1
 8004c92:	647a      	str	r2, [r7, #68]	; 0x44
 8004c94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c96:	b2d2      	uxtb	r2, r2
 8004c98:	701a      	strb	r2, [r3, #0]
 8004c9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c9c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ca8:	e00b      	b.n	8004cc2 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8004caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cac:	b2da      	uxtb	r2, r3
 8004cae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cb0:	1c59      	adds	r1, r3, #1
 8004cb2:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004cb4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004cb8:	b2d2      	uxtb	r2, r2
 8004cba:	701a      	strb	r2, [r3, #0]
 8004cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cbe:	09db      	lsrs	r3, r3, #7
 8004cc0:	63bb      	str	r3, [r7, #56]	; 0x38
 8004cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc4:	2b7f      	cmp	r3, #127	; 0x7f
 8004cc6:	d8f0      	bhi.n	8004caa <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8004cc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cca:	1c5a      	adds	r2, r3, #1
 8004ccc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004cce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004cd0:	b2d2      	uxtb	r2, r2
 8004cd2:	701a      	strb	r2, [r3, #0]
 8004cd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cd6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	2220      	movs	r2, #32
 8004cde:	4619      	mov	r1, r3
 8004ce0:	68f8      	ldr	r0, [r7, #12]
 8004ce2:	f7fe ff6d 	bl	8003bc0 <_EncodeStr>
 8004ce6:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8004ce8:	2209      	movs	r2, #9
 8004cea:	68f9      	ldr	r1, [r7, #12]
 8004cec:	6938      	ldr	r0, [r7, #16]
 8004cee:	f7ff f8a3 	bl	8003e38 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	637b      	str	r3, [r7, #52]	; 0x34
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	4b40      	ldr	r3, [pc, #256]	; (8004e00 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	633b      	str	r3, [r7, #48]	; 0x30
 8004d06:	e00b      	b.n	8004d20 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8004d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d0a:	b2da      	uxtb	r2, r3
 8004d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d0e:	1c59      	adds	r1, r3, #1
 8004d10:	6379      	str	r1, [r7, #52]	; 0x34
 8004d12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d16:	b2d2      	uxtb	r2, r2
 8004d18:	701a      	strb	r2, [r3, #0]
 8004d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d1c:	09db      	lsrs	r3, r3, #7
 8004d1e:	633b      	str	r3, [r7, #48]	; 0x30
 8004d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d22:	2b7f      	cmp	r3, #127	; 0x7f
 8004d24:	d8f0      	bhi.n	8004d08 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8004d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d28:	1c5a      	adds	r2, r3, #1
 8004d2a:	637a      	str	r2, [r7, #52]	; 0x34
 8004d2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d2e:	b2d2      	uxtb	r2, r2
 8004d30:	701a      	strb	r2, [r3, #0]
 8004d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d34:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d40:	e00b      	b.n	8004d5a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8004d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d44:	b2da      	uxtb	r2, r3
 8004d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d48:	1c59      	adds	r1, r3, #1
 8004d4a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004d4c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d50:	b2d2      	uxtb	r2, r2
 8004d52:	701a      	strb	r2, [r3, #0]
 8004d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d56:	09db      	lsrs	r3, r3, #7
 8004d58:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d5c:	2b7f      	cmp	r3, #127	; 0x7f
 8004d5e:	d8f0      	bhi.n	8004d42 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8004d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d62:	1c5a      	adds	r2, r3, #1
 8004d64:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d68:	b2d2      	uxtb	r2, r2
 8004d6a:	701a      	strb	r2, [r3, #0]
 8004d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d6e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	627b      	str	r3, [r7, #36]	; 0x24
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	691b      	ldr	r3, [r3, #16]
 8004d78:	623b      	str	r3, [r7, #32]
 8004d7a:	e00b      	b.n	8004d94 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8004d7c:	6a3b      	ldr	r3, [r7, #32]
 8004d7e:	b2da      	uxtb	r2, r3
 8004d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d82:	1c59      	adds	r1, r3, #1
 8004d84:	6279      	str	r1, [r7, #36]	; 0x24
 8004d86:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d8a:	b2d2      	uxtb	r2, r2
 8004d8c:	701a      	strb	r2, [r3, #0]
 8004d8e:	6a3b      	ldr	r3, [r7, #32]
 8004d90:	09db      	lsrs	r3, r3, #7
 8004d92:	623b      	str	r3, [r7, #32]
 8004d94:	6a3b      	ldr	r3, [r7, #32]
 8004d96:	2b7f      	cmp	r3, #127	; 0x7f
 8004d98:	d8f0      	bhi.n	8004d7c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8004d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9c:	1c5a      	adds	r2, r3, #1
 8004d9e:	627a      	str	r2, [r7, #36]	; 0x24
 8004da0:	6a3a      	ldr	r2, [r7, #32]
 8004da2:	b2d2      	uxtb	r2, r2
 8004da4:	701a      	strb	r2, [r3, #0]
 8004da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	61fb      	str	r3, [r7, #28]
 8004dae:	2300      	movs	r3, #0
 8004db0:	61bb      	str	r3, [r7, #24]
 8004db2:	e00b      	b.n	8004dcc <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	b2da      	uxtb	r2, r3
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	1c59      	adds	r1, r3, #1
 8004dbc:	61f9      	str	r1, [r7, #28]
 8004dbe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004dc2:	b2d2      	uxtb	r2, r2
 8004dc4:	701a      	strb	r2, [r3, #0]
 8004dc6:	69bb      	ldr	r3, [r7, #24]
 8004dc8:	09db      	lsrs	r3, r3, #7
 8004dca:	61bb      	str	r3, [r7, #24]
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	2b7f      	cmp	r3, #127	; 0x7f
 8004dd0:	d8f0      	bhi.n	8004db4 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	1c5a      	adds	r2, r3, #1
 8004dd6:	61fa      	str	r2, [r7, #28]
 8004dd8:	69ba      	ldr	r2, [r7, #24]
 8004dda:	b2d2      	uxtb	r2, r2
 8004ddc:	701a      	strb	r2, [r3, #0]
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004de2:	2215      	movs	r2, #21
 8004de4:	68f9      	ldr	r1, [r7, #12]
 8004de6:	6938      	ldr	r0, [r7, #16]
 8004de8:	f7ff f826 	bl	8003e38 <_SendPacket>
  RECORD_END();
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	f383 8811 	msr	BASEPRI, r3
}
 8004df2:	bf00      	nop
 8004df4:	3748      	adds	r7, #72	; 0x48
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	20014340 	.word	0x20014340
 8004e00:	20014310 	.word	0x20014310

08004e04 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004e04:	b580      	push	{r7, lr}
 8004e06:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004e08:	4b07      	ldr	r3, [pc, #28]	; (8004e28 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004e0a:	6a1b      	ldr	r3, [r3, #32]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d008      	beq.n	8004e22 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004e10:	4b05      	ldr	r3, [pc, #20]	; (8004e28 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004e12:	6a1b      	ldr	r3, [r3, #32]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d003      	beq.n	8004e22 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8004e1a:	4b03      	ldr	r3, [pc, #12]	; (8004e28 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004e1c:	6a1b      	ldr	r3, [r3, #32]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	4798      	blx	r3
  }
}
 8004e22:	bf00      	nop
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	20014310 	.word	0x20014310

08004e2c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b086      	sub	sp, #24
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004e34:	f3ef 8311 	mrs	r3, BASEPRI
 8004e38:	f04f 0120 	mov.w	r1, #32
 8004e3c:	f381 8811 	msr	BASEPRI, r1
 8004e40:	617b      	str	r3, [r7, #20]
 8004e42:	480b      	ldr	r0, [pc, #44]	; (8004e70 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8004e44:	f7fe ff09 	bl	8003c5a <_PreparePacket>
 8004e48:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004e4a:	2280      	movs	r2, #128	; 0x80
 8004e4c:	6879      	ldr	r1, [r7, #4]
 8004e4e:	6938      	ldr	r0, [r7, #16]
 8004e50:	f7fe feb6 	bl	8003bc0 <_EncodeStr>
 8004e54:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8004e56:	220e      	movs	r2, #14
 8004e58:	68f9      	ldr	r1, [r7, #12]
 8004e5a:	6938      	ldr	r0, [r7, #16]
 8004e5c:	f7fe ffec 	bl	8003e38 <_SendPacket>
  RECORD_END();
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	f383 8811 	msr	BASEPRI, r3
}
 8004e66:	bf00      	nop
 8004e68:	3718      	adds	r7, #24
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	20014340 	.word	0x20014340

08004e74 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004e74:	b590      	push	{r4, r7, lr}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004e7a:	4b15      	ldr	r3, [pc, #84]	; (8004ed0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004e7c:	6a1b      	ldr	r3, [r3, #32]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d01a      	beq.n	8004eb8 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8004e82:	4b13      	ldr	r3, [pc, #76]	; (8004ed0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004e84:	6a1b      	ldr	r3, [r3, #32]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d015      	beq.n	8004eb8 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004e8c:	4b10      	ldr	r3, [pc, #64]	; (8004ed0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004e8e:	6a1b      	ldr	r3, [r3, #32]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4798      	blx	r3
 8004e94:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004e98:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004e9a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e9e:	f04f 0200 	mov.w	r2, #0
 8004ea2:	f04f 0300 	mov.w	r3, #0
 8004ea6:	000a      	movs	r2, r1
 8004ea8:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004eaa:	4613      	mov	r3, r2
 8004eac:	461a      	mov	r2, r3
 8004eae:	4621      	mov	r1, r4
 8004eb0:	200d      	movs	r0, #13
 8004eb2:	f7ff fcef 	bl	8004894 <SEGGER_SYSVIEW_RecordU32x2>
 8004eb6:	e006      	b.n	8004ec6 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004eb8:	4b06      	ldr	r3, [pc, #24]	; (8004ed4 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	200c      	movs	r0, #12
 8004ec0:	f7ff fcac 	bl	800481c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004ec4:	bf00      	nop
 8004ec6:	bf00      	nop
 8004ec8:	370c      	adds	r7, #12
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd90      	pop	{r4, r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	20014310 	.word	0x20014310
 8004ed4:	e0001004 	.word	0xe0001004

08004ed8 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b086      	sub	sp, #24
 8004edc:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004ede:	f3ef 8311 	mrs	r3, BASEPRI
 8004ee2:	f04f 0120 	mov.w	r1, #32
 8004ee6:	f381 8811 	msr	BASEPRI, r1
 8004eea:	60fb      	str	r3, [r7, #12]
 8004eec:	4819      	ldr	r0, [pc, #100]	; (8004f54 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8004eee:	f7fe feb4 	bl	8003c5a <_PreparePacket>
 8004ef2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004ef8:	4b17      	ldr	r3, [pc, #92]	; (8004f58 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f00:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	617b      	str	r3, [r7, #20]
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	613b      	str	r3, [r7, #16]
 8004f0a:	e00b      	b.n	8004f24 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	b2da      	uxtb	r2, r3
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	1c59      	adds	r1, r3, #1
 8004f14:	6179      	str	r1, [r7, #20]
 8004f16:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f1a:	b2d2      	uxtb	r2, r2
 8004f1c:	701a      	strb	r2, [r3, #0]
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	09db      	lsrs	r3, r3, #7
 8004f22:	613b      	str	r3, [r7, #16]
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	2b7f      	cmp	r3, #127	; 0x7f
 8004f28:	d8f0      	bhi.n	8004f0c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	1c5a      	adds	r2, r3, #1
 8004f2e:	617a      	str	r2, [r7, #20]
 8004f30:	693a      	ldr	r2, [r7, #16]
 8004f32:	b2d2      	uxtb	r2, r2
 8004f34:	701a      	strb	r2, [r3, #0]
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8004f3a:	2202      	movs	r2, #2
 8004f3c:	6879      	ldr	r1, [r7, #4]
 8004f3e:	68b8      	ldr	r0, [r7, #8]
 8004f40:	f7fe ff7a 	bl	8003e38 <_SendPacket>
  RECORD_END();
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f383 8811 	msr	BASEPRI, r3
}
 8004f4a:	bf00      	nop
 8004f4c:	3718      	adds	r7, #24
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	20014340 	.word	0x20014340
 8004f58:	e000ed04 	.word	0xe000ed04

08004f5c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b082      	sub	sp, #8
 8004f60:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004f62:	f3ef 8311 	mrs	r3, BASEPRI
 8004f66:	f04f 0120 	mov.w	r1, #32
 8004f6a:	f381 8811 	msr	BASEPRI, r1
 8004f6e:	607b      	str	r3, [r7, #4]
 8004f70:	4807      	ldr	r0, [pc, #28]	; (8004f90 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8004f72:	f7fe fe72 	bl	8003c5a <_PreparePacket>
 8004f76:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004f78:	2203      	movs	r2, #3
 8004f7a:	6839      	ldr	r1, [r7, #0]
 8004f7c:	6838      	ldr	r0, [r7, #0]
 8004f7e:	f7fe ff5b 	bl	8003e38 <_SendPacket>
  RECORD_END();
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f383 8811 	msr	BASEPRI, r3
}
 8004f88:	bf00      	nop
 8004f8a:	3708      	adds	r7, #8
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	20014340 	.word	0x20014340

08004f94 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004f9a:	f3ef 8311 	mrs	r3, BASEPRI
 8004f9e:	f04f 0120 	mov.w	r1, #32
 8004fa2:	f381 8811 	msr	BASEPRI, r1
 8004fa6:	607b      	str	r3, [r7, #4]
 8004fa8:	4807      	ldr	r0, [pc, #28]	; (8004fc8 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8004faa:	f7fe fe56 	bl	8003c5a <_PreparePacket>
 8004fae:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004fb0:	2212      	movs	r2, #18
 8004fb2:	6839      	ldr	r1, [r7, #0]
 8004fb4:	6838      	ldr	r0, [r7, #0]
 8004fb6:	f7fe ff3f 	bl	8003e38 <_SendPacket>
  RECORD_END();
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f383 8811 	msr	BASEPRI, r3
}
 8004fc0:	bf00      	nop
 8004fc2:	3708      	adds	r7, #8
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	20014340 	.word	0x20014340

08004fcc <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004fd2:	f3ef 8311 	mrs	r3, BASEPRI
 8004fd6:	f04f 0120 	mov.w	r1, #32
 8004fda:	f381 8811 	msr	BASEPRI, r1
 8004fde:	607b      	str	r3, [r7, #4]
 8004fe0:	4807      	ldr	r0, [pc, #28]	; (8005000 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8004fe2:	f7fe fe3a 	bl	8003c5a <_PreparePacket>
 8004fe6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004fe8:	2211      	movs	r2, #17
 8004fea:	6839      	ldr	r1, [r7, #0]
 8004fec:	6838      	ldr	r0, [r7, #0]
 8004fee:	f7fe ff23 	bl	8003e38 <_SendPacket>
  RECORD_END();
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f383 8811 	msr	BASEPRI, r3
}
 8004ff8:	bf00      	nop
 8004ffa:	3708      	adds	r7, #8
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	20014340 	.word	0x20014340

08005004 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005004:	b580      	push	{r7, lr}
 8005006:	b088      	sub	sp, #32
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800500c:	f3ef 8311 	mrs	r3, BASEPRI
 8005010:	f04f 0120 	mov.w	r1, #32
 8005014:	f381 8811 	msr	BASEPRI, r1
 8005018:	617b      	str	r3, [r7, #20]
 800501a:	4819      	ldr	r0, [pc, #100]	; (8005080 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800501c:	f7fe fe1d 	bl	8003c5a <_PreparePacket>
 8005020:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005026:	4b17      	ldr	r3, [pc, #92]	; (8005084 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	61fb      	str	r3, [r7, #28]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	61bb      	str	r3, [r7, #24]
 8005038:	e00b      	b.n	8005052 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	b2da      	uxtb	r2, r3
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	1c59      	adds	r1, r3, #1
 8005042:	61f9      	str	r1, [r7, #28]
 8005044:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005048:	b2d2      	uxtb	r2, r2
 800504a:	701a      	strb	r2, [r3, #0]
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	09db      	lsrs	r3, r3, #7
 8005050:	61bb      	str	r3, [r7, #24]
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	2b7f      	cmp	r3, #127	; 0x7f
 8005056:	d8f0      	bhi.n	800503a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	1c5a      	adds	r2, r3, #1
 800505c:	61fa      	str	r2, [r7, #28]
 800505e:	69ba      	ldr	r2, [r7, #24]
 8005060:	b2d2      	uxtb	r2, r2
 8005062:	701a      	strb	r2, [r3, #0]
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005068:	2208      	movs	r2, #8
 800506a:	68f9      	ldr	r1, [r7, #12]
 800506c:	6938      	ldr	r0, [r7, #16]
 800506e:	f7fe fee3 	bl	8003e38 <_SendPacket>
  RECORD_END();
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	f383 8811 	msr	BASEPRI, r3
}
 8005078:	bf00      	nop
 800507a:	3720      	adds	r7, #32
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}
 8005080:	20014340 	.word	0x20014340
 8005084:	20014310 	.word	0x20014310

08005088 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005088:	b580      	push	{r7, lr}
 800508a:	b088      	sub	sp, #32
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005090:	f3ef 8311 	mrs	r3, BASEPRI
 8005094:	f04f 0120 	mov.w	r1, #32
 8005098:	f381 8811 	msr	BASEPRI, r1
 800509c:	617b      	str	r3, [r7, #20]
 800509e:	4819      	ldr	r0, [pc, #100]	; (8005104 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80050a0:	f7fe fddb 	bl	8003c5a <_PreparePacket>
 80050a4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80050aa:	4b17      	ldr	r3, [pc, #92]	; (8005108 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	61fb      	str	r3, [r7, #28]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	61bb      	str	r3, [r7, #24]
 80050bc:	e00b      	b.n	80050d6 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	b2da      	uxtb	r2, r3
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	1c59      	adds	r1, r3, #1
 80050c6:	61f9      	str	r1, [r7, #28]
 80050c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050cc:	b2d2      	uxtb	r2, r2
 80050ce:	701a      	strb	r2, [r3, #0]
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	09db      	lsrs	r3, r3, #7
 80050d4:	61bb      	str	r3, [r7, #24]
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	2b7f      	cmp	r3, #127	; 0x7f
 80050da:	d8f0      	bhi.n	80050be <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	1c5a      	adds	r2, r3, #1
 80050e0:	61fa      	str	r2, [r7, #28]
 80050e2:	69ba      	ldr	r2, [r7, #24]
 80050e4:	b2d2      	uxtb	r2, r2
 80050e6:	701a      	strb	r2, [r3, #0]
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80050ec:	2204      	movs	r2, #4
 80050ee:	68f9      	ldr	r1, [r7, #12]
 80050f0:	6938      	ldr	r0, [r7, #16]
 80050f2:	f7fe fea1 	bl	8003e38 <_SendPacket>
  RECORD_END();
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	f383 8811 	msr	BASEPRI, r3
}
 80050fc:	bf00      	nop
 80050fe:	3720      	adds	r7, #32
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}
 8005104:	20014340 	.word	0x20014340
 8005108:	20014310 	.word	0x20014310

0800510c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800510c:	b580      	push	{r7, lr}
 800510e:	b088      	sub	sp, #32
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005114:	f3ef 8311 	mrs	r3, BASEPRI
 8005118:	f04f 0120 	mov.w	r1, #32
 800511c:	f381 8811 	msr	BASEPRI, r1
 8005120:	617b      	str	r3, [r7, #20]
 8005122:	4819      	ldr	r0, [pc, #100]	; (8005188 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005124:	f7fe fd99 	bl	8003c5a <_PreparePacket>
 8005128:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800512e:	4b17      	ldr	r3, [pc, #92]	; (800518c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	61fb      	str	r3, [r7, #28]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	61bb      	str	r3, [r7, #24]
 8005140:	e00b      	b.n	800515a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005142:	69bb      	ldr	r3, [r7, #24]
 8005144:	b2da      	uxtb	r2, r3
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	1c59      	adds	r1, r3, #1
 800514a:	61f9      	str	r1, [r7, #28]
 800514c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005150:	b2d2      	uxtb	r2, r2
 8005152:	701a      	strb	r2, [r3, #0]
 8005154:	69bb      	ldr	r3, [r7, #24]
 8005156:	09db      	lsrs	r3, r3, #7
 8005158:	61bb      	str	r3, [r7, #24]
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	2b7f      	cmp	r3, #127	; 0x7f
 800515e:	d8f0      	bhi.n	8005142 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	1c5a      	adds	r2, r3, #1
 8005164:	61fa      	str	r2, [r7, #28]
 8005166:	69ba      	ldr	r2, [r7, #24]
 8005168:	b2d2      	uxtb	r2, r2
 800516a:	701a      	strb	r2, [r3, #0]
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005170:	2206      	movs	r2, #6
 8005172:	68f9      	ldr	r1, [r7, #12]
 8005174:	6938      	ldr	r0, [r7, #16]
 8005176:	f7fe fe5f 	bl	8003e38 <_SendPacket>
  RECORD_END();
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	f383 8811 	msr	BASEPRI, r3
}
 8005180:	bf00      	nop
 8005182:	3720      	adds	r7, #32
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}
 8005188:	20014340 	.word	0x20014340
 800518c:	20014310 	.word	0x20014310

08005190 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8005190:	b580      	push	{r7, lr}
 8005192:	b08a      	sub	sp, #40	; 0x28
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800519a:	f3ef 8311 	mrs	r3, BASEPRI
 800519e:	f04f 0120 	mov.w	r1, #32
 80051a2:	f381 8811 	msr	BASEPRI, r1
 80051a6:	617b      	str	r3, [r7, #20]
 80051a8:	4827      	ldr	r0, [pc, #156]	; (8005248 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80051aa:	f7fe fd56 	bl	8003c5a <_PreparePacket>
 80051ae:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80051b4:	4b25      	ldr	r3, [pc, #148]	; (800524c <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80051b6:	691b      	ldr	r3, [r3, #16]
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	627b      	str	r3, [r7, #36]	; 0x24
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	623b      	str	r3, [r7, #32]
 80051c6:	e00b      	b.n	80051e0 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80051c8:	6a3b      	ldr	r3, [r7, #32]
 80051ca:	b2da      	uxtb	r2, r3
 80051cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ce:	1c59      	adds	r1, r3, #1
 80051d0:	6279      	str	r1, [r7, #36]	; 0x24
 80051d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051d6:	b2d2      	uxtb	r2, r2
 80051d8:	701a      	strb	r2, [r3, #0]
 80051da:	6a3b      	ldr	r3, [r7, #32]
 80051dc:	09db      	lsrs	r3, r3, #7
 80051de:	623b      	str	r3, [r7, #32]
 80051e0:	6a3b      	ldr	r3, [r7, #32]
 80051e2:	2b7f      	cmp	r3, #127	; 0x7f
 80051e4:	d8f0      	bhi.n	80051c8 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80051e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e8:	1c5a      	adds	r2, r3, #1
 80051ea:	627a      	str	r2, [r7, #36]	; 0x24
 80051ec:	6a3a      	ldr	r2, [r7, #32]
 80051ee:	b2d2      	uxtb	r2, r2
 80051f0:	701a      	strb	r2, [r3, #0]
 80051f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	61fb      	str	r3, [r7, #28]
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	61bb      	str	r3, [r7, #24]
 80051fe:	e00b      	b.n	8005218 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	b2da      	uxtb	r2, r3
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	1c59      	adds	r1, r3, #1
 8005208:	61f9      	str	r1, [r7, #28]
 800520a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800520e:	b2d2      	uxtb	r2, r2
 8005210:	701a      	strb	r2, [r3, #0]
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	09db      	lsrs	r3, r3, #7
 8005216:	61bb      	str	r3, [r7, #24]
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	2b7f      	cmp	r3, #127	; 0x7f
 800521c:	d8f0      	bhi.n	8005200 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	1c5a      	adds	r2, r3, #1
 8005222:	61fa      	str	r2, [r7, #28]
 8005224:	69ba      	ldr	r2, [r7, #24]
 8005226:	b2d2      	uxtb	r2, r2
 8005228:	701a      	strb	r2, [r3, #0]
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800522e:	2207      	movs	r2, #7
 8005230:	68f9      	ldr	r1, [r7, #12]
 8005232:	6938      	ldr	r0, [r7, #16]
 8005234:	f7fe fe00 	bl	8003e38 <_SendPacket>
  RECORD_END();
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	f383 8811 	msr	BASEPRI, r3
}
 800523e:	bf00      	nop
 8005240:	3728      	adds	r7, #40	; 0x28
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	20014340 	.word	0x20014340
 800524c:	20014310 	.word	0x20014310

08005250 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005250:	b580      	push	{r7, lr}
 8005252:	b08c      	sub	sp, #48	; 0x30
 8005254:	af00      	add	r7, sp, #0
 8005256:	4603      	mov	r3, r0
 8005258:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800525a:	4b3b      	ldr	r3, [pc, #236]	; (8005348 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d06d      	beq.n	800533e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8005262:	4b39      	ldr	r3, [pc, #228]	; (8005348 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005268:	2300      	movs	r3, #0
 800526a:	62bb      	str	r3, [r7, #40]	; 0x28
 800526c:	e008      	b.n	8005280 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800526e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8005274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005276:	2b00      	cmp	r3, #0
 8005278:	d007      	beq.n	800528a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800527a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800527c:	3301      	adds	r3, #1
 800527e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005280:	79fb      	ldrb	r3, [r7, #7]
 8005282:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005284:	429a      	cmp	r2, r3
 8005286:	d3f2      	bcc.n	800526e <SEGGER_SYSVIEW_SendModule+0x1e>
 8005288:	e000      	b.n	800528c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800528a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800528c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800528e:	2b00      	cmp	r3, #0
 8005290:	d055      	beq.n	800533e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005292:	f3ef 8311 	mrs	r3, BASEPRI
 8005296:	f04f 0120 	mov.w	r1, #32
 800529a:	f381 8811 	msr	BASEPRI, r1
 800529e:	617b      	str	r3, [r7, #20]
 80052a0:	482a      	ldr	r0, [pc, #168]	; (800534c <SEGGER_SYSVIEW_SendModule+0xfc>)
 80052a2:	f7fe fcda 	bl	8003c5a <_PreparePacket>
 80052a6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	627b      	str	r3, [r7, #36]	; 0x24
 80052b0:	79fb      	ldrb	r3, [r7, #7]
 80052b2:	623b      	str	r3, [r7, #32]
 80052b4:	e00b      	b.n	80052ce <SEGGER_SYSVIEW_SendModule+0x7e>
 80052b6:	6a3b      	ldr	r3, [r7, #32]
 80052b8:	b2da      	uxtb	r2, r3
 80052ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052bc:	1c59      	adds	r1, r3, #1
 80052be:	6279      	str	r1, [r7, #36]	; 0x24
 80052c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052c4:	b2d2      	uxtb	r2, r2
 80052c6:	701a      	strb	r2, [r3, #0]
 80052c8:	6a3b      	ldr	r3, [r7, #32]
 80052ca:	09db      	lsrs	r3, r3, #7
 80052cc:	623b      	str	r3, [r7, #32]
 80052ce:	6a3b      	ldr	r3, [r7, #32]
 80052d0:	2b7f      	cmp	r3, #127	; 0x7f
 80052d2:	d8f0      	bhi.n	80052b6 <SEGGER_SYSVIEW_SendModule+0x66>
 80052d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d6:	1c5a      	adds	r2, r3, #1
 80052d8:	627a      	str	r2, [r7, #36]	; 0x24
 80052da:	6a3a      	ldr	r2, [r7, #32]
 80052dc:	b2d2      	uxtb	r2, r2
 80052de:	701a      	strb	r2, [r3, #0]
 80052e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	61fb      	str	r3, [r7, #28]
 80052e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	61bb      	str	r3, [r7, #24]
 80052ee:	e00b      	b.n	8005308 <SEGGER_SYSVIEW_SendModule+0xb8>
 80052f0:	69bb      	ldr	r3, [r7, #24]
 80052f2:	b2da      	uxtb	r2, r3
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	1c59      	adds	r1, r3, #1
 80052f8:	61f9      	str	r1, [r7, #28]
 80052fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052fe:	b2d2      	uxtb	r2, r2
 8005300:	701a      	strb	r2, [r3, #0]
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	09db      	lsrs	r3, r3, #7
 8005306:	61bb      	str	r3, [r7, #24]
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	2b7f      	cmp	r3, #127	; 0x7f
 800530c:	d8f0      	bhi.n	80052f0 <SEGGER_SYSVIEW_SendModule+0xa0>
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	1c5a      	adds	r2, r3, #1
 8005312:	61fa      	str	r2, [r7, #28]
 8005314:	69ba      	ldr	r2, [r7, #24]
 8005316:	b2d2      	uxtb	r2, r2
 8005318:	701a      	strb	r2, [r3, #0]
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800531e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2280      	movs	r2, #128	; 0x80
 8005324:	4619      	mov	r1, r3
 8005326:	68f8      	ldr	r0, [r7, #12]
 8005328:	f7fe fc4a 	bl	8003bc0 <_EncodeStr>
 800532c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800532e:	2216      	movs	r2, #22
 8005330:	68f9      	ldr	r1, [r7, #12]
 8005332:	6938      	ldr	r0, [r7, #16]
 8005334:	f7fe fd80 	bl	8003e38 <_SendPacket>
      RECORD_END();
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800533e:	bf00      	nop
 8005340:	3730      	adds	r7, #48	; 0x30
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop
 8005348:	20014338 	.word	0x20014338
 800534c:	20014340 	.word	0x20014340

08005350 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005356:	4b0c      	ldr	r3, [pc, #48]	; (8005388 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00f      	beq.n	800537e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800535e:	4b0a      	ldr	r3, [pc, #40]	; (8005388 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d002      	beq.n	8005372 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d1f2      	bne.n	8005364 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800537e:	bf00      	nop
 8005380:	3708      	adds	r7, #8
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	20014338 	.word	0x20014338

0800538c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800538c:	b580      	push	{r7, lr}
 800538e:	b086      	sub	sp, #24
 8005390:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005392:	f3ef 8311 	mrs	r3, BASEPRI
 8005396:	f04f 0120 	mov.w	r1, #32
 800539a:	f381 8811 	msr	BASEPRI, r1
 800539e:	60fb      	str	r3, [r7, #12]
 80053a0:	4817      	ldr	r0, [pc, #92]	; (8005400 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80053a2:	f7fe fc5a 	bl	8003c5a <_PreparePacket>
 80053a6:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	617b      	str	r3, [r7, #20]
 80053b0:	4b14      	ldr	r3, [pc, #80]	; (8005404 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	613b      	str	r3, [r7, #16]
 80053b6:	e00b      	b.n	80053d0 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	b2da      	uxtb	r2, r3
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	1c59      	adds	r1, r3, #1
 80053c0:	6179      	str	r1, [r7, #20]
 80053c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053c6:	b2d2      	uxtb	r2, r2
 80053c8:	701a      	strb	r2, [r3, #0]
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	09db      	lsrs	r3, r3, #7
 80053ce:	613b      	str	r3, [r7, #16]
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	2b7f      	cmp	r3, #127	; 0x7f
 80053d4:	d8f0      	bhi.n	80053b8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	1c5a      	adds	r2, r3, #1
 80053da:	617a      	str	r2, [r7, #20]
 80053dc:	693a      	ldr	r2, [r7, #16]
 80053de:	b2d2      	uxtb	r2, r2
 80053e0:	701a      	strb	r2, [r3, #0]
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80053e6:	221b      	movs	r2, #27
 80053e8:	6879      	ldr	r1, [r7, #4]
 80053ea:	68b8      	ldr	r0, [r7, #8]
 80053ec:	f7fe fd24 	bl	8003e38 <_SendPacket>
  RECORD_END();
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f383 8811 	msr	BASEPRI, r3
}
 80053f6:	bf00      	nop
 80053f8:	3718      	adds	r7, #24
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	20014340 	.word	0x20014340
 8005404:	2001433c 	.word	0x2001433c

08005408 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8005408:	b40f      	push	{r0, r1, r2, r3}
 800540a:	b580      	push	{r7, lr}
 800540c:	b082      	sub	sp, #8
 800540e:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8005410:	f107 0314 	add.w	r3, r7, #20
 8005414:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8005416:	1d3b      	adds	r3, r7, #4
 8005418:	461a      	mov	r2, r3
 800541a:	2100      	movs	r1, #0
 800541c:	6938      	ldr	r0, [r7, #16]
 800541e:	f7fe ff93 	bl	8004348 <_VPrintTarget>
  va_end(ParamList);
}
 8005422:	bf00      	nop
 8005424:	3708      	adds	r7, #8
 8005426:	46bd      	mov	sp, r7
 8005428:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800542c:	b004      	add	sp, #16
 800542e:	4770      	bx	lr

08005430 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005430:	b580      	push	{r7, lr}
 8005432:	b08a      	sub	sp, #40	; 0x28
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005438:	f3ef 8311 	mrs	r3, BASEPRI
 800543c:	f04f 0120 	mov.w	r1, #32
 8005440:	f381 8811 	msr	BASEPRI, r1
 8005444:	617b      	str	r3, [r7, #20]
 8005446:	4827      	ldr	r0, [pc, #156]	; (80054e4 <SEGGER_SYSVIEW_Warn+0xb4>)
 8005448:	f7fe fc07 	bl	8003c5a <_PreparePacket>
 800544c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800544e:	2280      	movs	r2, #128	; 0x80
 8005450:	6879      	ldr	r1, [r7, #4]
 8005452:	6938      	ldr	r0, [r7, #16]
 8005454:	f7fe fbb4 	bl	8003bc0 <_EncodeStr>
 8005458:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	627b      	str	r3, [r7, #36]	; 0x24
 800545e:	2301      	movs	r3, #1
 8005460:	623b      	str	r3, [r7, #32]
 8005462:	e00b      	b.n	800547c <SEGGER_SYSVIEW_Warn+0x4c>
 8005464:	6a3b      	ldr	r3, [r7, #32]
 8005466:	b2da      	uxtb	r2, r3
 8005468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546a:	1c59      	adds	r1, r3, #1
 800546c:	6279      	str	r1, [r7, #36]	; 0x24
 800546e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005472:	b2d2      	uxtb	r2, r2
 8005474:	701a      	strb	r2, [r3, #0]
 8005476:	6a3b      	ldr	r3, [r7, #32]
 8005478:	09db      	lsrs	r3, r3, #7
 800547a:	623b      	str	r3, [r7, #32]
 800547c:	6a3b      	ldr	r3, [r7, #32]
 800547e:	2b7f      	cmp	r3, #127	; 0x7f
 8005480:	d8f0      	bhi.n	8005464 <SEGGER_SYSVIEW_Warn+0x34>
 8005482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005484:	1c5a      	adds	r2, r3, #1
 8005486:	627a      	str	r2, [r7, #36]	; 0x24
 8005488:	6a3a      	ldr	r2, [r7, #32]
 800548a:	b2d2      	uxtb	r2, r2
 800548c:	701a      	strb	r2, [r3, #0]
 800548e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005490:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	61fb      	str	r3, [r7, #28]
 8005496:	2300      	movs	r3, #0
 8005498:	61bb      	str	r3, [r7, #24]
 800549a:	e00b      	b.n	80054b4 <SEGGER_SYSVIEW_Warn+0x84>
 800549c:	69bb      	ldr	r3, [r7, #24]
 800549e:	b2da      	uxtb	r2, r3
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	1c59      	adds	r1, r3, #1
 80054a4:	61f9      	str	r1, [r7, #28]
 80054a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054aa:	b2d2      	uxtb	r2, r2
 80054ac:	701a      	strb	r2, [r3, #0]
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	09db      	lsrs	r3, r3, #7
 80054b2:	61bb      	str	r3, [r7, #24]
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	2b7f      	cmp	r3, #127	; 0x7f
 80054b8:	d8f0      	bhi.n	800549c <SEGGER_SYSVIEW_Warn+0x6c>
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	1c5a      	adds	r2, r3, #1
 80054be:	61fa      	str	r2, [r7, #28]
 80054c0:	69ba      	ldr	r2, [r7, #24]
 80054c2:	b2d2      	uxtb	r2, r2
 80054c4:	701a      	strb	r2, [r3, #0]
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80054ca:	221a      	movs	r2, #26
 80054cc:	68f9      	ldr	r1, [r7, #12]
 80054ce:	6938      	ldr	r0, [r7, #16]
 80054d0:	f7fe fcb2 	bl	8003e38 <_SendPacket>
  RECORD_END();
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	f383 8811 	msr	BASEPRI, r3
}
 80054da:	bf00      	nop
 80054dc:	3728      	adds	r7, #40	; 0x28
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	20014340 	.word	0x20014340

080054e8 <memcmp>:
 80054e8:	b510      	push	{r4, lr}
 80054ea:	3901      	subs	r1, #1
 80054ec:	4402      	add	r2, r0
 80054ee:	4290      	cmp	r0, r2
 80054f0:	d101      	bne.n	80054f6 <memcmp+0xe>
 80054f2:	2000      	movs	r0, #0
 80054f4:	e005      	b.n	8005502 <memcmp+0x1a>
 80054f6:	7803      	ldrb	r3, [r0, #0]
 80054f8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80054fc:	42a3      	cmp	r3, r4
 80054fe:	d001      	beq.n	8005504 <memcmp+0x1c>
 8005500:	1b18      	subs	r0, r3, r4
 8005502:	bd10      	pop	{r4, pc}
 8005504:	3001      	adds	r0, #1
 8005506:	e7f2      	b.n	80054ee <memcmp+0x6>

08005508 <memset>:
 8005508:	4402      	add	r2, r0
 800550a:	4603      	mov	r3, r0
 800550c:	4293      	cmp	r3, r2
 800550e:	d100      	bne.n	8005512 <memset+0xa>
 8005510:	4770      	bx	lr
 8005512:	f803 1b01 	strb.w	r1, [r3], #1
 8005516:	e7f9      	b.n	800550c <memset+0x4>

08005518 <__libc_init_array>:
 8005518:	b570      	push	{r4, r5, r6, lr}
 800551a:	4d0d      	ldr	r5, [pc, #52]	; (8005550 <__libc_init_array+0x38>)
 800551c:	4c0d      	ldr	r4, [pc, #52]	; (8005554 <__libc_init_array+0x3c>)
 800551e:	1b64      	subs	r4, r4, r5
 8005520:	10a4      	asrs	r4, r4, #2
 8005522:	2600      	movs	r6, #0
 8005524:	42a6      	cmp	r6, r4
 8005526:	d109      	bne.n	800553c <__libc_init_array+0x24>
 8005528:	4d0b      	ldr	r5, [pc, #44]	; (8005558 <__libc_init_array+0x40>)
 800552a:	4c0c      	ldr	r4, [pc, #48]	; (800555c <__libc_init_array+0x44>)
 800552c:	f000 f826 	bl	800557c <_init>
 8005530:	1b64      	subs	r4, r4, r5
 8005532:	10a4      	asrs	r4, r4, #2
 8005534:	2600      	movs	r6, #0
 8005536:	42a6      	cmp	r6, r4
 8005538:	d105      	bne.n	8005546 <__libc_init_array+0x2e>
 800553a:	bd70      	pop	{r4, r5, r6, pc}
 800553c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005540:	4798      	blx	r3
 8005542:	3601      	adds	r6, #1
 8005544:	e7ee      	b.n	8005524 <__libc_init_array+0xc>
 8005546:	f855 3b04 	ldr.w	r3, [r5], #4
 800554a:	4798      	blx	r3
 800554c:	3601      	adds	r6, #1
 800554e:	e7f2      	b.n	8005536 <__libc_init_array+0x1e>
 8005550:	08005710 	.word	0x08005710
 8005554:	08005710 	.word	0x08005710
 8005558:	08005710 	.word	0x08005710
 800555c:	08005714 	.word	0x08005714

08005560 <memcpy>:
 8005560:	440a      	add	r2, r1
 8005562:	4291      	cmp	r1, r2
 8005564:	f100 33ff 	add.w	r3, r0, #4294967295
 8005568:	d100      	bne.n	800556c <memcpy+0xc>
 800556a:	4770      	bx	lr
 800556c:	b510      	push	{r4, lr}
 800556e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005572:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005576:	4291      	cmp	r1, r2
 8005578:	d1f9      	bne.n	800556e <memcpy+0xe>
 800557a:	bd10      	pop	{r4, pc}

0800557c <_init>:
 800557c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800557e:	bf00      	nop
 8005580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005582:	bc08      	pop	{r3}
 8005584:	469e      	mov	lr, r3
 8005586:	4770      	bx	lr

08005588 <_fini>:
 8005588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800558a:	bf00      	nop
 800558c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800558e:	bc08      	pop	{r3}
 8005590:	469e      	mov	lr, r3
 8005592:	4770      	bx	lr


001Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072a0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  08007480  08007480  00017480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007620  08007620  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08007620  08007620  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007620  08007620  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007620  08007620  00017620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007624  08007624  00017624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08007628  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000145d8  20000064  0800768c  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001463c  0800768c  0002463c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   000156b6  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003213  00000000  00000000  0003578d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001558  00000000  00000000  000389a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001065  00000000  00000000  00039ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028300  00000000  00000000  0003af5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001776c  00000000  00000000  0006325d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001036d4  00000000  00000000  0007a9c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005eb4  00000000  00000000  0017e0a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a0  00000000  00000000  00183f54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000064 	.word	0x20000064
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007468 	.word	0x08007468

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000068 	.word	0x20000068
 800021c:	08007468 	.word	0x08007468

08000220 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000220:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000222:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000226:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002b0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800022a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800022e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000232:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000234:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000236:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000238:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800023a:	d332      	bcc.n	80002a2 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800023c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800023e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000240:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000242:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000244:	d314      	bcc.n	8000270 <_CheckCase2>

08000246 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000246:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000248:	19d0      	adds	r0, r2, r7
 800024a:	bf00      	nop

0800024c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800024c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000250:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000254:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000256:	d005      	beq.n	8000264 <_CSDone>
        LDRB     R3,[R1], #+1
 8000258:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000260:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000262:	d1f3      	bne.n	800024c <_LoopCopyStraight>

08000264 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000264:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000268:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800026a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800026e:	4770      	bx	lr

08000270 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000270:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000272:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000274:	d319      	bcc.n	80002aa <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000276:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000278:	1b12      	subs	r2, r2, r4

0800027a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800027e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000282:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000286:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000288:	d005      	beq.n	8000296 <_No2ChunkNeeded>

0800028a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800028a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800028e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000292:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000294:	d1f9      	bne.n	800028a <_LoopCopyAfterWrapAround>

08000296 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000296:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800029a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800029c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800029e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80002a0:	4770      	bx	lr

080002a2 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80002a2:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80002a4:	3801      	subs	r0, #1
        CMP      R0,R2
 80002a6:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80002a8:	d2cd      	bcs.n	8000246 <_Case4>

080002aa <_Case3>:
_Case3:
        MOVS     R0,#+0
 80002aa:	2000      	movs	r0, #0
        POP      {R4-R7}
 80002ac:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80002ae:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002b0:	20012f1c 	.word	0x20012f1c
	...

080002c0 <memchr>:
 80002c0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002c4:	2a10      	cmp	r2, #16
 80002c6:	db2b      	blt.n	8000320 <memchr+0x60>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	d008      	beq.n	80002e0 <memchr+0x20>
 80002ce:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d2:	3a01      	subs	r2, #1
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d02d      	beq.n	8000334 <memchr+0x74>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	b342      	cbz	r2, 8000330 <memchr+0x70>
 80002de:	d1f6      	bne.n	80002ce <memchr+0xe>
 80002e0:	b4f0      	push	{r4, r5, r6, r7}
 80002e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ea:	f022 0407 	bic.w	r4, r2, #7
 80002ee:	f07f 0700 	mvns.w	r7, #0
 80002f2:	2300      	movs	r3, #0
 80002f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002f8:	3c08      	subs	r4, #8
 80002fa:	ea85 0501 	eor.w	r5, r5, r1
 80002fe:	ea86 0601 	eor.w	r6, r6, r1
 8000302:	fa85 f547 	uadd8	r5, r5, r7
 8000306:	faa3 f587 	sel	r5, r3, r7
 800030a:	fa86 f647 	uadd8	r6, r6, r7
 800030e:	faa5 f687 	sel	r6, r5, r7
 8000312:	b98e      	cbnz	r6, 8000338 <memchr+0x78>
 8000314:	d1ee      	bne.n	80002f4 <memchr+0x34>
 8000316:	bcf0      	pop	{r4, r5, r6, r7}
 8000318:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800031c:	f002 0207 	and.w	r2, r2, #7
 8000320:	b132      	cbz	r2, 8000330 <memchr+0x70>
 8000322:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000326:	3a01      	subs	r2, #1
 8000328:	ea83 0301 	eor.w	r3, r3, r1
 800032c:	b113      	cbz	r3, 8000334 <memchr+0x74>
 800032e:	d1f8      	bne.n	8000322 <memchr+0x62>
 8000330:	2000      	movs	r0, #0
 8000332:	4770      	bx	lr
 8000334:	3801      	subs	r0, #1
 8000336:	4770      	bx	lr
 8000338:	2d00      	cmp	r5, #0
 800033a:	bf06      	itte	eq
 800033c:	4635      	moveq	r5, r6
 800033e:	3803      	subeq	r0, #3
 8000340:	3807      	subne	r0, #7
 8000342:	f015 0f01 	tst.w	r5, #1
 8000346:	d107      	bne.n	8000358 <memchr+0x98>
 8000348:	3001      	adds	r0, #1
 800034a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800034e:	bf02      	ittt	eq
 8000350:	3001      	addeq	r0, #1
 8000352:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000356:	3001      	addeq	r0, #1
 8000358:	bcf0      	pop	{r4, r5, r6, r7}
 800035a:	3801      	subs	r0, #1
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop

08000360 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b088      	sub	sp, #32
 8000364:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000366:	f000 fa68 	bl	800083a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800036a:	f000 f851 	bl	8000410 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800036e:	f000 f89b 	bl	80004a8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  // Enable the cycle counter
  DWT_CTRL |= ( 1 << 0 );
 8000372:	4b20      	ldr	r3, [pc, #128]	; (80003f4 <main+0x94>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	4a1f      	ldr	r2, [pc, #124]	; (80003f4 <main+0x94>)
 8000378:	f043 0301 	orr.w	r3, r3, #1
 800037c:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 800037e:	f004 faf9 	bl	8004974 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 8000382:	f005 fdc1 	bl	8005f08 <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(task1_handler, "Task-1", 200, "Hello, world from Task-1", 2, &task1_handle);
 8000386:	f107 0308 	add.w	r3, r7, #8
 800038a:	9301      	str	r3, [sp, #4]
 800038c:	2302      	movs	r3, #2
 800038e:	9300      	str	r3, [sp, #0]
 8000390:	4b19      	ldr	r3, [pc, #100]	; (80003f8 <main+0x98>)
 8000392:	22c8      	movs	r2, #200	; 0xc8
 8000394:	4919      	ldr	r1, [pc, #100]	; (80003fc <main+0x9c>)
 8000396:	481a      	ldr	r0, [pc, #104]	; (8000400 <main+0xa0>)
 8000398:	f002 fc78 	bl	8002c8c <xTaskCreate>
 800039c:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 800039e:	697b      	ldr	r3, [r7, #20]
 80003a0:	2b01      	cmp	r3, #1
 80003a2:	d00a      	beq.n	80003ba <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80003a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003a8:	f383 8811 	msr	BASEPRI, r3
 80003ac:	f3bf 8f6f 	isb	sy
 80003b0:	f3bf 8f4f 	dsb	sy
 80003b4:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80003b6:	bf00      	nop
 80003b8:	e7fe      	b.n	80003b8 <main+0x58>

  status = xTaskCreate(task2_handler, "Task-2", 200, "Hello, world from Task-2", 2, &task2_handle);
 80003ba:	1d3b      	adds	r3, r7, #4
 80003bc:	9301      	str	r3, [sp, #4]
 80003be:	2302      	movs	r3, #2
 80003c0:	9300      	str	r3, [sp, #0]
 80003c2:	4b10      	ldr	r3, [pc, #64]	; (8000404 <main+0xa4>)
 80003c4:	22c8      	movs	r2, #200	; 0xc8
 80003c6:	4910      	ldr	r1, [pc, #64]	; (8000408 <main+0xa8>)
 80003c8:	4810      	ldr	r0, [pc, #64]	; (800040c <main+0xac>)
 80003ca:	f002 fc5f 	bl	8002c8c <xTaskCreate>
 80003ce:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80003d0:	697b      	ldr	r3, [r7, #20]
 80003d2:	2b01      	cmp	r3, #1
 80003d4:	d00a      	beq.n	80003ec <main+0x8c>
        __asm volatile
 80003d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003da:	f383 8811 	msr	BASEPRI, r3
 80003de:	f3bf 8f6f 	isb	sy
 80003e2:	f3bf 8f4f 	dsb	sy
 80003e6:	60fb      	str	r3, [r7, #12]
    }
 80003e8:	bf00      	nop
 80003ea:	e7fe      	b.n	80003ea <main+0x8a>

  // start the freeRTOS scheduler
  vTaskStartScheduler();
 80003ec:	f002 fda4 	bl	8002f38 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003f0:	e7fe      	b.n	80003f0 <main+0x90>
 80003f2:	bf00      	nop
 80003f4:	e0001000 	.word	0xe0001000
 80003f8:	08007480 	.word	0x08007480
 80003fc:	0800749c 	.word	0x0800749c
 8000400:	080005a9 	.word	0x080005a9
 8000404:	080074a4 	.word	0x080074a4
 8000408:	080074c0 	.word	0x080074c0
 800040c:	080005e5 	.word	0x080005e5

08000410 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b094      	sub	sp, #80	; 0x50
 8000414:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000416:	f107 0318 	add.w	r3, r7, #24
 800041a:	2238      	movs	r2, #56	; 0x38
 800041c:	2100      	movs	r1, #0
 800041e:	4618      	mov	r0, r3
 8000420:	f006 fb96 	bl	8006b50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000424:	1d3b      	adds	r3, r7, #4
 8000426:	2200      	movs	r2, #0
 8000428:	601a      	str	r2, [r3, #0]
 800042a:	605a      	str	r2, [r3, #4]
 800042c:	609a      	str	r2, [r3, #8]
 800042e:	60da      	str	r2, [r3, #12]
 8000430:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000432:	2000      	movs	r0, #0
 8000434:	f000 fcd6 	bl	8000de4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000438:	2302      	movs	r3, #2
 800043a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800043c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000440:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000442:	2340      	movs	r3, #64	; 0x40
 8000444:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000446:	2302      	movs	r3, #2
 8000448:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800044a:	2302      	movs	r3, #2
 800044c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800044e:	2304      	movs	r3, #4
 8000450:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000452:	2355      	movs	r3, #85	; 0x55
 8000454:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000456:	2302      	movs	r3, #2
 8000458:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800045a:	2302      	movs	r3, #2
 800045c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800045e:	2302      	movs	r3, #2
 8000460:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000462:	f107 0318 	add.w	r3, r7, #24
 8000466:	4618      	mov	r0, r3
 8000468:	f000 fd70 	bl	8000f4c <HAL_RCC_OscConfig>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d001      	beq.n	8000476 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000472:	f000 f8e7 	bl	8000644 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000476:	230f      	movs	r3, #15
 8000478:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800047a:	2303      	movs	r3, #3
 800047c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800047e:	2300      	movs	r3, #0
 8000480:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000482:	2300      	movs	r3, #0
 8000484:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000486:	2300      	movs	r3, #0
 8000488:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800048a:	1d3b      	adds	r3, r7, #4
 800048c:	2104      	movs	r1, #4
 800048e:	4618      	mov	r0, r3
 8000490:	f001 f874 	bl	800157c <HAL_RCC_ClockConfig>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800049a:	f000 f8d3 	bl	8000644 <Error_Handler>
  }
}
 800049e:	bf00      	nop
 80004a0:	3750      	adds	r7, #80	; 0x50
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
	...

080004a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b08a      	sub	sp, #40	; 0x28
 80004ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ae:	f107 0314 	add.w	r3, r7, #20
 80004b2:	2200      	movs	r2, #0
 80004b4:	601a      	str	r2, [r3, #0]
 80004b6:	605a      	str	r2, [r3, #4]
 80004b8:	609a      	str	r2, [r3, #8]
 80004ba:	60da      	str	r2, [r3, #12]
 80004bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004be:	4b38      	ldr	r3, [pc, #224]	; (80005a0 <MX_GPIO_Init+0xf8>)
 80004c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004c2:	4a37      	ldr	r2, [pc, #220]	; (80005a0 <MX_GPIO_Init+0xf8>)
 80004c4:	f043 0304 	orr.w	r3, r3, #4
 80004c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ca:	4b35      	ldr	r3, [pc, #212]	; (80005a0 <MX_GPIO_Init+0xf8>)
 80004cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ce:	f003 0304 	and.w	r3, r3, #4
 80004d2:	613b      	str	r3, [r7, #16]
 80004d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004d6:	4b32      	ldr	r3, [pc, #200]	; (80005a0 <MX_GPIO_Init+0xf8>)
 80004d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004da:	4a31      	ldr	r2, [pc, #196]	; (80005a0 <MX_GPIO_Init+0xf8>)
 80004dc:	f043 0320 	orr.w	r3, r3, #32
 80004e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004e2:	4b2f      	ldr	r3, [pc, #188]	; (80005a0 <MX_GPIO_Init+0xf8>)
 80004e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e6:	f003 0320 	and.w	r3, r3, #32
 80004ea:	60fb      	str	r3, [r7, #12]
 80004ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ee:	4b2c      	ldr	r3, [pc, #176]	; (80005a0 <MX_GPIO_Init+0xf8>)
 80004f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f2:	4a2b      	ldr	r2, [pc, #172]	; (80005a0 <MX_GPIO_Init+0xf8>)
 80004f4:	f043 0301 	orr.w	r3, r3, #1
 80004f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004fa:	4b29      	ldr	r3, [pc, #164]	; (80005a0 <MX_GPIO_Init+0xf8>)
 80004fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fe:	f003 0301 	and.w	r3, r3, #1
 8000502:	60bb      	str	r3, [r7, #8]
 8000504:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000506:	4b26      	ldr	r3, [pc, #152]	; (80005a0 <MX_GPIO_Init+0xf8>)
 8000508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050a:	4a25      	ldr	r2, [pc, #148]	; (80005a0 <MX_GPIO_Init+0xf8>)
 800050c:	f043 0302 	orr.w	r3, r3, #2
 8000510:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000512:	4b23      	ldr	r3, [pc, #140]	; (80005a0 <MX_GPIO_Init+0xf8>)
 8000514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000516:	f003 0302 	and.w	r3, r3, #2
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800051e:	2200      	movs	r2, #0
 8000520:	2120      	movs	r1, #32
 8000522:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000526:	f000 fc21 	bl	8000d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800052a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800052e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000530:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000534:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000536:	2300      	movs	r3, #0
 8000538:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800053a:	f107 0314 	add.w	r3, r7, #20
 800053e:	4619      	mov	r1, r3
 8000540:	4818      	ldr	r0, [pc, #96]	; (80005a4 <MX_GPIO_Init+0xfc>)
 8000542:	f000 fa91 	bl	8000a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPUART1_TX_Pin LPUART1_RX_Pin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000546:	230c      	movs	r3, #12
 8000548:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800054a:	2302      	movs	r3, #2
 800054c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054e:	2300      	movs	r3, #0
 8000550:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000552:	2300      	movs	r3, #0
 8000554:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000556:	230c      	movs	r3, #12
 8000558:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800055a:	f107 0314 	add.w	r3, r7, #20
 800055e:	4619      	mov	r1, r3
 8000560:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000564:	f000 fa80 	bl	8000a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000568:	2320      	movs	r3, #32
 800056a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800056c:	2301      	movs	r3, #1
 800056e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000570:	2300      	movs	r3, #0
 8000572:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000574:	2300      	movs	r3, #0
 8000576:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000578:	f107 0314 	add.w	r3, r7, #20
 800057c:	4619      	mov	r1, r3
 800057e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000582:	f000 fa71 	bl	8000a68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000586:	2200      	movs	r2, #0
 8000588:	2100      	movs	r1, #0
 800058a:	2028      	movs	r0, #40	; 0x28
 800058c:	f000 fa44 	bl	8000a18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000590:	2028      	movs	r0, #40	; 0x28
 8000592:	f000 fa5b 	bl	8000a4c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000596:	bf00      	nop
 8000598:	3728      	adds	r7, #40	; 0x28
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	40021000 	.word	0x40021000
 80005a4:	48000800 	.word	0x48000800

080005a8 <task1_handler>:

/* USER CODE BEGIN 4 */

static void task1_handler(void* parameters)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b09c      	sub	sp, #112	; 0x70
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1)
	{
		snprintf(msg, 100, "%s\n", (char*)parameters);
 80005b0:	f107 000c 	add.w	r0, r7, #12
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	4a09      	ldr	r2, [pc, #36]	; (80005dc <task1_handler+0x34>)
 80005b8:	2164      	movs	r1, #100	; 0x64
 80005ba:	f006 fa85 	bl	8006ac8 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 80005be:	f107 030c 	add.w	r3, r7, #12
 80005c2:	4618      	mov	r0, r3
 80005c4:	f006 fa10 	bl	80069e8 <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 80005c8:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <task1_handler+0x38>)
 80005ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	f3bf 8f4f 	dsb	sy
 80005d4:	f3bf 8f6f 	isb	sy
		snprintf(msg, 100, "%s\n", (char*)parameters);
 80005d8:	e7ea      	b.n	80005b0 <task1_handler+0x8>
 80005da:	bf00      	nop
 80005dc:	080074c8 	.word	0x080074c8
 80005e0:	e000ed04 	.word	0xe000ed04

080005e4 <task2_handler>:
	}
}

static void task2_handler(void* parameters)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b09c      	sub	sp, #112	; 0x70
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1)
	{
		snprintf(msg, 100, "%s\n", (char*)parameters);
 80005ec:	f107 000c 	add.w	r0, r7, #12
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	4a09      	ldr	r2, [pc, #36]	; (8000618 <task2_handler+0x34>)
 80005f4:	2164      	movs	r1, #100	; 0x64
 80005f6:	f006 fa67 	bl	8006ac8 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 80005fa:	f107 030c 	add.w	r3, r7, #12
 80005fe:	4618      	mov	r0, r3
 8000600:	f006 f9f2 	bl	80069e8 <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 8000604:	4b05      	ldr	r3, [pc, #20]	; (800061c <task2_handler+0x38>)
 8000606:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	f3bf 8f4f 	dsb	sy
 8000610:	f3bf 8f6f 	isb	sy
		snprintf(msg, 100, "%s\n", (char*)parameters);
 8000614:	e7ea      	b.n	80005ec <task2_handler+0x8>
 8000616:	bf00      	nop
 8000618:	080074c8 	.word	0x080074c8
 800061c:	e000ed04 	.word	0xe000ed04

08000620 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a04      	ldr	r2, [pc, #16]	; (8000640 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d101      	bne.n	8000636 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000632:	f000 f91b 	bl	800086c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000636:	bf00      	nop
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40001000 	.word	0x40001000

08000644 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000648:	b672      	cpsid	i
}
 800064a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800064c:	e7fe      	b.n	800064c <Error_Handler+0x8>
	...

08000650 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000656:	4b10      	ldr	r3, [pc, #64]	; (8000698 <HAL_MspInit+0x48>)
 8000658:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800065a:	4a0f      	ldr	r2, [pc, #60]	; (8000698 <HAL_MspInit+0x48>)
 800065c:	f043 0301 	orr.w	r3, r3, #1
 8000660:	6613      	str	r3, [r2, #96]	; 0x60
 8000662:	4b0d      	ldr	r3, [pc, #52]	; (8000698 <HAL_MspInit+0x48>)
 8000664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800066e:	4b0a      	ldr	r3, [pc, #40]	; (8000698 <HAL_MspInit+0x48>)
 8000670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000672:	4a09      	ldr	r2, [pc, #36]	; (8000698 <HAL_MspInit+0x48>)
 8000674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000678:	6593      	str	r3, [r2, #88]	; 0x58
 800067a:	4b07      	ldr	r3, [pc, #28]	; (8000698 <HAL_MspInit+0x48>)
 800067c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800067e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000682:	603b      	str	r3, [r7, #0]
 8000684:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000686:	f000 fc51 	bl	8000f2c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 800068a:	f003 fdbd 	bl	8004208 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 800068e:	bf00      	nop
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40021000 	.word	0x40021000

0800069c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b08c      	sub	sp, #48	; 0x30
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80006a4:	2300      	movs	r3, #0
 80006a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80006ac:	4b2c      	ldr	r3, [pc, #176]	; (8000760 <HAL_InitTick+0xc4>)
 80006ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006b0:	4a2b      	ldr	r2, [pc, #172]	; (8000760 <HAL_InitTick+0xc4>)
 80006b2:	f043 0310 	orr.w	r3, r3, #16
 80006b6:	6593      	str	r3, [r2, #88]	; 0x58
 80006b8:	4b29      	ldr	r3, [pc, #164]	; (8000760 <HAL_InitTick+0xc4>)
 80006ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006bc:	f003 0310 	and.w	r3, r3, #16
 80006c0:	60bb      	str	r3, [r7, #8]
 80006c2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80006c4:	f107 020c 	add.w	r2, r7, #12
 80006c8:	f107 0310 	add.w	r3, r7, #16
 80006cc:	4611      	mov	r1, r2
 80006ce:	4618      	mov	r0, r3
 80006d0:	f001 f914 	bl	80018fc <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80006d4:	f001 f8fc 	bl	80018d0 <HAL_RCC_GetPCLK1Freq>
 80006d8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80006da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006dc:	4a21      	ldr	r2, [pc, #132]	; (8000764 <HAL_InitTick+0xc8>)
 80006de:	fba2 2303 	umull	r2, r3, r2, r3
 80006e2:	0c9b      	lsrs	r3, r3, #18
 80006e4:	3b01      	subs	r3, #1
 80006e6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80006e8:	4b1f      	ldr	r3, [pc, #124]	; (8000768 <HAL_InitTick+0xcc>)
 80006ea:	4a20      	ldr	r2, [pc, #128]	; (800076c <HAL_InitTick+0xd0>)
 80006ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80006ee:	4b1e      	ldr	r3, [pc, #120]	; (8000768 <HAL_InitTick+0xcc>)
 80006f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006f4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80006f6:	4a1c      	ldr	r2, [pc, #112]	; (8000768 <HAL_InitTick+0xcc>)
 80006f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006fa:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80006fc:	4b1a      	ldr	r3, [pc, #104]	; (8000768 <HAL_InitTick+0xcc>)
 80006fe:	2200      	movs	r2, #0
 8000700:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000702:	4b19      	ldr	r3, [pc, #100]	; (8000768 <HAL_InitTick+0xcc>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000708:	4817      	ldr	r0, [pc, #92]	; (8000768 <HAL_InitTick+0xcc>)
 800070a:	f001 f96f 	bl	80019ec <HAL_TIM_Base_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000714:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000718:	2b00      	cmp	r3, #0
 800071a:	d11b      	bne.n	8000754 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800071c:	4812      	ldr	r0, [pc, #72]	; (8000768 <HAL_InitTick+0xcc>)
 800071e:	f001 f9c7 	bl	8001ab0 <HAL_TIM_Base_Start_IT>
 8000722:	4603      	mov	r3, r0
 8000724:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000728:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800072c:	2b00      	cmp	r3, #0
 800072e:	d111      	bne.n	8000754 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000730:	2036      	movs	r0, #54	; 0x36
 8000732:	f000 f98b 	bl	8000a4c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	2b0f      	cmp	r3, #15
 800073a:	d808      	bhi.n	800074e <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800073c:	2200      	movs	r2, #0
 800073e:	6879      	ldr	r1, [r7, #4]
 8000740:	2036      	movs	r0, #54	; 0x36
 8000742:	f000 f969 	bl	8000a18 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000746:	4a0a      	ldr	r2, [pc, #40]	; (8000770 <HAL_InitTick+0xd4>)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	6013      	str	r3, [r2, #0]
 800074c:	e002      	b.n	8000754 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800074e:	2301      	movs	r3, #1
 8000750:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000754:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000758:	4618      	mov	r0, r3
 800075a:	3730      	adds	r7, #48	; 0x30
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40021000 	.word	0x40021000
 8000764:	431bde83 	.word	0x431bde83
 8000768:	20000080 	.word	0x20000080
 800076c:	40001000 	.word	0x40001000
 8000770:	20000004 	.word	0x20000004

08000774 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000778:	e7fe      	b.n	8000778 <NMI_Handler+0x4>

0800077a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800077a:	b480      	push	{r7}
 800077c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800077e:	e7fe      	b.n	800077e <HardFault_Handler+0x4>

08000780 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000784:	e7fe      	b.n	8000784 <MemManage_Handler+0x4>

08000786 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000786:	b480      	push	{r7}
 8000788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800078a:	e7fe      	b.n	800078a <BusFault_Handler+0x4>

0800078c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000790:	e7fe      	b.n	8000790 <UsageFault_Handler+0x4>

08000792 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000792:	b480      	push	{r7}
 8000794:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000796:	bf00      	nop
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr

080007a0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80007a4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80007a8:	f000 faf8 	bl	8000d9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80007ac:	bf00      	nop
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80007b4:	4802      	ldr	r0, [pc, #8]	; (80007c0 <TIM6_DAC_IRQHandler+0x10>)
 80007b6:	f001 f9f3 	bl	8001ba0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000080 	.word	0x20000080

080007c4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80007c8:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <SystemInit+0x20>)
 80007ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007ce:	4a05      	ldr	r2, [pc, #20]	; (80007e4 <SystemInit+0x20>)
 80007d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007d8:	bf00      	nop
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	e000ed00 	.word	0xe000ed00

080007e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007e8:	480d      	ldr	r0, [pc, #52]	; (8000820 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007ea:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007ec:	480d      	ldr	r0, [pc, #52]	; (8000824 <LoopForever+0x6>)
  ldr r1, =_edata
 80007ee:	490e      	ldr	r1, [pc, #56]	; (8000828 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007f0:	4a0e      	ldr	r2, [pc, #56]	; (800082c <LoopForever+0xe>)
  movs r3, #0
 80007f2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80007f4:	e002      	b.n	80007fc <LoopCopyDataInit>

080007f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007fa:	3304      	adds	r3, #4

080007fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000800:	d3f9      	bcc.n	80007f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000802:	4a0b      	ldr	r2, [pc, #44]	; (8000830 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000804:	4c0b      	ldr	r4, [pc, #44]	; (8000834 <LoopForever+0x16>)
  movs r3, #0
 8000806:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000808:	e001      	b.n	800080e <LoopFillZerobss>

0800080a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800080a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800080c:	3204      	adds	r2, #4

0800080e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800080e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000810:	d3fb      	bcc.n	800080a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000812:	f7ff ffd7 	bl	80007c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000816:	f006 f9a3 	bl	8006b60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800081a:	f7ff fda1 	bl	8000360 <main>

0800081e <LoopForever>:

LoopForever:
    b LoopForever
 800081e:	e7fe      	b.n	800081e <LoopForever>
  ldr   r0, =_estack
 8000820:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000824:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000828:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 800082c:	08007628 	.word	0x08007628
  ldr r2, =_sbss
 8000830:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000834:	2001463c 	.word	0x2001463c

08000838 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000838:	e7fe      	b.n	8000838 <ADC1_2_IRQHandler>

0800083a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800083a:	b580      	push	{r7, lr}
 800083c:	b082      	sub	sp, #8
 800083e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000840:	2300      	movs	r3, #0
 8000842:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000844:	2003      	movs	r0, #3
 8000846:	f000 f8dc 	bl	8000a02 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800084a:	200f      	movs	r0, #15
 800084c:	f7ff ff26 	bl	800069c <HAL_InitTick>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d002      	beq.n	800085c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000856:	2301      	movs	r3, #1
 8000858:	71fb      	strb	r3, [r7, #7]
 800085a:	e001      	b.n	8000860 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800085c:	f7ff fef8 	bl	8000650 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000860:	79fb      	ldrb	r3, [r7, #7]

}
 8000862:	4618      	mov	r0, r3
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
	...

0800086c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000870:	4b05      	ldr	r3, [pc, #20]	; (8000888 <HAL_IncTick+0x1c>)
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	4b05      	ldr	r3, [pc, #20]	; (800088c <HAL_IncTick+0x20>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4413      	add	r3, r2
 800087a:	4a03      	ldr	r2, [pc, #12]	; (8000888 <HAL_IncTick+0x1c>)
 800087c:	6013      	str	r3, [r2, #0]
}
 800087e:	bf00      	nop
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr
 8000888:	200000cc 	.word	0x200000cc
 800088c:	20000008 	.word	0x20000008

08000890 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  return uwTick;
 8000894:	4b03      	ldr	r3, [pc, #12]	; (80008a4 <HAL_GetTick+0x14>)
 8000896:	681b      	ldr	r3, [r3, #0]
}
 8000898:	4618      	mov	r0, r3
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	200000cc 	.word	0x200000cc

080008a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b085      	sub	sp, #20
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	f003 0307 	and.w	r3, r3, #7
 80008b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008b8:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <__NVIC_SetPriorityGrouping+0x44>)
 80008ba:	68db      	ldr	r3, [r3, #12]
 80008bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008be:	68ba      	ldr	r2, [r7, #8]
 80008c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008c4:	4013      	ands	r3, r2
 80008c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008da:	4a04      	ldr	r2, [pc, #16]	; (80008ec <__NVIC_SetPriorityGrouping+0x44>)
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	60d3      	str	r3, [r2, #12]
}
 80008e0:	bf00      	nop
 80008e2:	3714      	adds	r7, #20
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	e000ed00 	.word	0xe000ed00

080008f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008f4:	4b04      	ldr	r3, [pc, #16]	; (8000908 <__NVIC_GetPriorityGrouping+0x18>)
 80008f6:	68db      	ldr	r3, [r3, #12]
 80008f8:	0a1b      	lsrs	r3, r3, #8
 80008fa:	f003 0307 	and.w	r3, r3, #7
}
 80008fe:	4618      	mov	r0, r3
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr
 8000908:	e000ed00 	.word	0xe000ed00

0800090c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091a:	2b00      	cmp	r3, #0
 800091c:	db0b      	blt.n	8000936 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	f003 021f 	and.w	r2, r3, #31
 8000924:	4907      	ldr	r1, [pc, #28]	; (8000944 <__NVIC_EnableIRQ+0x38>)
 8000926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800092a:	095b      	lsrs	r3, r3, #5
 800092c:	2001      	movs	r0, #1
 800092e:	fa00 f202 	lsl.w	r2, r0, r2
 8000932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000936:	bf00      	nop
 8000938:	370c      	adds	r7, #12
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	e000e100 	.word	0xe000e100

08000948 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	6039      	str	r1, [r7, #0]
 8000952:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000958:	2b00      	cmp	r3, #0
 800095a:	db0a      	blt.n	8000972 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	b2da      	uxtb	r2, r3
 8000960:	490c      	ldr	r1, [pc, #48]	; (8000994 <__NVIC_SetPriority+0x4c>)
 8000962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000966:	0112      	lsls	r2, r2, #4
 8000968:	b2d2      	uxtb	r2, r2
 800096a:	440b      	add	r3, r1
 800096c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000970:	e00a      	b.n	8000988 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	b2da      	uxtb	r2, r3
 8000976:	4908      	ldr	r1, [pc, #32]	; (8000998 <__NVIC_SetPriority+0x50>)
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	f003 030f 	and.w	r3, r3, #15
 800097e:	3b04      	subs	r3, #4
 8000980:	0112      	lsls	r2, r2, #4
 8000982:	b2d2      	uxtb	r2, r2
 8000984:	440b      	add	r3, r1
 8000986:	761a      	strb	r2, [r3, #24]
}
 8000988:	bf00      	nop
 800098a:	370c      	adds	r7, #12
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr
 8000994:	e000e100 	.word	0xe000e100
 8000998:	e000ed00 	.word	0xe000ed00

0800099c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800099c:	b480      	push	{r7}
 800099e:	b089      	sub	sp, #36	; 0x24
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	60b9      	str	r1, [r7, #8]
 80009a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	f003 0307 	and.w	r3, r3, #7
 80009ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009b0:	69fb      	ldr	r3, [r7, #28]
 80009b2:	f1c3 0307 	rsb	r3, r3, #7
 80009b6:	2b04      	cmp	r3, #4
 80009b8:	bf28      	it	cs
 80009ba:	2304      	movcs	r3, #4
 80009bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009be:	69fb      	ldr	r3, [r7, #28]
 80009c0:	3304      	adds	r3, #4
 80009c2:	2b06      	cmp	r3, #6
 80009c4:	d902      	bls.n	80009cc <NVIC_EncodePriority+0x30>
 80009c6:	69fb      	ldr	r3, [r7, #28]
 80009c8:	3b03      	subs	r3, #3
 80009ca:	e000      	b.n	80009ce <NVIC_EncodePriority+0x32>
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d0:	f04f 32ff 	mov.w	r2, #4294967295
 80009d4:	69bb      	ldr	r3, [r7, #24]
 80009d6:	fa02 f303 	lsl.w	r3, r2, r3
 80009da:	43da      	mvns	r2, r3
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	401a      	ands	r2, r3
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009e4:	f04f 31ff 	mov.w	r1, #4294967295
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	fa01 f303 	lsl.w	r3, r1, r3
 80009ee:	43d9      	mvns	r1, r3
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f4:	4313      	orrs	r3, r2
         );
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3724      	adds	r7, #36	; 0x24
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr

08000a02 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a02:	b580      	push	{r7, lr}
 8000a04:	b082      	sub	sp, #8
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f7ff ff4c 	bl	80008a8 <__NVIC_SetPriorityGrouping>
}
 8000a10:	bf00      	nop
 8000a12:	3708      	adds	r7, #8
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	60b9      	str	r1, [r7, #8]
 8000a22:	607a      	str	r2, [r7, #4]
 8000a24:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a26:	f7ff ff63 	bl	80008f0 <__NVIC_GetPriorityGrouping>
 8000a2a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a2c:	687a      	ldr	r2, [r7, #4]
 8000a2e:	68b9      	ldr	r1, [r7, #8]
 8000a30:	6978      	ldr	r0, [r7, #20]
 8000a32:	f7ff ffb3 	bl	800099c <NVIC_EncodePriority>
 8000a36:	4602      	mov	r2, r0
 8000a38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a3c:	4611      	mov	r1, r2
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f7ff ff82 	bl	8000948 <__NVIC_SetPriority>
}
 8000a44:	bf00      	nop
 8000a46:	3718      	adds	r7, #24
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f7ff ff56 	bl	800090c <__NVIC_EnableIRQ>
}
 8000a60:	bf00      	nop
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b087      	sub	sp, #28
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000a72:	2300      	movs	r3, #0
 8000a74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000a76:	e15a      	b.n	8000d2e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	2101      	movs	r1, #1
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	fa01 f303 	lsl.w	r3, r1, r3
 8000a84:	4013      	ands	r3, r2
 8000a86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	f000 814c 	beq.w	8000d28 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	f003 0303 	and.w	r3, r3, #3
 8000a98:	2b01      	cmp	r3, #1
 8000a9a:	d005      	beq.n	8000aa8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000aa4:	2b02      	cmp	r3, #2
 8000aa6:	d130      	bne.n	8000b0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	689b      	ldr	r3, [r3, #8]
 8000aac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	005b      	lsls	r3, r3, #1
 8000ab2:	2203      	movs	r2, #3
 8000ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab8:	43db      	mvns	r3, r3
 8000aba:	693a      	ldr	r2, [r7, #16]
 8000abc:	4013      	ands	r3, r2
 8000abe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	68da      	ldr	r2, [r3, #12]
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	005b      	lsls	r3, r3, #1
 8000ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8000acc:	693a      	ldr	r2, [r7, #16]
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	693a      	ldr	r2, [r7, #16]
 8000ad6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ade:	2201      	movs	r2, #1
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae6:	43db      	mvns	r3, r3
 8000ae8:	693a      	ldr	r2, [r7, #16]
 8000aea:	4013      	ands	r3, r2
 8000aec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	091b      	lsrs	r3, r3, #4
 8000af4:	f003 0201 	and.w	r2, r3, #1
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	fa02 f303 	lsl.w	r3, r2, r3
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	f003 0303 	and.w	r3, r3, #3
 8000b12:	2b03      	cmp	r3, #3
 8000b14:	d017      	beq.n	8000b46 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	68db      	ldr	r3, [r3, #12]
 8000b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	005b      	lsls	r3, r3, #1
 8000b20:	2203      	movs	r2, #3
 8000b22:	fa02 f303 	lsl.w	r3, r2, r3
 8000b26:	43db      	mvns	r3, r3
 8000b28:	693a      	ldr	r2, [r7, #16]
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	689a      	ldr	r2, [r3, #8]
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	005b      	lsls	r3, r3, #1
 8000b36:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	f003 0303 	and.w	r3, r3, #3
 8000b4e:	2b02      	cmp	r3, #2
 8000b50:	d123      	bne.n	8000b9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	08da      	lsrs	r2, r3, #3
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	3208      	adds	r2, #8
 8000b5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	f003 0307 	and.w	r3, r3, #7
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	220f      	movs	r2, #15
 8000b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6e:	43db      	mvns	r3, r3
 8000b70:	693a      	ldr	r2, [r7, #16]
 8000b72:	4013      	ands	r3, r2
 8000b74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	691a      	ldr	r2, [r3, #16]
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	f003 0307 	and.w	r3, r3, #7
 8000b80:	009b      	lsls	r3, r3, #2
 8000b82:	fa02 f303 	lsl.w	r3, r2, r3
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	08da      	lsrs	r2, r3, #3
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	3208      	adds	r2, #8
 8000b94:	6939      	ldr	r1, [r7, #16]
 8000b96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	2203      	movs	r2, #3
 8000ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8000baa:	43db      	mvns	r3, r3
 8000bac:	693a      	ldr	r2, [r7, #16]
 8000bae:	4013      	ands	r3, r2
 8000bb0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	f003 0203 	and.w	r2, r3, #3
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	005b      	lsls	r3, r3, #1
 8000bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	f000 80a6 	beq.w	8000d28 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bdc:	4b5b      	ldr	r3, [pc, #364]	; (8000d4c <HAL_GPIO_Init+0x2e4>)
 8000bde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000be0:	4a5a      	ldr	r2, [pc, #360]	; (8000d4c <HAL_GPIO_Init+0x2e4>)
 8000be2:	f043 0301 	orr.w	r3, r3, #1
 8000be6:	6613      	str	r3, [r2, #96]	; 0x60
 8000be8:	4b58      	ldr	r3, [pc, #352]	; (8000d4c <HAL_GPIO_Init+0x2e4>)
 8000bea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bec:	f003 0301 	and.w	r3, r3, #1
 8000bf0:	60bb      	str	r3, [r7, #8]
 8000bf2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000bf4:	4a56      	ldr	r2, [pc, #344]	; (8000d50 <HAL_GPIO_Init+0x2e8>)
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	089b      	lsrs	r3, r3, #2
 8000bfa:	3302      	adds	r3, #2
 8000bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	f003 0303 	and.w	r3, r3, #3
 8000c08:	009b      	lsls	r3, r3, #2
 8000c0a:	220f      	movs	r2, #15
 8000c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c10:	43db      	mvns	r3, r3
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	4013      	ands	r3, r2
 8000c16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c1e:	d01f      	beq.n	8000c60 <HAL_GPIO_Init+0x1f8>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	4a4c      	ldr	r2, [pc, #304]	; (8000d54 <HAL_GPIO_Init+0x2ec>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d019      	beq.n	8000c5c <HAL_GPIO_Init+0x1f4>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4a4b      	ldr	r2, [pc, #300]	; (8000d58 <HAL_GPIO_Init+0x2f0>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d013      	beq.n	8000c58 <HAL_GPIO_Init+0x1f0>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	4a4a      	ldr	r2, [pc, #296]	; (8000d5c <HAL_GPIO_Init+0x2f4>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d00d      	beq.n	8000c54 <HAL_GPIO_Init+0x1ec>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	4a49      	ldr	r2, [pc, #292]	; (8000d60 <HAL_GPIO_Init+0x2f8>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d007      	beq.n	8000c50 <HAL_GPIO_Init+0x1e8>
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	4a48      	ldr	r2, [pc, #288]	; (8000d64 <HAL_GPIO_Init+0x2fc>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d101      	bne.n	8000c4c <HAL_GPIO_Init+0x1e4>
 8000c48:	2305      	movs	r3, #5
 8000c4a:	e00a      	b.n	8000c62 <HAL_GPIO_Init+0x1fa>
 8000c4c:	2306      	movs	r3, #6
 8000c4e:	e008      	b.n	8000c62 <HAL_GPIO_Init+0x1fa>
 8000c50:	2304      	movs	r3, #4
 8000c52:	e006      	b.n	8000c62 <HAL_GPIO_Init+0x1fa>
 8000c54:	2303      	movs	r3, #3
 8000c56:	e004      	b.n	8000c62 <HAL_GPIO_Init+0x1fa>
 8000c58:	2302      	movs	r3, #2
 8000c5a:	e002      	b.n	8000c62 <HAL_GPIO_Init+0x1fa>
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	e000      	b.n	8000c62 <HAL_GPIO_Init+0x1fa>
 8000c60:	2300      	movs	r3, #0
 8000c62:	697a      	ldr	r2, [r7, #20]
 8000c64:	f002 0203 	and.w	r2, r2, #3
 8000c68:	0092      	lsls	r2, r2, #2
 8000c6a:	4093      	lsls	r3, r2
 8000c6c:	693a      	ldr	r2, [r7, #16]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000c72:	4937      	ldr	r1, [pc, #220]	; (8000d50 <HAL_GPIO_Init+0x2e8>)
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	089b      	lsrs	r3, r3, #2
 8000c78:	3302      	adds	r3, #2
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c80:	4b39      	ldr	r3, [pc, #228]	; (8000d68 <HAL_GPIO_Init+0x300>)
 8000c82:	689b      	ldr	r3, [r3, #8]
 8000c84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	43db      	mvns	r3, r3
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d003      	beq.n	8000ca4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ca4:	4a30      	ldr	r2, [pc, #192]	; (8000d68 <HAL_GPIO_Init+0x300>)
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000caa:	4b2f      	ldr	r3, [pc, #188]	; (8000d68 <HAL_GPIO_Init+0x300>)
 8000cac:	68db      	ldr	r3, [r3, #12]
 8000cae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	43db      	mvns	r3, r3
 8000cb4:	693a      	ldr	r2, [r7, #16]
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d003      	beq.n	8000cce <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000cce:	4a26      	ldr	r2, [pc, #152]	; (8000d68 <HAL_GPIO_Init+0x300>)
 8000cd0:	693b      	ldr	r3, [r7, #16]
 8000cd2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000cd4:	4b24      	ldr	r3, [pc, #144]	; (8000d68 <HAL_GPIO_Init+0x300>)
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	43db      	mvns	r3, r3
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d003      	beq.n	8000cf8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000cf8:	4a1b      	ldr	r2, [pc, #108]	; (8000d68 <HAL_GPIO_Init+0x300>)
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000cfe:	4b1a      	ldr	r3, [pc, #104]	; (8000d68 <HAL_GPIO_Init+0x300>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	43db      	mvns	r3, r3
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d003      	beq.n	8000d22 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d22:	4a11      	ldr	r2, [pc, #68]	; (8000d68 <HAL_GPIO_Init+0x300>)
 8000d24:	693b      	ldr	r3, [r7, #16]
 8000d26:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	fa22 f303 	lsr.w	r3, r2, r3
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	f47f ae9d 	bne.w	8000a78 <HAL_GPIO_Init+0x10>
  }
}
 8000d3e:	bf00      	nop
 8000d40:	bf00      	nop
 8000d42:	371c      	adds	r7, #28
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	40021000 	.word	0x40021000
 8000d50:	40010000 	.word	0x40010000
 8000d54:	48000400 	.word	0x48000400
 8000d58:	48000800 	.word	0x48000800
 8000d5c:	48000c00 	.word	0x48000c00
 8000d60:	48001000 	.word	0x48001000
 8000d64:	48001400 	.word	0x48001400
 8000d68:	40010400 	.word	0x40010400

08000d6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	460b      	mov	r3, r1
 8000d76:	807b      	strh	r3, [r7, #2]
 8000d78:	4613      	mov	r3, r2
 8000d7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d7c:	787b      	ldrb	r3, [r7, #1]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d003      	beq.n	8000d8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d82:	887a      	ldrh	r2, [r7, #2]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d88:	e002      	b.n	8000d90 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d8a:	887a      	ldrh	r2, [r7, #2]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d90:	bf00      	nop
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000da6:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000da8:	695a      	ldr	r2, [r3, #20]
 8000daa:	88fb      	ldrh	r3, [r7, #6]
 8000dac:	4013      	ands	r3, r2
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d006      	beq.n	8000dc0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000db2:	4a05      	ldr	r2, [pc, #20]	; (8000dc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000db4:	88fb      	ldrh	r3, [r7, #6]
 8000db6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000db8:	88fb      	ldrh	r3, [r7, #6]
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f000 f806 	bl	8000dcc <HAL_GPIO_EXTI_Callback>
  }
}
 8000dc0:	bf00      	nop
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40010400 	.word	0x40010400

08000dcc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
	...

08000de4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d141      	bne.n	8000e76 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000df2:	4b4b      	ldr	r3, [pc, #300]	; (8000f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000dfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000dfe:	d131      	bne.n	8000e64 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000e00:	4b47      	ldr	r3, [pc, #284]	; (8000f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e06:	4a46      	ldr	r2, [pc, #280]	; (8000f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e0c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e10:	4b43      	ldr	r3, [pc, #268]	; (8000f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e18:	4a41      	ldr	r2, [pc, #260]	; (8000f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e1e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000e20:	4b40      	ldr	r3, [pc, #256]	; (8000f24 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2232      	movs	r2, #50	; 0x32
 8000e26:	fb02 f303 	mul.w	r3, r2, r3
 8000e2a:	4a3f      	ldr	r2, [pc, #252]	; (8000f28 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e30:	0c9b      	lsrs	r3, r3, #18
 8000e32:	3301      	adds	r3, #1
 8000e34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e36:	e002      	b.n	8000e3e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	3b01      	subs	r3, #1
 8000e3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e3e:	4b38      	ldr	r3, [pc, #224]	; (8000f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e4a:	d102      	bne.n	8000e52 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d1f2      	bne.n	8000e38 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e52:	4b33      	ldr	r3, [pc, #204]	; (8000f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e54:	695b      	ldr	r3, [r3, #20]
 8000e56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e5e:	d158      	bne.n	8000f12 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000e60:	2303      	movs	r3, #3
 8000e62:	e057      	b.n	8000f14 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000e64:	4b2e      	ldr	r3, [pc, #184]	; (8000f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e6a:	4a2d      	ldr	r2, [pc, #180]	; (8000f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e70:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000e74:	e04d      	b.n	8000f12 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e7c:	d141      	bne.n	8000f02 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e7e:	4b28      	ldr	r3, [pc, #160]	; (8000f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e8a:	d131      	bne.n	8000ef0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000e8c:	4b24      	ldr	r3, [pc, #144]	; (8000f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e92:	4a23      	ldr	r2, [pc, #140]	; (8000f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e98:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e9c:	4b20      	ldr	r3, [pc, #128]	; (8000f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000ea4:	4a1e      	ldr	r2, [pc, #120]	; (8000f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ea6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eaa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000eac:	4b1d      	ldr	r3, [pc, #116]	; (8000f24 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2232      	movs	r2, #50	; 0x32
 8000eb2:	fb02 f303 	mul.w	r3, r2, r3
 8000eb6:	4a1c      	ldr	r2, [pc, #112]	; (8000f28 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8000ebc:	0c9b      	lsrs	r3, r3, #18
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ec2:	e002      	b.n	8000eca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000eca:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ecc:	695b      	ldr	r3, [r3, #20]
 8000ece:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ed2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ed6:	d102      	bne.n	8000ede <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d1f2      	bne.n	8000ec4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000ede:	4b10      	ldr	r3, [pc, #64]	; (8000f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ee0:	695b      	ldr	r3, [r3, #20]
 8000ee2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ee6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000eea:	d112      	bne.n	8000f12 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000eec:	2303      	movs	r3, #3
 8000eee:	e011      	b.n	8000f14 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000ef0:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ef2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ef6:	4a0a      	ldr	r2, [pc, #40]	; (8000f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ef8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000efc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000f00:	e007      	b.n	8000f12 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f02:	4b07      	ldr	r3, [pc, #28]	; (8000f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f0a:	4a05      	ldr	r2, [pc, #20]	; (8000f20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f0c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f10:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8000f12:	2300      	movs	r3, #0
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3714      	adds	r7, #20
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	40007000 	.word	0x40007000
 8000f24:	20000000 	.word	0x20000000
 8000f28:	431bde83 	.word	0x431bde83

08000f2c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000f30:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	4a04      	ldr	r2, [pc, #16]	; (8000f48 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000f36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f3a:	6093      	str	r3, [r2, #8]
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	40007000 	.word	0x40007000

08000f4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b088      	sub	sp, #32
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d101      	bne.n	8000f5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e306      	b.n	800156c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d075      	beq.n	8001056 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f6a:	4b97      	ldr	r3, [pc, #604]	; (80011c8 <HAL_RCC_OscConfig+0x27c>)
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	f003 030c 	and.w	r3, r3, #12
 8000f72:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f74:	4b94      	ldr	r3, [pc, #592]	; (80011c8 <HAL_RCC_OscConfig+0x27c>)
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	f003 0303 	and.w	r3, r3, #3
 8000f7c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8000f7e:	69bb      	ldr	r3, [r7, #24]
 8000f80:	2b0c      	cmp	r3, #12
 8000f82:	d102      	bne.n	8000f8a <HAL_RCC_OscConfig+0x3e>
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	2b03      	cmp	r3, #3
 8000f88:	d002      	beq.n	8000f90 <HAL_RCC_OscConfig+0x44>
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	2b08      	cmp	r3, #8
 8000f8e:	d10b      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f90:	4b8d      	ldr	r3, [pc, #564]	; (80011c8 <HAL_RCC_OscConfig+0x27c>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d05b      	beq.n	8001054 <HAL_RCC_OscConfig+0x108>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d157      	bne.n	8001054 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	e2e1      	b.n	800156c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fb0:	d106      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x74>
 8000fb2:	4b85      	ldr	r3, [pc, #532]	; (80011c8 <HAL_RCC_OscConfig+0x27c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a84      	ldr	r2, [pc, #528]	; (80011c8 <HAL_RCC_OscConfig+0x27c>)
 8000fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fbc:	6013      	str	r3, [r2, #0]
 8000fbe:	e01d      	b.n	8000ffc <HAL_RCC_OscConfig+0xb0>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fc8:	d10c      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x98>
 8000fca:	4b7f      	ldr	r3, [pc, #508]	; (80011c8 <HAL_RCC_OscConfig+0x27c>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a7e      	ldr	r2, [pc, #504]	; (80011c8 <HAL_RCC_OscConfig+0x27c>)
 8000fd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fd4:	6013      	str	r3, [r2, #0]
 8000fd6:	4b7c      	ldr	r3, [pc, #496]	; (80011c8 <HAL_RCC_OscConfig+0x27c>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a7b      	ldr	r2, [pc, #492]	; (80011c8 <HAL_RCC_OscConfig+0x27c>)
 8000fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fe0:	6013      	str	r3, [r2, #0]
 8000fe2:	e00b      	b.n	8000ffc <HAL_RCC_OscConfig+0xb0>
 8000fe4:	4b78      	ldr	r3, [pc, #480]	; (80011c8 <HAL_RCC_OscConfig+0x27c>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a77      	ldr	r2, [pc, #476]	; (80011c8 <HAL_RCC_OscConfig+0x27c>)
 8000fea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fee:	6013      	str	r3, [r2, #0]
 8000ff0:	4b75      	ldr	r3, [pc, #468]	; (80011c8 <HAL_RCC_OscConfig+0x27c>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a74      	ldr	r2, [pc, #464]	; (80011c8 <HAL_RCC_OscConfig+0x27c>)
 8000ff6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ffa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d013      	beq.n	800102c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001004:	f7ff fc44 	bl	8000890 <HAL_GetTick>
 8001008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800100a:	e008      	b.n	800101e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800100c:	f7ff fc40 	bl	8000890 <HAL_GetTick>
 8001010:	4602      	mov	r2, r0
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	2b64      	cmp	r3, #100	; 0x64
 8001018:	d901      	bls.n	800101e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800101a:	2303      	movs	r3, #3
 800101c:	e2a6      	b.n	800156c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800101e:	4b6a      	ldr	r3, [pc, #424]	; (80011c8 <HAL_RCC_OscConfig+0x27c>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d0f0      	beq.n	800100c <HAL_RCC_OscConfig+0xc0>
 800102a:	e014      	b.n	8001056 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800102c:	f7ff fc30 	bl	8000890 <HAL_GetTick>
 8001030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001032:	e008      	b.n	8001046 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001034:	f7ff fc2c 	bl	8000890 <HAL_GetTick>
 8001038:	4602      	mov	r2, r0
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	2b64      	cmp	r3, #100	; 0x64
 8001040:	d901      	bls.n	8001046 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001042:	2303      	movs	r3, #3
 8001044:	e292      	b.n	800156c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001046:	4b60      	ldr	r3, [pc, #384]	; (80011c8 <HAL_RCC_OscConfig+0x27c>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d1f0      	bne.n	8001034 <HAL_RCC_OscConfig+0xe8>
 8001052:	e000      	b.n	8001056 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001054:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f003 0302 	and.w	r3, r3, #2
 800105e:	2b00      	cmp	r3, #0
 8001060:	d075      	beq.n	800114e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001062:	4b59      	ldr	r3, [pc, #356]	; (80011c8 <HAL_RCC_OscConfig+0x27c>)
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	f003 030c 	and.w	r3, r3, #12
 800106a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800106c:	4b56      	ldr	r3, [pc, #344]	; (80011c8 <HAL_RCC_OscConfig+0x27c>)
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	f003 0303 	and.w	r3, r3, #3
 8001074:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	2b0c      	cmp	r3, #12
 800107a:	d102      	bne.n	8001082 <HAL_RCC_OscConfig+0x136>
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	2b02      	cmp	r3, #2
 8001080:	d002      	beq.n	8001088 <HAL_RCC_OscConfig+0x13c>
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	2b04      	cmp	r3, #4
 8001086:	d11f      	bne.n	80010c8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001088:	4b4f      	ldr	r3, [pc, #316]	; (80011c8 <HAL_RCC_OscConfig+0x27c>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001090:	2b00      	cmp	r3, #0
 8001092:	d005      	beq.n	80010a0 <HAL_RCC_OscConfig+0x154>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d101      	bne.n	80010a0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800109c:	2301      	movs	r3, #1
 800109e:	e265      	b.n	800156c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010a0:	4b49      	ldr	r3, [pc, #292]	; (80011c8 <HAL_RCC_OscConfig+0x27c>)
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	691b      	ldr	r3, [r3, #16]
 80010ac:	061b      	lsls	r3, r3, #24
 80010ae:	4946      	ldr	r1, [pc, #280]	; (80011c8 <HAL_RCC_OscConfig+0x27c>)
 80010b0:	4313      	orrs	r3, r2
 80010b2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80010b4:	4b45      	ldr	r3, [pc, #276]	; (80011cc <HAL_RCC_OscConfig+0x280>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff faef 	bl	800069c <HAL_InitTick>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d043      	beq.n	800114c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
 80010c6:	e251      	b.n	800156c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d023      	beq.n	8001118 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010d0:	4b3d      	ldr	r3, [pc, #244]	; (80011c8 <HAL_RCC_OscConfig+0x27c>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a3c      	ldr	r2, [pc, #240]	; (80011c8 <HAL_RCC_OscConfig+0x27c>)
 80010d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010dc:	f7ff fbd8 	bl	8000890 <HAL_GetTick>
 80010e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010e2:	e008      	b.n	80010f6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010e4:	f7ff fbd4 	bl	8000890 <HAL_GetTick>
 80010e8:	4602      	mov	r2, r0
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d901      	bls.n	80010f6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80010f2:	2303      	movs	r3, #3
 80010f4:	e23a      	b.n	800156c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010f6:	4b34      	ldr	r3, [pc, #208]	; (80011c8 <HAL_RCC_OscConfig+0x27c>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d0f0      	beq.n	80010e4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001102:	4b31      	ldr	r3, [pc, #196]	; (80011c8 <HAL_RCC_OscConfig+0x27c>)
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	691b      	ldr	r3, [r3, #16]
 800110e:	061b      	lsls	r3, r3, #24
 8001110:	492d      	ldr	r1, [pc, #180]	; (80011c8 <HAL_RCC_OscConfig+0x27c>)
 8001112:	4313      	orrs	r3, r2
 8001114:	604b      	str	r3, [r1, #4]
 8001116:	e01a      	b.n	800114e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001118:	4b2b      	ldr	r3, [pc, #172]	; (80011c8 <HAL_RCC_OscConfig+0x27c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a2a      	ldr	r2, [pc, #168]	; (80011c8 <HAL_RCC_OscConfig+0x27c>)
 800111e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001122:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001124:	f7ff fbb4 	bl	8000890 <HAL_GetTick>
 8001128:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800112a:	e008      	b.n	800113e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800112c:	f7ff fbb0 	bl	8000890 <HAL_GetTick>
 8001130:	4602      	mov	r2, r0
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	2b02      	cmp	r3, #2
 8001138:	d901      	bls.n	800113e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800113a:	2303      	movs	r3, #3
 800113c:	e216      	b.n	800156c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800113e:	4b22      	ldr	r3, [pc, #136]	; (80011c8 <HAL_RCC_OscConfig+0x27c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001146:	2b00      	cmp	r3, #0
 8001148:	d1f0      	bne.n	800112c <HAL_RCC_OscConfig+0x1e0>
 800114a:	e000      	b.n	800114e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800114c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f003 0308 	and.w	r3, r3, #8
 8001156:	2b00      	cmp	r3, #0
 8001158:	d041      	beq.n	80011de <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	695b      	ldr	r3, [r3, #20]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d01c      	beq.n	800119c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001162:	4b19      	ldr	r3, [pc, #100]	; (80011c8 <HAL_RCC_OscConfig+0x27c>)
 8001164:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001168:	4a17      	ldr	r2, [pc, #92]	; (80011c8 <HAL_RCC_OscConfig+0x27c>)
 800116a:	f043 0301 	orr.w	r3, r3, #1
 800116e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001172:	f7ff fb8d 	bl	8000890 <HAL_GetTick>
 8001176:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001178:	e008      	b.n	800118c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800117a:	f7ff fb89 	bl	8000890 <HAL_GetTick>
 800117e:	4602      	mov	r2, r0
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	2b02      	cmp	r3, #2
 8001186:	d901      	bls.n	800118c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001188:	2303      	movs	r3, #3
 800118a:	e1ef      	b.n	800156c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800118c:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <HAL_RCC_OscConfig+0x27c>)
 800118e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001192:	f003 0302 	and.w	r3, r3, #2
 8001196:	2b00      	cmp	r3, #0
 8001198:	d0ef      	beq.n	800117a <HAL_RCC_OscConfig+0x22e>
 800119a:	e020      	b.n	80011de <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800119c:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <HAL_RCC_OscConfig+0x27c>)
 800119e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011a2:	4a09      	ldr	r2, [pc, #36]	; (80011c8 <HAL_RCC_OscConfig+0x27c>)
 80011a4:	f023 0301 	bic.w	r3, r3, #1
 80011a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011ac:	f7ff fb70 	bl	8000890 <HAL_GetTick>
 80011b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011b2:	e00d      	b.n	80011d0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011b4:	f7ff fb6c 	bl	8000890 <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	2b02      	cmp	r3, #2
 80011c0:	d906      	bls.n	80011d0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80011c2:	2303      	movs	r3, #3
 80011c4:	e1d2      	b.n	800156c <HAL_RCC_OscConfig+0x620>
 80011c6:	bf00      	nop
 80011c8:	40021000 	.word	0x40021000
 80011cc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011d0:	4b8c      	ldr	r3, [pc, #560]	; (8001404 <HAL_RCC_OscConfig+0x4b8>)
 80011d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d1ea      	bne.n	80011b4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 0304 	and.w	r3, r3, #4
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	f000 80a6 	beq.w	8001338 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011ec:	2300      	movs	r3, #0
 80011ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80011f0:	4b84      	ldr	r3, [pc, #528]	; (8001404 <HAL_RCC_OscConfig+0x4b8>)
 80011f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d101      	bne.n	8001200 <HAL_RCC_OscConfig+0x2b4>
 80011fc:	2301      	movs	r3, #1
 80011fe:	e000      	b.n	8001202 <HAL_RCC_OscConfig+0x2b6>
 8001200:	2300      	movs	r3, #0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d00d      	beq.n	8001222 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001206:	4b7f      	ldr	r3, [pc, #508]	; (8001404 <HAL_RCC_OscConfig+0x4b8>)
 8001208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800120a:	4a7e      	ldr	r2, [pc, #504]	; (8001404 <HAL_RCC_OscConfig+0x4b8>)
 800120c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001210:	6593      	str	r3, [r2, #88]	; 0x58
 8001212:	4b7c      	ldr	r3, [pc, #496]	; (8001404 <HAL_RCC_OscConfig+0x4b8>)
 8001214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800121e:	2301      	movs	r3, #1
 8001220:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001222:	4b79      	ldr	r3, [pc, #484]	; (8001408 <HAL_RCC_OscConfig+0x4bc>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800122a:	2b00      	cmp	r3, #0
 800122c:	d118      	bne.n	8001260 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800122e:	4b76      	ldr	r3, [pc, #472]	; (8001408 <HAL_RCC_OscConfig+0x4bc>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a75      	ldr	r2, [pc, #468]	; (8001408 <HAL_RCC_OscConfig+0x4bc>)
 8001234:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001238:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800123a:	f7ff fb29 	bl	8000890 <HAL_GetTick>
 800123e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001240:	e008      	b.n	8001254 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001242:	f7ff fb25 	bl	8000890 <HAL_GetTick>
 8001246:	4602      	mov	r2, r0
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	2b02      	cmp	r3, #2
 800124e:	d901      	bls.n	8001254 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001250:	2303      	movs	r3, #3
 8001252:	e18b      	b.n	800156c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001254:	4b6c      	ldr	r3, [pc, #432]	; (8001408 <HAL_RCC_OscConfig+0x4bc>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800125c:	2b00      	cmp	r3, #0
 800125e:	d0f0      	beq.n	8001242 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	2b01      	cmp	r3, #1
 8001266:	d108      	bne.n	800127a <HAL_RCC_OscConfig+0x32e>
 8001268:	4b66      	ldr	r3, [pc, #408]	; (8001404 <HAL_RCC_OscConfig+0x4b8>)
 800126a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800126e:	4a65      	ldr	r2, [pc, #404]	; (8001404 <HAL_RCC_OscConfig+0x4b8>)
 8001270:	f043 0301 	orr.w	r3, r3, #1
 8001274:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001278:	e024      	b.n	80012c4 <HAL_RCC_OscConfig+0x378>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	2b05      	cmp	r3, #5
 8001280:	d110      	bne.n	80012a4 <HAL_RCC_OscConfig+0x358>
 8001282:	4b60      	ldr	r3, [pc, #384]	; (8001404 <HAL_RCC_OscConfig+0x4b8>)
 8001284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001288:	4a5e      	ldr	r2, [pc, #376]	; (8001404 <HAL_RCC_OscConfig+0x4b8>)
 800128a:	f043 0304 	orr.w	r3, r3, #4
 800128e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001292:	4b5c      	ldr	r3, [pc, #368]	; (8001404 <HAL_RCC_OscConfig+0x4b8>)
 8001294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001298:	4a5a      	ldr	r2, [pc, #360]	; (8001404 <HAL_RCC_OscConfig+0x4b8>)
 800129a:	f043 0301 	orr.w	r3, r3, #1
 800129e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012a2:	e00f      	b.n	80012c4 <HAL_RCC_OscConfig+0x378>
 80012a4:	4b57      	ldr	r3, [pc, #348]	; (8001404 <HAL_RCC_OscConfig+0x4b8>)
 80012a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012aa:	4a56      	ldr	r2, [pc, #344]	; (8001404 <HAL_RCC_OscConfig+0x4b8>)
 80012ac:	f023 0301 	bic.w	r3, r3, #1
 80012b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012b4:	4b53      	ldr	r3, [pc, #332]	; (8001404 <HAL_RCC_OscConfig+0x4b8>)
 80012b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012ba:	4a52      	ldr	r2, [pc, #328]	; (8001404 <HAL_RCC_OscConfig+0x4b8>)
 80012bc:	f023 0304 	bic.w	r3, r3, #4
 80012c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d016      	beq.n	80012fa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012cc:	f7ff fae0 	bl	8000890 <HAL_GetTick>
 80012d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012d2:	e00a      	b.n	80012ea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012d4:	f7ff fadc 	bl	8000890 <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	f241 3288 	movw	r2, #5000	; 0x1388
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d901      	bls.n	80012ea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e140      	b.n	800156c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012ea:	4b46      	ldr	r3, [pc, #280]	; (8001404 <HAL_RCC_OscConfig+0x4b8>)
 80012ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012f0:	f003 0302 	and.w	r3, r3, #2
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d0ed      	beq.n	80012d4 <HAL_RCC_OscConfig+0x388>
 80012f8:	e015      	b.n	8001326 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012fa:	f7ff fac9 	bl	8000890 <HAL_GetTick>
 80012fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001300:	e00a      	b.n	8001318 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001302:	f7ff fac5 	bl	8000890 <HAL_GetTick>
 8001306:	4602      	mov	r2, r0
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001310:	4293      	cmp	r3, r2
 8001312:	d901      	bls.n	8001318 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e129      	b.n	800156c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001318:	4b3a      	ldr	r3, [pc, #232]	; (8001404 <HAL_RCC_OscConfig+0x4b8>)
 800131a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	2b00      	cmp	r3, #0
 8001324:	d1ed      	bne.n	8001302 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001326:	7ffb      	ldrb	r3, [r7, #31]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d105      	bne.n	8001338 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800132c:	4b35      	ldr	r3, [pc, #212]	; (8001404 <HAL_RCC_OscConfig+0x4b8>)
 800132e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001330:	4a34      	ldr	r2, [pc, #208]	; (8001404 <HAL_RCC_OscConfig+0x4b8>)
 8001332:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001336:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 0320 	and.w	r3, r3, #32
 8001340:	2b00      	cmp	r3, #0
 8001342:	d03c      	beq.n	80013be <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	699b      	ldr	r3, [r3, #24]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d01c      	beq.n	8001386 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800134c:	4b2d      	ldr	r3, [pc, #180]	; (8001404 <HAL_RCC_OscConfig+0x4b8>)
 800134e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001352:	4a2c      	ldr	r2, [pc, #176]	; (8001404 <HAL_RCC_OscConfig+0x4b8>)
 8001354:	f043 0301 	orr.w	r3, r3, #1
 8001358:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800135c:	f7ff fa98 	bl	8000890 <HAL_GetTick>
 8001360:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001362:	e008      	b.n	8001376 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001364:	f7ff fa94 	bl	8000890 <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	2b02      	cmp	r3, #2
 8001370:	d901      	bls.n	8001376 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e0fa      	b.n	800156c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001376:	4b23      	ldr	r3, [pc, #140]	; (8001404 <HAL_RCC_OscConfig+0x4b8>)
 8001378:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800137c:	f003 0302 	and.w	r3, r3, #2
 8001380:	2b00      	cmp	r3, #0
 8001382:	d0ef      	beq.n	8001364 <HAL_RCC_OscConfig+0x418>
 8001384:	e01b      	b.n	80013be <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001386:	4b1f      	ldr	r3, [pc, #124]	; (8001404 <HAL_RCC_OscConfig+0x4b8>)
 8001388:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800138c:	4a1d      	ldr	r2, [pc, #116]	; (8001404 <HAL_RCC_OscConfig+0x4b8>)
 800138e:	f023 0301 	bic.w	r3, r3, #1
 8001392:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001396:	f7ff fa7b 	bl	8000890 <HAL_GetTick>
 800139a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800139c:	e008      	b.n	80013b0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800139e:	f7ff fa77 	bl	8000890 <HAL_GetTick>
 80013a2:	4602      	mov	r2, r0
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d901      	bls.n	80013b0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e0dd      	b.n	800156c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80013b0:	4b14      	ldr	r3, [pc, #80]	; (8001404 <HAL_RCC_OscConfig+0x4b8>)
 80013b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d1ef      	bne.n	800139e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	69db      	ldr	r3, [r3, #28]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	f000 80d1 	beq.w	800156a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013c8:	4b0e      	ldr	r3, [pc, #56]	; (8001404 <HAL_RCC_OscConfig+0x4b8>)
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	f003 030c 	and.w	r3, r3, #12
 80013d0:	2b0c      	cmp	r3, #12
 80013d2:	f000 808b 	beq.w	80014ec <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	69db      	ldr	r3, [r3, #28]
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d15e      	bne.n	800149c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013de:	4b09      	ldr	r3, [pc, #36]	; (8001404 <HAL_RCC_OscConfig+0x4b8>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a08      	ldr	r2, [pc, #32]	; (8001404 <HAL_RCC_OscConfig+0x4b8>)
 80013e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ea:	f7ff fa51 	bl	8000890 <HAL_GetTick>
 80013ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013f0:	e00c      	b.n	800140c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013f2:	f7ff fa4d 	bl	8000890 <HAL_GetTick>
 80013f6:	4602      	mov	r2, r0
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d905      	bls.n	800140c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001400:	2303      	movs	r3, #3
 8001402:	e0b3      	b.n	800156c <HAL_RCC_OscConfig+0x620>
 8001404:	40021000 	.word	0x40021000
 8001408:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800140c:	4b59      	ldr	r3, [pc, #356]	; (8001574 <HAL_RCC_OscConfig+0x628>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d1ec      	bne.n	80013f2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001418:	4b56      	ldr	r3, [pc, #344]	; (8001574 <HAL_RCC_OscConfig+0x628>)
 800141a:	68da      	ldr	r2, [r3, #12]
 800141c:	4b56      	ldr	r3, [pc, #344]	; (8001578 <HAL_RCC_OscConfig+0x62c>)
 800141e:	4013      	ands	r3, r2
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	6a11      	ldr	r1, [r2, #32]
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001428:	3a01      	subs	r2, #1
 800142a:	0112      	lsls	r2, r2, #4
 800142c:	4311      	orrs	r1, r2
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001432:	0212      	lsls	r2, r2, #8
 8001434:	4311      	orrs	r1, r2
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800143a:	0852      	lsrs	r2, r2, #1
 800143c:	3a01      	subs	r2, #1
 800143e:	0552      	lsls	r2, r2, #21
 8001440:	4311      	orrs	r1, r2
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001446:	0852      	lsrs	r2, r2, #1
 8001448:	3a01      	subs	r2, #1
 800144a:	0652      	lsls	r2, r2, #25
 800144c:	4311      	orrs	r1, r2
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001452:	06d2      	lsls	r2, r2, #27
 8001454:	430a      	orrs	r2, r1
 8001456:	4947      	ldr	r1, [pc, #284]	; (8001574 <HAL_RCC_OscConfig+0x628>)
 8001458:	4313      	orrs	r3, r2
 800145a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800145c:	4b45      	ldr	r3, [pc, #276]	; (8001574 <HAL_RCC_OscConfig+0x628>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a44      	ldr	r2, [pc, #272]	; (8001574 <HAL_RCC_OscConfig+0x628>)
 8001462:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001466:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001468:	4b42      	ldr	r3, [pc, #264]	; (8001574 <HAL_RCC_OscConfig+0x628>)
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	4a41      	ldr	r2, [pc, #260]	; (8001574 <HAL_RCC_OscConfig+0x628>)
 800146e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001472:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001474:	f7ff fa0c 	bl	8000890 <HAL_GetTick>
 8001478:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800147a:	e008      	b.n	800148e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800147c:	f7ff fa08 	bl	8000890 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b02      	cmp	r3, #2
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e06e      	b.n	800156c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800148e:	4b39      	ldr	r3, [pc, #228]	; (8001574 <HAL_RCC_OscConfig+0x628>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d0f0      	beq.n	800147c <HAL_RCC_OscConfig+0x530>
 800149a:	e066      	b.n	800156a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800149c:	4b35      	ldr	r3, [pc, #212]	; (8001574 <HAL_RCC_OscConfig+0x628>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a34      	ldr	r2, [pc, #208]	; (8001574 <HAL_RCC_OscConfig+0x628>)
 80014a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014a6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80014a8:	4b32      	ldr	r3, [pc, #200]	; (8001574 <HAL_RCC_OscConfig+0x628>)
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	4a31      	ldr	r2, [pc, #196]	; (8001574 <HAL_RCC_OscConfig+0x628>)
 80014ae:	f023 0303 	bic.w	r3, r3, #3
 80014b2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80014b4:	4b2f      	ldr	r3, [pc, #188]	; (8001574 <HAL_RCC_OscConfig+0x628>)
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	4a2e      	ldr	r2, [pc, #184]	; (8001574 <HAL_RCC_OscConfig+0x628>)
 80014ba:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80014be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014c2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c4:	f7ff f9e4 	bl	8000890 <HAL_GetTick>
 80014c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014ca:	e008      	b.n	80014de <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014cc:	f7ff f9e0 	bl	8000890 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e046      	b.n	800156c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014de:	4b25      	ldr	r3, [pc, #148]	; (8001574 <HAL_RCC_OscConfig+0x628>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d1f0      	bne.n	80014cc <HAL_RCC_OscConfig+0x580>
 80014ea:	e03e      	b.n	800156a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	69db      	ldr	r3, [r3, #28]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d101      	bne.n	80014f8 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e039      	b.n	800156c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80014f8:	4b1e      	ldr	r3, [pc, #120]	; (8001574 <HAL_RCC_OscConfig+0x628>)
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	f003 0203 	and.w	r2, r3, #3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6a1b      	ldr	r3, [r3, #32]
 8001508:	429a      	cmp	r2, r3
 800150a:	d12c      	bne.n	8001566 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001516:	3b01      	subs	r3, #1
 8001518:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800151a:	429a      	cmp	r2, r3
 800151c:	d123      	bne.n	8001566 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001528:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800152a:	429a      	cmp	r2, r3
 800152c:	d11b      	bne.n	8001566 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001538:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800153a:	429a      	cmp	r2, r3
 800153c:	d113      	bne.n	8001566 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001548:	085b      	lsrs	r3, r3, #1
 800154a:	3b01      	subs	r3, #1
 800154c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800154e:	429a      	cmp	r2, r3
 8001550:	d109      	bne.n	8001566 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800155c:	085b      	lsrs	r3, r3, #1
 800155e:	3b01      	subs	r3, #1
 8001560:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001562:	429a      	cmp	r2, r3
 8001564:	d001      	beq.n	800156a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e000      	b.n	800156c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800156a:	2300      	movs	r3, #0
}
 800156c:	4618      	mov	r0, r3
 800156e:	3720      	adds	r7, #32
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	40021000 	.word	0x40021000
 8001578:	019f800c 	.word	0x019f800c

0800157c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001586:	2300      	movs	r3, #0
 8001588:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d101      	bne.n	8001594 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e11e      	b.n	80017d2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001594:	4b91      	ldr	r3, [pc, #580]	; (80017dc <HAL_RCC_ClockConfig+0x260>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 030f 	and.w	r3, r3, #15
 800159c:	683a      	ldr	r2, [r7, #0]
 800159e:	429a      	cmp	r2, r3
 80015a0:	d910      	bls.n	80015c4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015a2:	4b8e      	ldr	r3, [pc, #568]	; (80017dc <HAL_RCC_ClockConfig+0x260>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f023 020f 	bic.w	r2, r3, #15
 80015aa:	498c      	ldr	r1, [pc, #560]	; (80017dc <HAL_RCC_ClockConfig+0x260>)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015b2:	4b8a      	ldr	r3, [pc, #552]	; (80017dc <HAL_RCC_ClockConfig+0x260>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 030f 	and.w	r3, r3, #15
 80015ba:	683a      	ldr	r2, [r7, #0]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d001      	beq.n	80015c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e106      	b.n	80017d2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0301 	and.w	r3, r3, #1
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d073      	beq.n	80016b8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	2b03      	cmp	r3, #3
 80015d6:	d129      	bne.n	800162c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015d8:	4b81      	ldr	r3, [pc, #516]	; (80017e0 <HAL_RCC_ClockConfig+0x264>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d101      	bne.n	80015e8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e0f4      	b.n	80017d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80015e8:	f000 f9ba 	bl	8001960 <RCC_GetSysClockFreqFromPLLSource>
 80015ec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	4a7c      	ldr	r2, [pc, #496]	; (80017e4 <HAL_RCC_ClockConfig+0x268>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d93f      	bls.n	8001676 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80015f6:	4b7a      	ldr	r3, [pc, #488]	; (80017e0 <HAL_RCC_ClockConfig+0x264>)
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d009      	beq.n	8001616 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800160a:	2b00      	cmp	r3, #0
 800160c:	d033      	beq.n	8001676 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001612:	2b00      	cmp	r3, #0
 8001614:	d12f      	bne.n	8001676 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001616:	4b72      	ldr	r3, [pc, #456]	; (80017e0 <HAL_RCC_ClockConfig+0x264>)
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800161e:	4a70      	ldr	r2, [pc, #448]	; (80017e0 <HAL_RCC_ClockConfig+0x264>)
 8001620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001624:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001626:	2380      	movs	r3, #128	; 0x80
 8001628:	617b      	str	r3, [r7, #20]
 800162a:	e024      	b.n	8001676 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	2b02      	cmp	r3, #2
 8001632:	d107      	bne.n	8001644 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001634:	4b6a      	ldr	r3, [pc, #424]	; (80017e0 <HAL_RCC_ClockConfig+0x264>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d109      	bne.n	8001654 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e0c6      	b.n	80017d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001644:	4b66      	ldr	r3, [pc, #408]	; (80017e0 <HAL_RCC_ClockConfig+0x264>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800164c:	2b00      	cmp	r3, #0
 800164e:	d101      	bne.n	8001654 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e0be      	b.n	80017d2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001654:	f000 f8ce 	bl	80017f4 <HAL_RCC_GetSysClockFreq>
 8001658:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	4a61      	ldr	r2, [pc, #388]	; (80017e4 <HAL_RCC_ClockConfig+0x268>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d909      	bls.n	8001676 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001662:	4b5f      	ldr	r3, [pc, #380]	; (80017e0 <HAL_RCC_ClockConfig+0x264>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800166a:	4a5d      	ldr	r2, [pc, #372]	; (80017e0 <HAL_RCC_ClockConfig+0x264>)
 800166c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001670:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001672:	2380      	movs	r3, #128	; 0x80
 8001674:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001676:	4b5a      	ldr	r3, [pc, #360]	; (80017e0 <HAL_RCC_ClockConfig+0x264>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	f023 0203 	bic.w	r2, r3, #3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	4957      	ldr	r1, [pc, #348]	; (80017e0 <HAL_RCC_ClockConfig+0x264>)
 8001684:	4313      	orrs	r3, r2
 8001686:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001688:	f7ff f902 	bl	8000890 <HAL_GetTick>
 800168c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800168e:	e00a      	b.n	80016a6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001690:	f7ff f8fe 	bl	8000890 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	f241 3288 	movw	r2, #5000	; 0x1388
 800169e:	4293      	cmp	r3, r2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e095      	b.n	80017d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016a6:	4b4e      	ldr	r3, [pc, #312]	; (80017e0 <HAL_RCC_ClockConfig+0x264>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f003 020c 	and.w	r2, r3, #12
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d1eb      	bne.n	8001690 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d023      	beq.n	800170c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0304 	and.w	r3, r3, #4
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d005      	beq.n	80016dc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016d0:	4b43      	ldr	r3, [pc, #268]	; (80017e0 <HAL_RCC_ClockConfig+0x264>)
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	4a42      	ldr	r2, [pc, #264]	; (80017e0 <HAL_RCC_ClockConfig+0x264>)
 80016d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80016da:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0308 	and.w	r3, r3, #8
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d007      	beq.n	80016f8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80016e8:	4b3d      	ldr	r3, [pc, #244]	; (80017e0 <HAL_RCC_ClockConfig+0x264>)
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80016f0:	4a3b      	ldr	r2, [pc, #236]	; (80017e0 <HAL_RCC_ClockConfig+0x264>)
 80016f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80016f6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016f8:	4b39      	ldr	r3, [pc, #228]	; (80017e0 <HAL_RCC_ClockConfig+0x264>)
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	4936      	ldr	r1, [pc, #216]	; (80017e0 <HAL_RCC_ClockConfig+0x264>)
 8001706:	4313      	orrs	r3, r2
 8001708:	608b      	str	r3, [r1, #8]
 800170a:	e008      	b.n	800171e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	2b80      	cmp	r3, #128	; 0x80
 8001710:	d105      	bne.n	800171e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001712:	4b33      	ldr	r3, [pc, #204]	; (80017e0 <HAL_RCC_ClockConfig+0x264>)
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	4a32      	ldr	r2, [pc, #200]	; (80017e0 <HAL_RCC_ClockConfig+0x264>)
 8001718:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800171c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800171e:	4b2f      	ldr	r3, [pc, #188]	; (80017dc <HAL_RCC_ClockConfig+0x260>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 030f 	and.w	r3, r3, #15
 8001726:	683a      	ldr	r2, [r7, #0]
 8001728:	429a      	cmp	r2, r3
 800172a:	d21d      	bcs.n	8001768 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800172c:	4b2b      	ldr	r3, [pc, #172]	; (80017dc <HAL_RCC_ClockConfig+0x260>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f023 020f 	bic.w	r2, r3, #15
 8001734:	4929      	ldr	r1, [pc, #164]	; (80017dc <HAL_RCC_ClockConfig+0x260>)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	4313      	orrs	r3, r2
 800173a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800173c:	f7ff f8a8 	bl	8000890 <HAL_GetTick>
 8001740:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001742:	e00a      	b.n	800175a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001744:	f7ff f8a4 	bl	8000890 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001752:	4293      	cmp	r3, r2
 8001754:	d901      	bls.n	800175a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e03b      	b.n	80017d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800175a:	4b20      	ldr	r3, [pc, #128]	; (80017dc <HAL_RCC_ClockConfig+0x260>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 030f 	and.w	r3, r3, #15
 8001762:	683a      	ldr	r2, [r7, #0]
 8001764:	429a      	cmp	r2, r3
 8001766:	d1ed      	bne.n	8001744 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0304 	and.w	r3, r3, #4
 8001770:	2b00      	cmp	r3, #0
 8001772:	d008      	beq.n	8001786 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001774:	4b1a      	ldr	r3, [pc, #104]	; (80017e0 <HAL_RCC_ClockConfig+0x264>)
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	4917      	ldr	r1, [pc, #92]	; (80017e0 <HAL_RCC_ClockConfig+0x264>)
 8001782:	4313      	orrs	r3, r2
 8001784:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0308 	and.w	r3, r3, #8
 800178e:	2b00      	cmp	r3, #0
 8001790:	d009      	beq.n	80017a6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001792:	4b13      	ldr	r3, [pc, #76]	; (80017e0 <HAL_RCC_ClockConfig+0x264>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	691b      	ldr	r3, [r3, #16]
 800179e:	00db      	lsls	r3, r3, #3
 80017a0:	490f      	ldr	r1, [pc, #60]	; (80017e0 <HAL_RCC_ClockConfig+0x264>)
 80017a2:	4313      	orrs	r3, r2
 80017a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80017a6:	f000 f825 	bl	80017f4 <HAL_RCC_GetSysClockFreq>
 80017aa:	4602      	mov	r2, r0
 80017ac:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <HAL_RCC_ClockConfig+0x264>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	091b      	lsrs	r3, r3, #4
 80017b2:	f003 030f 	and.w	r3, r3, #15
 80017b6:	490c      	ldr	r1, [pc, #48]	; (80017e8 <HAL_RCC_ClockConfig+0x26c>)
 80017b8:	5ccb      	ldrb	r3, [r1, r3]
 80017ba:	f003 031f 	and.w	r3, r3, #31
 80017be:	fa22 f303 	lsr.w	r3, r2, r3
 80017c2:	4a0a      	ldr	r2, [pc, #40]	; (80017ec <HAL_RCC_ClockConfig+0x270>)
 80017c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80017c6:	4b0a      	ldr	r3, [pc, #40]	; (80017f0 <HAL_RCC_ClockConfig+0x274>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7fe ff66 	bl	800069c <HAL_InitTick>
 80017d0:	4603      	mov	r3, r0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3718      	adds	r7, #24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40022000 	.word	0x40022000
 80017e0:	40021000 	.word	0x40021000
 80017e4:	04c4b400 	.word	0x04c4b400
 80017e8:	080075b0 	.word	0x080075b0
 80017ec:	20000000 	.word	0x20000000
 80017f0:	20000004 	.word	0x20000004

080017f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b087      	sub	sp, #28
 80017f8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80017fa:	4b2c      	ldr	r3, [pc, #176]	; (80018ac <HAL_RCC_GetSysClockFreq+0xb8>)
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	f003 030c 	and.w	r3, r3, #12
 8001802:	2b04      	cmp	r3, #4
 8001804:	d102      	bne.n	800180c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001806:	4b2a      	ldr	r3, [pc, #168]	; (80018b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001808:	613b      	str	r3, [r7, #16]
 800180a:	e047      	b.n	800189c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800180c:	4b27      	ldr	r3, [pc, #156]	; (80018ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f003 030c 	and.w	r3, r3, #12
 8001814:	2b08      	cmp	r3, #8
 8001816:	d102      	bne.n	800181e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001818:	4b26      	ldr	r3, [pc, #152]	; (80018b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800181a:	613b      	str	r3, [r7, #16]
 800181c:	e03e      	b.n	800189c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800181e:	4b23      	ldr	r3, [pc, #140]	; (80018ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f003 030c 	and.w	r3, r3, #12
 8001826:	2b0c      	cmp	r3, #12
 8001828:	d136      	bne.n	8001898 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800182a:	4b20      	ldr	r3, [pc, #128]	; (80018ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	f003 0303 	and.w	r3, r3, #3
 8001832:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001834:	4b1d      	ldr	r3, [pc, #116]	; (80018ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	091b      	lsrs	r3, r3, #4
 800183a:	f003 030f 	and.w	r3, r3, #15
 800183e:	3301      	adds	r3, #1
 8001840:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	2b03      	cmp	r3, #3
 8001846:	d10c      	bne.n	8001862 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001848:	4a1a      	ldr	r2, [pc, #104]	; (80018b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001850:	4a16      	ldr	r2, [pc, #88]	; (80018ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8001852:	68d2      	ldr	r2, [r2, #12]
 8001854:	0a12      	lsrs	r2, r2, #8
 8001856:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800185a:	fb02 f303 	mul.w	r3, r2, r3
 800185e:	617b      	str	r3, [r7, #20]
      break;
 8001860:	e00c      	b.n	800187c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001862:	4a13      	ldr	r2, [pc, #76]	; (80018b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	fbb2 f3f3 	udiv	r3, r2, r3
 800186a:	4a10      	ldr	r2, [pc, #64]	; (80018ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800186c:	68d2      	ldr	r2, [r2, #12]
 800186e:	0a12      	lsrs	r2, r2, #8
 8001870:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001874:	fb02 f303 	mul.w	r3, r2, r3
 8001878:	617b      	str	r3, [r7, #20]
      break;
 800187a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800187c:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	0e5b      	lsrs	r3, r3, #25
 8001882:	f003 0303 	and.w	r3, r3, #3
 8001886:	3301      	adds	r3, #1
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800188c:	697a      	ldr	r2, [r7, #20]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	fbb2 f3f3 	udiv	r3, r2, r3
 8001894:	613b      	str	r3, [r7, #16]
 8001896:	e001      	b.n	800189c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001898:	2300      	movs	r3, #0
 800189a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800189c:	693b      	ldr	r3, [r7, #16]
}
 800189e:	4618      	mov	r0, r3
 80018a0:	371c      	adds	r7, #28
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	40021000 	.word	0x40021000
 80018b0:	00f42400 	.word	0x00f42400
 80018b4:	016e3600 	.word	0x016e3600

080018b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018bc:	4b03      	ldr	r3, [pc, #12]	; (80018cc <HAL_RCC_GetHCLKFreq+0x14>)
 80018be:	681b      	ldr	r3, [r3, #0]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	20000000 	.word	0x20000000

080018d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80018d4:	f7ff fff0 	bl	80018b8 <HAL_RCC_GetHCLKFreq>
 80018d8:	4602      	mov	r2, r0
 80018da:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	0a1b      	lsrs	r3, r3, #8
 80018e0:	f003 0307 	and.w	r3, r3, #7
 80018e4:	4904      	ldr	r1, [pc, #16]	; (80018f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80018e6:	5ccb      	ldrb	r3, [r1, r3]
 80018e8:	f003 031f 	and.w	r3, r3, #31
 80018ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40021000 	.word	0x40021000
 80018f8:	080075c0 	.word	0x080075c0

080018fc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	220f      	movs	r2, #15
 800190a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800190c:	4b12      	ldr	r3, [pc, #72]	; (8001958 <HAL_RCC_GetClockConfig+0x5c>)
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f003 0203 	and.w	r2, r3, #3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001918:	4b0f      	ldr	r3, [pc, #60]	; (8001958 <HAL_RCC_GetClockConfig+0x5c>)
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001924:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <HAL_RCC_GetClockConfig+0x5c>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001930:	4b09      	ldr	r3, [pc, #36]	; (8001958 <HAL_RCC_GetClockConfig+0x5c>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	08db      	lsrs	r3, r3, #3
 8001936:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800193e:	4b07      	ldr	r3, [pc, #28]	; (800195c <HAL_RCC_GetClockConfig+0x60>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 020f 	and.w	r2, r3, #15
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	601a      	str	r2, [r3, #0]
}
 800194a:	bf00      	nop
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	40021000 	.word	0x40021000
 800195c:	40022000 	.word	0x40022000

08001960 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001960:	b480      	push	{r7}
 8001962:	b087      	sub	sp, #28
 8001964:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001966:	4b1e      	ldr	r3, [pc, #120]	; (80019e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	f003 0303 	and.w	r3, r3, #3
 800196e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001970:	4b1b      	ldr	r3, [pc, #108]	; (80019e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	091b      	lsrs	r3, r3, #4
 8001976:	f003 030f 	and.w	r3, r3, #15
 800197a:	3301      	adds	r3, #1
 800197c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	2b03      	cmp	r3, #3
 8001982:	d10c      	bne.n	800199e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001984:	4a17      	ldr	r2, [pc, #92]	; (80019e4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	fbb2 f3f3 	udiv	r3, r2, r3
 800198c:	4a14      	ldr	r2, [pc, #80]	; (80019e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800198e:	68d2      	ldr	r2, [r2, #12]
 8001990:	0a12      	lsrs	r2, r2, #8
 8001992:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001996:	fb02 f303 	mul.w	r3, r2, r3
 800199a:	617b      	str	r3, [r7, #20]
    break;
 800199c:	e00c      	b.n	80019b8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800199e:	4a12      	ldr	r2, [pc, #72]	; (80019e8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a6:	4a0e      	ldr	r2, [pc, #56]	; (80019e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80019a8:	68d2      	ldr	r2, [r2, #12]
 80019aa:	0a12      	lsrs	r2, r2, #8
 80019ac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80019b0:	fb02 f303 	mul.w	r3, r2, r3
 80019b4:	617b      	str	r3, [r7, #20]
    break;
 80019b6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80019b8:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	0e5b      	lsrs	r3, r3, #25
 80019be:	f003 0303 	and.w	r3, r3, #3
 80019c2:	3301      	adds	r3, #1
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80019c8:	697a      	ldr	r2, [r7, #20]
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80019d0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80019d2:	687b      	ldr	r3, [r7, #4]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	371c      	adds	r7, #28
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	40021000 	.word	0x40021000
 80019e4:	016e3600 	.word	0x016e3600
 80019e8:	00f42400 	.word	0x00f42400

080019ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d101      	bne.n	80019fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e049      	b.n	8001a92 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d106      	bne.n	8001a18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f000 f841 	bl	8001a9a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2202      	movs	r2, #2
 8001a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	3304      	adds	r3, #4
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4610      	mov	r0, r2
 8001a2c:	f000 fa60 	bl	8001ef0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2201      	movs	r2, #1
 8001a34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2201      	movs	r2, #1
 8001a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2201      	movs	r2, #1
 8001a64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2201      	movs	r2, #1
 8001a74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2201      	movs	r2, #1
 8001a84:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	b083      	sub	sp, #12
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
	...

08001ab0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d001      	beq.n	8001ac8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e054      	b.n	8001b72 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2202      	movs	r2, #2
 8001acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	68da      	ldr	r2, [r3, #12]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f042 0201 	orr.w	r2, r2, #1
 8001ade:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a26      	ldr	r2, [pc, #152]	; (8001b80 <HAL_TIM_Base_Start_IT+0xd0>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d022      	beq.n	8001b30 <HAL_TIM_Base_Start_IT+0x80>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001af2:	d01d      	beq.n	8001b30 <HAL_TIM_Base_Start_IT+0x80>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a22      	ldr	r2, [pc, #136]	; (8001b84 <HAL_TIM_Base_Start_IT+0xd4>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d018      	beq.n	8001b30 <HAL_TIM_Base_Start_IT+0x80>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a21      	ldr	r2, [pc, #132]	; (8001b88 <HAL_TIM_Base_Start_IT+0xd8>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d013      	beq.n	8001b30 <HAL_TIM_Base_Start_IT+0x80>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a1f      	ldr	r2, [pc, #124]	; (8001b8c <HAL_TIM_Base_Start_IT+0xdc>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d00e      	beq.n	8001b30 <HAL_TIM_Base_Start_IT+0x80>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a1e      	ldr	r2, [pc, #120]	; (8001b90 <HAL_TIM_Base_Start_IT+0xe0>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d009      	beq.n	8001b30 <HAL_TIM_Base_Start_IT+0x80>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a1c      	ldr	r2, [pc, #112]	; (8001b94 <HAL_TIM_Base_Start_IT+0xe4>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d004      	beq.n	8001b30 <HAL_TIM_Base_Start_IT+0x80>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a1b      	ldr	r2, [pc, #108]	; (8001b98 <HAL_TIM_Base_Start_IT+0xe8>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d115      	bne.n	8001b5c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	689a      	ldr	r2, [r3, #8]
 8001b36:	4b19      	ldr	r3, [pc, #100]	; (8001b9c <HAL_TIM_Base_Start_IT+0xec>)
 8001b38:	4013      	ands	r3, r2
 8001b3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2b06      	cmp	r3, #6
 8001b40:	d015      	beq.n	8001b6e <HAL_TIM_Base_Start_IT+0xbe>
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b48:	d011      	beq.n	8001b6e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f042 0201 	orr.w	r2, r2, #1
 8001b58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b5a:	e008      	b.n	8001b6e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f042 0201 	orr.w	r2, r2, #1
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	e000      	b.n	8001b70 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b6e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3714      	adds	r7, #20
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	40012c00 	.word	0x40012c00
 8001b84:	40000400 	.word	0x40000400
 8001b88:	40000800 	.word	0x40000800
 8001b8c:	40000c00 	.word	0x40000c00
 8001b90:	40013400 	.word	0x40013400
 8001b94:	40014000 	.word	0x40014000
 8001b98:	40015000 	.word	0x40015000
 8001b9c:	00010007 	.word	0x00010007

08001ba0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d122      	bne.n	8001bfc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d11b      	bne.n	8001bfc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f06f 0202 	mvn.w	r2, #2
 8001bcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	f003 0303 	and.w	r3, r3, #3
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d003      	beq.n	8001bea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 f965 	bl	8001eb2 <HAL_TIM_IC_CaptureCallback>
 8001be8:	e005      	b.n	8001bf6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f000 f957 	bl	8001e9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f000 f968 	bl	8001ec6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	f003 0304 	and.w	r3, r3, #4
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	d122      	bne.n	8001c50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	f003 0304 	and.w	r3, r3, #4
 8001c14:	2b04      	cmp	r3, #4
 8001c16:	d11b      	bne.n	8001c50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f06f 0204 	mvn.w	r2, #4
 8001c20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2202      	movs	r2, #2
 8001c26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	699b      	ldr	r3, [r3, #24]
 8001c2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d003      	beq.n	8001c3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 f93b 	bl	8001eb2 <HAL_TIM_IC_CaptureCallback>
 8001c3c:	e005      	b.n	8001c4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f000 f92d 	bl	8001e9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f000 f93e 	bl	8001ec6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	691b      	ldr	r3, [r3, #16]
 8001c56:	f003 0308 	and.w	r3, r3, #8
 8001c5a:	2b08      	cmp	r3, #8
 8001c5c:	d122      	bne.n	8001ca4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	f003 0308 	and.w	r3, r3, #8
 8001c68:	2b08      	cmp	r3, #8
 8001c6a:	d11b      	bne.n	8001ca4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f06f 0208 	mvn.w	r2, #8
 8001c74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2204      	movs	r2, #4
 8001c7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	69db      	ldr	r3, [r3, #28]
 8001c82:	f003 0303 	and.w	r3, r3, #3
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d003      	beq.n	8001c92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 f911 	bl	8001eb2 <HAL_TIM_IC_CaptureCallback>
 8001c90:	e005      	b.n	8001c9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f000 f903 	bl	8001e9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f000 f914 	bl	8001ec6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	691b      	ldr	r3, [r3, #16]
 8001caa:	f003 0310 	and.w	r3, r3, #16
 8001cae:	2b10      	cmp	r3, #16
 8001cb0:	d122      	bne.n	8001cf8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	f003 0310 	and.w	r3, r3, #16
 8001cbc:	2b10      	cmp	r3, #16
 8001cbe:	d11b      	bne.n	8001cf8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f06f 0210 	mvn.w	r2, #16
 8001cc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2208      	movs	r2, #8
 8001cce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	69db      	ldr	r3, [r3, #28]
 8001cd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f000 f8e7 	bl	8001eb2 <HAL_TIM_IC_CaptureCallback>
 8001ce4:	e005      	b.n	8001cf2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 f8d9 	bl	8001e9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f000 f8ea 	bl	8001ec6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	691b      	ldr	r3, [r3, #16]
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d10e      	bne.n	8001d24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	f003 0301 	and.w	r3, r3, #1
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d107      	bne.n	8001d24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f06f 0201 	mvn.w	r2, #1
 8001d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f7fe fc7e 	bl	8000620 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d2e:	2b80      	cmp	r3, #128	; 0x80
 8001d30:	d10e      	bne.n	8001d50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d3c:	2b80      	cmp	r3, #128	; 0x80
 8001d3e:	d107      	bne.n	8001d50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f000 f982 	bl	8002054 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d5e:	d10e      	bne.n	8001d7e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d6a:	2b80      	cmp	r3, #128	; 0x80
 8001d6c:	d107      	bne.n	8001d7e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001d76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f000 f975 	bl	8002068 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	691b      	ldr	r3, [r3, #16]
 8001d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d88:	2b40      	cmp	r3, #64	; 0x40
 8001d8a:	d10e      	bne.n	8001daa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d96:	2b40      	cmp	r3, #64	; 0x40
 8001d98:	d107      	bne.n	8001daa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001da2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f000 f898 	bl	8001eda <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	691b      	ldr	r3, [r3, #16]
 8001db0:	f003 0320 	and.w	r3, r3, #32
 8001db4:	2b20      	cmp	r3, #32
 8001db6:	d10e      	bne.n	8001dd6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	f003 0320 	and.w	r3, r3, #32
 8001dc2:	2b20      	cmp	r3, #32
 8001dc4:	d107      	bne.n	8001dd6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f06f 0220 	mvn.w	r2, #32
 8001dce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f000 f935 	bl	8002040 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	691b      	ldr	r3, [r3, #16]
 8001ddc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001de0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001de4:	d10f      	bne.n	8001e06 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001df0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001df4:	d107      	bne.n	8001e06 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8001dfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f000 f93b 	bl	800207c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001e14:	d10f      	bne.n	8001e36 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001e24:	d107      	bne.n	8001e36 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8001e2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 f92d 	bl	8002090 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	691b      	ldr	r3, [r3, #16]
 8001e3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e44:	d10f      	bne.n	8001e66 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e54:	d107      	bne.n	8001e66 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8001e5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f000 f91f 	bl	80020a4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	691b      	ldr	r3, [r3, #16]
 8001e6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e70:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001e74:	d10f      	bne.n	8001e96 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e80:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001e84:	d107      	bne.n	8001e96 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8001e8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f000 f911 	bl	80020b8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e96:	bf00      	nop
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	b083      	sub	sp, #12
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ea6:	bf00      	nop
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	b083      	sub	sp, #12
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001eba:	bf00      	nop
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr

08001ec6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	b083      	sub	sp, #12
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ece:	bf00      	nop
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr

08001eda <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001eda:	b480      	push	{r7}
 8001edc:	b083      	sub	sp, #12
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ee2:	bf00      	nop
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
	...

08001ef0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a46      	ldr	r2, [pc, #280]	; (800201c <TIM_Base_SetConfig+0x12c>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d017      	beq.n	8001f38 <TIM_Base_SetConfig+0x48>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f0e:	d013      	beq.n	8001f38 <TIM_Base_SetConfig+0x48>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4a43      	ldr	r2, [pc, #268]	; (8002020 <TIM_Base_SetConfig+0x130>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d00f      	beq.n	8001f38 <TIM_Base_SetConfig+0x48>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4a42      	ldr	r2, [pc, #264]	; (8002024 <TIM_Base_SetConfig+0x134>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d00b      	beq.n	8001f38 <TIM_Base_SetConfig+0x48>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4a41      	ldr	r2, [pc, #260]	; (8002028 <TIM_Base_SetConfig+0x138>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d007      	beq.n	8001f38 <TIM_Base_SetConfig+0x48>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4a40      	ldr	r2, [pc, #256]	; (800202c <TIM_Base_SetConfig+0x13c>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d003      	beq.n	8001f38 <TIM_Base_SetConfig+0x48>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4a3f      	ldr	r2, [pc, #252]	; (8002030 <TIM_Base_SetConfig+0x140>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d108      	bne.n	8001f4a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	68fa      	ldr	r2, [r7, #12]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a33      	ldr	r2, [pc, #204]	; (800201c <TIM_Base_SetConfig+0x12c>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d023      	beq.n	8001f9a <TIM_Base_SetConfig+0xaa>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f58:	d01f      	beq.n	8001f9a <TIM_Base_SetConfig+0xaa>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a30      	ldr	r2, [pc, #192]	; (8002020 <TIM_Base_SetConfig+0x130>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d01b      	beq.n	8001f9a <TIM_Base_SetConfig+0xaa>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a2f      	ldr	r2, [pc, #188]	; (8002024 <TIM_Base_SetConfig+0x134>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d017      	beq.n	8001f9a <TIM_Base_SetConfig+0xaa>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a2e      	ldr	r2, [pc, #184]	; (8002028 <TIM_Base_SetConfig+0x138>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d013      	beq.n	8001f9a <TIM_Base_SetConfig+0xaa>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a2d      	ldr	r2, [pc, #180]	; (800202c <TIM_Base_SetConfig+0x13c>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d00f      	beq.n	8001f9a <TIM_Base_SetConfig+0xaa>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a2d      	ldr	r2, [pc, #180]	; (8002034 <TIM_Base_SetConfig+0x144>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d00b      	beq.n	8001f9a <TIM_Base_SetConfig+0xaa>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a2c      	ldr	r2, [pc, #176]	; (8002038 <TIM_Base_SetConfig+0x148>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d007      	beq.n	8001f9a <TIM_Base_SetConfig+0xaa>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a2b      	ldr	r2, [pc, #172]	; (800203c <TIM_Base_SetConfig+0x14c>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d003      	beq.n	8001f9a <TIM_Base_SetConfig+0xaa>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a26      	ldr	r2, [pc, #152]	; (8002030 <TIM_Base_SetConfig+0x140>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d108      	bne.n	8001fac <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fa0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	68fa      	ldr	r2, [r7, #12]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	695b      	ldr	r3, [r3, #20]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	68fa      	ldr	r2, [r7, #12]
 8001fbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	689a      	ldr	r2, [r3, #8]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a12      	ldr	r2, [pc, #72]	; (800201c <TIM_Base_SetConfig+0x12c>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d013      	beq.n	8002000 <TIM_Base_SetConfig+0x110>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a14      	ldr	r2, [pc, #80]	; (800202c <TIM_Base_SetConfig+0x13c>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d00f      	beq.n	8002000 <TIM_Base_SetConfig+0x110>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a14      	ldr	r2, [pc, #80]	; (8002034 <TIM_Base_SetConfig+0x144>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d00b      	beq.n	8002000 <TIM_Base_SetConfig+0x110>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a13      	ldr	r2, [pc, #76]	; (8002038 <TIM_Base_SetConfig+0x148>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d007      	beq.n	8002000 <TIM_Base_SetConfig+0x110>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4a12      	ldr	r2, [pc, #72]	; (800203c <TIM_Base_SetConfig+0x14c>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d003      	beq.n	8002000 <TIM_Base_SetConfig+0x110>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4a0d      	ldr	r2, [pc, #52]	; (8002030 <TIM_Base_SetConfig+0x140>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d103      	bne.n	8002008 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	691a      	ldr	r2, [r3, #16]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	615a      	str	r2, [r3, #20]
}
 800200e:	bf00      	nop
 8002010:	3714      	adds	r7, #20
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	40012c00 	.word	0x40012c00
 8002020:	40000400 	.word	0x40000400
 8002024:	40000800 	.word	0x40000800
 8002028:	40000c00 	.word	0x40000c00
 800202c:	40013400 	.word	0x40013400
 8002030:	40015000 	.word	0x40015000
 8002034:	40014000 	.word	0x40014000
 8002038:	40014400 	.word	0x40014400
 800203c:	40014800 	.word	0x40014800

08002040 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8002098:	bf00      	nop
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f103 0208 	add.w	r2, r3, #8
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f04f 32ff 	mov.w	r2, #4294967295
 80020e4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f103 0208 	add.w	r2, r3, #8
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f103 0208 	add.w	r2, r3, #8
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800211a:	bf00      	nop
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002126:	b480      	push	{r7}
 8002128:	b085      	sub	sp, #20
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
 800212e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	68fa      	ldr	r2, [r7, #12]
 800213a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	689a      	ldr	r2, [r3, #8]
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	683a      	ldr	r2, [r7, #0]
 800214a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	683a      	ldr	r2, [r7, #0]
 8002150:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	1c5a      	adds	r2, r3, #1
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	601a      	str	r2, [r3, #0]
}
 8002162:	bf00      	nop
 8002164:	3714      	adds	r7, #20
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr

0800216e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800216e:	b480      	push	{r7}
 8002170:	b085      	sub	sp, #20
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
 8002176:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002184:	d103      	bne.n	800218e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	e00c      	b.n	80021a8 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	3308      	adds	r3, #8
 8002192:	60fb      	str	r3, [r7, #12]
 8002194:	e002      	b.n	800219c <vListInsert+0x2e>
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	60fb      	str	r3, [r7, #12]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68ba      	ldr	r2, [r7, #8]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d2f6      	bcs.n	8002196 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	685a      	ldr	r2, [r3, #4]
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	683a      	ldr	r2, [r7, #0]
 80021b6:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	683a      	ldr	r2, [r7, #0]
 80021c2:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	1c5a      	adds	r2, r3, #1
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	601a      	str	r2, [r3, #0]
}
 80021d4:	bf00      	nop
 80021d6:	3714      	adds	r7, #20
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	691b      	ldr	r3, [r3, #16]
 80021ec:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	6892      	ldr	r2, [r2, #8]
 80021f6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	6852      	ldr	r2, [r2, #4]
 8002200:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	429a      	cmp	r2, r3
 800220a:	d103      	bne.n	8002214 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689a      	ldr	r2, [r3, #8]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	1e5a      	subs	r2, r3, #1
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
}
 8002228:	4618      	mov	r0, r3
 800222a:	3714      	adds	r7, #20
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d10a      	bne.n	800225e <xQueueGenericReset+0x2a>
        __asm volatile
 8002248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800224c:	f383 8811 	msr	BASEPRI, r3
 8002250:	f3bf 8f6f 	isb	sy
 8002254:	f3bf 8f4f 	dsb	sy
 8002258:	60bb      	str	r3, [r7, #8]
    }
 800225a:	bf00      	nop
 800225c:	e7fe      	b.n	800225c <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 800225e:	f002 f851 	bl	8004304 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800226a:	68f9      	ldr	r1, [r7, #12]
 800226c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800226e:	fb01 f303 	mul.w	r3, r1, r3
 8002272:	441a      	add	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2200      	movs	r2, #0
 800227c:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800228e:	3b01      	subs	r3, #1
 8002290:	68f9      	ldr	r1, [r7, #12]
 8002292:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002294:	fb01 f303 	mul.w	r3, r1, r3
 8002298:	441a      	add	r2, r3
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	22ff      	movs	r2, #255	; 0xff
 80022a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	22ff      	movs	r2, #255	; 0xff
 80022aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d109      	bne.n	80022c8 <xQueueGenericReset+0x94>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d00f      	beq.n	80022dc <xQueueGenericReset+0xa8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	3310      	adds	r3, #16
 80022c0:	4618      	mov	r0, r3
 80022c2:	f001 f8b3 	bl	800342c <xTaskRemoveFromEventList>
 80022c6:	e009      	b.n	80022dc <xQueueGenericReset+0xa8>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	3310      	adds	r3, #16
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff fefd 	bl	80020cc <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	3324      	adds	r3, #36	; 0x24
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7ff fef8 	bl	80020cc <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80022dc:	f002 f842 	bl	8004364 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80022e0:	2301      	movs	r3, #1
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b08c      	sub	sp, #48	; 0x30
 80022ee:	af02      	add	r7, sp, #8
 80022f0:	60f8      	str	r0, [r7, #12]
 80022f2:	60b9      	str	r1, [r7, #8]
 80022f4:	4613      	mov	r3, r2
 80022f6:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d10a      	bne.n	8002314 <xQueueGenericCreate+0x2a>
        __asm volatile
 80022fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002302:	f383 8811 	msr	BASEPRI, r3
 8002306:	f3bf 8f6f 	isb	sy
 800230a:	f3bf 8f4f 	dsb	sy
 800230e:	61bb      	str	r3, [r7, #24]
    }
 8002310:	bf00      	nop
 8002312:	e7fe      	b.n	8002312 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	68ba      	ldr	r2, [r7, #8]
 8002318:	fb02 f303 	mul.w	r3, r2, r3
 800231c:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d006      	beq.n	8002332 <xQueueGenericCreate+0x48>
 8002324:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	fbb2 f3f3 	udiv	r3, r2, r3
 800232c:	68fa      	ldr	r2, [r7, #12]
 800232e:	429a      	cmp	r2, r3
 8002330:	d101      	bne.n	8002336 <xQueueGenericCreate+0x4c>
 8002332:	2301      	movs	r3, #1
 8002334:	e000      	b.n	8002338 <xQueueGenericCreate+0x4e>
 8002336:	2300      	movs	r3, #0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d10a      	bne.n	8002352 <xQueueGenericCreate+0x68>
        __asm volatile
 800233c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002340:	f383 8811 	msr	BASEPRI, r3
 8002344:	f3bf 8f6f 	isb	sy
 8002348:	f3bf 8f4f 	dsb	sy
 800234c:	617b      	str	r3, [r7, #20]
    }
 800234e:	bf00      	nop
 8002350:	e7fe      	b.n	8002350 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002354:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002358:	d90a      	bls.n	8002370 <xQueueGenericCreate+0x86>
        __asm volatile
 800235a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800235e:	f383 8811 	msr	BASEPRI, r3
 8002362:	f3bf 8f6f 	isb	sy
 8002366:	f3bf 8f4f 	dsb	sy
 800236a:	613b      	str	r3, [r7, #16]
    }
 800236c:	bf00      	nop
 800236e:	e7fe      	b.n	800236e <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002372:	3350      	adds	r3, #80	; 0x50
 8002374:	4618      	mov	r0, r3
 8002376:	f002 f8f1 	bl	800455c <pvPortMalloc>
 800237a:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800237c:	6a3b      	ldr	r3, [r7, #32]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d00d      	beq.n	800239e <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002382:	6a3b      	ldr	r3, [r7, #32]
 8002384:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	3350      	adds	r3, #80	; 0x50
 800238a:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800238c:	79fa      	ldrb	r2, [r7, #7]
 800238e:	6a3b      	ldr	r3, [r7, #32]
 8002390:	9300      	str	r3, [sp, #0]
 8002392:	4613      	mov	r3, r2
 8002394:	69fa      	ldr	r2, [r7, #28]
 8002396:	68b9      	ldr	r1, [r7, #8]
 8002398:	68f8      	ldr	r0, [r7, #12]
 800239a:	f000 f805 	bl	80023a8 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800239e:	6a3b      	ldr	r3, [r7, #32]
    }
 80023a0:	4618      	mov	r0, r3
 80023a2:	3728      	adds	r7, #40	; 0x28
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	607a      	str	r2, [r7, #4]
 80023b4:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d103      	bne.n	80023c4 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	601a      	str	r2, [r3, #0]
 80023c2:	e002      	b.n	80023ca <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	68fa      	ldr	r2, [r7, #12]
 80023ce:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	68ba      	ldr	r2, [r7, #8]
 80023d4:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80023d6:	2101      	movs	r1, #1
 80023d8:	69b8      	ldr	r0, [r7, #24]
 80023da:	f7ff ff2b 	bl	8002234 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	78fa      	ldrb	r2, [r7, #3]
 80023e2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80023e6:	78fb      	ldrb	r3, [r7, #3]
 80023e8:	68ba      	ldr	r2, [r7, #8]
 80023ea:	68f9      	ldr	r1, [r7, #12]
 80023ec:	2073      	movs	r0, #115	; 0x73
 80023ee:	f003 fc83 	bl	8005cf8 <SEGGER_SYSVIEW_RecordU32x3>
}
 80023f2:	bf00      	nop
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
	...

080023fc <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b090      	sub	sp, #64	; 0x40
 8002400:	af02      	add	r7, sp, #8
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
 8002408:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800240a:	2300      	movs	r3, #0
 800240c:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8002412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002414:	2b00      	cmp	r3, #0
 8002416:	d10a      	bne.n	800242e <xQueueGenericSend+0x32>
        __asm volatile
 8002418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800241c:	f383 8811 	msr	BASEPRI, r3
 8002420:	f3bf 8f6f 	isb	sy
 8002424:	f3bf 8f4f 	dsb	sy
 8002428:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800242a:	bf00      	nop
 800242c:	e7fe      	b.n	800242c <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d103      	bne.n	800243c <xQueueGenericSend+0x40>
 8002434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002438:	2b00      	cmp	r3, #0
 800243a:	d101      	bne.n	8002440 <xQueueGenericSend+0x44>
 800243c:	2301      	movs	r3, #1
 800243e:	e000      	b.n	8002442 <xQueueGenericSend+0x46>
 8002440:	2300      	movs	r3, #0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d10a      	bne.n	800245c <xQueueGenericSend+0x60>
        __asm volatile
 8002446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800244a:	f383 8811 	msr	BASEPRI, r3
 800244e:	f3bf 8f6f 	isb	sy
 8002452:	f3bf 8f4f 	dsb	sy
 8002456:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002458:	bf00      	nop
 800245a:	e7fe      	b.n	800245a <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	2b02      	cmp	r3, #2
 8002460:	d103      	bne.n	800246a <xQueueGenericSend+0x6e>
 8002462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002466:	2b01      	cmp	r3, #1
 8002468:	d101      	bne.n	800246e <xQueueGenericSend+0x72>
 800246a:	2301      	movs	r3, #1
 800246c:	e000      	b.n	8002470 <xQueueGenericSend+0x74>
 800246e:	2300      	movs	r3, #0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d10a      	bne.n	800248a <xQueueGenericSend+0x8e>
        __asm volatile
 8002474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002478:	f383 8811 	msr	BASEPRI, r3
 800247c:	f3bf 8f6f 	isb	sy
 8002480:	f3bf 8f4f 	dsb	sy
 8002484:	623b      	str	r3, [r7, #32]
    }
 8002486:	bf00      	nop
 8002488:	e7fe      	b.n	8002488 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800248a:	f001 f969 	bl	8003760 <xTaskGetSchedulerState>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d102      	bne.n	800249a <xQueueGenericSend+0x9e>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <xQueueGenericSend+0xa2>
 800249a:	2301      	movs	r3, #1
 800249c:	e000      	b.n	80024a0 <xQueueGenericSend+0xa4>
 800249e:	2300      	movs	r3, #0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d10a      	bne.n	80024ba <xQueueGenericSend+0xbe>
        __asm volatile
 80024a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024a8:	f383 8811 	msr	BASEPRI, r3
 80024ac:	f3bf 8f6f 	isb	sy
 80024b0:	f3bf 8f4f 	dsb	sy
 80024b4:	61fb      	str	r3, [r7, #28]
    }
 80024b6:	bf00      	nop
 80024b8:	e7fe      	b.n	80024b8 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80024ba:	f001 ff23 	bl	8004304 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80024be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d302      	bcc.n	80024d0 <xQueueGenericSend+0xd4>
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d11f      	bne.n	8002510 <xQueueGenericSend+0x114>
            {
                traceQUEUE_SEND( pxQueue );
 80024d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d2:	4618      	mov	r0, r3
 80024d4:	f004 f99c 	bl	8006810 <SEGGER_SYSVIEW_ShrinkId>
 80024d8:	68ba      	ldr	r2, [r7, #8]
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	9300      	str	r3, [sp, #0]
 80024e0:	460b      	mov	r3, r1
 80024e2:	4601      	mov	r1, r0
 80024e4:	205a      	movs	r0, #90	; 0x5a
 80024e6:	f003 fc7d 	bl	8005de4 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80024ea:	683a      	ldr	r2, [r7, #0]
 80024ec:	68b9      	ldr	r1, [r7, #8]
 80024ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024f0:	f000 fa56 	bl	80029a0 <prvCopyDataToQueue>
 80024f4:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80024f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d004      	beq.n	8002508 <xQueueGenericSend+0x10c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80024fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002500:	3324      	adds	r3, #36	; 0x24
 8002502:	4618      	mov	r0, r3
 8002504:	f000 ff92 	bl	800342c <xTaskRemoveFromEventList>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002508:	f001 ff2c 	bl	8004364 <vPortExitCritical>
                return pdPASS;
 800250c:	2301      	movs	r3, #1
 800250e:	e07d      	b.n	800260c <xQueueGenericSend+0x210>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d110      	bne.n	8002538 <xQueueGenericSend+0x13c>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002516:	f001 ff25 	bl	8004364 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 800251a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800251c:	4618      	mov	r0, r3
 800251e:	f004 f977 	bl	8006810 <SEGGER_SYSVIEW_ShrinkId>
 8002522:	68ba      	ldr	r2, [r7, #8]
 8002524:	6879      	ldr	r1, [r7, #4]
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	9300      	str	r3, [sp, #0]
 800252a:	460b      	mov	r3, r1
 800252c:	4601      	mov	r1, r0
 800252e:	205a      	movs	r0, #90	; 0x5a
 8002530:	f003 fc58 	bl	8005de4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8002534:	2300      	movs	r3, #0
 8002536:	e069      	b.n	800260c <xQueueGenericSend+0x210>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800253a:	2b00      	cmp	r3, #0
 800253c:	d106      	bne.n	800254c <xQueueGenericSend+0x150>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800253e:	f107 0314 	add.w	r3, r7, #20
 8002542:	4618      	mov	r0, r3
 8002544:	f000 ffd8 	bl	80034f8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002548:	2301      	movs	r3, #1
 800254a:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800254c:	f001 ff0a 	bl	8004364 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002550:	f000 fd54 	bl	8002ffc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002554:	f001 fed6 	bl	8004304 <vPortEnterCritical>
 8002558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800255a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800255e:	b25b      	sxtb	r3, r3
 8002560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002564:	d103      	bne.n	800256e <xQueueGenericSend+0x172>
 8002566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002568:	2200      	movs	r2, #0
 800256a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800256e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002570:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002574:	b25b      	sxtb	r3, r3
 8002576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800257a:	d103      	bne.n	8002584 <xQueueGenericSend+0x188>
 800257c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800257e:	2200      	movs	r2, #0
 8002580:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002584:	f001 feee 	bl	8004364 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002588:	1d3a      	adds	r2, r7, #4
 800258a:	f107 0314 	add.w	r3, r7, #20
 800258e:	4611      	mov	r1, r2
 8002590:	4618      	mov	r0, r3
 8002592:	f000 ffc7 	bl	8003524 <xTaskCheckForTimeOut>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d124      	bne.n	80025e6 <xQueueGenericSend+0x1ea>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800259c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800259e:	f000 faf7 	bl	8002b90 <prvIsQueueFull>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d018      	beq.n	80025da <xQueueGenericSend+0x1de>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80025a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025aa:	3310      	adds	r3, #16
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	4611      	mov	r1, r2
 80025b0:	4618      	mov	r0, r3
 80025b2:	f000 fee9 	bl	8003388 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80025b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025b8:	f000 fa82 	bl	8002ac0 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80025bc:	f000 fd2c 	bl	8003018 <xTaskResumeAll>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f47f af79 	bne.w	80024ba <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 80025c8:	4b12      	ldr	r3, [pc, #72]	; (8002614 <xQueueGenericSend+0x218>)
 80025ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	f3bf 8f4f 	dsb	sy
 80025d4:	f3bf 8f6f 	isb	sy
 80025d8:	e76f      	b.n	80024ba <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80025da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025dc:	f000 fa70 	bl	8002ac0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80025e0:	f000 fd1a 	bl	8003018 <xTaskResumeAll>
 80025e4:	e769      	b.n	80024ba <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80025e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025e8:	f000 fa6a 	bl	8002ac0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80025ec:	f000 fd14 	bl	8003018 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 80025f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f2:	4618      	mov	r0, r3
 80025f4:	f004 f90c 	bl	8006810 <SEGGER_SYSVIEW_ShrinkId>
 80025f8:	68ba      	ldr	r2, [r7, #8]
 80025fa:	6879      	ldr	r1, [r7, #4]
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	9300      	str	r3, [sp, #0]
 8002600:	460b      	mov	r3, r1
 8002602:	4601      	mov	r1, r0
 8002604:	205a      	movs	r0, #90	; 0x5a
 8002606:	f003 fbed 	bl	8005de4 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 800260a:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800260c:	4618      	mov	r0, r3
 800260e:	3738      	adds	r7, #56	; 0x38
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	e000ed04 	.word	0xe000ed04

08002618 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b090      	sub	sp, #64	; 0x40
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
 8002624:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800262a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800262c:	2b00      	cmp	r3, #0
 800262e:	d10a      	bne.n	8002646 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8002630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002634:	f383 8811 	msr	BASEPRI, r3
 8002638:	f3bf 8f6f 	isb	sy
 800263c:	f3bf 8f4f 	dsb	sy
 8002640:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002642:	bf00      	nop
 8002644:	e7fe      	b.n	8002644 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d103      	bne.n	8002654 <xQueueGenericSendFromISR+0x3c>
 800264c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800264e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002650:	2b00      	cmp	r3, #0
 8002652:	d101      	bne.n	8002658 <xQueueGenericSendFromISR+0x40>
 8002654:	2301      	movs	r3, #1
 8002656:	e000      	b.n	800265a <xQueueGenericSendFromISR+0x42>
 8002658:	2300      	movs	r3, #0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10a      	bne.n	8002674 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 800265e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002662:	f383 8811 	msr	BASEPRI, r3
 8002666:	f3bf 8f6f 	isb	sy
 800266a:	f3bf 8f4f 	dsb	sy
 800266e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002670:	bf00      	nop
 8002672:	e7fe      	b.n	8002672 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	2b02      	cmp	r3, #2
 8002678:	d103      	bne.n	8002682 <xQueueGenericSendFromISR+0x6a>
 800267a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800267c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800267e:	2b01      	cmp	r3, #1
 8002680:	d101      	bne.n	8002686 <xQueueGenericSendFromISR+0x6e>
 8002682:	2301      	movs	r3, #1
 8002684:	e000      	b.n	8002688 <xQueueGenericSendFromISR+0x70>
 8002686:	2300      	movs	r3, #0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d10a      	bne.n	80026a2 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 800268c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002690:	f383 8811 	msr	BASEPRI, r3
 8002694:	f3bf 8f6f 	isb	sy
 8002698:	f3bf 8f4f 	dsb	sy
 800269c:	623b      	str	r3, [r7, #32]
    }
 800269e:	bf00      	nop
 80026a0:	e7fe      	b.n	80026a0 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80026a2:	f001 ff1b 	bl	80044dc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80026a6:	f3ef 8211 	mrs	r2, BASEPRI
 80026aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ae:	f383 8811 	msr	BASEPRI, r3
 80026b2:	f3bf 8f6f 	isb	sy
 80026b6:	f3bf 8f4f 	dsb	sy
 80026ba:	61fa      	str	r2, [r7, #28]
 80026bc:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80026be:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80026c0:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80026c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d302      	bcc.n	80026d4 <xQueueGenericSendFromISR+0xbc>
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d148      	bne.n	8002766 <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80026d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80026de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e2:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 80026e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026e6:	4618      	mov	r0, r3
 80026e8:	f004 f892 	bl	8006810 <SEGGER_SYSVIEW_ShrinkId>
 80026ec:	4601      	mov	r1, r0
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	461a      	mov	r2, r3
 80026f2:	2060      	movs	r0, #96	; 0x60
 80026f4:	f003 faa6 	bl	8005c44 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80026f8:	683a      	ldr	r2, [r7, #0]
 80026fa:	68b9      	ldr	r1, [r7, #8]
 80026fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80026fe:	f000 f94f 	bl	80029a0 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002702:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800270a:	d112      	bne.n	8002732 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800270c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800270e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002710:	2b00      	cmp	r3, #0
 8002712:	d025      	beq.n	8002760 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002716:	3324      	adds	r3, #36	; 0x24
 8002718:	4618      	mov	r0, r3
 800271a:	f000 fe87 	bl	800342c <xTaskRemoveFromEventList>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d01d      	beq.n	8002760 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d01a      	beq.n	8002760 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2201      	movs	r2, #1
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	e016      	b.n	8002760 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002732:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002736:	2b7f      	cmp	r3, #127	; 0x7f
 8002738:	d10a      	bne.n	8002750 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 800273a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800273e:	f383 8811 	msr	BASEPRI, r3
 8002742:	f3bf 8f6f 	isb	sy
 8002746:	f3bf 8f4f 	dsb	sy
 800274a:	617b      	str	r3, [r7, #20]
    }
 800274c:	bf00      	nop
 800274e:	e7fe      	b.n	800274e <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002750:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002754:	3301      	adds	r3, #1
 8002756:	b2db      	uxtb	r3, r3
 8002758:	b25a      	sxtb	r2, r3
 800275a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800275c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002760:	2301      	movs	r3, #1
 8002762:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002764:	e00b      	b.n	800277e <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8002766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002768:	4618      	mov	r0, r3
 800276a:	f004 f851 	bl	8006810 <SEGGER_SYSVIEW_ShrinkId>
 800276e:	4601      	mov	r1, r0
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	461a      	mov	r2, r3
 8002774:	2060      	movs	r0, #96	; 0x60
 8002776:	f003 fa65 	bl	8005c44 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 800277a:	2300      	movs	r3, #0
 800277c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800277e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002780:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002788:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800278a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800278c:	4618      	mov	r0, r3
 800278e:	3740      	adds	r7, #64	; 0x40
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002794:	b590      	push	{r4, r7, lr}
 8002796:	b08f      	sub	sp, #60	; 0x3c
 8002798:	af02      	add	r7, sp, #8
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80027a0:	2300      	movs	r3, #0
 80027a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80027a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d10a      	bne.n	80027c4 <xQueueReceive+0x30>
        __asm volatile
 80027ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027b2:	f383 8811 	msr	BASEPRI, r3
 80027b6:	f3bf 8f6f 	isb	sy
 80027ba:	f3bf 8f4f 	dsb	sy
 80027be:	623b      	str	r3, [r7, #32]
    }
 80027c0:	bf00      	nop
 80027c2:	e7fe      	b.n	80027c2 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d103      	bne.n	80027d2 <xQueueReceive+0x3e>
 80027ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d101      	bne.n	80027d6 <xQueueReceive+0x42>
 80027d2:	2301      	movs	r3, #1
 80027d4:	e000      	b.n	80027d8 <xQueueReceive+0x44>
 80027d6:	2300      	movs	r3, #0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d10a      	bne.n	80027f2 <xQueueReceive+0x5e>
        __asm volatile
 80027dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027e0:	f383 8811 	msr	BASEPRI, r3
 80027e4:	f3bf 8f6f 	isb	sy
 80027e8:	f3bf 8f4f 	dsb	sy
 80027ec:	61fb      	str	r3, [r7, #28]
    }
 80027ee:	bf00      	nop
 80027f0:	e7fe      	b.n	80027f0 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80027f2:	f000 ffb5 	bl	8003760 <xTaskGetSchedulerState>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d102      	bne.n	8002802 <xQueueReceive+0x6e>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <xQueueReceive+0x72>
 8002802:	2301      	movs	r3, #1
 8002804:	e000      	b.n	8002808 <xQueueReceive+0x74>
 8002806:	2300      	movs	r3, #0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d10a      	bne.n	8002822 <xQueueReceive+0x8e>
        __asm volatile
 800280c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002810:	f383 8811 	msr	BASEPRI, r3
 8002814:	f3bf 8f6f 	isb	sy
 8002818:	f3bf 8f4f 	dsb	sy
 800281c:	61bb      	str	r3, [r7, #24]
    }
 800281e:	bf00      	nop
 8002820:	e7fe      	b.n	8002820 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002822:	f001 fd6f 	bl	8004304 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800282a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800282c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282e:	2b00      	cmp	r3, #0
 8002830:	d024      	beq.n	800287c <xQueueReceive+0xe8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002832:	68b9      	ldr	r1, [r7, #8]
 8002834:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002836:	f000 f91d 	bl	8002a74 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 800283a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800283c:	4618      	mov	r0, r3
 800283e:	f003 ffe7 	bl	8006810 <SEGGER_SYSVIEW_ShrinkId>
 8002842:	4604      	mov	r4, r0
 8002844:	2000      	movs	r0, #0
 8002846:	f003 ffe3 	bl	8006810 <SEGGER_SYSVIEW_ShrinkId>
 800284a:	4602      	mov	r2, r0
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2101      	movs	r1, #1
 8002850:	9100      	str	r1, [sp, #0]
 8002852:	4621      	mov	r1, r4
 8002854:	205c      	movs	r0, #92	; 0x5c
 8002856:	f003 fac5 	bl	8005de4 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800285a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285c:	1e5a      	subs	r2, r3, #1
 800285e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002860:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d004      	beq.n	8002874 <xQueueReceive+0xe0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800286a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800286c:	3310      	adds	r3, #16
 800286e:	4618      	mov	r0, r3
 8002870:	f000 fddc 	bl	800342c <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002874:	f001 fd76 	bl	8004364 <vPortExitCritical>
                return pdPASS;
 8002878:	2301      	movs	r3, #1
 800287a:	e08a      	b.n	8002992 <xQueueReceive+0x1fe>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d113      	bne.n	80028aa <xQueueReceive+0x116>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002882:	f001 fd6f 	bl	8004364 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002888:	4618      	mov	r0, r3
 800288a:	f003 ffc1 	bl	8006810 <SEGGER_SYSVIEW_ShrinkId>
 800288e:	4604      	mov	r4, r0
 8002890:	2000      	movs	r0, #0
 8002892:	f003 ffbd 	bl	8006810 <SEGGER_SYSVIEW_ShrinkId>
 8002896:	4602      	mov	r2, r0
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2101      	movs	r1, #1
 800289c:	9100      	str	r1, [sp, #0]
 800289e:	4621      	mov	r1, r4
 80028a0:	205c      	movs	r0, #92	; 0x5c
 80028a2:	f003 fa9f 	bl	8005de4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80028a6:	2300      	movs	r3, #0
 80028a8:	e073      	b.n	8002992 <xQueueReceive+0x1fe>
                }
                else if( xEntryTimeSet == pdFALSE )
 80028aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d106      	bne.n	80028be <xQueueReceive+0x12a>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80028b0:	f107 0310 	add.w	r3, r7, #16
 80028b4:	4618      	mov	r0, r3
 80028b6:	f000 fe1f 	bl	80034f8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80028ba:	2301      	movs	r3, #1
 80028bc:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80028be:	f001 fd51 	bl	8004364 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80028c2:	f000 fb9b 	bl	8002ffc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80028c6:	f001 fd1d 	bl	8004304 <vPortEnterCritical>
 80028ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028d0:	b25b      	sxtb	r3, r3
 80028d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d6:	d103      	bne.n	80028e0 <xQueueReceive+0x14c>
 80028d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028e6:	b25b      	sxtb	r3, r3
 80028e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ec:	d103      	bne.n	80028f6 <xQueueReceive+0x162>
 80028ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028f6:	f001 fd35 	bl	8004364 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80028fa:	1d3a      	adds	r2, r7, #4
 80028fc:	f107 0310 	add.w	r3, r7, #16
 8002900:	4611      	mov	r1, r2
 8002902:	4618      	mov	r0, r3
 8002904:	f000 fe0e 	bl	8003524 <xTaskCheckForTimeOut>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d124      	bne.n	8002958 <xQueueReceive+0x1c4>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800290e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002910:	f000 f928 	bl	8002b64 <prvIsQueueEmpty>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d018      	beq.n	800294c <xQueueReceive+0x1b8>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800291a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800291c:	3324      	adds	r3, #36	; 0x24
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	4611      	mov	r1, r2
 8002922:	4618      	mov	r0, r3
 8002924:	f000 fd30 	bl	8003388 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002928:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800292a:	f000 f8c9 	bl	8002ac0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800292e:	f000 fb73 	bl	8003018 <xTaskResumeAll>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	f47f af74 	bne.w	8002822 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 800293a:	4b18      	ldr	r3, [pc, #96]	; (800299c <xQueueReceive+0x208>)
 800293c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002940:	601a      	str	r2, [r3, #0]
 8002942:	f3bf 8f4f 	dsb	sy
 8002946:	f3bf 8f6f 	isb	sy
 800294a:	e76a      	b.n	8002822 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800294c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800294e:	f000 f8b7 	bl	8002ac0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002952:	f000 fb61 	bl	8003018 <xTaskResumeAll>
 8002956:	e764      	b.n	8002822 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002958:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800295a:	f000 f8b1 	bl	8002ac0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800295e:	f000 fb5b 	bl	8003018 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002962:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002964:	f000 f8fe 	bl	8002b64 <prvIsQueueEmpty>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	f43f af59 	beq.w	8002822 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002972:	4618      	mov	r0, r3
 8002974:	f003 ff4c 	bl	8006810 <SEGGER_SYSVIEW_ShrinkId>
 8002978:	4604      	mov	r4, r0
 800297a:	2000      	movs	r0, #0
 800297c:	f003 ff48 	bl	8006810 <SEGGER_SYSVIEW_ShrinkId>
 8002980:	4602      	mov	r2, r0
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2101      	movs	r1, #1
 8002986:	9100      	str	r1, [sp, #0]
 8002988:	4621      	mov	r1, r4
 800298a:	205c      	movs	r0, #92	; 0x5c
 800298c:	f003 fa2a 	bl	8005de4 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002990:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002992:	4618      	mov	r0, r3
 8002994:	3734      	adds	r7, #52	; 0x34
 8002996:	46bd      	mov	sp, r7
 8002998:	bd90      	pop	{r4, r7, pc}
 800299a:	bf00      	nop
 800299c:	e000ed04 	.word	0xe000ed04

080029a0 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b086      	sub	sp, #24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80029ac:	2300      	movs	r3, #0
 80029ae:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b4:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d10d      	bne.n	80029da <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d14d      	bne.n	8002a62 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f000 fee6 	bl	800379c <xTaskPriorityDisinherit>
 80029d0:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2200      	movs	r2, #0
 80029d6:	609a      	str	r2, [r3, #8]
 80029d8:	e043      	b.n	8002a62 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d119      	bne.n	8002a14 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6858      	ldr	r0, [r3, #4]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e8:	461a      	mov	r2, r3
 80029ea:	68b9      	ldr	r1, [r7, #8]
 80029ec:	f004 f8de 	bl	8006bac <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	685a      	ldr	r2, [r3, #4]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f8:	441a      	add	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	685a      	ldr	r2, [r3, #4]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d32b      	bcc.n	8002a62 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	605a      	str	r2, [r3, #4]
 8002a12:	e026      	b.n	8002a62 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	68d8      	ldr	r0, [r3, #12]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	68b9      	ldr	r1, [r7, #8]
 8002a20:	f004 f8c4 	bl	8006bac <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	68da      	ldr	r2, [r3, #12]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2c:	425b      	negs	r3, r3
 8002a2e:	441a      	add	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	68da      	ldr	r2, [r3, #12]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d207      	bcs.n	8002a50 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	689a      	ldr	r2, [r3, #8]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a48:	425b      	negs	r3, r3
 8002a4a:	441a      	add	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d105      	bne.n	8002a62 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d002      	beq.n	8002a62 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	1c5a      	adds	r2, r3, #1
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002a6a:	697b      	ldr	r3, [r7, #20]
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3718      	adds	r7, #24
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d018      	beq.n	8002ab8 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	68da      	ldr	r2, [r3, #12]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	441a      	add	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68da      	ldr	r2, [r3, #12]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d303      	bcc.n	8002aa8 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	68d9      	ldr	r1, [r3, #12]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	6838      	ldr	r0, [r7, #0]
 8002ab4:	f004 f87a 	bl	8006bac <memcpy>
    }
}
 8002ab8:	bf00      	nop
 8002aba:	3708      	adds	r7, #8
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002ac8:	f001 fc1c 	bl	8004304 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ad2:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ad4:	e011      	b.n	8002afa <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d012      	beq.n	8002b04 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	3324      	adds	r3, #36	; 0x24
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f000 fca2 	bl	800342c <xTaskRemoveFromEventList>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002aee:	f000 fd7f 	bl	80035f0 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002af2:	7bfb      	ldrb	r3, [r7, #15]
 8002af4:	3b01      	subs	r3, #1
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002afa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	dce9      	bgt.n	8002ad6 <prvUnlockQueue+0x16>
 8002b02:	e000      	b.n	8002b06 <prvUnlockQueue+0x46>
                        break;
 8002b04:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	22ff      	movs	r2, #255	; 0xff
 8002b0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002b0e:	f001 fc29 	bl	8004364 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002b12:	f001 fbf7 	bl	8004304 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b1c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b1e:	e011      	b.n	8002b44 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d012      	beq.n	8002b4e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	3310      	adds	r3, #16
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f000 fc7d 	bl	800342c <xTaskRemoveFromEventList>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002b38:	f000 fd5a 	bl	80035f0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002b3c:	7bbb      	ldrb	r3, [r7, #14]
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	dce9      	bgt.n	8002b20 <prvUnlockQueue+0x60>
 8002b4c:	e000      	b.n	8002b50 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002b4e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	22ff      	movs	r2, #255	; 0xff
 8002b54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002b58:	f001 fc04 	bl	8004364 <vPortExitCritical>
}
 8002b5c:	bf00      	nop
 8002b5e:	3710      	adds	r7, #16
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002b6c:	f001 fbca 	bl	8004304 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d102      	bne.n	8002b7e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	60fb      	str	r3, [r7, #12]
 8002b7c:	e001      	b.n	8002b82 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002b82:	f001 fbef 	bl	8004364 <vPortExitCritical>

    return xReturn;
 8002b86:	68fb      	ldr	r3, [r7, #12]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3710      	adds	r7, #16
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002b98:	f001 fbb4 	bl	8004304 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d102      	bne.n	8002bae <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	60fb      	str	r3, [r7, #12]
 8002bac:	e001      	b.n	8002bb2 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002bb2:	f001 fbd7 	bl	8004364 <vPortExitCritical>

    return xReturn;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3710      	adds	r7, #16
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002bca:	2300      	movs	r3, #0
 8002bcc:	60fb      	str	r3, [r7, #12]
 8002bce:	e01e      	b.n	8002c0e <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002bd0:	4a13      	ldr	r2, [pc, #76]	; (8002c20 <vQueueAddToRegistry+0x60>)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d115      	bne.n	8002c08 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002bdc:	4910      	ldr	r1, [pc, #64]	; (8002c20 <vQueueAddToRegistry+0x60>)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002be6:	4a0e      	ldr	r2, [pc, #56]	; (8002c20 <vQueueAddToRegistry+0x60>)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	4413      	add	r3, r2
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f003 fe0b 	bl	8006810 <SEGGER_SYSVIEW_ShrinkId>
 8002bfa:	4601      	mov	r1, r0
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	461a      	mov	r2, r3
 8002c00:	2071      	movs	r0, #113	; 0x71
 8002c02:	f003 f81f 	bl	8005c44 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002c06:	e006      	b.n	8002c16 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	60fb      	str	r3, [r7, #12]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2b07      	cmp	r3, #7
 8002c12:	d9dd      	bls.n	8002bd0 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002c14:	bf00      	nop
 8002c16:	bf00      	nop
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	200000d0 	.word	0x200000d0

08002c24 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b086      	sub	sp, #24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002c34:	f001 fb66 	bl	8004304 <vPortEnterCritical>
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c3e:	b25b      	sxtb	r3, r3
 8002c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c44:	d103      	bne.n	8002c4e <vQueueWaitForMessageRestricted+0x2a>
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c54:	b25b      	sxtb	r3, r3
 8002c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c5a:	d103      	bne.n	8002c64 <vQueueWaitForMessageRestricted+0x40>
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c64:	f001 fb7e 	bl	8004364 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d106      	bne.n	8002c7e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	3324      	adds	r3, #36	; 0x24
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	68b9      	ldr	r1, [r7, #8]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f000 fba9 	bl	80033d0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002c7e:	6978      	ldr	r0, [r7, #20]
 8002c80:	f7ff ff1e 	bl	8002ac0 <prvUnlockQueue>
    }
 8002c84:	bf00      	nop
 8002c86:	3718      	adds	r7, #24
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b08c      	sub	sp, #48	; 0x30
 8002c90:	af04      	add	r7, sp, #16
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	603b      	str	r3, [r7, #0]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002c9c:	88fb      	ldrh	r3, [r7, #6]
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f001 fc5b 	bl	800455c <pvPortMalloc>
 8002ca6:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00e      	beq.n	8002ccc <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002cae:	2058      	movs	r0, #88	; 0x58
 8002cb0:	f001 fc54 	bl	800455c <pvPortMalloc>
 8002cb4:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d003      	beq.n	8002cc4 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	697a      	ldr	r2, [r7, #20]
 8002cc0:	631a      	str	r2, [r3, #48]	; 0x30
 8002cc2:	e005      	b.n	8002cd0 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002cc4:	6978      	ldr	r0, [r7, #20]
 8002cc6:	f001 fd29 	bl	800471c <vPortFree>
 8002cca:	e001      	b.n	8002cd0 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d013      	beq.n	8002cfe <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002cd6:	88fa      	ldrh	r2, [r7, #6]
 8002cd8:	2300      	movs	r3, #0
 8002cda:	9303      	str	r3, [sp, #12]
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	9302      	str	r3, [sp, #8]
 8002ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce2:	9301      	str	r3, [sp, #4]
 8002ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce6:	9300      	str	r3, [sp, #0]
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	68b9      	ldr	r1, [r7, #8]
 8002cec:	68f8      	ldr	r0, [r7, #12]
 8002cee:	f000 f80e 	bl	8002d0e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002cf2:	69f8      	ldr	r0, [r7, #28]
 8002cf4:	f000 f8a2 	bl	8002e3c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	61bb      	str	r3, [r7, #24]
 8002cfc:	e002      	b.n	8002d04 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8002d02:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002d04:	69bb      	ldr	r3, [r7, #24]
    }
 8002d06:	4618      	mov	r0, r3
 8002d08:	3720      	adds	r7, #32
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b088      	sub	sp, #32
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	60f8      	str	r0, [r7, #12]
 8002d16:	60b9      	str	r1, [r7, #8]
 8002d18:	607a      	str	r2, [r7, #4]
 8002d1a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d1e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	461a      	mov	r2, r3
 8002d26:	21a5      	movs	r1, #165	; 0xa5
 8002d28:	f003 ff12 	bl	8006b50 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002d36:	3b01      	subs	r3, #1
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4413      	add	r3, r2
 8002d3c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	f023 0307 	bic.w	r3, r3, #7
 8002d44:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	f003 0307 	and.w	r3, r3, #7
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00a      	beq.n	8002d66 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d54:	f383 8811 	msr	BASEPRI, r3
 8002d58:	f3bf 8f6f 	isb	sy
 8002d5c:	f3bf 8f4f 	dsb	sy
 8002d60:	617b      	str	r3, [r7, #20]
    }
 8002d62:	bf00      	nop
 8002d64:	e7fe      	b.n	8002d64 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d01f      	beq.n	8002dac <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	61fb      	str	r3, [r7, #28]
 8002d70:	e012      	b.n	8002d98 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002d72:	68ba      	ldr	r2, [r7, #8]
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	4413      	add	r3, r2
 8002d78:	7819      	ldrb	r1, [r3, #0]
 8002d7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	4413      	add	r3, r2
 8002d80:	3334      	adds	r3, #52	; 0x34
 8002d82:	460a      	mov	r2, r1
 8002d84:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002d86:	68ba      	ldr	r2, [r7, #8]
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d006      	beq.n	8002da0 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	3301      	adds	r3, #1
 8002d96:	61fb      	str	r3, [r7, #28]
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	2b09      	cmp	r3, #9
 8002d9c:	d9e9      	bls.n	8002d72 <prvInitialiseNewTask+0x64>
 8002d9e:	e000      	b.n	8002da2 <prvInitialiseNewTask+0x94>
            {
                break;
 8002da0:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002daa:	e003      	b.n	8002db4 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db6:	2b04      	cmp	r3, #4
 8002db8:	d901      	bls.n	8002dbe <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002dba:	2304      	movs	r3, #4
 8002dbc:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dc2:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dc8:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dcc:	2200      	movs	r2, #0
 8002dce:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd2:	3304      	adds	r3, #4
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7ff f999 	bl	800210c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ddc:	3318      	adds	r3, #24
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7ff f994 	bl	800210c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002de8:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dec:	f1c3 0205 	rsb	r2, r3, #5
 8002df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df2:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002df8:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfc:	3350      	adds	r3, #80	; 0x50
 8002dfe:	2204      	movs	r2, #4
 8002e00:	2100      	movs	r1, #0
 8002e02:	4618      	mov	r0, r3
 8002e04:	f003 fea4 	bl	8006b50 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e0a:	3354      	adds	r3, #84	; 0x54
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	2100      	movs	r1, #0
 8002e10:	4618      	mov	r0, r3
 8002e12:	f003 fe9d 	bl	8006b50 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002e16:	683a      	ldr	r2, [r7, #0]
 8002e18:	68f9      	ldr	r1, [r7, #12]
 8002e1a:	69b8      	ldr	r0, [r7, #24]
 8002e1c:	f001 f8c8 	bl	8003fb0 <pxPortInitialiseStack>
 8002e20:	4602      	mov	r2, r0
 8002e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e24:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d002      	beq.n	8002e32 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e30:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002e32:	bf00      	nop
 8002e34:	3720      	adds	r7, #32
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
	...

08002e3c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002e3c:	b5b0      	push	{r4, r5, r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af02      	add	r7, sp, #8
 8002e42:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002e44:	f001 fa5e 	bl	8004304 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002e48:	4b35      	ldr	r3, [pc, #212]	; (8002f20 <prvAddNewTaskToReadyList+0xe4>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	4a34      	ldr	r2, [pc, #208]	; (8002f20 <prvAddNewTaskToReadyList+0xe4>)
 8002e50:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002e52:	4b34      	ldr	r3, [pc, #208]	; (8002f24 <prvAddNewTaskToReadyList+0xe8>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d109      	bne.n	8002e6e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002e5a:	4a32      	ldr	r2, [pc, #200]	; (8002f24 <prvAddNewTaskToReadyList+0xe8>)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002e60:	4b2f      	ldr	r3, [pc, #188]	; (8002f20 <prvAddNewTaskToReadyList+0xe4>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d110      	bne.n	8002e8a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002e68:	f000 fbe0 	bl	800362c <prvInitialiseTaskLists>
 8002e6c:	e00d      	b.n	8002e8a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002e6e:	4b2e      	ldr	r3, [pc, #184]	; (8002f28 <prvAddNewTaskToReadyList+0xec>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d109      	bne.n	8002e8a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002e76:	4b2b      	ldr	r3, [pc, #172]	; (8002f24 <prvAddNewTaskToReadyList+0xe8>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d802      	bhi.n	8002e8a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002e84:	4a27      	ldr	r2, [pc, #156]	; (8002f24 <prvAddNewTaskToReadyList+0xe8>)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002e8a:	4b28      	ldr	r3, [pc, #160]	; (8002f2c <prvAddNewTaskToReadyList+0xf0>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	3301      	adds	r3, #1
 8002e90:	4a26      	ldr	r2, [pc, #152]	; (8002f2c <prvAddNewTaskToReadyList+0xf0>)
 8002e92:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002e94:	4b25      	ldr	r3, [pc, #148]	; (8002f2c <prvAddNewTaskToReadyList+0xf0>)
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d016      	beq.n	8002ed0 <prvAddNewTaskToReadyList+0x94>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f003 fb8d 	bl	80065c4 <SEGGER_SYSVIEW_OnTaskCreate>
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eba:	461d      	mov	r5, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	461c      	mov	r4, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec6:	1ae3      	subs	r3, r4, r3
 8002ec8:	9300      	str	r3, [sp, #0]
 8002eca:	462b      	mov	r3, r5
 8002ecc:	f001 fdf4 	bl	8004ab8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f003 fbfa 	bl	80066cc <SEGGER_SYSVIEW_OnTaskStartReady>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002edc:	2201      	movs	r2, #1
 8002ede:	409a      	lsls	r2, r3
 8002ee0:	4b13      	ldr	r3, [pc, #76]	; (8002f30 <prvAddNewTaskToReadyList+0xf4>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	4a12      	ldr	r2, [pc, #72]	; (8002f30 <prvAddNewTaskToReadyList+0xf4>)
 8002ee8:	6013      	str	r3, [r2, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eee:	4613      	mov	r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	4413      	add	r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	4a0f      	ldr	r2, [pc, #60]	; (8002f34 <prvAddNewTaskToReadyList+0xf8>)
 8002ef8:	441a      	add	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	3304      	adds	r3, #4
 8002efe:	4619      	mov	r1, r3
 8002f00:	4610      	mov	r0, r2
 8002f02:	f7ff f910 	bl	8002126 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002f06:	f001 fa2d 	bl	8004364 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002f0a:	4b07      	ldr	r3, [pc, #28]	; (8002f28 <prvAddNewTaskToReadyList+0xec>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <prvAddNewTaskToReadyList+0xda>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002f12:	4b04      	ldr	r3, [pc, #16]	; (8002f24 <prvAddNewTaskToReadyList+0xe8>)
 8002f14:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002f16:	bf00      	nop
 8002f18:	3708      	adds	r7, #8
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bdb0      	pop	{r4, r5, r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	200001e8 	.word	0x200001e8
 8002f24:	20000110 	.word	0x20000110
 8002f28:	200001f4 	.word	0x200001f4
 8002f2c:	20000204 	.word	0x20000204
 8002f30:	200001f0 	.word	0x200001f0
 8002f34:	20000114 	.word	0x20000114

08002f38 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002f3e:	4b27      	ldr	r3, [pc, #156]	; (8002fdc <vTaskStartScheduler+0xa4>)
 8002f40:	9301      	str	r3, [sp, #4]
 8002f42:	2300      	movs	r3, #0
 8002f44:	9300      	str	r3, [sp, #0]
 8002f46:	2300      	movs	r3, #0
 8002f48:	2282      	movs	r2, #130	; 0x82
 8002f4a:	4925      	ldr	r1, [pc, #148]	; (8002fe0 <vTaskStartScheduler+0xa8>)
 8002f4c:	4825      	ldr	r0, [pc, #148]	; (8002fe4 <vTaskStartScheduler+0xac>)
 8002f4e:	f7ff fe9d 	bl	8002c8c <xTaskCreate>
 8002f52:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d102      	bne.n	8002f60 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8002f5a:	f000 fd17 	bl	800398c <xTimerCreateTimerTask>
 8002f5e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d124      	bne.n	8002fb0 <vTaskStartScheduler+0x78>
        __asm volatile
 8002f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f6a:	f383 8811 	msr	BASEPRI, r3
 8002f6e:	f3bf 8f6f 	isb	sy
 8002f72:	f3bf 8f4f 	dsb	sy
 8002f76:	60bb      	str	r3, [r7, #8]
    }
 8002f78:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002f7a:	4b1b      	ldr	r3, [pc, #108]	; (8002fe8 <vTaskStartScheduler+0xb0>)
 8002f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f80:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002f82:	4b1a      	ldr	r3, [pc, #104]	; (8002fec <vTaskStartScheduler+0xb4>)
 8002f84:	2201      	movs	r2, #1
 8002f86:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002f88:	4b19      	ldr	r3, [pc, #100]	; (8002ff0 <vTaskStartScheduler+0xb8>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002f8e:	4b19      	ldr	r3, [pc, #100]	; (8002ff4 <vTaskStartScheduler+0xbc>)
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	4b12      	ldr	r3, [pc, #72]	; (8002fdc <vTaskStartScheduler+0xa4>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d102      	bne.n	8002fa0 <vTaskStartScheduler+0x68>
 8002f9a:	f003 faf7 	bl	800658c <SEGGER_SYSVIEW_OnIdle>
 8002f9e:	e004      	b.n	8002faa <vTaskStartScheduler+0x72>
 8002fa0:	4b14      	ldr	r3, [pc, #80]	; (8002ff4 <vTaskStartScheduler+0xbc>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f003 fb4f 	bl	8006648 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002faa:	f001 f88b 	bl	80040c4 <xPortStartScheduler>
 8002fae:	e00e      	b.n	8002fce <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb6:	d10a      	bne.n	8002fce <vTaskStartScheduler+0x96>
        __asm volatile
 8002fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fbc:	f383 8811 	msr	BASEPRI, r3
 8002fc0:	f3bf 8f6f 	isb	sy
 8002fc4:	f3bf 8f4f 	dsb	sy
 8002fc8:	607b      	str	r3, [r7, #4]
    }
 8002fca:	bf00      	nop
 8002fcc:	e7fe      	b.n	8002fcc <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002fce:	4b0a      	ldr	r3, [pc, #40]	; (8002ff8 <vTaskStartScheduler+0xc0>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
}
 8002fd2:	bf00      	nop
 8002fd4:	3710      	adds	r7, #16
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	2000020c 	.word	0x2000020c
 8002fe0:	080074cc 	.word	0x080074cc
 8002fe4:	08003609 	.word	0x08003609
 8002fe8:	20000208 	.word	0x20000208
 8002fec:	200001f4 	.word	0x200001f4
 8002ff0:	200001ec 	.word	0x200001ec
 8002ff4:	20000110 	.word	0x20000110
 8002ff8:	2000000c 	.word	0x2000000c

08002ffc <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003000:	4b04      	ldr	r3, [pc, #16]	; (8003014 <vTaskSuspendAll+0x18>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	3301      	adds	r3, #1
 8003006:	4a03      	ldr	r2, [pc, #12]	; (8003014 <vTaskSuspendAll+0x18>)
 8003008:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800300a:	bf00      	nop
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr
 8003014:	20000210 	.word	0x20000210

08003018 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800301e:	2300      	movs	r3, #0
 8003020:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003022:	2300      	movs	r3, #0
 8003024:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003026:	4b3d      	ldr	r3, [pc, #244]	; (800311c <xTaskResumeAll+0x104>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d10a      	bne.n	8003044 <xTaskResumeAll+0x2c>
        __asm volatile
 800302e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003032:	f383 8811 	msr	BASEPRI, r3
 8003036:	f3bf 8f6f 	isb	sy
 800303a:	f3bf 8f4f 	dsb	sy
 800303e:	603b      	str	r3, [r7, #0]
    }
 8003040:	bf00      	nop
 8003042:	e7fe      	b.n	8003042 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003044:	f001 f95e 	bl	8004304 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003048:	4b34      	ldr	r3, [pc, #208]	; (800311c <xTaskResumeAll+0x104>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	3b01      	subs	r3, #1
 800304e:	4a33      	ldr	r2, [pc, #204]	; (800311c <xTaskResumeAll+0x104>)
 8003050:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003052:	4b32      	ldr	r3, [pc, #200]	; (800311c <xTaskResumeAll+0x104>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d159      	bne.n	800310e <xTaskResumeAll+0xf6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800305a:	4b31      	ldr	r3, [pc, #196]	; (8003120 <xTaskResumeAll+0x108>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d055      	beq.n	800310e <xTaskResumeAll+0xf6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003062:	e032      	b.n	80030ca <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003064:	4b2f      	ldr	r3, [pc, #188]	; (8003124 <xTaskResumeAll+0x10c>)
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	3318      	adds	r3, #24
 8003070:	4618      	mov	r0, r3
 8003072:	f7ff f8b5 	bl	80021e0 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	3304      	adds	r3, #4
 800307a:	4618      	mov	r0, r3
 800307c:	f7ff f8b0 	bl	80021e0 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	4618      	mov	r0, r3
 8003084:	f003 fb22 	bl	80066cc <SEGGER_SYSVIEW_OnTaskStartReady>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800308c:	2201      	movs	r2, #1
 800308e:	409a      	lsls	r2, r3
 8003090:	4b25      	ldr	r3, [pc, #148]	; (8003128 <xTaskResumeAll+0x110>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4313      	orrs	r3, r2
 8003096:	4a24      	ldr	r2, [pc, #144]	; (8003128 <xTaskResumeAll+0x110>)
 8003098:	6013      	str	r3, [r2, #0]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800309e:	4613      	mov	r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	4413      	add	r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	4a21      	ldr	r2, [pc, #132]	; (800312c <xTaskResumeAll+0x114>)
 80030a8:	441a      	add	r2, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	3304      	adds	r3, #4
 80030ae:	4619      	mov	r1, r3
 80030b0:	4610      	mov	r0, r2
 80030b2:	f7ff f838 	bl	8002126 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ba:	4b1d      	ldr	r3, [pc, #116]	; (8003130 <xTaskResumeAll+0x118>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d302      	bcc.n	80030ca <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80030c4:	4b1b      	ldr	r3, [pc, #108]	; (8003134 <xTaskResumeAll+0x11c>)
 80030c6:	2201      	movs	r2, #1
 80030c8:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80030ca:	4b16      	ldr	r3, [pc, #88]	; (8003124 <xTaskResumeAll+0x10c>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1c8      	bne.n	8003064 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d001      	beq.n	80030dc <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80030d8:	f000 fb26 	bl	8003728 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80030dc:	4b16      	ldr	r3, [pc, #88]	; (8003138 <xTaskResumeAll+0x120>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d010      	beq.n	800310a <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80030e8:	f000 f84a 	bl	8003180 <xTaskIncrementTick>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d002      	beq.n	80030f8 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 80030f2:	4b10      	ldr	r3, [pc, #64]	; (8003134 <xTaskResumeAll+0x11c>)
 80030f4:	2201      	movs	r2, #1
 80030f6:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	3b01      	subs	r3, #1
 80030fc:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1f1      	bne.n	80030e8 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8003104:	4b0c      	ldr	r3, [pc, #48]	; (8003138 <xTaskResumeAll+0x120>)
 8003106:	2200      	movs	r2, #0
 8003108:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800310a:	4b0a      	ldr	r3, [pc, #40]	; (8003134 <xTaskResumeAll+0x11c>)
 800310c:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800310e:	f001 f929 	bl	8004364 <vPortExitCritical>

    return xAlreadyYielded;
 8003112:	687b      	ldr	r3, [r7, #4]
}
 8003114:	4618      	mov	r0, r3
 8003116:	3710      	adds	r7, #16
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	20000210 	.word	0x20000210
 8003120:	200001e8 	.word	0x200001e8
 8003124:	200001a8 	.word	0x200001a8
 8003128:	200001f0 	.word	0x200001f0
 800312c:	20000114 	.word	0x20000114
 8003130:	20000110 	.word	0x20000110
 8003134:	200001fc 	.word	0x200001fc
 8003138:	200001f8 	.word	0x200001f8

0800313c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003142:	4b05      	ldr	r3, [pc, #20]	; (8003158 <xTaskGetTickCount+0x1c>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003148:	687b      	ldr	r3, [r7, #4]
}
 800314a:	4618      	mov	r0, r3
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	200001ec 	.word	0x200001ec

0800315c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003162:	f001 f9bb 	bl	80044dc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003166:	2300      	movs	r3, #0
 8003168:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800316a:	4b04      	ldr	r3, [pc, #16]	; (800317c <xTaskGetTickCountFromISR+0x20>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003170:	683b      	ldr	r3, [r7, #0]
}
 8003172:	4618      	mov	r0, r3
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	200001ec 	.word	0x200001ec

08003180 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b086      	sub	sp, #24
 8003184:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003186:	2300      	movs	r3, #0
 8003188:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800318a:	4b41      	ldr	r3, [pc, #260]	; (8003290 <xTaskIncrementTick+0x110>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d173      	bne.n	800327a <xTaskIncrementTick+0xfa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003192:	4b40      	ldr	r3, [pc, #256]	; (8003294 <xTaskIncrementTick+0x114>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	3301      	adds	r3, #1
 8003198:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800319a:	4a3e      	ldr	r2, [pc, #248]	; (8003294 <xTaskIncrementTick+0x114>)
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d120      	bne.n	80031e8 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 80031a6:	4b3c      	ldr	r3, [pc, #240]	; (8003298 <xTaskIncrementTick+0x118>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00a      	beq.n	80031c6 <xTaskIncrementTick+0x46>
        __asm volatile
 80031b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b4:	f383 8811 	msr	BASEPRI, r3
 80031b8:	f3bf 8f6f 	isb	sy
 80031bc:	f3bf 8f4f 	dsb	sy
 80031c0:	603b      	str	r3, [r7, #0]
    }
 80031c2:	bf00      	nop
 80031c4:	e7fe      	b.n	80031c4 <xTaskIncrementTick+0x44>
 80031c6:	4b34      	ldr	r3, [pc, #208]	; (8003298 <xTaskIncrementTick+0x118>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	60fb      	str	r3, [r7, #12]
 80031cc:	4b33      	ldr	r3, [pc, #204]	; (800329c <xTaskIncrementTick+0x11c>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a31      	ldr	r2, [pc, #196]	; (8003298 <xTaskIncrementTick+0x118>)
 80031d2:	6013      	str	r3, [r2, #0]
 80031d4:	4a31      	ldr	r2, [pc, #196]	; (800329c <xTaskIncrementTick+0x11c>)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6013      	str	r3, [r2, #0]
 80031da:	4b31      	ldr	r3, [pc, #196]	; (80032a0 <xTaskIncrementTick+0x120>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	3301      	adds	r3, #1
 80031e0:	4a2f      	ldr	r2, [pc, #188]	; (80032a0 <xTaskIncrementTick+0x120>)
 80031e2:	6013      	str	r3, [r2, #0]
 80031e4:	f000 faa0 	bl	8003728 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80031e8:	4b2e      	ldr	r3, [pc, #184]	; (80032a4 <xTaskIncrementTick+0x124>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d348      	bcc.n	8003284 <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031f2:	4b29      	ldr	r3, [pc, #164]	; (8003298 <xTaskIncrementTick+0x118>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d104      	bne.n	8003206 <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031fc:	4b29      	ldr	r3, [pc, #164]	; (80032a4 <xTaskIncrementTick+0x124>)
 80031fe:	f04f 32ff 	mov.w	r2, #4294967295
 8003202:	601a      	str	r2, [r3, #0]
                    break;
 8003204:	e03e      	b.n	8003284 <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003206:	4b24      	ldr	r3, [pc, #144]	; (8003298 <xTaskIncrementTick+0x118>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	429a      	cmp	r2, r3
 800321c:	d203      	bcs.n	8003226 <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800321e:	4a21      	ldr	r2, [pc, #132]	; (80032a4 <xTaskIncrementTick+0x124>)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003224:	e02e      	b.n	8003284 <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	3304      	adds	r3, #4
 800322a:	4618      	mov	r0, r3
 800322c:	f7fe ffd8 	bl	80021e0 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003234:	2b00      	cmp	r3, #0
 8003236:	d004      	beq.n	8003242 <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	3318      	adds	r3, #24
 800323c:	4618      	mov	r0, r3
 800323e:	f7fe ffcf 	bl	80021e0 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	4618      	mov	r0, r3
 8003246:	f003 fa41 	bl	80066cc <SEGGER_SYSVIEW_OnTaskStartReady>
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324e:	2201      	movs	r2, #1
 8003250:	409a      	lsls	r2, r3
 8003252:	4b15      	ldr	r3, [pc, #84]	; (80032a8 <xTaskIncrementTick+0x128>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4313      	orrs	r3, r2
 8003258:	4a13      	ldr	r2, [pc, #76]	; (80032a8 <xTaskIncrementTick+0x128>)
 800325a:	6013      	str	r3, [r2, #0]
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003260:	4613      	mov	r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	4413      	add	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	4a10      	ldr	r2, [pc, #64]	; (80032ac <xTaskIncrementTick+0x12c>)
 800326a:	441a      	add	r2, r3
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	3304      	adds	r3, #4
 8003270:	4619      	mov	r1, r3
 8003272:	4610      	mov	r0, r2
 8003274:	f7fe ff57 	bl	8002126 <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003278:	e7bb      	b.n	80031f2 <xTaskIncrementTick+0x72>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800327a:	4b0d      	ldr	r3, [pc, #52]	; (80032b0 <xTaskIncrementTick+0x130>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	3301      	adds	r3, #1
 8003280:	4a0b      	ldr	r2, [pc, #44]	; (80032b0 <xTaskIncrementTick+0x130>)
 8003282:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003284:	697b      	ldr	r3, [r7, #20]
}
 8003286:	4618      	mov	r0, r3
 8003288:	3718      	adds	r7, #24
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	20000210 	.word	0x20000210
 8003294:	200001ec 	.word	0x200001ec
 8003298:	200001a0 	.word	0x200001a0
 800329c:	200001a4 	.word	0x200001a4
 80032a0:	20000200 	.word	0x20000200
 80032a4:	20000208 	.word	0x20000208
 80032a8:	200001f0 	.word	0x200001f0
 80032ac:	20000114 	.word	0x20000114
 80032b0:	200001f8 	.word	0x200001f8

080032b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b086      	sub	sp, #24
 80032b8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80032ba:	4b2d      	ldr	r3, [pc, #180]	; (8003370 <vTaskSwitchContext+0xbc>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d003      	beq.n	80032ca <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80032c2:	4b2c      	ldr	r3, [pc, #176]	; (8003374 <vTaskSwitchContext+0xc0>)
 80032c4:	2201      	movs	r2, #1
 80032c6:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80032c8:	e04d      	b.n	8003366 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 80032ca:	4b2a      	ldr	r3, [pc, #168]	; (8003374 <vTaskSwitchContext+0xc0>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032d0:	4b29      	ldr	r3, [pc, #164]	; (8003378 <vTaskSwitchContext+0xc4>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	fab3 f383 	clz	r3, r3
 80032dc:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80032de:	7afb      	ldrb	r3, [r7, #11]
 80032e0:	f1c3 031f 	rsb	r3, r3, #31
 80032e4:	617b      	str	r3, [r7, #20]
 80032e6:	4925      	ldr	r1, [pc, #148]	; (800337c <vTaskSwitchContext+0xc8>)
 80032e8:	697a      	ldr	r2, [r7, #20]
 80032ea:	4613      	mov	r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	4413      	add	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	440b      	add	r3, r1
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10a      	bne.n	8003310 <vTaskSwitchContext+0x5c>
        __asm volatile
 80032fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032fe:	f383 8811 	msr	BASEPRI, r3
 8003302:	f3bf 8f6f 	isb	sy
 8003306:	f3bf 8f4f 	dsb	sy
 800330a:	607b      	str	r3, [r7, #4]
    }
 800330c:	bf00      	nop
 800330e:	e7fe      	b.n	800330e <vTaskSwitchContext+0x5a>
 8003310:	697a      	ldr	r2, [r7, #20]
 8003312:	4613      	mov	r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	4413      	add	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	4a18      	ldr	r2, [pc, #96]	; (800337c <vTaskSwitchContext+0xc8>)
 800331c:	4413      	add	r3, r2
 800331e:	613b      	str	r3, [r7, #16]
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	685a      	ldr	r2, [r3, #4]
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	605a      	str	r2, [r3, #4]
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	685a      	ldr	r2, [r3, #4]
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	3308      	adds	r3, #8
 8003332:	429a      	cmp	r2, r3
 8003334:	d104      	bne.n	8003340 <vTaskSwitchContext+0x8c>
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	685a      	ldr	r2, [r3, #4]
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	605a      	str	r2, [r3, #4]
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	4a0e      	ldr	r2, [pc, #56]	; (8003380 <vTaskSwitchContext+0xcc>)
 8003348:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800334a:	4b0d      	ldr	r3, [pc, #52]	; (8003380 <vTaskSwitchContext+0xcc>)
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	4b0d      	ldr	r3, [pc, #52]	; (8003384 <vTaskSwitchContext+0xd0>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	429a      	cmp	r2, r3
 8003354:	d102      	bne.n	800335c <vTaskSwitchContext+0xa8>
 8003356:	f003 f919 	bl	800658c <SEGGER_SYSVIEW_OnIdle>
}
 800335a:	e004      	b.n	8003366 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 800335c:	4b08      	ldr	r3, [pc, #32]	; (8003380 <vTaskSwitchContext+0xcc>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4618      	mov	r0, r3
 8003362:	f003 f971 	bl	8006648 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003366:	bf00      	nop
 8003368:	3718      	adds	r7, #24
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	20000210 	.word	0x20000210
 8003374:	200001fc 	.word	0x200001fc
 8003378:	200001f0 	.word	0x200001f0
 800337c:	20000114 	.word	0x20000114
 8003380:	20000110 	.word	0x20000110
 8003384:	2000020c 	.word	0x2000020c

08003388 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d10a      	bne.n	80033ae <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800339c:	f383 8811 	msr	BASEPRI, r3
 80033a0:	f3bf 8f6f 	isb	sy
 80033a4:	f3bf 8f4f 	dsb	sy
 80033a8:	60fb      	str	r3, [r7, #12]
    }
 80033aa:	bf00      	nop
 80033ac:	e7fe      	b.n	80033ac <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80033ae:	4b07      	ldr	r3, [pc, #28]	; (80033cc <vTaskPlaceOnEventList+0x44>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	3318      	adds	r3, #24
 80033b4:	4619      	mov	r1, r3
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f7fe fed9 	bl	800216e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80033bc:	2101      	movs	r1, #1
 80033be:	6838      	ldr	r0, [r7, #0]
 80033c0:	f000 fa6c 	bl	800389c <prvAddCurrentTaskToDelayedList>
}
 80033c4:	bf00      	nop
 80033c6:	3710      	adds	r7, #16
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	20000110 	.word	0x20000110

080033d0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b086      	sub	sp, #24
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d10a      	bne.n	80033f8 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80033e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e6:	f383 8811 	msr	BASEPRI, r3
 80033ea:	f3bf 8f6f 	isb	sy
 80033ee:	f3bf 8f4f 	dsb	sy
 80033f2:	617b      	str	r3, [r7, #20]
    }
 80033f4:	bf00      	nop
 80033f6:	e7fe      	b.n	80033f6 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80033f8:	4b0b      	ldr	r3, [pc, #44]	; (8003428 <vTaskPlaceOnEventListRestricted+0x58>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	3318      	adds	r3, #24
 80033fe:	4619      	mov	r1, r3
 8003400:	68f8      	ldr	r0, [r7, #12]
 8003402:	f7fe fe90 	bl	8002126 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d002      	beq.n	8003412 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 800340c:	f04f 33ff 	mov.w	r3, #4294967295
 8003410:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003412:	2024      	movs	r0, #36	; 0x24
 8003414:	f002 fbbc 	bl	8005b90 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003418:	6879      	ldr	r1, [r7, #4]
 800341a:	68b8      	ldr	r0, [r7, #8]
 800341c:	f000 fa3e 	bl	800389c <prvAddCurrentTaskToDelayedList>
    }
 8003420:	bf00      	nop
 8003422:	3718      	adds	r7, #24
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	20000110 	.word	0x20000110

0800342c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d10a      	bne.n	8003458 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003446:	f383 8811 	msr	BASEPRI, r3
 800344a:	f3bf 8f6f 	isb	sy
 800344e:	f3bf 8f4f 	dsb	sy
 8003452:	60fb      	str	r3, [r7, #12]
    }
 8003454:	bf00      	nop
 8003456:	e7fe      	b.n	8003456 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	3318      	adds	r3, #24
 800345c:	4618      	mov	r0, r3
 800345e:	f7fe febf 	bl	80021e0 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003462:	4b1f      	ldr	r3, [pc, #124]	; (80034e0 <xTaskRemoveFromEventList+0xb4>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d120      	bne.n	80034ac <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	3304      	adds	r3, #4
 800346e:	4618      	mov	r0, r3
 8003470:	f7fe feb6 	bl	80021e0 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	4618      	mov	r0, r3
 8003478:	f003 f928 	bl	80066cc <SEGGER_SYSVIEW_OnTaskStartReady>
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003480:	2201      	movs	r2, #1
 8003482:	409a      	lsls	r2, r3
 8003484:	4b17      	ldr	r3, [pc, #92]	; (80034e4 <xTaskRemoveFromEventList+0xb8>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4313      	orrs	r3, r2
 800348a:	4a16      	ldr	r2, [pc, #88]	; (80034e4 <xTaskRemoveFromEventList+0xb8>)
 800348c:	6013      	str	r3, [r2, #0]
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003492:	4613      	mov	r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	4413      	add	r3, r2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	4a13      	ldr	r2, [pc, #76]	; (80034e8 <xTaskRemoveFromEventList+0xbc>)
 800349c:	441a      	add	r2, r3
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	3304      	adds	r3, #4
 80034a2:	4619      	mov	r1, r3
 80034a4:	4610      	mov	r0, r2
 80034a6:	f7fe fe3e 	bl	8002126 <vListInsertEnd>
 80034aa:	e005      	b.n	80034b8 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	3318      	adds	r3, #24
 80034b0:	4619      	mov	r1, r3
 80034b2:	480e      	ldr	r0, [pc, #56]	; (80034ec <xTaskRemoveFromEventList+0xc0>)
 80034b4:	f7fe fe37 	bl	8002126 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034bc:	4b0c      	ldr	r3, [pc, #48]	; (80034f0 <xTaskRemoveFromEventList+0xc4>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d905      	bls.n	80034d2 <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80034c6:	2301      	movs	r3, #1
 80034c8:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80034ca:	4b0a      	ldr	r3, [pc, #40]	; (80034f4 <xTaskRemoveFromEventList+0xc8>)
 80034cc:	2201      	movs	r2, #1
 80034ce:	601a      	str	r2, [r3, #0]
 80034d0:	e001      	b.n	80034d6 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 80034d2:	2300      	movs	r3, #0
 80034d4:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80034d6:	697b      	ldr	r3, [r7, #20]
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3718      	adds	r7, #24
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	20000210 	.word	0x20000210
 80034e4:	200001f0 	.word	0x200001f0
 80034e8:	20000114 	.word	0x20000114
 80034ec:	200001a8 	.word	0x200001a8
 80034f0:	20000110 	.word	0x20000110
 80034f4:	200001fc 	.word	0x200001fc

080034f8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003500:	4b06      	ldr	r3, [pc, #24]	; (800351c <vTaskInternalSetTimeOutState+0x24>)
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003508:	4b05      	ldr	r3, [pc, #20]	; (8003520 <vTaskInternalSetTimeOutState+0x28>)
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	605a      	str	r2, [r3, #4]
}
 8003510:	bf00      	nop
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr
 800351c:	20000200 	.word	0x20000200
 8003520:	200001ec 	.word	0x200001ec

08003524 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b088      	sub	sp, #32
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d10a      	bne.n	800354a <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003538:	f383 8811 	msr	BASEPRI, r3
 800353c:	f3bf 8f6f 	isb	sy
 8003540:	f3bf 8f4f 	dsb	sy
 8003544:	613b      	str	r3, [r7, #16]
    }
 8003546:	bf00      	nop
 8003548:	e7fe      	b.n	8003548 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d10a      	bne.n	8003566 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003554:	f383 8811 	msr	BASEPRI, r3
 8003558:	f3bf 8f6f 	isb	sy
 800355c:	f3bf 8f4f 	dsb	sy
 8003560:	60fb      	str	r3, [r7, #12]
    }
 8003562:	bf00      	nop
 8003564:	e7fe      	b.n	8003564 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003566:	f000 fecd 	bl	8004304 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800356a:	4b1f      	ldr	r3, [pc, #124]	; (80035e8 <xTaskCheckForTimeOut+0xc4>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003582:	d102      	bne.n	800358a <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003584:	2300      	movs	r3, #0
 8003586:	61fb      	str	r3, [r7, #28]
 8003588:	e026      	b.n	80035d8 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	4b17      	ldr	r3, [pc, #92]	; (80035ec <xTaskCheckForTimeOut+0xc8>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	429a      	cmp	r2, r3
 8003594:	d00a      	beq.n	80035ac <xTaskCheckForTimeOut+0x88>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	69ba      	ldr	r2, [r7, #24]
 800359c:	429a      	cmp	r2, r3
 800359e:	d305      	bcc.n	80035ac <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80035a0:	2301      	movs	r3, #1
 80035a2:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	2200      	movs	r2, #0
 80035a8:	601a      	str	r2, [r3, #0]
 80035aa:	e015      	b.n	80035d8 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	697a      	ldr	r2, [r7, #20]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d20b      	bcs.n	80035ce <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	1ad2      	subs	r2, r2, r3
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f7ff ff98 	bl	80034f8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80035c8:	2300      	movs	r3, #0
 80035ca:	61fb      	str	r3, [r7, #28]
 80035cc:	e004      	b.n	80035d8 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	2200      	movs	r2, #0
 80035d2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80035d4:	2301      	movs	r3, #1
 80035d6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80035d8:	f000 fec4 	bl	8004364 <vPortExitCritical>

    return xReturn;
 80035dc:	69fb      	ldr	r3, [r7, #28]
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3720      	adds	r7, #32
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	200001ec 	.word	0x200001ec
 80035ec:	20000200 	.word	0x20000200

080035f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80035f0:	b480      	push	{r7}
 80035f2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80035f4:	4b03      	ldr	r3, [pc, #12]	; (8003604 <vTaskMissedYield+0x14>)
 80035f6:	2201      	movs	r2, #1
 80035f8:	601a      	str	r2, [r3, #0]
}
 80035fa:	bf00      	nop
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr
 8003604:	200001fc 	.word	0x200001fc

08003608 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003610:	f000 f84c 	bl	80036ac <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 8003614:	4b04      	ldr	r3, [pc, #16]	; (8003628 <prvIdleTask+0x20>)
 8003616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800361a:	601a      	str	r2, [r3, #0]
 800361c:	f3bf 8f4f 	dsb	sy
 8003620:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003624:	e7f4      	b.n	8003610 <prvIdleTask+0x8>
 8003626:	bf00      	nop
 8003628:	e000ed04 	.word	0xe000ed04

0800362c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003632:	2300      	movs	r3, #0
 8003634:	607b      	str	r3, [r7, #4]
 8003636:	e00c      	b.n	8003652 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	4613      	mov	r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	4413      	add	r3, r2
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	4a12      	ldr	r2, [pc, #72]	; (800368c <prvInitialiseTaskLists+0x60>)
 8003644:	4413      	add	r3, r2
 8003646:	4618      	mov	r0, r3
 8003648:	f7fe fd40 	bl	80020cc <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	3301      	adds	r3, #1
 8003650:	607b      	str	r3, [r7, #4]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2b04      	cmp	r3, #4
 8003656:	d9ef      	bls.n	8003638 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003658:	480d      	ldr	r0, [pc, #52]	; (8003690 <prvInitialiseTaskLists+0x64>)
 800365a:	f7fe fd37 	bl	80020cc <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800365e:	480d      	ldr	r0, [pc, #52]	; (8003694 <prvInitialiseTaskLists+0x68>)
 8003660:	f7fe fd34 	bl	80020cc <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003664:	480c      	ldr	r0, [pc, #48]	; (8003698 <prvInitialiseTaskLists+0x6c>)
 8003666:	f7fe fd31 	bl	80020cc <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800366a:	480c      	ldr	r0, [pc, #48]	; (800369c <prvInitialiseTaskLists+0x70>)
 800366c:	f7fe fd2e 	bl	80020cc <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003670:	480b      	ldr	r0, [pc, #44]	; (80036a0 <prvInitialiseTaskLists+0x74>)
 8003672:	f7fe fd2b 	bl	80020cc <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003676:	4b0b      	ldr	r3, [pc, #44]	; (80036a4 <prvInitialiseTaskLists+0x78>)
 8003678:	4a05      	ldr	r2, [pc, #20]	; (8003690 <prvInitialiseTaskLists+0x64>)
 800367a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800367c:	4b0a      	ldr	r3, [pc, #40]	; (80036a8 <prvInitialiseTaskLists+0x7c>)
 800367e:	4a05      	ldr	r2, [pc, #20]	; (8003694 <prvInitialiseTaskLists+0x68>)
 8003680:	601a      	str	r2, [r3, #0]
}
 8003682:	bf00      	nop
 8003684:	3708      	adds	r7, #8
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	20000114 	.word	0x20000114
 8003690:	20000178 	.word	0x20000178
 8003694:	2000018c 	.word	0x2000018c
 8003698:	200001a8 	.word	0x200001a8
 800369c:	200001bc 	.word	0x200001bc
 80036a0:	200001d4 	.word	0x200001d4
 80036a4:	200001a0 	.word	0x200001a0
 80036a8:	200001a4 	.word	0x200001a4

080036ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80036b2:	e019      	b.n	80036e8 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80036b4:	f000 fe26 	bl	8004304 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036b8:	4b10      	ldr	r3, [pc, #64]	; (80036fc <prvCheckTasksWaitingTermination+0x50>)
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	3304      	adds	r3, #4
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7fe fd8b 	bl	80021e0 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80036ca:	4b0d      	ldr	r3, [pc, #52]	; (8003700 <prvCheckTasksWaitingTermination+0x54>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	3b01      	subs	r3, #1
 80036d0:	4a0b      	ldr	r2, [pc, #44]	; (8003700 <prvCheckTasksWaitingTermination+0x54>)
 80036d2:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80036d4:	4b0b      	ldr	r3, [pc, #44]	; (8003704 <prvCheckTasksWaitingTermination+0x58>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	3b01      	subs	r3, #1
 80036da:	4a0a      	ldr	r2, [pc, #40]	; (8003704 <prvCheckTasksWaitingTermination+0x58>)
 80036dc:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80036de:	f000 fe41 	bl	8004364 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 f810 	bl	8003708 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80036e8:	4b06      	ldr	r3, [pc, #24]	; (8003704 <prvCheckTasksWaitingTermination+0x58>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1e1      	bne.n	80036b4 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80036f0:	bf00      	nop
 80036f2:	bf00      	nop
 80036f4:	3708      	adds	r7, #8
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	200001bc 	.word	0x200001bc
 8003700:	200001e8 	.word	0x200001e8
 8003704:	200001d0 	.word	0x200001d0

08003708 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003714:	4618      	mov	r0, r3
 8003716:	f001 f801 	bl	800471c <vPortFree>
                vPortFree( pxTCB );
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 fffe 	bl	800471c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003720:	bf00      	nop
 8003722:	3708      	adds	r7, #8
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003728:	b480      	push	{r7}
 800372a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800372c:	4b0a      	ldr	r3, [pc, #40]	; (8003758 <prvResetNextTaskUnblockTime+0x30>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d104      	bne.n	8003740 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003736:	4b09      	ldr	r3, [pc, #36]	; (800375c <prvResetNextTaskUnblockTime+0x34>)
 8003738:	f04f 32ff 	mov.w	r2, #4294967295
 800373c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800373e:	e005      	b.n	800374c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003740:	4b05      	ldr	r3, [pc, #20]	; (8003758 <prvResetNextTaskUnblockTime+0x30>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a04      	ldr	r2, [pc, #16]	; (800375c <prvResetNextTaskUnblockTime+0x34>)
 800374a:	6013      	str	r3, [r2, #0]
}
 800374c:	bf00      	nop
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	200001a0 	.word	0x200001a0
 800375c:	20000208 	.word	0x20000208

08003760 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003766:	4b0b      	ldr	r3, [pc, #44]	; (8003794 <xTaskGetSchedulerState+0x34>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d102      	bne.n	8003774 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800376e:	2301      	movs	r3, #1
 8003770:	607b      	str	r3, [r7, #4]
 8003772:	e008      	b.n	8003786 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003774:	4b08      	ldr	r3, [pc, #32]	; (8003798 <xTaskGetSchedulerState+0x38>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d102      	bne.n	8003782 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800377c:	2302      	movs	r3, #2
 800377e:	607b      	str	r3, [r7, #4]
 8003780:	e001      	b.n	8003786 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003782:	2300      	movs	r3, #0
 8003784:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003786:	687b      	ldr	r3, [r7, #4]
    }
 8003788:	4618      	mov	r0, r3
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr
 8003794:	200001f4 	.word	0x200001f4
 8003798:	20000210 	.word	0x20000210

0800379c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800379c:	b580      	push	{r7, lr}
 800379e:	b086      	sub	sp, #24
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80037a8:	2300      	movs	r3, #0
 80037aa:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d068      	beq.n	8003884 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80037b2:	4b37      	ldr	r3, [pc, #220]	; (8003890 <xTaskPriorityDisinherit+0xf4>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d00a      	beq.n	80037d2 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 80037bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c0:	f383 8811 	msr	BASEPRI, r3
 80037c4:	f3bf 8f6f 	isb	sy
 80037c8:	f3bf 8f4f 	dsb	sy
 80037cc:	60fb      	str	r3, [r7, #12]
    }
 80037ce:	bf00      	nop
 80037d0:	e7fe      	b.n	80037d0 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d10a      	bne.n	80037f0 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 80037da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037de:	f383 8811 	msr	BASEPRI, r3
 80037e2:	f3bf 8f6f 	isb	sy
 80037e6:	f3bf 8f4f 	dsb	sy
 80037ea:	60bb      	str	r3, [r7, #8]
    }
 80037ec:	bf00      	nop
 80037ee:	e7fe      	b.n	80037ee <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037f4:	1e5a      	subs	r2, r3, #1
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003802:	429a      	cmp	r2, r3
 8003804:	d03e      	beq.n	8003884 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800380a:	2b00      	cmp	r3, #0
 800380c:	d13a      	bne.n	8003884 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	3304      	adds	r3, #4
 8003812:	4618      	mov	r0, r3
 8003814:	f7fe fce4 	bl	80021e0 <uxListRemove>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d10a      	bne.n	8003834 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003822:	2201      	movs	r2, #1
 8003824:	fa02 f303 	lsl.w	r3, r2, r3
 8003828:	43da      	mvns	r2, r3
 800382a:	4b1a      	ldr	r3, [pc, #104]	; (8003894 <xTaskPriorityDisinherit+0xf8>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4013      	ands	r3, r2
 8003830:	4a18      	ldr	r2, [pc, #96]	; (8003894 <xTaskPriorityDisinherit+0xf8>)
 8003832:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4619      	mov	r1, r3
 8003838:	204a      	movs	r0, #74	; 0x4a
 800383a:	f002 f9c7 	bl	8005bcc <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384a:	f1c3 0205 	rsb	r2, r3, #5
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003856:	2201      	movs	r2, #1
 8003858:	409a      	lsls	r2, r3
 800385a:	4b0e      	ldr	r3, [pc, #56]	; (8003894 <xTaskPriorityDisinherit+0xf8>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4313      	orrs	r3, r2
 8003860:	4a0c      	ldr	r2, [pc, #48]	; (8003894 <xTaskPriorityDisinherit+0xf8>)
 8003862:	6013      	str	r3, [r2, #0]
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003868:	4613      	mov	r3, r2
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	4413      	add	r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	4a09      	ldr	r2, [pc, #36]	; (8003898 <xTaskPriorityDisinherit+0xfc>)
 8003872:	441a      	add	r2, r3
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	3304      	adds	r3, #4
 8003878:	4619      	mov	r1, r3
 800387a:	4610      	mov	r0, r2
 800387c:	f7fe fc53 	bl	8002126 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003880:	2301      	movs	r3, #1
 8003882:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003884:	697b      	ldr	r3, [r7, #20]
    }
 8003886:	4618      	mov	r0, r3
 8003888:	3718      	adds	r7, #24
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	20000110 	.word	0x20000110
 8003894:	200001f0 	.word	0x200001f0
 8003898:	20000114 	.word	0x20000114

0800389c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80038a6:	4b32      	ldr	r3, [pc, #200]	; (8003970 <prvAddCurrentTaskToDelayedList+0xd4>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80038ac:	4b31      	ldr	r3, [pc, #196]	; (8003974 <prvAddCurrentTaskToDelayedList+0xd8>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	3304      	adds	r3, #4
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7fe fc94 	bl	80021e0 <uxListRemove>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d10b      	bne.n	80038d6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80038be:	4b2d      	ldr	r3, [pc, #180]	; (8003974 <prvAddCurrentTaskToDelayedList+0xd8>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c4:	2201      	movs	r2, #1
 80038c6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ca:	43da      	mvns	r2, r3
 80038cc:	4b2a      	ldr	r3, [pc, #168]	; (8003978 <prvAddCurrentTaskToDelayedList+0xdc>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4013      	ands	r3, r2
 80038d2:	4a29      	ldr	r2, [pc, #164]	; (8003978 <prvAddCurrentTaskToDelayedList+0xdc>)
 80038d4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038dc:	d110      	bne.n	8003900 <prvAddCurrentTaskToDelayedList+0x64>
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d00d      	beq.n	8003900 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 80038e4:	4b23      	ldr	r3, [pc, #140]	; (8003974 <prvAddCurrentTaskToDelayedList+0xd8>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	211b      	movs	r1, #27
 80038ea:	4618      	mov	r0, r3
 80038ec:	f002 ff30 	bl	8006750 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038f0:	4b20      	ldr	r3, [pc, #128]	; (8003974 <prvAddCurrentTaskToDelayedList+0xd8>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	3304      	adds	r3, #4
 80038f6:	4619      	mov	r1, r3
 80038f8:	4820      	ldr	r0, [pc, #128]	; (800397c <prvAddCurrentTaskToDelayedList+0xe0>)
 80038fa:	f7fe fc14 	bl	8002126 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80038fe:	e032      	b.n	8003966 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003900:	68fa      	ldr	r2, [r7, #12]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4413      	add	r3, r2
 8003906:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003908:	4b1a      	ldr	r3, [pc, #104]	; (8003974 <prvAddCurrentTaskToDelayedList+0xd8>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68ba      	ldr	r2, [r7, #8]
 800390e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003910:	68ba      	ldr	r2, [r7, #8]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	429a      	cmp	r2, r3
 8003916:	d20f      	bcs.n	8003938 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003918:	4b16      	ldr	r3, [pc, #88]	; (8003974 <prvAddCurrentTaskToDelayedList+0xd8>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2104      	movs	r1, #4
 800391e:	4618      	mov	r0, r3
 8003920:	f002 ff16 	bl	8006750 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003924:	4b16      	ldr	r3, [pc, #88]	; (8003980 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	4b12      	ldr	r3, [pc, #72]	; (8003974 <prvAddCurrentTaskToDelayedList+0xd8>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	3304      	adds	r3, #4
 800392e:	4619      	mov	r1, r3
 8003930:	4610      	mov	r0, r2
 8003932:	f7fe fc1c 	bl	800216e <vListInsert>
}
 8003936:	e016      	b.n	8003966 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003938:	4b0e      	ldr	r3, [pc, #56]	; (8003974 <prvAddCurrentTaskToDelayedList+0xd8>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2104      	movs	r1, #4
 800393e:	4618      	mov	r0, r3
 8003940:	f002 ff06 	bl	8006750 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003944:	4b0f      	ldr	r3, [pc, #60]	; (8003984 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	4b0a      	ldr	r3, [pc, #40]	; (8003974 <prvAddCurrentTaskToDelayedList+0xd8>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	3304      	adds	r3, #4
 800394e:	4619      	mov	r1, r3
 8003950:	4610      	mov	r0, r2
 8003952:	f7fe fc0c 	bl	800216e <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003956:	4b0c      	ldr	r3, [pc, #48]	; (8003988 <prvAddCurrentTaskToDelayedList+0xec>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68ba      	ldr	r2, [r7, #8]
 800395c:	429a      	cmp	r2, r3
 800395e:	d202      	bcs.n	8003966 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003960:	4a09      	ldr	r2, [pc, #36]	; (8003988 <prvAddCurrentTaskToDelayedList+0xec>)
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	6013      	str	r3, [r2, #0]
}
 8003966:	bf00      	nop
 8003968:	3710      	adds	r7, #16
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	200001ec 	.word	0x200001ec
 8003974:	20000110 	.word	0x20000110
 8003978:	200001f0 	.word	0x200001f0
 800397c:	200001d4 	.word	0x200001d4
 8003980:	200001a4 	.word	0x200001a4
 8003984:	200001a0 	.word	0x200001a0
 8003988:	20000208 	.word	0x20000208

0800398c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003992:	2300      	movs	r3, #0
 8003994:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003996:	f000 fad5 	bl	8003f44 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800399a:	4b11      	ldr	r3, [pc, #68]	; (80039e0 <xTimerCreateTimerTask+0x54>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00b      	beq.n	80039ba <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80039a2:	4b10      	ldr	r3, [pc, #64]	; (80039e4 <xTimerCreateTimerTask+0x58>)
 80039a4:	9301      	str	r3, [sp, #4]
 80039a6:	2302      	movs	r3, #2
 80039a8:	9300      	str	r3, [sp, #0]
 80039aa:	2300      	movs	r3, #0
 80039ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80039b0:	490d      	ldr	r1, [pc, #52]	; (80039e8 <xTimerCreateTimerTask+0x5c>)
 80039b2:	480e      	ldr	r0, [pc, #56]	; (80039ec <xTimerCreateTimerTask+0x60>)
 80039b4:	f7ff f96a 	bl	8002c8c <xTaskCreate>
 80039b8:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d10a      	bne.n	80039d6 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80039c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c4:	f383 8811 	msr	BASEPRI, r3
 80039c8:	f3bf 8f6f 	isb	sy
 80039cc:	f3bf 8f4f 	dsb	sy
 80039d0:	603b      	str	r3, [r7, #0]
    }
 80039d2:	bf00      	nop
 80039d4:	e7fe      	b.n	80039d4 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80039d6:	687b      	ldr	r3, [r7, #4]
    }
 80039d8:	4618      	mov	r0, r3
 80039da:	3708      	adds	r7, #8
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	20000244 	.word	0x20000244
 80039e4:	20000248 	.word	0x20000248
 80039e8:	080074d4 	.word	0x080074d4
 80039ec:	08003b25 	.word	0x08003b25

080039f0 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b08a      	sub	sp, #40	; 0x28
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
 80039fc:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80039fe:	2300      	movs	r3, #0
 8003a00:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d10a      	bne.n	8003a1e <xTimerGenericCommand+0x2e>
        __asm volatile
 8003a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a0c:	f383 8811 	msr	BASEPRI, r3
 8003a10:	f3bf 8f6f 	isb	sy
 8003a14:	f3bf 8f4f 	dsb	sy
 8003a18:	623b      	str	r3, [r7, #32]
    }
 8003a1a:	bf00      	nop
 8003a1c:	e7fe      	b.n	8003a1c <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003a1e:	4b1a      	ldr	r3, [pc, #104]	; (8003a88 <xTimerGenericCommand+0x98>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d02a      	beq.n	8003a7c <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	2b05      	cmp	r3, #5
 8003a36:	dc18      	bgt.n	8003a6a <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003a38:	f7ff fe92 	bl	8003760 <xTaskGetSchedulerState>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d109      	bne.n	8003a56 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003a42:	4b11      	ldr	r3, [pc, #68]	; (8003a88 <xTimerGenericCommand+0x98>)
 8003a44:	6818      	ldr	r0, [r3, #0]
 8003a46:	f107 0114 	add.w	r1, r7, #20
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a4e:	f7fe fcd5 	bl	80023fc <xQueueGenericSend>
 8003a52:	6278      	str	r0, [r7, #36]	; 0x24
 8003a54:	e012      	b.n	8003a7c <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003a56:	4b0c      	ldr	r3, [pc, #48]	; (8003a88 <xTimerGenericCommand+0x98>)
 8003a58:	6818      	ldr	r0, [r3, #0]
 8003a5a:	f107 0114 	add.w	r1, r7, #20
 8003a5e:	2300      	movs	r3, #0
 8003a60:	2200      	movs	r2, #0
 8003a62:	f7fe fccb 	bl	80023fc <xQueueGenericSend>
 8003a66:	6278      	str	r0, [r7, #36]	; 0x24
 8003a68:	e008      	b.n	8003a7c <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003a6a:	4b07      	ldr	r3, [pc, #28]	; (8003a88 <xTimerGenericCommand+0x98>)
 8003a6c:	6818      	ldr	r0, [r3, #0]
 8003a6e:	f107 0114 	add.w	r1, r7, #20
 8003a72:	2300      	movs	r3, #0
 8003a74:	683a      	ldr	r2, [r7, #0]
 8003a76:	f7fe fdcf 	bl	8002618 <xQueueGenericSendFromISR>
 8003a7a:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3728      	adds	r7, #40	; 0x28
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	20000244 	.word	0x20000244

08003a8c <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b088      	sub	sp, #32
 8003a90:	af02      	add	r7, sp, #8
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a96:	4b22      	ldr	r3, [pc, #136]	; (8003b20 <prvProcessExpiredTimer+0x94>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	3304      	adds	r3, #4
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7fe fb9b 	bl	80021e0 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ab0:	f003 0304 	and.w	r3, r3, #4
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d022      	beq.n	8003afe <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	699a      	ldr	r2, [r3, #24]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	18d1      	adds	r1, r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	683a      	ldr	r2, [r7, #0]
 8003ac4:	6978      	ldr	r0, [r7, #20]
 8003ac6:	f000 f8d1 	bl	8003c6c <prvInsertTimerInActiveList>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d01f      	beq.n	8003b10 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	9300      	str	r3, [sp, #0]
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	2100      	movs	r1, #0
 8003ada:	6978      	ldr	r0, [r7, #20]
 8003adc:	f7ff ff88 	bl	80039f0 <xTimerGenericCommand>
 8003ae0:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d113      	bne.n	8003b10 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8003ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aec:	f383 8811 	msr	BASEPRI, r3
 8003af0:	f3bf 8f6f 	isb	sy
 8003af4:	f3bf 8f4f 	dsb	sy
 8003af8:	60fb      	str	r3, [r7, #12]
    }
 8003afa:	bf00      	nop
 8003afc:	e7fe      	b.n	8003afc <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b04:	f023 0301 	bic.w	r3, r3, #1
 8003b08:	b2da      	uxtb	r2, r3
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	6a1b      	ldr	r3, [r3, #32]
 8003b14:	6978      	ldr	r0, [r7, #20]
 8003b16:	4798      	blx	r3
    }
 8003b18:	bf00      	nop
 8003b1a:	3718      	adds	r7, #24
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	2000023c 	.word	0x2000023c

08003b24 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b2c:	f107 0308 	add.w	r3, r7, #8
 8003b30:	4618      	mov	r0, r3
 8003b32:	f000 f857 	bl	8003be4 <prvGetNextExpireTime>
 8003b36:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	68f8      	ldr	r0, [r7, #12]
 8003b3e:	f000 f803 	bl	8003b48 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003b42:	f000 f8d5 	bl	8003cf0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b46:	e7f1      	b.n	8003b2c <prvTimerTask+0x8>

08003b48 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003b52:	f7ff fa53 	bl	8002ffc <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003b56:	f107 0308 	add.w	r3, r7, #8
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f000 f866 	bl	8003c2c <prvSampleTimeNow>
 8003b60:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d130      	bne.n	8003bca <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d10a      	bne.n	8003b84 <prvProcessTimerOrBlockTask+0x3c>
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d806      	bhi.n	8003b84 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003b76:	f7ff fa4f 	bl	8003018 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003b7a:	68f9      	ldr	r1, [r7, #12]
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f7ff ff85 	bl	8003a8c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003b82:	e024      	b.n	8003bce <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d008      	beq.n	8003b9c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003b8a:	4b13      	ldr	r3, [pc, #76]	; (8003bd8 <prvProcessTimerOrBlockTask+0x90>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d101      	bne.n	8003b98 <prvProcessTimerOrBlockTask+0x50>
 8003b94:	2301      	movs	r3, #1
 8003b96:	e000      	b.n	8003b9a <prvProcessTimerOrBlockTask+0x52>
 8003b98:	2300      	movs	r3, #0
 8003b9a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003b9c:	4b0f      	ldr	r3, [pc, #60]	; (8003bdc <prvProcessTimerOrBlockTask+0x94>)
 8003b9e:	6818      	ldr	r0, [r3, #0]
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	683a      	ldr	r2, [r7, #0]
 8003ba8:	4619      	mov	r1, r3
 8003baa:	f7ff f83b 	bl	8002c24 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003bae:	f7ff fa33 	bl	8003018 <xTaskResumeAll>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d10a      	bne.n	8003bce <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003bb8:	4b09      	ldr	r3, [pc, #36]	; (8003be0 <prvProcessTimerOrBlockTask+0x98>)
 8003bba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bbe:	601a      	str	r2, [r3, #0]
 8003bc0:	f3bf 8f4f 	dsb	sy
 8003bc4:	f3bf 8f6f 	isb	sy
    }
 8003bc8:	e001      	b.n	8003bce <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003bca:	f7ff fa25 	bl	8003018 <xTaskResumeAll>
    }
 8003bce:	bf00      	nop
 8003bd0:	3710      	adds	r7, #16
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	20000240 	.word	0x20000240
 8003bdc:	20000244 	.word	0x20000244
 8003be0:	e000ed04 	.word	0xe000ed04

08003be4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003be4:	b480      	push	{r7}
 8003be6:	b085      	sub	sp, #20
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003bec:	4b0e      	ldr	r3, [pc, #56]	; (8003c28 <prvGetNextExpireTime+0x44>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d101      	bne.n	8003bfa <prvGetNextExpireTime+0x16>
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	e000      	b.n	8003bfc <prvGetNextExpireTime+0x18>
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d105      	bne.n	8003c14 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003c08:	4b07      	ldr	r3, [pc, #28]	; (8003c28 <prvGetNextExpireTime+0x44>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	60fb      	str	r3, [r7, #12]
 8003c12:	e001      	b.n	8003c18 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003c14:	2300      	movs	r3, #0
 8003c16:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003c18:	68fb      	ldr	r3, [r7, #12]
    }
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3714      	adds	r7, #20
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	2000023c 	.word	0x2000023c

08003c2c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003c34:	f7ff fa82 	bl	800313c <xTaskGetTickCount>
 8003c38:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003c3a:	4b0b      	ldr	r3, [pc, #44]	; (8003c68 <prvSampleTimeNow+0x3c>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d205      	bcs.n	8003c50 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003c44:	f000 f91a 	bl	8003e7c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	601a      	str	r2, [r3, #0]
 8003c4e:	e002      	b.n	8003c56 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003c56:	4a04      	ldr	r2, [pc, #16]	; (8003c68 <prvSampleTimeNow+0x3c>)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
    }
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3710      	adds	r7, #16
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	2000024c 	.word	0x2000024c

08003c6c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b086      	sub	sp, #24
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]
 8003c78:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	68ba      	ldr	r2, [r7, #8]
 8003c82:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003c8a:	68ba      	ldr	r2, [r7, #8]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d812      	bhi.n	8003cb8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	1ad2      	subs	r2, r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d302      	bcc.n	8003ca6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	617b      	str	r3, [r7, #20]
 8003ca4:	e01b      	b.n	8003cde <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003ca6:	4b10      	ldr	r3, [pc, #64]	; (8003ce8 <prvInsertTimerInActiveList+0x7c>)
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	3304      	adds	r3, #4
 8003cae:	4619      	mov	r1, r3
 8003cb0:	4610      	mov	r0, r2
 8003cb2:	f7fe fa5c 	bl	800216e <vListInsert>
 8003cb6:	e012      	b.n	8003cde <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d206      	bcs.n	8003cce <prvInsertTimerInActiveList+0x62>
 8003cc0:	68ba      	ldr	r2, [r7, #8]
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d302      	bcc.n	8003cce <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	617b      	str	r3, [r7, #20]
 8003ccc:	e007      	b.n	8003cde <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003cce:	4b07      	ldr	r3, [pc, #28]	; (8003cec <prvInsertTimerInActiveList+0x80>)
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	3304      	adds	r3, #4
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	4610      	mov	r0, r2
 8003cda:	f7fe fa48 	bl	800216e <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003cde:	697b      	ldr	r3, [r7, #20]
    }
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3718      	adds	r7, #24
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	20000240 	.word	0x20000240
 8003cec:	2000023c 	.word	0x2000023c

08003cf0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b08c      	sub	sp, #48	; 0x30
 8003cf4:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003cf6:	e0ae      	b.n	8003e56 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	f2c0 80ab 	blt.w	8003e56 <prvProcessReceivedCommands+0x166>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d06:	695b      	ldr	r3, [r3, #20]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d004      	beq.n	8003d16 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0e:	3304      	adds	r3, #4
 8003d10:	4618      	mov	r0, r3
 8003d12:	f7fe fa65 	bl	80021e0 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003d16:	1d3b      	adds	r3, r7, #4
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7ff ff87 	bl	8003c2c <prvSampleTimeNow>
 8003d1e:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	2b09      	cmp	r3, #9
 8003d24:	f200 8096 	bhi.w	8003e54 <prvProcessReceivedCommands+0x164>
 8003d28:	a201      	add	r2, pc, #4	; (adr r2, 8003d30 <prvProcessReceivedCommands+0x40>)
 8003d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d2e:	bf00      	nop
 8003d30:	08003d59 	.word	0x08003d59
 8003d34:	08003d59 	.word	0x08003d59
 8003d38:	08003d59 	.word	0x08003d59
 8003d3c:	08003dcd 	.word	0x08003dcd
 8003d40:	08003de1 	.word	0x08003de1
 8003d44:	08003e2b 	.word	0x08003e2b
 8003d48:	08003d59 	.word	0x08003d59
 8003d4c:	08003d59 	.word	0x08003d59
 8003d50:	08003dcd 	.word	0x08003dcd
 8003d54:	08003de1 	.word	0x08003de1
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d5e:	f043 0301 	orr.w	r3, r3, #1
 8003d62:	b2da      	uxtb	r2, r3
 8003d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	18d1      	adds	r1, r2, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6a3a      	ldr	r2, [r7, #32]
 8003d76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d78:	f7ff ff78 	bl	8003c6c <prvInsertTimerInActiveList>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d069      	beq.n	8003e56 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d88:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d90:	f003 0304 	and.w	r3, r3, #4
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d05e      	beq.n	8003e56 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	441a      	add	r2, r3
 8003da0:	2300      	movs	r3, #0
 8003da2:	9300      	str	r3, [sp, #0]
 8003da4:	2300      	movs	r3, #0
 8003da6:	2100      	movs	r1, #0
 8003da8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003daa:	f7ff fe21 	bl	80039f0 <xTimerGenericCommand>
 8003dae:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d14f      	bne.n	8003e56 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8003db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dba:	f383 8811 	msr	BASEPRI, r3
 8003dbe:	f3bf 8f6f 	isb	sy
 8003dc2:	f3bf 8f4f 	dsb	sy
 8003dc6:	61bb      	str	r3, [r7, #24]
    }
 8003dc8:	bf00      	nop
 8003dca:	e7fe      	b.n	8003dca <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003dd2:	f023 0301 	bic.w	r3, r3, #1
 8003dd6:	b2da      	uxtb	r2, r3
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003dde:	e03a      	b.n	8003e56 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003de6:	f043 0301 	orr.w	r3, r3, #1
 8003dea:	b2da      	uxtb	r2, r3
 8003dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df6:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d10a      	bne.n	8003e16 <prvProcessReceivedCommands+0x126>
        __asm volatile
 8003e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e04:	f383 8811 	msr	BASEPRI, r3
 8003e08:	f3bf 8f6f 	isb	sy
 8003e0c:	f3bf 8f4f 	dsb	sy
 8003e10:	617b      	str	r3, [r7, #20]
    }
 8003e12:	bf00      	nop
 8003e14:	e7fe      	b.n	8003e14 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e18:	699a      	ldr	r2, [r3, #24]
 8003e1a:	6a3b      	ldr	r3, [r7, #32]
 8003e1c:	18d1      	adds	r1, r2, r3
 8003e1e:	6a3b      	ldr	r3, [r7, #32]
 8003e20:	6a3a      	ldr	r2, [r7, #32]
 8003e22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e24:	f7ff ff22 	bl	8003c6c <prvInsertTimerInActiveList>
                        break;
 8003e28:	e015      	b.n	8003e56 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e30:	f003 0302 	and.w	r3, r3, #2
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d103      	bne.n	8003e40 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8003e38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e3a:	f000 fc6f 	bl	800471c <vPortFree>
 8003e3e:	e00a      	b.n	8003e56 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e46:	f023 0301 	bic.w	r3, r3, #1
 8003e4a:	b2da      	uxtb	r2, r3
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003e52:	e000      	b.n	8003e56 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
 8003e54:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003e56:	4b08      	ldr	r3, [pc, #32]	; (8003e78 <prvProcessReceivedCommands+0x188>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f107 0108 	add.w	r1, r7, #8
 8003e5e:	2200      	movs	r2, #0
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7fe fc97 	bl	8002794 <xQueueReceive>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	f47f af45 	bne.w	8003cf8 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8003e6e:	bf00      	nop
 8003e70:	bf00      	nop
 8003e72:	3728      	adds	r7, #40	; 0x28
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	20000244 	.word	0x20000244

08003e7c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b088      	sub	sp, #32
 8003e80:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003e82:	e048      	b.n	8003f16 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003e84:	4b2d      	ldr	r3, [pc, #180]	; (8003f3c <prvSwitchTimerLists+0xc0>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e8e:	4b2b      	ldr	r3, [pc, #172]	; (8003f3c <prvSwitchTimerLists+0xc0>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	3304      	adds	r3, #4
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7fe f99f 	bl	80021e0 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	68f8      	ldr	r0, [r7, #12]
 8003ea8:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003eb0:	f003 0304 	and.w	r3, r3, #4
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d02e      	beq.n	8003f16 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	693a      	ldr	r2, [r7, #16]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8003ec2:	68ba      	ldr	r2, [r7, #8]
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d90e      	bls.n	8003ee8 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	68ba      	ldr	r2, [r7, #8]
 8003ece:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003ed6:	4b19      	ldr	r3, [pc, #100]	; (8003f3c <prvSwitchTimerLists+0xc0>)
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	3304      	adds	r3, #4
 8003ede:	4619      	mov	r1, r3
 8003ee0:	4610      	mov	r0, r2
 8003ee2:	f7fe f944 	bl	800216e <vListInsert>
 8003ee6:	e016      	b.n	8003f16 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003ee8:	2300      	movs	r3, #0
 8003eea:	9300      	str	r3, [sp, #0]
 8003eec:	2300      	movs	r3, #0
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	2100      	movs	r1, #0
 8003ef2:	68f8      	ldr	r0, [r7, #12]
 8003ef4:	f7ff fd7c 	bl	80039f0 <xTimerGenericCommand>
 8003ef8:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d10a      	bne.n	8003f16 <prvSwitchTimerLists+0x9a>
        __asm volatile
 8003f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f04:	f383 8811 	msr	BASEPRI, r3
 8003f08:	f3bf 8f6f 	isb	sy
 8003f0c:	f3bf 8f4f 	dsb	sy
 8003f10:	603b      	str	r3, [r7, #0]
    }
 8003f12:	bf00      	nop
 8003f14:	e7fe      	b.n	8003f14 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f16:	4b09      	ldr	r3, [pc, #36]	; (8003f3c <prvSwitchTimerLists+0xc0>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d1b1      	bne.n	8003e84 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8003f20:	4b06      	ldr	r3, [pc, #24]	; (8003f3c <prvSwitchTimerLists+0xc0>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8003f26:	4b06      	ldr	r3, [pc, #24]	; (8003f40 <prvSwitchTimerLists+0xc4>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a04      	ldr	r2, [pc, #16]	; (8003f3c <prvSwitchTimerLists+0xc0>)
 8003f2c:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003f2e:	4a04      	ldr	r2, [pc, #16]	; (8003f40 <prvSwitchTimerLists+0xc4>)
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	6013      	str	r3, [r2, #0]
    }
 8003f34:	bf00      	nop
 8003f36:	3718      	adds	r7, #24
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	2000023c 	.word	0x2000023c
 8003f40:	20000240 	.word	0x20000240

08003f44 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003f44:	b580      	push	{r7, lr}
 8003f46:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003f48:	f000 f9dc 	bl	8004304 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003f4c:	4b12      	ldr	r3, [pc, #72]	; (8003f98 <prvCheckForValidListAndQueue+0x54>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d11d      	bne.n	8003f90 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003f54:	4811      	ldr	r0, [pc, #68]	; (8003f9c <prvCheckForValidListAndQueue+0x58>)
 8003f56:	f7fe f8b9 	bl	80020cc <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003f5a:	4811      	ldr	r0, [pc, #68]	; (8003fa0 <prvCheckForValidListAndQueue+0x5c>)
 8003f5c:	f7fe f8b6 	bl	80020cc <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003f60:	4b10      	ldr	r3, [pc, #64]	; (8003fa4 <prvCheckForValidListAndQueue+0x60>)
 8003f62:	4a0e      	ldr	r2, [pc, #56]	; (8003f9c <prvCheckForValidListAndQueue+0x58>)
 8003f64:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003f66:	4b10      	ldr	r3, [pc, #64]	; (8003fa8 <prvCheckForValidListAndQueue+0x64>)
 8003f68:	4a0d      	ldr	r2, [pc, #52]	; (8003fa0 <prvCheckForValidListAndQueue+0x5c>)
 8003f6a:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	210c      	movs	r1, #12
 8003f70:	200a      	movs	r0, #10
 8003f72:	f7fe f9ba 	bl	80022ea <xQueueGenericCreate>
 8003f76:	4603      	mov	r3, r0
 8003f78:	4a07      	ldr	r2, [pc, #28]	; (8003f98 <prvCheckForValidListAndQueue+0x54>)
 8003f7a:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8003f7c:	4b06      	ldr	r3, [pc, #24]	; (8003f98 <prvCheckForValidListAndQueue+0x54>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d005      	beq.n	8003f90 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003f84:	4b04      	ldr	r3, [pc, #16]	; (8003f98 <prvCheckForValidListAndQueue+0x54>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4908      	ldr	r1, [pc, #32]	; (8003fac <prvCheckForValidListAndQueue+0x68>)
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7fe fe18 	bl	8002bc0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003f90:	f000 f9e8 	bl	8004364 <vPortExitCritical>
    }
 8003f94:	bf00      	nop
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	20000244 	.word	0x20000244
 8003f9c:	20000214 	.word	0x20000214
 8003fa0:	20000228 	.word	0x20000228
 8003fa4:	2000023c 	.word	0x2000023c
 8003fa8:	20000240 	.word	0x20000240
 8003fac:	080074dc 	.word	0x080074dc

08003fb0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b085      	sub	sp, #20
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	3b04      	subs	r3, #4
 8003fc0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003fc8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	3b04      	subs	r3, #4
 8003fce:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	f023 0201 	bic.w	r2, r3, #1
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	3b04      	subs	r3, #4
 8003fde:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003fe0:	4a0c      	ldr	r2, [pc, #48]	; (8004014 <pxPortInitialiseStack+0x64>)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	3b14      	subs	r3, #20
 8003fea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	3b04      	subs	r3, #4
 8003ff6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f06f 0202 	mvn.w	r2, #2
 8003ffe:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	3b20      	subs	r3, #32
 8004004:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004006:	68fb      	ldr	r3, [r7, #12]
}
 8004008:	4618      	mov	r0, r3
 800400a:	3714      	adds	r7, #20
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr
 8004014:	08004019 	.word	0x08004019

08004018 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004018:	b480      	push	{r7}
 800401a:	b085      	sub	sp, #20
 800401c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800401e:	2300      	movs	r3, #0
 8004020:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004022:	4b12      	ldr	r3, [pc, #72]	; (800406c <prvTaskExitError+0x54>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800402a:	d00a      	beq.n	8004042 <prvTaskExitError+0x2a>
        __asm volatile
 800402c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004030:	f383 8811 	msr	BASEPRI, r3
 8004034:	f3bf 8f6f 	isb	sy
 8004038:	f3bf 8f4f 	dsb	sy
 800403c:	60fb      	str	r3, [r7, #12]
    }
 800403e:	bf00      	nop
 8004040:	e7fe      	b.n	8004040 <prvTaskExitError+0x28>
        __asm volatile
 8004042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004046:	f383 8811 	msr	BASEPRI, r3
 800404a:	f3bf 8f6f 	isb	sy
 800404e:	f3bf 8f4f 	dsb	sy
 8004052:	60bb      	str	r3, [r7, #8]
    }
 8004054:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004056:	bf00      	nop
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d0fc      	beq.n	8004058 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800405e:	bf00      	nop
 8004060:	bf00      	nop
 8004062:	3714      	adds	r7, #20
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr
 800406c:	20000010 	.word	0x20000010

08004070 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004070:	4b07      	ldr	r3, [pc, #28]	; (8004090 <pxCurrentTCBConst2>)
 8004072:	6819      	ldr	r1, [r3, #0]
 8004074:	6808      	ldr	r0, [r1, #0]
 8004076:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800407a:	f380 8809 	msr	PSP, r0
 800407e:	f3bf 8f6f 	isb	sy
 8004082:	f04f 0000 	mov.w	r0, #0
 8004086:	f380 8811 	msr	BASEPRI, r0
 800408a:	4770      	bx	lr
 800408c:	f3af 8000 	nop.w

08004090 <pxCurrentTCBConst2>:
 8004090:	20000110 	.word	0x20000110
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004094:	bf00      	nop
 8004096:	bf00      	nop

08004098 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004098:	4808      	ldr	r0, [pc, #32]	; (80040bc <prvPortStartFirstTask+0x24>)
 800409a:	6800      	ldr	r0, [r0, #0]
 800409c:	6800      	ldr	r0, [r0, #0]
 800409e:	f380 8808 	msr	MSP, r0
 80040a2:	f04f 0000 	mov.w	r0, #0
 80040a6:	f380 8814 	msr	CONTROL, r0
 80040aa:	b662      	cpsie	i
 80040ac:	b661      	cpsie	f
 80040ae:	f3bf 8f4f 	dsb	sy
 80040b2:	f3bf 8f6f 	isb	sy
 80040b6:	df00      	svc	0
 80040b8:	bf00      	nop
 80040ba:	0000      	.short	0x0000
 80040bc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80040c0:	bf00      	nop
 80040c2:	bf00      	nop

080040c4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b086      	sub	sp, #24
 80040c8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80040ca:	4b46      	ldr	r3, [pc, #280]	; (80041e4 <xPortStartScheduler+0x120>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a46      	ldr	r2, [pc, #280]	; (80041e8 <xPortStartScheduler+0x124>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d10a      	bne.n	80040ea <xPortStartScheduler+0x26>
        __asm volatile
 80040d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d8:	f383 8811 	msr	BASEPRI, r3
 80040dc:	f3bf 8f6f 	isb	sy
 80040e0:	f3bf 8f4f 	dsb	sy
 80040e4:	613b      	str	r3, [r7, #16]
    }
 80040e6:	bf00      	nop
 80040e8:	e7fe      	b.n	80040e8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80040ea:	4b3e      	ldr	r3, [pc, #248]	; (80041e4 <xPortStartScheduler+0x120>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a3f      	ldr	r2, [pc, #252]	; (80041ec <xPortStartScheduler+0x128>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d10a      	bne.n	800410a <xPortStartScheduler+0x46>
        __asm volatile
 80040f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f8:	f383 8811 	msr	BASEPRI, r3
 80040fc:	f3bf 8f6f 	isb	sy
 8004100:	f3bf 8f4f 	dsb	sy
 8004104:	60fb      	str	r3, [r7, #12]
    }
 8004106:	bf00      	nop
 8004108:	e7fe      	b.n	8004108 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800410a:	4b39      	ldr	r3, [pc, #228]	; (80041f0 <xPortStartScheduler+0x12c>)
 800410c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	b2db      	uxtb	r3, r3
 8004114:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	22ff      	movs	r2, #255	; 0xff
 800411a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	b2db      	uxtb	r3, r3
 8004122:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004124:	78fb      	ldrb	r3, [r7, #3]
 8004126:	b2db      	uxtb	r3, r3
 8004128:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800412c:	b2da      	uxtb	r2, r3
 800412e:	4b31      	ldr	r3, [pc, #196]	; (80041f4 <xPortStartScheduler+0x130>)
 8004130:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004132:	4b31      	ldr	r3, [pc, #196]	; (80041f8 <xPortStartScheduler+0x134>)
 8004134:	2207      	movs	r2, #7
 8004136:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004138:	e009      	b.n	800414e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800413a:	4b2f      	ldr	r3, [pc, #188]	; (80041f8 <xPortStartScheduler+0x134>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	3b01      	subs	r3, #1
 8004140:	4a2d      	ldr	r2, [pc, #180]	; (80041f8 <xPortStartScheduler+0x134>)
 8004142:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004144:	78fb      	ldrb	r3, [r7, #3]
 8004146:	b2db      	uxtb	r3, r3
 8004148:	005b      	lsls	r3, r3, #1
 800414a:	b2db      	uxtb	r3, r3
 800414c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800414e:	78fb      	ldrb	r3, [r7, #3]
 8004150:	b2db      	uxtb	r3, r3
 8004152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004156:	2b80      	cmp	r3, #128	; 0x80
 8004158:	d0ef      	beq.n	800413a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800415a:	4b27      	ldr	r3, [pc, #156]	; (80041f8 <xPortStartScheduler+0x134>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f1c3 0307 	rsb	r3, r3, #7
 8004162:	2b04      	cmp	r3, #4
 8004164:	d00a      	beq.n	800417c <xPortStartScheduler+0xb8>
        __asm volatile
 8004166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800416a:	f383 8811 	msr	BASEPRI, r3
 800416e:	f3bf 8f6f 	isb	sy
 8004172:	f3bf 8f4f 	dsb	sy
 8004176:	60bb      	str	r3, [r7, #8]
    }
 8004178:	bf00      	nop
 800417a:	e7fe      	b.n	800417a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800417c:	4b1e      	ldr	r3, [pc, #120]	; (80041f8 <xPortStartScheduler+0x134>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	021b      	lsls	r3, r3, #8
 8004182:	4a1d      	ldr	r2, [pc, #116]	; (80041f8 <xPortStartScheduler+0x134>)
 8004184:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004186:	4b1c      	ldr	r3, [pc, #112]	; (80041f8 <xPortStartScheduler+0x134>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800418e:	4a1a      	ldr	r2, [pc, #104]	; (80041f8 <xPortStartScheduler+0x134>)
 8004190:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	b2da      	uxtb	r2, r3
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800419a:	4b18      	ldr	r3, [pc, #96]	; (80041fc <xPortStartScheduler+0x138>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a17      	ldr	r2, [pc, #92]	; (80041fc <xPortStartScheduler+0x138>)
 80041a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80041a4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80041a6:	4b15      	ldr	r3, [pc, #84]	; (80041fc <xPortStartScheduler+0x138>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a14      	ldr	r2, [pc, #80]	; (80041fc <xPortStartScheduler+0x138>)
 80041ac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80041b0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80041b2:	f000 f963 	bl	800447c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80041b6:	4b12      	ldr	r3, [pc, #72]	; (8004200 <xPortStartScheduler+0x13c>)
 80041b8:	2200      	movs	r2, #0
 80041ba:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80041bc:	f000 f982 	bl	80044c4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80041c0:	4b10      	ldr	r3, [pc, #64]	; (8004204 <xPortStartScheduler+0x140>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a0f      	ldr	r2, [pc, #60]	; (8004204 <xPortStartScheduler+0x140>)
 80041c6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80041ca:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80041cc:	f7ff ff64 	bl	8004098 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80041d0:	f7ff f870 	bl	80032b4 <vTaskSwitchContext>
    prvTaskExitError();
 80041d4:	f7ff ff20 	bl	8004018 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3718      	adds	r7, #24
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	e000ed00 	.word	0xe000ed00
 80041e8:	410fc271 	.word	0x410fc271
 80041ec:	410fc270 	.word	0x410fc270
 80041f0:	e000e400 	.word	0xe000e400
 80041f4:	20000250 	.word	0x20000250
 80041f8:	20000254 	.word	0x20000254
 80041fc:	e000ed20 	.word	0xe000ed20
 8004200:	20000010 	.word	0x20000010
 8004204:	e000ef34 	.word	0xe000ef34

08004208 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8004208:	b480      	push	{r7}
 800420a:	b087      	sub	sp, #28
 800420c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800420e:	4b37      	ldr	r3, [pc, #220]	; (80042ec <vInitPrioGroupValue+0xe4>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a37      	ldr	r2, [pc, #220]	; (80042f0 <vInitPrioGroupValue+0xe8>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d10a      	bne.n	800422e <vInitPrioGroupValue+0x26>
        __asm volatile
 8004218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800421c:	f383 8811 	msr	BASEPRI, r3
 8004220:	f3bf 8f6f 	isb	sy
 8004224:	f3bf 8f4f 	dsb	sy
 8004228:	613b      	str	r3, [r7, #16]
    }
 800422a:	bf00      	nop
 800422c:	e7fe      	b.n	800422c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800422e:	4b2f      	ldr	r3, [pc, #188]	; (80042ec <vInitPrioGroupValue+0xe4>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a30      	ldr	r2, [pc, #192]	; (80042f4 <vInitPrioGroupValue+0xec>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d10a      	bne.n	800424e <vInitPrioGroupValue+0x46>
        __asm volatile
 8004238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800423c:	f383 8811 	msr	BASEPRI, r3
 8004240:	f3bf 8f6f 	isb	sy
 8004244:	f3bf 8f4f 	dsb	sy
 8004248:	60fb      	str	r3, [r7, #12]
    }
 800424a:	bf00      	nop
 800424c:	e7fe      	b.n	800424c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800424e:	4b2a      	ldr	r3, [pc, #168]	; (80042f8 <vInitPrioGroupValue+0xf0>)
 8004250:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	b2db      	uxtb	r3, r3
 8004258:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	22ff      	movs	r2, #255	; 0xff
 800425e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	b2db      	uxtb	r3, r3
 8004266:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004268:	78fb      	ldrb	r3, [r7, #3]
 800426a:	b2db      	uxtb	r3, r3
 800426c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004270:	b2da      	uxtb	r2, r3
 8004272:	4b22      	ldr	r3, [pc, #136]	; (80042fc <vInitPrioGroupValue+0xf4>)
 8004274:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004276:	4b22      	ldr	r3, [pc, #136]	; (8004300 <vInitPrioGroupValue+0xf8>)
 8004278:	2207      	movs	r2, #7
 800427a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800427c:	e009      	b.n	8004292 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800427e:	4b20      	ldr	r3, [pc, #128]	; (8004300 <vInitPrioGroupValue+0xf8>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	3b01      	subs	r3, #1
 8004284:	4a1e      	ldr	r2, [pc, #120]	; (8004300 <vInitPrioGroupValue+0xf8>)
 8004286:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004288:	78fb      	ldrb	r3, [r7, #3]
 800428a:	b2db      	uxtb	r3, r3
 800428c:	005b      	lsls	r3, r3, #1
 800428e:	b2db      	uxtb	r3, r3
 8004290:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004292:	78fb      	ldrb	r3, [r7, #3]
 8004294:	b2db      	uxtb	r3, r3
 8004296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800429a:	2b80      	cmp	r3, #128	; 0x80
 800429c:	d0ef      	beq.n	800427e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800429e:	4b18      	ldr	r3, [pc, #96]	; (8004300 <vInitPrioGroupValue+0xf8>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f1c3 0307 	rsb	r3, r3, #7
 80042a6:	2b04      	cmp	r3, #4
 80042a8:	d00a      	beq.n	80042c0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 80042aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ae:	f383 8811 	msr	BASEPRI, r3
 80042b2:	f3bf 8f6f 	isb	sy
 80042b6:	f3bf 8f4f 	dsb	sy
 80042ba:	60bb      	str	r3, [r7, #8]
    }
 80042bc:	bf00      	nop
 80042be:	e7fe      	b.n	80042be <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80042c0:	4b0f      	ldr	r3, [pc, #60]	; (8004300 <vInitPrioGroupValue+0xf8>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	021b      	lsls	r3, r3, #8
 80042c6:	4a0e      	ldr	r2, [pc, #56]	; (8004300 <vInitPrioGroupValue+0xf8>)
 80042c8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80042ca:	4b0d      	ldr	r3, [pc, #52]	; (8004300 <vInitPrioGroupValue+0xf8>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80042d2:	4a0b      	ldr	r2, [pc, #44]	; (8004300 <vInitPrioGroupValue+0xf8>)
 80042d4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	b2da      	uxtb	r2, r3
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80042de:	bf00      	nop
 80042e0:	371c      	adds	r7, #28
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	e000ed00 	.word	0xe000ed00
 80042f0:	410fc271 	.word	0x410fc271
 80042f4:	410fc270 	.word	0x410fc270
 80042f8:	e000e400 	.word	0xe000e400
 80042fc:	20000250 	.word	0x20000250
 8004300:	20000254 	.word	0x20000254

08004304 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
        __asm volatile
 800430a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430e:	f383 8811 	msr	BASEPRI, r3
 8004312:	f3bf 8f6f 	isb	sy
 8004316:	f3bf 8f4f 	dsb	sy
 800431a:	607b      	str	r3, [r7, #4]
    }
 800431c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800431e:	4b0f      	ldr	r3, [pc, #60]	; (800435c <vPortEnterCritical+0x58>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	3301      	adds	r3, #1
 8004324:	4a0d      	ldr	r2, [pc, #52]	; (800435c <vPortEnterCritical+0x58>)
 8004326:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004328:	4b0c      	ldr	r3, [pc, #48]	; (800435c <vPortEnterCritical+0x58>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d10f      	bne.n	8004350 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004330:	4b0b      	ldr	r3, [pc, #44]	; (8004360 <vPortEnterCritical+0x5c>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00a      	beq.n	8004350 <vPortEnterCritical+0x4c>
        __asm volatile
 800433a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800433e:	f383 8811 	msr	BASEPRI, r3
 8004342:	f3bf 8f6f 	isb	sy
 8004346:	f3bf 8f4f 	dsb	sy
 800434a:	603b      	str	r3, [r7, #0]
    }
 800434c:	bf00      	nop
 800434e:	e7fe      	b.n	800434e <vPortEnterCritical+0x4a>
    }
}
 8004350:	bf00      	nop
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr
 800435c:	20000010 	.word	0x20000010
 8004360:	e000ed04 	.word	0xe000ed04

08004364 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800436a:	4b12      	ldr	r3, [pc, #72]	; (80043b4 <vPortExitCritical+0x50>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d10a      	bne.n	8004388 <vPortExitCritical+0x24>
        __asm volatile
 8004372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004376:	f383 8811 	msr	BASEPRI, r3
 800437a:	f3bf 8f6f 	isb	sy
 800437e:	f3bf 8f4f 	dsb	sy
 8004382:	607b      	str	r3, [r7, #4]
    }
 8004384:	bf00      	nop
 8004386:	e7fe      	b.n	8004386 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004388:	4b0a      	ldr	r3, [pc, #40]	; (80043b4 <vPortExitCritical+0x50>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	3b01      	subs	r3, #1
 800438e:	4a09      	ldr	r2, [pc, #36]	; (80043b4 <vPortExitCritical+0x50>)
 8004390:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004392:	4b08      	ldr	r3, [pc, #32]	; (80043b4 <vPortExitCritical+0x50>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d105      	bne.n	80043a6 <vPortExitCritical+0x42>
 800439a:	2300      	movs	r3, #0
 800439c:	603b      	str	r3, [r7, #0]
        __asm volatile
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	f383 8811 	msr	BASEPRI, r3
    }
 80043a4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80043a6:	bf00      	nop
 80043a8:	370c      	adds	r7, #12
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	20000010 	.word	0x20000010
	...

080043c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80043c0:	f3ef 8009 	mrs	r0, PSP
 80043c4:	f3bf 8f6f 	isb	sy
 80043c8:	4b15      	ldr	r3, [pc, #84]	; (8004420 <pxCurrentTCBConst>)
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	f01e 0f10 	tst.w	lr, #16
 80043d0:	bf08      	it	eq
 80043d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80043d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043da:	6010      	str	r0, [r2, #0]
 80043dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80043e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80043e4:	f380 8811 	msr	BASEPRI, r0
 80043e8:	f3bf 8f4f 	dsb	sy
 80043ec:	f3bf 8f6f 	isb	sy
 80043f0:	f7fe ff60 	bl	80032b4 <vTaskSwitchContext>
 80043f4:	f04f 0000 	mov.w	r0, #0
 80043f8:	f380 8811 	msr	BASEPRI, r0
 80043fc:	bc09      	pop	{r0, r3}
 80043fe:	6819      	ldr	r1, [r3, #0]
 8004400:	6808      	ldr	r0, [r1, #0]
 8004402:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004406:	f01e 0f10 	tst.w	lr, #16
 800440a:	bf08      	it	eq
 800440c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004410:	f380 8809 	msr	PSP, r0
 8004414:	f3bf 8f6f 	isb	sy
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	f3af 8000 	nop.w

08004420 <pxCurrentTCBConst>:
 8004420:	20000110 	.word	0x20000110
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004424:	bf00      	nop
 8004426:	bf00      	nop

08004428 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
        __asm volatile
 800442e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004432:	f383 8811 	msr	BASEPRI, r3
 8004436:	f3bf 8f6f 	isb	sy
 800443a:	f3bf 8f4f 	dsb	sy
 800443e:	607b      	str	r3, [r7, #4]
    }
 8004440:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004442:	f002 f829 	bl	8006498 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004446:	f7fe fe9b 	bl	8003180 <xTaskIncrementTick>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d006      	beq.n	800445e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004450:	f002 f880 	bl	8006554 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004454:	4b08      	ldr	r3, [pc, #32]	; (8004478 <SysTick_Handler+0x50>)
 8004456:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800445a:	601a      	str	r2, [r3, #0]
 800445c:	e001      	b.n	8004462 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800445e:	f002 f85d 	bl	800651c <SEGGER_SYSVIEW_RecordExitISR>
 8004462:	2300      	movs	r3, #0
 8004464:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	f383 8811 	msr	BASEPRI, r3
    }
 800446c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800446e:	bf00      	nop
 8004470:	3708      	adds	r7, #8
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	e000ed04 	.word	0xe000ed04

0800447c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800447c:	b480      	push	{r7}
 800447e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004480:	4b0b      	ldr	r3, [pc, #44]	; (80044b0 <vPortSetupTimerInterrupt+0x34>)
 8004482:	2200      	movs	r2, #0
 8004484:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004486:	4b0b      	ldr	r3, [pc, #44]	; (80044b4 <vPortSetupTimerInterrupt+0x38>)
 8004488:	2200      	movs	r2, #0
 800448a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800448c:	4b0a      	ldr	r3, [pc, #40]	; (80044b8 <vPortSetupTimerInterrupt+0x3c>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a0a      	ldr	r2, [pc, #40]	; (80044bc <vPortSetupTimerInterrupt+0x40>)
 8004492:	fba2 2303 	umull	r2, r3, r2, r3
 8004496:	099b      	lsrs	r3, r3, #6
 8004498:	4a09      	ldr	r2, [pc, #36]	; (80044c0 <vPortSetupTimerInterrupt+0x44>)
 800449a:	3b01      	subs	r3, #1
 800449c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800449e:	4b04      	ldr	r3, [pc, #16]	; (80044b0 <vPortSetupTimerInterrupt+0x34>)
 80044a0:	2207      	movs	r2, #7
 80044a2:	601a      	str	r2, [r3, #0]
}
 80044a4:	bf00      	nop
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	e000e010 	.word	0xe000e010
 80044b4:	e000e018 	.word	0xe000e018
 80044b8:	20000000 	.word	0x20000000
 80044bc:	10624dd3 	.word	0x10624dd3
 80044c0:	e000e014 	.word	0xe000e014

080044c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80044c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80044d4 <vPortEnableVFP+0x10>
 80044c8:	6801      	ldr	r1, [r0, #0]
 80044ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80044ce:	6001      	str	r1, [r0, #0]
 80044d0:	4770      	bx	lr
 80044d2:	0000      	.short	0x0000
 80044d4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80044d8:	bf00      	nop
 80044da:	bf00      	nop

080044dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80044dc:	b480      	push	{r7}
 80044de:	b085      	sub	sp, #20
 80044e0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80044e2:	f3ef 8305 	mrs	r3, IPSR
 80044e6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2b0f      	cmp	r3, #15
 80044ec:	d914      	bls.n	8004518 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80044ee:	4a17      	ldr	r2, [pc, #92]	; (800454c <vPortValidateInterruptPriority+0x70>)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	4413      	add	r3, r2
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80044f8:	4b15      	ldr	r3, [pc, #84]	; (8004550 <vPortValidateInterruptPriority+0x74>)
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	7afa      	ldrb	r2, [r7, #11]
 80044fe:	429a      	cmp	r2, r3
 8004500:	d20a      	bcs.n	8004518 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004506:	f383 8811 	msr	BASEPRI, r3
 800450a:	f3bf 8f6f 	isb	sy
 800450e:	f3bf 8f4f 	dsb	sy
 8004512:	607b      	str	r3, [r7, #4]
    }
 8004514:	bf00      	nop
 8004516:	e7fe      	b.n	8004516 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004518:	4b0e      	ldr	r3, [pc, #56]	; (8004554 <vPortValidateInterruptPriority+0x78>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004520:	4b0d      	ldr	r3, [pc, #52]	; (8004558 <vPortValidateInterruptPriority+0x7c>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	429a      	cmp	r2, r3
 8004526:	d90a      	bls.n	800453e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800452c:	f383 8811 	msr	BASEPRI, r3
 8004530:	f3bf 8f6f 	isb	sy
 8004534:	f3bf 8f4f 	dsb	sy
 8004538:	603b      	str	r3, [r7, #0]
    }
 800453a:	bf00      	nop
 800453c:	e7fe      	b.n	800453c <vPortValidateInterruptPriority+0x60>
    }
 800453e:	bf00      	nop
 8004540:	3714      	adds	r7, #20
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	e000e3f0 	.word	0xe000e3f0
 8004550:	20000250 	.word	0x20000250
 8004554:	e000ed0c 	.word	0xe000ed0c
 8004558:	20000254 	.word	0x20000254

0800455c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b08a      	sub	sp, #40	; 0x28
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004564:	2300      	movs	r3, #0
 8004566:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004568:	f7fe fd48 	bl	8002ffc <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800456c:	4b65      	ldr	r3, [pc, #404]	; (8004704 <pvPortMalloc+0x1a8>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d101      	bne.n	8004578 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004574:	f000 f934 	bl	80047e0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004578:	4b63      	ldr	r3, [pc, #396]	; (8004708 <pvPortMalloc+0x1ac>)
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4013      	ands	r3, r2
 8004580:	2b00      	cmp	r3, #0
 8004582:	f040 80a7 	bne.w	80046d4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d02d      	beq.n	80045e8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800458c:	2208      	movs	r2, #8
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	429a      	cmp	r2, r3
 8004596:	d227      	bcs.n	80045e8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004598:	2208      	movs	r2, #8
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4413      	add	r3, r2
 800459e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f003 0307 	and.w	r3, r3, #7
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d021      	beq.n	80045ee <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f023 0307 	bic.w	r3, r3, #7
 80045b0:	3308      	adds	r3, #8
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d214      	bcs.n	80045e2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f023 0307 	bic.w	r3, r3, #7
 80045be:	3308      	adds	r3, #8
 80045c0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f003 0307 	and.w	r3, r3, #7
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d010      	beq.n	80045ee <pvPortMalloc+0x92>
        __asm volatile
 80045cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d0:	f383 8811 	msr	BASEPRI, r3
 80045d4:	f3bf 8f6f 	isb	sy
 80045d8:	f3bf 8f4f 	dsb	sy
 80045dc:	617b      	str	r3, [r7, #20]
    }
 80045de:	bf00      	nop
 80045e0:	e7fe      	b.n	80045e0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80045e2:	2300      	movs	r3, #0
 80045e4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80045e6:	e002      	b.n	80045ee <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80045e8:	2300      	movs	r3, #0
 80045ea:	607b      	str	r3, [r7, #4]
 80045ec:	e000      	b.n	80045f0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80045ee:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d06e      	beq.n	80046d4 <pvPortMalloc+0x178>
 80045f6:	4b45      	ldr	r3, [pc, #276]	; (800470c <pvPortMalloc+0x1b0>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d869      	bhi.n	80046d4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004600:	4b43      	ldr	r3, [pc, #268]	; (8004710 <pvPortMalloc+0x1b4>)
 8004602:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004604:	4b42      	ldr	r3, [pc, #264]	; (8004710 <pvPortMalloc+0x1b4>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800460a:	e004      	b.n	8004616 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800460c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	429a      	cmp	r2, r3
 800461e:	d903      	bls.n	8004628 <pvPortMalloc+0xcc>
 8004620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d1f1      	bne.n	800460c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004628:	4b36      	ldr	r3, [pc, #216]	; (8004704 <pvPortMalloc+0x1a8>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800462e:	429a      	cmp	r2, r3
 8004630:	d050      	beq.n	80046d4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004632:	6a3b      	ldr	r3, [r7, #32]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2208      	movs	r2, #8
 8004638:	4413      	add	r3, r2
 800463a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800463c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	6a3b      	ldr	r3, [r7, #32]
 8004642:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004646:	685a      	ldr	r2, [r3, #4]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	1ad2      	subs	r2, r2, r3
 800464c:	2308      	movs	r3, #8
 800464e:	005b      	lsls	r3, r3, #1
 8004650:	429a      	cmp	r2, r3
 8004652:	d91f      	bls.n	8004694 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4413      	add	r3, r2
 800465a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	f003 0307 	and.w	r3, r3, #7
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00a      	beq.n	800467c <pvPortMalloc+0x120>
        __asm volatile
 8004666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800466a:	f383 8811 	msr	BASEPRI, r3
 800466e:	f3bf 8f6f 	isb	sy
 8004672:	f3bf 8f4f 	dsb	sy
 8004676:	613b      	str	r3, [r7, #16]
    }
 8004678:	bf00      	nop
 800467a:	e7fe      	b.n	800467a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800467c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467e:	685a      	ldr	r2, [r3, #4]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	1ad2      	subs	r2, r2, r3
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800468e:	69b8      	ldr	r0, [r7, #24]
 8004690:	f000 f908 	bl	80048a4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004694:	4b1d      	ldr	r3, [pc, #116]	; (800470c <pvPortMalloc+0x1b0>)
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	4a1b      	ldr	r2, [pc, #108]	; (800470c <pvPortMalloc+0x1b0>)
 80046a0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80046a2:	4b1a      	ldr	r3, [pc, #104]	; (800470c <pvPortMalloc+0x1b0>)
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	4b1b      	ldr	r3, [pc, #108]	; (8004714 <pvPortMalloc+0x1b8>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d203      	bcs.n	80046b6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80046ae:	4b17      	ldr	r3, [pc, #92]	; (800470c <pvPortMalloc+0x1b0>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a18      	ldr	r2, [pc, #96]	; (8004714 <pvPortMalloc+0x1b8>)
 80046b4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80046b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b8:	685a      	ldr	r2, [r3, #4]
 80046ba:	4b13      	ldr	r3, [pc, #76]	; (8004708 <pvPortMalloc+0x1ac>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	431a      	orrs	r2, r3
 80046c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80046c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c6:	2200      	movs	r2, #0
 80046c8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80046ca:	4b13      	ldr	r3, [pc, #76]	; (8004718 <pvPortMalloc+0x1bc>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	3301      	adds	r3, #1
 80046d0:	4a11      	ldr	r2, [pc, #68]	; (8004718 <pvPortMalloc+0x1bc>)
 80046d2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80046d4:	f7fe fca0 	bl	8003018 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	f003 0307 	and.w	r3, r3, #7
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00a      	beq.n	80046f8 <pvPortMalloc+0x19c>
        __asm volatile
 80046e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e6:	f383 8811 	msr	BASEPRI, r3
 80046ea:	f3bf 8f6f 	isb	sy
 80046ee:	f3bf 8f4f 	dsb	sy
 80046f2:	60fb      	str	r3, [r7, #12]
    }
 80046f4:	bf00      	nop
 80046f6:	e7fe      	b.n	80046f6 <pvPortMalloc+0x19a>
    return pvReturn;
 80046f8:	69fb      	ldr	r3, [r7, #28]
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3728      	adds	r7, #40	; 0x28
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	20012e60 	.word	0x20012e60
 8004708:	20012e74 	.word	0x20012e74
 800470c:	20012e64 	.word	0x20012e64
 8004710:	20012e58 	.word	0x20012e58
 8004714:	20012e68 	.word	0x20012e68
 8004718:	20012e6c 	.word	0x20012e6c

0800471c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b086      	sub	sp, #24
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d04d      	beq.n	80047ca <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800472e:	2308      	movs	r3, #8
 8004730:	425b      	negs	r3, r3
 8004732:	697a      	ldr	r2, [r7, #20]
 8004734:	4413      	add	r3, r2
 8004736:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	685a      	ldr	r2, [r3, #4]
 8004740:	4b24      	ldr	r3, [pc, #144]	; (80047d4 <vPortFree+0xb8>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4013      	ands	r3, r2
 8004746:	2b00      	cmp	r3, #0
 8004748:	d10a      	bne.n	8004760 <vPortFree+0x44>
        __asm volatile
 800474a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800474e:	f383 8811 	msr	BASEPRI, r3
 8004752:	f3bf 8f6f 	isb	sy
 8004756:	f3bf 8f4f 	dsb	sy
 800475a:	60fb      	str	r3, [r7, #12]
    }
 800475c:	bf00      	nop
 800475e:	e7fe      	b.n	800475e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d00a      	beq.n	800477e <vPortFree+0x62>
        __asm volatile
 8004768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800476c:	f383 8811 	msr	BASEPRI, r3
 8004770:	f3bf 8f6f 	isb	sy
 8004774:	f3bf 8f4f 	dsb	sy
 8004778:	60bb      	str	r3, [r7, #8]
    }
 800477a:	bf00      	nop
 800477c:	e7fe      	b.n	800477c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	685a      	ldr	r2, [r3, #4]
 8004782:	4b14      	ldr	r3, [pc, #80]	; (80047d4 <vPortFree+0xb8>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4013      	ands	r3, r2
 8004788:	2b00      	cmp	r3, #0
 800478a:	d01e      	beq.n	80047ca <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d11a      	bne.n	80047ca <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	685a      	ldr	r2, [r3, #4]
 8004798:	4b0e      	ldr	r3, [pc, #56]	; (80047d4 <vPortFree+0xb8>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	43db      	mvns	r3, r3
 800479e:	401a      	ands	r2, r3
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80047a4:	f7fe fc2a 	bl	8002ffc <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	685a      	ldr	r2, [r3, #4]
 80047ac:	4b0a      	ldr	r3, [pc, #40]	; (80047d8 <vPortFree+0xbc>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4413      	add	r3, r2
 80047b2:	4a09      	ldr	r2, [pc, #36]	; (80047d8 <vPortFree+0xbc>)
 80047b4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80047b6:	6938      	ldr	r0, [r7, #16]
 80047b8:	f000 f874 	bl	80048a4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80047bc:	4b07      	ldr	r3, [pc, #28]	; (80047dc <vPortFree+0xc0>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	3301      	adds	r3, #1
 80047c2:	4a06      	ldr	r2, [pc, #24]	; (80047dc <vPortFree+0xc0>)
 80047c4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80047c6:	f7fe fc27 	bl	8003018 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80047ca:	bf00      	nop
 80047cc:	3718      	adds	r7, #24
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	20012e74 	.word	0x20012e74
 80047d8:	20012e64 	.word	0x20012e64
 80047dc:	20012e70 	.word	0x20012e70

080047e0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80047e0:	b480      	push	{r7}
 80047e2:	b085      	sub	sp, #20
 80047e4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80047e6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80047ea:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80047ec:	4b27      	ldr	r3, [pc, #156]	; (800488c <prvHeapInit+0xac>)
 80047ee:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f003 0307 	and.w	r3, r3, #7
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d00c      	beq.n	8004814 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	3307      	adds	r3, #7
 80047fe:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f023 0307 	bic.w	r3, r3, #7
 8004806:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004808:	68ba      	ldr	r2, [r7, #8]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	4a1f      	ldr	r2, [pc, #124]	; (800488c <prvHeapInit+0xac>)
 8004810:	4413      	add	r3, r2
 8004812:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004818:	4a1d      	ldr	r2, [pc, #116]	; (8004890 <prvHeapInit+0xb0>)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800481e:	4b1c      	ldr	r3, [pc, #112]	; (8004890 <prvHeapInit+0xb0>)
 8004820:	2200      	movs	r2, #0
 8004822:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	68ba      	ldr	r2, [r7, #8]
 8004828:	4413      	add	r3, r2
 800482a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800482c:	2208      	movs	r2, #8
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	1a9b      	subs	r3, r3, r2
 8004832:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f023 0307 	bic.w	r3, r3, #7
 800483a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	4a15      	ldr	r2, [pc, #84]	; (8004894 <prvHeapInit+0xb4>)
 8004840:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004842:	4b14      	ldr	r3, [pc, #80]	; (8004894 <prvHeapInit+0xb4>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2200      	movs	r2, #0
 8004848:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800484a:	4b12      	ldr	r3, [pc, #72]	; (8004894 <prvHeapInit+0xb4>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2200      	movs	r2, #0
 8004850:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	1ad2      	subs	r2, r2, r3
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004860:	4b0c      	ldr	r3, [pc, #48]	; (8004894 <prvHeapInit+0xb4>)
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	4a0a      	ldr	r2, [pc, #40]	; (8004898 <prvHeapInit+0xb8>)
 800486e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	4a09      	ldr	r2, [pc, #36]	; (800489c <prvHeapInit+0xbc>)
 8004876:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004878:	4b09      	ldr	r3, [pc, #36]	; (80048a0 <prvHeapInit+0xc0>)
 800487a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800487e:	601a      	str	r2, [r3, #0]
}
 8004880:	bf00      	nop
 8004882:	3714      	adds	r7, #20
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr
 800488c:	20000258 	.word	0x20000258
 8004890:	20012e58 	.word	0x20012e58
 8004894:	20012e60 	.word	0x20012e60
 8004898:	20012e68 	.word	0x20012e68
 800489c:	20012e64 	.word	0x20012e64
 80048a0:	20012e74 	.word	0x20012e74

080048a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80048a4:	b480      	push	{r7}
 80048a6:	b085      	sub	sp, #20
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80048ac:	4b28      	ldr	r3, [pc, #160]	; (8004950 <prvInsertBlockIntoFreeList+0xac>)
 80048ae:	60fb      	str	r3, [r7, #12]
 80048b0:	e002      	b.n	80048b8 <prvInsertBlockIntoFreeList+0x14>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	60fb      	str	r3, [r7, #12]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d8f7      	bhi.n	80048b2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	68ba      	ldr	r2, [r7, #8]
 80048cc:	4413      	add	r3, r2
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d108      	bne.n	80048e6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	685a      	ldr	r2, [r3, #4]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	441a      	add	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	68ba      	ldr	r2, [r7, #8]
 80048f0:	441a      	add	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d118      	bne.n	800492c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	4b15      	ldr	r3, [pc, #84]	; (8004954 <prvInsertBlockIntoFreeList+0xb0>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	429a      	cmp	r2, r3
 8004904:	d00d      	beq.n	8004922 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685a      	ldr	r2, [r3, #4]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	441a      	add	r2, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	601a      	str	r2, [r3, #0]
 8004920:	e008      	b.n	8004934 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004922:	4b0c      	ldr	r3, [pc, #48]	; (8004954 <prvInsertBlockIntoFreeList+0xb0>)
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	601a      	str	r2, [r3, #0]
 800492a:	e003      	b.n	8004934 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	429a      	cmp	r2, r3
 800493a:	d002      	beq.n	8004942 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004942:	bf00      	nop
 8004944:	3714      	adds	r7, #20
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	20012e58 	.word	0x20012e58
 8004954:	20012e60 	.word	0x20012e60

08004958 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004958:	b580      	push	{r7, lr}
 800495a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800495c:	4803      	ldr	r0, [pc, #12]	; (800496c <_cbSendSystemDesc+0x14>)
 800495e:	f001 fd45 	bl	80063ec <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004962:	4803      	ldr	r0, [pc, #12]	; (8004970 <_cbSendSystemDesc+0x18>)
 8004964:	f001 fd42 	bl	80063ec <SEGGER_SYSVIEW_SendSysDesc>
}
 8004968:	bf00      	nop
 800496a:	bd80      	pop	{r7, pc}
 800496c:	080074e4 	.word	0x080074e4
 8004970:	08007528 	.word	0x08007528

08004974 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004974:	b580      	push	{r7, lr}
 8004976:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004978:	4b06      	ldr	r3, [pc, #24]	; (8004994 <SEGGER_SYSVIEW_Conf+0x20>)
 800497a:	6818      	ldr	r0, [r3, #0]
 800497c:	4b05      	ldr	r3, [pc, #20]	; (8004994 <SEGGER_SYSVIEW_Conf+0x20>)
 800497e:	6819      	ldr	r1, [r3, #0]
 8004980:	4b05      	ldr	r3, [pc, #20]	; (8004998 <SEGGER_SYSVIEW_Conf+0x24>)
 8004982:	4a06      	ldr	r2, [pc, #24]	; (800499c <SEGGER_SYSVIEW_Conf+0x28>)
 8004984:	f001 f8b0 	bl	8005ae8 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004988:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800498c:	f001 f8f0 	bl	8005b70 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004990:	bf00      	nop
 8004992:	bd80      	pop	{r7, pc}
 8004994:	20000000 	.word	0x20000000
 8004998:	08004959 	.word	0x08004959
 800499c:	080075c8 	.word	0x080075c8

080049a0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80049a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049a2:	b085      	sub	sp, #20
 80049a4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80049a6:	2300      	movs	r3, #0
 80049a8:	607b      	str	r3, [r7, #4]
 80049aa:	e033      	b.n	8004a14 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80049ac:	491e      	ldr	r1, [pc, #120]	; (8004a28 <_cbSendTaskList+0x88>)
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	4613      	mov	r3, r2
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	4413      	add	r3, r2
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	440b      	add	r3, r1
 80049ba:	6818      	ldr	r0, [r3, #0]
 80049bc:	491a      	ldr	r1, [pc, #104]	; (8004a28 <_cbSendTaskList+0x88>)
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	4613      	mov	r3, r2
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	4413      	add	r3, r2
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	440b      	add	r3, r1
 80049ca:	3304      	adds	r3, #4
 80049cc:	6819      	ldr	r1, [r3, #0]
 80049ce:	4c16      	ldr	r4, [pc, #88]	; (8004a28 <_cbSendTaskList+0x88>)
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	4613      	mov	r3, r2
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	4413      	add	r3, r2
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	4423      	add	r3, r4
 80049dc:	3308      	adds	r3, #8
 80049de:	681c      	ldr	r4, [r3, #0]
 80049e0:	4d11      	ldr	r5, [pc, #68]	; (8004a28 <_cbSendTaskList+0x88>)
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	4613      	mov	r3, r2
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	4413      	add	r3, r2
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	442b      	add	r3, r5
 80049ee:	330c      	adds	r3, #12
 80049f0:	681d      	ldr	r5, [r3, #0]
 80049f2:	4e0d      	ldr	r6, [pc, #52]	; (8004a28 <_cbSendTaskList+0x88>)
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	4613      	mov	r3, r2
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	4413      	add	r3, r2
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	4433      	add	r3, r6
 8004a00:	3310      	adds	r3, #16
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	9300      	str	r3, [sp, #0]
 8004a06:	462b      	mov	r3, r5
 8004a08:	4622      	mov	r2, r4
 8004a0a:	f000 f8bd 	bl	8004b88 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	3301      	adds	r3, #1
 8004a12:	607b      	str	r3, [r7, #4]
 8004a14:	4b05      	ldr	r3, [pc, #20]	; (8004a2c <_cbSendTaskList+0x8c>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d3c6      	bcc.n	80049ac <_cbSendTaskList+0xc>
  }
}
 8004a1e:	bf00      	nop
 8004a20:	bf00      	nop
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a28:	20012e78 	.word	0x20012e78
 8004a2c:	20012f18 	.word	0x20012f18

08004a30 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004a30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a34:	b082      	sub	sp, #8
 8004a36:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004a38:	f7fe fb90 	bl	800315c <xTaskGetTickCountFromISR>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2200      	movs	r2, #0
 8004a40:	469a      	mov	sl, r3
 8004a42:	4693      	mov	fp, r2
 8004a44:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004a48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	460b      	mov	r3, r1
 8004a50:	f04f 0a00 	mov.w	sl, #0
 8004a54:	f04f 0b00 	mov.w	fp, #0
 8004a58:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004a5c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004a60:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004a64:	4652      	mov	r2, sl
 8004a66:	465b      	mov	r3, fp
 8004a68:	1a14      	subs	r4, r2, r0
 8004a6a:	eb63 0501 	sbc.w	r5, r3, r1
 8004a6e:	f04f 0200 	mov.w	r2, #0
 8004a72:	f04f 0300 	mov.w	r3, #0
 8004a76:	00ab      	lsls	r3, r5, #2
 8004a78:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004a7c:	00a2      	lsls	r2, r4, #2
 8004a7e:	4614      	mov	r4, r2
 8004a80:	461d      	mov	r5, r3
 8004a82:	eb14 0800 	adds.w	r8, r4, r0
 8004a86:	eb45 0901 	adc.w	r9, r5, r1
 8004a8a:	f04f 0200 	mov.w	r2, #0
 8004a8e:	f04f 0300 	mov.w	r3, #0
 8004a92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a9e:	4690      	mov	r8, r2
 8004aa0:	4699      	mov	r9, r3
 8004aa2:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004aa6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004aaa:	4610      	mov	r0, r2
 8004aac:	4619      	mov	r1, r3
 8004aae:	3708      	adds	r7, #8
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004ab8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b086      	sub	sp, #24
 8004abc:	af02      	add	r7, sp, #8
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	607a      	str	r2, [r7, #4]
 8004ac4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004ac6:	2205      	movs	r2, #5
 8004ac8:	492b      	ldr	r1, [pc, #172]	; (8004b78 <SYSVIEW_AddTask+0xc0>)
 8004aca:	68b8      	ldr	r0, [r7, #8]
 8004acc:	f002 f830 	bl	8006b30 <memcmp>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d04b      	beq.n	8004b6e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004ad6:	4b29      	ldr	r3, [pc, #164]	; (8004b7c <SYSVIEW_AddTask+0xc4>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2b07      	cmp	r3, #7
 8004adc:	d903      	bls.n	8004ae6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004ade:	4828      	ldr	r0, [pc, #160]	; (8004b80 <SYSVIEW_AddTask+0xc8>)
 8004ae0:	f001 ff96 	bl	8006a10 <SEGGER_SYSVIEW_Warn>
    return;
 8004ae4:	e044      	b.n	8004b70 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004ae6:	4b25      	ldr	r3, [pc, #148]	; (8004b7c <SYSVIEW_AddTask+0xc4>)
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	4926      	ldr	r1, [pc, #152]	; (8004b84 <SYSVIEW_AddTask+0xcc>)
 8004aec:	4613      	mov	r3, r2
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	4413      	add	r3, r2
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	440b      	add	r3, r1
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004afa:	4b20      	ldr	r3, [pc, #128]	; (8004b7c <SYSVIEW_AddTask+0xc4>)
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	4921      	ldr	r1, [pc, #132]	; (8004b84 <SYSVIEW_AddTask+0xcc>)
 8004b00:	4613      	mov	r3, r2
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	4413      	add	r3, r2
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	440b      	add	r3, r1
 8004b0a:	3304      	adds	r3, #4
 8004b0c:	68ba      	ldr	r2, [r7, #8]
 8004b0e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004b10:	4b1a      	ldr	r3, [pc, #104]	; (8004b7c <SYSVIEW_AddTask+0xc4>)
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	491b      	ldr	r1, [pc, #108]	; (8004b84 <SYSVIEW_AddTask+0xcc>)
 8004b16:	4613      	mov	r3, r2
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	4413      	add	r3, r2
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	440b      	add	r3, r1
 8004b20:	3308      	adds	r3, #8
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004b26:	4b15      	ldr	r3, [pc, #84]	; (8004b7c <SYSVIEW_AddTask+0xc4>)
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	4916      	ldr	r1, [pc, #88]	; (8004b84 <SYSVIEW_AddTask+0xcc>)
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	4413      	add	r3, r2
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	440b      	add	r3, r1
 8004b36:	330c      	adds	r3, #12
 8004b38:	683a      	ldr	r2, [r7, #0]
 8004b3a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004b3c:	4b0f      	ldr	r3, [pc, #60]	; (8004b7c <SYSVIEW_AddTask+0xc4>)
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	4910      	ldr	r1, [pc, #64]	; (8004b84 <SYSVIEW_AddTask+0xcc>)
 8004b42:	4613      	mov	r3, r2
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	4413      	add	r3, r2
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	440b      	add	r3, r1
 8004b4c:	3310      	adds	r3, #16
 8004b4e:	69ba      	ldr	r2, [r7, #24]
 8004b50:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004b52:	4b0a      	ldr	r3, [pc, #40]	; (8004b7c <SYSVIEW_AddTask+0xc4>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	3301      	adds	r3, #1
 8004b58:	4a08      	ldr	r2, [pc, #32]	; (8004b7c <SYSVIEW_AddTask+0xc4>)
 8004b5a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004b5c:	69bb      	ldr	r3, [r7, #24]
 8004b5e:	9300      	str	r3, [sp, #0]
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	68b9      	ldr	r1, [r7, #8]
 8004b66:	68f8      	ldr	r0, [r7, #12]
 8004b68:	f000 f80e 	bl	8004b88 <SYSVIEW_SendTaskInfo>
 8004b6c:	e000      	b.n	8004b70 <SYSVIEW_AddTask+0xb8>
    return;
 8004b6e:	bf00      	nop

}
 8004b70:	3710      	adds	r7, #16
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	08007538 	.word	0x08007538
 8004b7c:	20012f18 	.word	0x20012f18
 8004b80:	08007540 	.word	0x08007540
 8004b84:	20012e78 	.word	0x20012e78

08004b88 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b08a      	sub	sp, #40	; 0x28
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	607a      	str	r2, [r7, #4]
 8004b94:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004b96:	f107 0314 	add.w	r3, r7, #20
 8004b9a:	2214      	movs	r2, #20
 8004b9c:	2100      	movs	r1, #0
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f001 ffd6 	bl	8006b50 <memset>
  TaskInfo.TaskID     = TaskID;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004bb8:	f107 0314 	add.w	r3, r7, #20
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f001 fb1d 	bl	80061fc <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004bc2:	bf00      	nop
 8004bc4:	3728      	adds	r7, #40	; 0x28
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
	...

08004bcc <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004bd2:	4b24      	ldr	r3, [pc, #144]	; (8004c64 <_DoInit+0x98>)
 8004bd4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2203      	movs	r2, #3
 8004bda:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2203      	movs	r2, #3
 8004be0:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a20      	ldr	r2, [pc, #128]	; (8004c68 <_DoInit+0x9c>)
 8004be6:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	4a20      	ldr	r2, [pc, #128]	; (8004c6c <_DoInit+0xa0>)
 8004bec:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004bf4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4a17      	ldr	r2, [pc, #92]	; (8004c68 <_DoInit+0x9c>)
 8004c0c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a17      	ldr	r2, [pc, #92]	; (8004c70 <_DoInit+0xa4>)
 8004c12:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2210      	movs	r2, #16
 8004c18:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	3307      	adds	r3, #7
 8004c30:	4a10      	ldr	r2, [pc, #64]	; (8004c74 <_DoInit+0xa8>)
 8004c32:	6810      	ldr	r0, [r2, #0]
 8004c34:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004c36:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a0e      	ldr	r2, [pc, #56]	; (8004c78 <_DoInit+0xac>)
 8004c3e:	6810      	ldr	r0, [r2, #0]
 8004c40:	6018      	str	r0, [r3, #0]
 8004c42:	8891      	ldrh	r1, [r2, #4]
 8004c44:	7992      	ldrb	r2, [r2, #6]
 8004c46:	8099      	strh	r1, [r3, #4]
 8004c48:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004c4a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2220      	movs	r2, #32
 8004c52:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004c54:	f3bf 8f5f 	dmb	sy
}
 8004c58:	bf00      	nop
 8004c5a:	370c      	adds	r7, #12
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr
 8004c64:	20012f1c 	.word	0x20012f1c
 8004c68:	08007590 	.word	0x08007590
 8004c6c:	20012fc4 	.word	0x20012fc4
 8004c70:	200133c4 	.word	0x200133c4
 8004c74:	0800759c 	.word	0x0800759c
 8004c78:	080075a0 	.word	0x080075a0

08004c7c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b08c      	sub	sp, #48	; 0x30
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004c88:	4b3e      	ldr	r3, [pc, #248]	; (8004d84 <SEGGER_RTT_ReadNoLock+0x108>)
 8004c8a:	623b      	str	r3, [r7, #32]
 8004c8c:	6a3b      	ldr	r3, [r7, #32]
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d101      	bne.n	8004c9a <SEGGER_RTT_ReadNoLock+0x1e>
 8004c96:	f7ff ff99 	bl	8004bcc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004c9a:	68fa      	ldr	r2, [r7, #12]
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	005b      	lsls	r3, r3, #1
 8004ca0:	4413      	add	r3, r2
 8004ca2:	00db      	lsls	r3, r3, #3
 8004ca4:	3360      	adds	r3, #96	; 0x60
 8004ca6:	4a37      	ldr	r2, [pc, #220]	; (8004d84 <SEGGER_RTT_ReadNoLock+0x108>)
 8004ca8:	4413      	add	r3, r2
 8004caa:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004cc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d92b      	bls.n	8004d20 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	689a      	ldr	r2, [r3, #8]
 8004ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004cd2:	697a      	ldr	r2, [r7, #20]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	bf28      	it	cs
 8004cda:	4613      	movcs	r3, r2
 8004cdc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	685a      	ldr	r2, [r3, #4]
 8004ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce4:	4413      	add	r3, r2
 8004ce6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004ce8:	697a      	ldr	r2, [r7, #20]
 8004cea:	6939      	ldr	r1, [r7, #16]
 8004cec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004cee:	f001 ff5d 	bl	8006bac <memcpy>
    NumBytesRead += NumBytesRem;
 8004cf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	4413      	add	r3, r2
 8004cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004cfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	4413      	add	r3, r2
 8004d00:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004d0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	4413      	add	r3, r2
 8004d10:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d101      	bne.n	8004d20 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004d20:	69ba      	ldr	r2, [r7, #24]
 8004d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004d28:	697a      	ldr	r2, [r7, #20]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	bf28      	it	cs
 8004d30:	4613      	movcs	r3, r2
 8004d32:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d019      	beq.n	8004d6e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	685a      	ldr	r2, [r3, #4]
 8004d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d40:	4413      	add	r3, r2
 8004d42:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004d44:	697a      	ldr	r2, [r7, #20]
 8004d46:	6939      	ldr	r1, [r7, #16]
 8004d48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d4a:	f001 ff2f 	bl	8006bac <memcpy>
    NumBytesRead += NumBytesRem;
 8004d4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	4413      	add	r3, r2
 8004d54:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004d56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004d66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8004d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d002      	beq.n	8004d7a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d78:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3730      	adds	r7, #48	; 0x30
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	20012f1c 	.word	0x20012f1c

08004d88 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b088      	sub	sp, #32
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	607a      	str	r2, [r7, #4]
 8004d94:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004d96:	4b3d      	ldr	r3, [pc, #244]	; (8004e8c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004d98:	61bb      	str	r3, [r7, #24]
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d101      	bne.n	8004da8 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004da4:	f7ff ff12 	bl	8004bcc <_DoInit>
  SEGGER_RTT_LOCK();
 8004da8:	f3ef 8311 	mrs	r3, BASEPRI
 8004dac:	f04f 0120 	mov.w	r1, #32
 8004db0:	f381 8811 	msr	BASEPRI, r1
 8004db4:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004db6:	4b35      	ldr	r3, [pc, #212]	; (8004e8c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004db8:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004dbe:	6939      	ldr	r1, [r7, #16]
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	1c5a      	adds	r2, r3, #1
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	005b      	lsls	r3, r3, #1
 8004dc8:	4413      	add	r3, r2
 8004dca:	00db      	lsls	r3, r3, #3
 8004dcc:	440b      	add	r3, r1
 8004dce:	3304      	adds	r3, #4
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d008      	beq.n	8004de8 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	3301      	adds	r3, #1
 8004dda:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	69fa      	ldr	r2, [r7, #28]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	dbeb      	blt.n	8004dbe <SEGGER_RTT_AllocUpBuffer+0x36>
 8004de6:	e000      	b.n	8004dea <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004de8:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	69fa      	ldr	r2, [r7, #28]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	da3f      	bge.n	8004e74 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004df4:	6939      	ldr	r1, [r7, #16]
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	1c5a      	adds	r2, r3, #1
 8004dfa:	4613      	mov	r3, r2
 8004dfc:	005b      	lsls	r3, r3, #1
 8004dfe:	4413      	add	r3, r2
 8004e00:	00db      	lsls	r3, r3, #3
 8004e02:	440b      	add	r3, r1
 8004e04:	68fa      	ldr	r2, [r7, #12]
 8004e06:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004e08:	6939      	ldr	r1, [r7, #16]
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	1c5a      	adds	r2, r3, #1
 8004e0e:	4613      	mov	r3, r2
 8004e10:	005b      	lsls	r3, r3, #1
 8004e12:	4413      	add	r3, r2
 8004e14:	00db      	lsls	r3, r3, #3
 8004e16:	440b      	add	r3, r1
 8004e18:	3304      	adds	r3, #4
 8004e1a:	68ba      	ldr	r2, [r7, #8]
 8004e1c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004e1e:	6939      	ldr	r1, [r7, #16]
 8004e20:	69fa      	ldr	r2, [r7, #28]
 8004e22:	4613      	mov	r3, r2
 8004e24:	005b      	lsls	r3, r3, #1
 8004e26:	4413      	add	r3, r2
 8004e28:	00db      	lsls	r3, r3, #3
 8004e2a:	440b      	add	r3, r1
 8004e2c:	3320      	adds	r3, #32
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8004e32:	6939      	ldr	r1, [r7, #16]
 8004e34:	69fa      	ldr	r2, [r7, #28]
 8004e36:	4613      	mov	r3, r2
 8004e38:	005b      	lsls	r3, r3, #1
 8004e3a:	4413      	add	r3, r2
 8004e3c:	00db      	lsls	r3, r3, #3
 8004e3e:	440b      	add	r3, r1
 8004e40:	3328      	adds	r3, #40	; 0x28
 8004e42:	2200      	movs	r2, #0
 8004e44:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004e46:	6939      	ldr	r1, [r7, #16]
 8004e48:	69fa      	ldr	r2, [r7, #28]
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	005b      	lsls	r3, r3, #1
 8004e4e:	4413      	add	r3, r2
 8004e50:	00db      	lsls	r3, r3, #3
 8004e52:	440b      	add	r3, r1
 8004e54:	3324      	adds	r3, #36	; 0x24
 8004e56:	2200      	movs	r2, #0
 8004e58:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004e5a:	6939      	ldr	r1, [r7, #16]
 8004e5c:	69fa      	ldr	r2, [r7, #28]
 8004e5e:	4613      	mov	r3, r2
 8004e60:	005b      	lsls	r3, r3, #1
 8004e62:	4413      	add	r3, r2
 8004e64:	00db      	lsls	r3, r3, #3
 8004e66:	440b      	add	r3, r1
 8004e68:	332c      	adds	r3, #44	; 0x2c
 8004e6a:	683a      	ldr	r2, [r7, #0]
 8004e6c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004e6e:	f3bf 8f5f 	dmb	sy
 8004e72:	e002      	b.n	8004e7a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004e74:	f04f 33ff 	mov.w	r3, #4294967295
 8004e78:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004e80:	69fb      	ldr	r3, [r7, #28]
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3720      	adds	r7, #32
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	20012f1c 	.word	0x20012f1c

08004e90 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b088      	sub	sp, #32
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	607a      	str	r2, [r7, #4]
 8004e9c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004e9e:	4b33      	ldr	r3, [pc, #204]	; (8004f6c <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8004ea0:	61bb      	str	r3, [r7, #24]
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d101      	bne.n	8004eb0 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004eac:	f7ff fe8e 	bl	8004bcc <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004eb0:	4b2e      	ldr	r3, [pc, #184]	; (8004f6c <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8004eb2:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	695b      	ldr	r3, [r3, #20]
 8004eb8:	461a      	mov	r2, r3
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d24d      	bcs.n	8004f5c <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8004ec0:	f3ef 8311 	mrs	r3, BASEPRI
 8004ec4:	f04f 0120 	mov.w	r1, #32
 8004ec8:	f381 8811 	msr	BASEPRI, r1
 8004ecc:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d031      	beq.n	8004f38 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8004ed4:	6979      	ldr	r1, [r7, #20]
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	4613      	mov	r3, r2
 8004eda:	005b      	lsls	r3, r3, #1
 8004edc:	4413      	add	r3, r2
 8004ede:	00db      	lsls	r3, r3, #3
 8004ee0:	440b      	add	r3, r1
 8004ee2:	3360      	adds	r3, #96	; 0x60
 8004ee4:	68ba      	ldr	r2, [r7, #8]
 8004ee6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8004ee8:	6979      	ldr	r1, [r7, #20]
 8004eea:	68fa      	ldr	r2, [r7, #12]
 8004eec:	4613      	mov	r3, r2
 8004eee:	005b      	lsls	r3, r3, #1
 8004ef0:	4413      	add	r3, r2
 8004ef2:	00db      	lsls	r3, r3, #3
 8004ef4:	440b      	add	r3, r1
 8004ef6:	3364      	adds	r3, #100	; 0x64
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8004efc:	6979      	ldr	r1, [r7, #20]
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	4613      	mov	r3, r2
 8004f02:	005b      	lsls	r3, r3, #1
 8004f04:	4413      	add	r3, r2
 8004f06:	00db      	lsls	r3, r3, #3
 8004f08:	440b      	add	r3, r1
 8004f0a:	3368      	adds	r3, #104	; 0x68
 8004f0c:	683a      	ldr	r2, [r7, #0]
 8004f0e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8004f10:	6979      	ldr	r1, [r7, #20]
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	4613      	mov	r3, r2
 8004f16:	005b      	lsls	r3, r3, #1
 8004f18:	4413      	add	r3, r2
 8004f1a:	00db      	lsls	r3, r3, #3
 8004f1c:	440b      	add	r3, r1
 8004f1e:	3370      	adds	r3, #112	; 0x70
 8004f20:	2200      	movs	r2, #0
 8004f22:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8004f24:	6979      	ldr	r1, [r7, #20]
 8004f26:	68fa      	ldr	r2, [r7, #12]
 8004f28:	4613      	mov	r3, r2
 8004f2a:	005b      	lsls	r3, r3, #1
 8004f2c:	4413      	add	r3, r2
 8004f2e:	00db      	lsls	r3, r3, #3
 8004f30:	440b      	add	r3, r1
 8004f32:	336c      	adds	r3, #108	; 0x6c
 8004f34:	2200      	movs	r2, #0
 8004f36:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8004f38:	6979      	ldr	r1, [r7, #20]
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	005b      	lsls	r3, r3, #1
 8004f40:	4413      	add	r3, r2
 8004f42:	00db      	lsls	r3, r3, #3
 8004f44:	440b      	add	r3, r1
 8004f46:	3374      	adds	r3, #116	; 0x74
 8004f48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f4a:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004f4c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004f56:	2300      	movs	r3, #0
 8004f58:	61fb      	str	r3, [r7, #28]
 8004f5a:	e002      	b.n	8004f62 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8004f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8004f60:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8004f62:	69fb      	ldr	r3, [r7, #28]
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3720      	adds	r7, #32
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	20012f1c 	.word	0x20012f1c

08004f70 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004f70:	b480      	push	{r7}
 8004f72:	b087      	sub	sp, #28
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004f80:	e002      	b.n	8004f88 <_EncodeStr+0x18>
    Len++;
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	3301      	adds	r3, #1
 8004f86:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004f88:	68ba      	ldr	r2, [r7, #8]
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d1f6      	bne.n	8004f82 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8004f94:	693a      	ldr	r2, [r7, #16]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d901      	bls.n	8004fa0 <_EncodeStr+0x30>
    Len = Limit;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	2bfe      	cmp	r3, #254	; 0xfe
 8004fa4:	d806      	bhi.n	8004fb4 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	1c5a      	adds	r2, r3, #1
 8004faa:	60fa      	str	r2, [r7, #12]
 8004fac:	693a      	ldr	r2, [r7, #16]
 8004fae:	b2d2      	uxtb	r2, r2
 8004fb0:	701a      	strb	r2, [r3, #0]
 8004fb2:	e011      	b.n	8004fd8 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	1c5a      	adds	r2, r3, #1
 8004fb8:	60fa      	str	r2, [r7, #12]
 8004fba:	22ff      	movs	r2, #255	; 0xff
 8004fbc:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	1c5a      	adds	r2, r3, #1
 8004fc2:	60fa      	str	r2, [r7, #12]
 8004fc4:	693a      	ldr	r2, [r7, #16]
 8004fc6:	b2d2      	uxtb	r2, r2
 8004fc8:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	0a19      	lsrs	r1, r3, #8
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	1c5a      	adds	r2, r3, #1
 8004fd2:	60fa      	str	r2, [r7, #12]
 8004fd4:	b2ca      	uxtb	r2, r1
 8004fd6:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004fdc:	e00a      	b.n	8004ff4 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8004fde:	68ba      	ldr	r2, [r7, #8]
 8004fe0:	1c53      	adds	r3, r2, #1
 8004fe2:	60bb      	str	r3, [r7, #8]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	1c59      	adds	r1, r3, #1
 8004fe8:	60f9      	str	r1, [r7, #12]
 8004fea:	7812      	ldrb	r2, [r2, #0]
 8004fec:	701a      	strb	r2, [r3, #0]
    n++;
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004ff4:	697a      	ldr	r2, [r7, #20]
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d3f0      	bcc.n	8004fde <_EncodeStr+0x6e>
  }
  return pPayload;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	371c      	adds	r7, #28
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr

0800500a <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800500a:	b480      	push	{r7}
 800500c:	b083      	sub	sp, #12
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	3304      	adds	r3, #4
}
 8005016:	4618      	mov	r0, r3
 8005018:	370c      	adds	r7, #12
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
	...

08005024 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005024:	b580      	push	{r7, lr}
 8005026:	b082      	sub	sp, #8
 8005028:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800502a:	4b35      	ldr	r3, [pc, #212]	; (8005100 <_HandleIncomingPacket+0xdc>)
 800502c:	7e1b      	ldrb	r3, [r3, #24]
 800502e:	4618      	mov	r0, r3
 8005030:	1cfb      	adds	r3, r7, #3
 8005032:	2201      	movs	r2, #1
 8005034:	4619      	mov	r1, r3
 8005036:	f7ff fe21 	bl	8004c7c <SEGGER_RTT_ReadNoLock>
 800503a:	4603      	mov	r3, r0
 800503c:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2b00      	cmp	r3, #0
 8005042:	dd59      	ble.n	80050f8 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8005044:	78fb      	ldrb	r3, [r7, #3]
 8005046:	2b80      	cmp	r3, #128	; 0x80
 8005048:	d032      	beq.n	80050b0 <_HandleIncomingPacket+0x8c>
 800504a:	2b80      	cmp	r3, #128	; 0x80
 800504c:	dc42      	bgt.n	80050d4 <_HandleIncomingPacket+0xb0>
 800504e:	2b07      	cmp	r3, #7
 8005050:	dc16      	bgt.n	8005080 <_HandleIncomingPacket+0x5c>
 8005052:	2b00      	cmp	r3, #0
 8005054:	dd3e      	ble.n	80050d4 <_HandleIncomingPacket+0xb0>
 8005056:	3b01      	subs	r3, #1
 8005058:	2b06      	cmp	r3, #6
 800505a:	d83b      	bhi.n	80050d4 <_HandleIncomingPacket+0xb0>
 800505c:	a201      	add	r2, pc, #4	; (adr r2, 8005064 <_HandleIncomingPacket+0x40>)
 800505e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005062:	bf00      	nop
 8005064:	08005087 	.word	0x08005087
 8005068:	0800508d 	.word	0x0800508d
 800506c:	08005093 	.word	0x08005093
 8005070:	08005099 	.word	0x08005099
 8005074:	0800509f 	.word	0x0800509f
 8005078:	080050a5 	.word	0x080050a5
 800507c:	080050ab 	.word	0x080050ab
 8005080:	2b7f      	cmp	r3, #127	; 0x7f
 8005082:	d034      	beq.n	80050ee <_HandleIncomingPacket+0xca>
 8005084:	e026      	b.n	80050d4 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005086:	f000 ff3f 	bl	8005f08 <SEGGER_SYSVIEW_Start>
      break;
 800508a:	e035      	b.n	80050f8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800508c:	f000 fff6 	bl	800607c <SEGGER_SYSVIEW_Stop>
      break;
 8005090:	e032      	b.n	80050f8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005092:	f001 f9cf 	bl	8006434 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005096:	e02f      	b.n	80050f8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005098:	f001 f994 	bl	80063c4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800509c:	e02c      	b.n	80050f8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800509e:	f001 f813 	bl	80060c8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80050a2:	e029      	b.n	80050f8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80050a4:	f001 fc62 	bl	800696c <SEGGER_SYSVIEW_SendNumModules>
      break;
 80050a8:	e026      	b.n	80050f8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80050aa:	f001 fc41 	bl	8006930 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80050ae:	e023      	b.n	80050f8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80050b0:	4b13      	ldr	r3, [pc, #76]	; (8005100 <_HandleIncomingPacket+0xdc>)
 80050b2:	7e1b      	ldrb	r3, [r3, #24]
 80050b4:	4618      	mov	r0, r3
 80050b6:	1cfb      	adds	r3, r7, #3
 80050b8:	2201      	movs	r2, #1
 80050ba:	4619      	mov	r1, r3
 80050bc:	f7ff fdde 	bl	8004c7c <SEGGER_RTT_ReadNoLock>
 80050c0:	4603      	mov	r3, r0
 80050c2:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	dd13      	ble.n	80050f2 <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80050ca:	78fb      	ldrb	r3, [r7, #3]
 80050cc:	4618      	mov	r0, r3
 80050ce:	f001 fbaf 	bl	8006830 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80050d2:	e00e      	b.n	80050f2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80050d4:	78fb      	ldrb	r3, [r7, #3]
 80050d6:	b25b      	sxtb	r3, r3
 80050d8:	2b00      	cmp	r3, #0
 80050da:	da0c      	bge.n	80050f6 <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80050dc:	4b08      	ldr	r3, [pc, #32]	; (8005100 <_HandleIncomingPacket+0xdc>)
 80050de:	7e1b      	ldrb	r3, [r3, #24]
 80050e0:	4618      	mov	r0, r3
 80050e2:	1cfb      	adds	r3, r7, #3
 80050e4:	2201      	movs	r2, #1
 80050e6:	4619      	mov	r1, r3
 80050e8:	f7ff fdc8 	bl	8004c7c <SEGGER_RTT_ReadNoLock>
      }
      break;
 80050ec:	e003      	b.n	80050f6 <_HandleIncomingPacket+0xd2>
      break;
 80050ee:	bf00      	nop
 80050f0:	e002      	b.n	80050f8 <_HandleIncomingPacket+0xd4>
      break;
 80050f2:	bf00      	nop
 80050f4:	e000      	b.n	80050f8 <_HandleIncomingPacket+0xd4>
      break;
 80050f6:	bf00      	nop
    }
  }
}
 80050f8:	bf00      	nop
 80050fa:	3708      	adds	r7, #8
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	200143dc 	.word	0x200143dc

08005104 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005104:	b580      	push	{r7, lr}
 8005106:	b08c      	sub	sp, #48	; 0x30
 8005108:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800510a:	2301      	movs	r3, #1
 800510c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800510e:	1d3b      	adds	r3, r7, #4
 8005110:	3301      	adds	r3, #1
 8005112:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005118:	4b31      	ldr	r3, [pc, #196]	; (80051e0 <_TrySendOverflowPacket+0xdc>)
 800511a:	695b      	ldr	r3, [r3, #20]
 800511c:	62bb      	str	r3, [r7, #40]	; 0x28
 800511e:	e00b      	b.n	8005138 <_TrySendOverflowPacket+0x34>
 8005120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005122:	b2da      	uxtb	r2, r3
 8005124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005126:	1c59      	adds	r1, r3, #1
 8005128:	62f9      	str	r1, [r7, #44]	; 0x2c
 800512a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800512e:	b2d2      	uxtb	r2, r2
 8005130:	701a      	strb	r2, [r3, #0]
 8005132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005134:	09db      	lsrs	r3, r3, #7
 8005136:	62bb      	str	r3, [r7, #40]	; 0x28
 8005138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800513a:	2b7f      	cmp	r3, #127	; 0x7f
 800513c:	d8f0      	bhi.n	8005120 <_TrySendOverflowPacket+0x1c>
 800513e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005140:	1c5a      	adds	r2, r3, #1
 8005142:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005144:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005146:	b2d2      	uxtb	r2, r2
 8005148:	701a      	strb	r2, [r3, #0]
 800514a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800514c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800514e:	4b25      	ldr	r3, [pc, #148]	; (80051e4 <_TrySendOverflowPacket+0xe0>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005154:	4b22      	ldr	r3, [pc, #136]	; (80051e0 <_TrySendOverflowPacket+0xdc>)
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	69ba      	ldr	r2, [r7, #24]
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	627b      	str	r3, [r7, #36]	; 0x24
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	623b      	str	r3, [r7, #32]
 8005166:	e00b      	b.n	8005180 <_TrySendOverflowPacket+0x7c>
 8005168:	6a3b      	ldr	r3, [r7, #32]
 800516a:	b2da      	uxtb	r2, r3
 800516c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516e:	1c59      	adds	r1, r3, #1
 8005170:	6279      	str	r1, [r7, #36]	; 0x24
 8005172:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005176:	b2d2      	uxtb	r2, r2
 8005178:	701a      	strb	r2, [r3, #0]
 800517a:	6a3b      	ldr	r3, [r7, #32]
 800517c:	09db      	lsrs	r3, r3, #7
 800517e:	623b      	str	r3, [r7, #32]
 8005180:	6a3b      	ldr	r3, [r7, #32]
 8005182:	2b7f      	cmp	r3, #127	; 0x7f
 8005184:	d8f0      	bhi.n	8005168 <_TrySendOverflowPacket+0x64>
 8005186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005188:	1c5a      	adds	r2, r3, #1
 800518a:	627a      	str	r2, [r7, #36]	; 0x24
 800518c:	6a3a      	ldr	r2, [r7, #32]
 800518e:	b2d2      	uxtb	r2, r2
 8005190:	701a      	strb	r2, [r3, #0]
 8005192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005194:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8005196:	4b12      	ldr	r3, [pc, #72]	; (80051e0 <_TrySendOverflowPacket+0xdc>)
 8005198:	785b      	ldrb	r3, [r3, #1]
 800519a:	4618      	mov	r0, r3
 800519c:	1d3b      	adds	r3, r7, #4
 800519e:	69fa      	ldr	r2, [r7, #28]
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	461a      	mov	r2, r3
 80051a4:	1d3b      	adds	r3, r7, #4
 80051a6:	4619      	mov	r1, r3
 80051a8:	f7fb f83a 	bl	8000220 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80051ac:	4603      	mov	r3, r0
 80051ae:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d009      	beq.n	80051ca <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80051b6:	4a0a      	ldr	r2, [pc, #40]	; (80051e0 <_TrySendOverflowPacket+0xdc>)
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80051bc:	4b08      	ldr	r3, [pc, #32]	; (80051e0 <_TrySendOverflowPacket+0xdc>)
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	3b01      	subs	r3, #1
 80051c2:	b2da      	uxtb	r2, r3
 80051c4:	4b06      	ldr	r3, [pc, #24]	; (80051e0 <_TrySendOverflowPacket+0xdc>)
 80051c6:	701a      	strb	r2, [r3, #0]
 80051c8:	e004      	b.n	80051d4 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80051ca:	4b05      	ldr	r3, [pc, #20]	; (80051e0 <_TrySendOverflowPacket+0xdc>)
 80051cc:	695b      	ldr	r3, [r3, #20]
 80051ce:	3301      	adds	r3, #1
 80051d0:	4a03      	ldr	r2, [pc, #12]	; (80051e0 <_TrySendOverflowPacket+0xdc>)
 80051d2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80051d4:	693b      	ldr	r3, [r7, #16]
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3730      	adds	r7, #48	; 0x30
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	200143dc 	.word	0x200143dc
 80051e4:	e0001004 	.word	0xe0001004

080051e8 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b08a      	sub	sp, #40	; 0x28
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80051f4:	4b6c      	ldr	r3, [pc, #432]	; (80053a8 <_SendPacket+0x1c0>)
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d010      	beq.n	800521e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80051fc:	4b6a      	ldr	r3, [pc, #424]	; (80053a8 <_SendPacket+0x1c0>)
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	2b00      	cmp	r3, #0
 8005202:	f000 80a3 	beq.w	800534c <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005206:	4b68      	ldr	r3, [pc, #416]	; (80053a8 <_SendPacket+0x1c0>)
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	2b02      	cmp	r3, #2
 800520c:	d109      	bne.n	8005222 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800520e:	f7ff ff79 	bl	8005104 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005212:	4b65      	ldr	r3, [pc, #404]	; (80053a8 <_SendPacket+0x1c0>)
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	2b01      	cmp	r3, #1
 8005218:	f040 809a 	bne.w	8005350 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 800521c:	e001      	b.n	8005222 <_SendPacket+0x3a>
    goto Send;
 800521e:	bf00      	nop
 8005220:	e000      	b.n	8005224 <_SendPacket+0x3c>
Send:
 8005222:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2b1f      	cmp	r3, #31
 8005228:	d809      	bhi.n	800523e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800522a:	4b5f      	ldr	r3, [pc, #380]	; (80053a8 <_SendPacket+0x1c0>)
 800522c:	69da      	ldr	r2, [r3, #28]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	fa22 f303 	lsr.w	r3, r2, r3
 8005234:	f003 0301 	and.w	r3, r3, #1
 8005238:	2b00      	cmp	r3, #0
 800523a:	f040 808b 	bne.w	8005354 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2b17      	cmp	r3, #23
 8005242:	d807      	bhi.n	8005254 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	3b01      	subs	r3, #1
 8005248:	60fb      	str	r3, [r7, #12]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	b2da      	uxtb	r2, r3
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	701a      	strb	r2, [r3, #0]
 8005252:	e03d      	b.n	80052d0 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005254:	68ba      	ldr	r2, [r7, #8]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	2b7f      	cmp	r3, #127	; 0x7f
 8005260:	d912      	bls.n	8005288 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	09da      	lsrs	r2, r3, #7
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	3b01      	subs	r3, #1
 800526a:	60fb      	str	r3, [r7, #12]
 800526c:	b2d2      	uxtb	r2, r2
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	b2db      	uxtb	r3, r3
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	3a01      	subs	r2, #1
 800527a:	60fa      	str	r2, [r7, #12]
 800527c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005280:	b2da      	uxtb	r2, r3
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	701a      	strb	r2, [r3, #0]
 8005286:	e006      	b.n	8005296 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	3b01      	subs	r3, #1
 800528c:	60fb      	str	r3, [r7, #12]
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	b2da      	uxtb	r2, r3
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2b7f      	cmp	r3, #127	; 0x7f
 800529a:	d912      	bls.n	80052c2 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	09da      	lsrs	r2, r3, #7
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	3b01      	subs	r3, #1
 80052a4:	60fb      	str	r3, [r7, #12]
 80052a6:	b2d2      	uxtb	r2, r2
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	68fa      	ldr	r2, [r7, #12]
 80052b2:	3a01      	subs	r2, #1
 80052b4:	60fa      	str	r2, [r7, #12]
 80052b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80052ba:	b2da      	uxtb	r2, r3
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	701a      	strb	r2, [r3, #0]
 80052c0:	e006      	b.n	80052d0 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	3b01      	subs	r3, #1
 80052c6:	60fb      	str	r3, [r7, #12]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	b2da      	uxtb	r2, r3
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80052d0:	4b36      	ldr	r3, [pc, #216]	; (80053ac <_SendPacket+0x1c4>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80052d6:	4b34      	ldr	r3, [pc, #208]	; (80053a8 <_SendPacket+0x1c0>)
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	69ba      	ldr	r2, [r7, #24]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	627b      	str	r3, [r7, #36]	; 0x24
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	623b      	str	r3, [r7, #32]
 80052e8:	e00b      	b.n	8005302 <_SendPacket+0x11a>
 80052ea:	6a3b      	ldr	r3, [r7, #32]
 80052ec:	b2da      	uxtb	r2, r3
 80052ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f0:	1c59      	adds	r1, r3, #1
 80052f2:	6279      	str	r1, [r7, #36]	; 0x24
 80052f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052f8:	b2d2      	uxtb	r2, r2
 80052fa:	701a      	strb	r2, [r3, #0]
 80052fc:	6a3b      	ldr	r3, [r7, #32]
 80052fe:	09db      	lsrs	r3, r3, #7
 8005300:	623b      	str	r3, [r7, #32]
 8005302:	6a3b      	ldr	r3, [r7, #32]
 8005304:	2b7f      	cmp	r3, #127	; 0x7f
 8005306:	d8f0      	bhi.n	80052ea <_SendPacket+0x102>
 8005308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530a:	1c5a      	adds	r2, r3, #1
 800530c:	627a      	str	r2, [r7, #36]	; 0x24
 800530e:	6a3a      	ldr	r2, [r7, #32]
 8005310:	b2d2      	uxtb	r2, r2
 8005312:	701a      	strb	r2, [r3, #0]
 8005314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005316:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005318:	4b23      	ldr	r3, [pc, #140]	; (80053a8 <_SendPacket+0x1c0>)
 800531a:	785b      	ldrb	r3, [r3, #1]
 800531c:	4618      	mov	r0, r3
 800531e:	68ba      	ldr	r2, [r7, #8]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	1ad3      	subs	r3, r2, r3
 8005324:	461a      	mov	r2, r3
 8005326:	68f9      	ldr	r1, [r7, #12]
 8005328:	f7fa ff7a 	bl	8000220 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800532c:	4603      	mov	r3, r0
 800532e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d003      	beq.n	800533e <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005336:	4a1c      	ldr	r2, [pc, #112]	; (80053a8 <_SendPacket+0x1c0>)
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	60d3      	str	r3, [r2, #12]
 800533c:	e00b      	b.n	8005356 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800533e:	4b1a      	ldr	r3, [pc, #104]	; (80053a8 <_SendPacket+0x1c0>)
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	3301      	adds	r3, #1
 8005344:	b2da      	uxtb	r2, r3
 8005346:	4b18      	ldr	r3, [pc, #96]	; (80053a8 <_SendPacket+0x1c0>)
 8005348:	701a      	strb	r2, [r3, #0]
 800534a:	e004      	b.n	8005356 <_SendPacket+0x16e>
    goto SendDone;
 800534c:	bf00      	nop
 800534e:	e002      	b.n	8005356 <_SendPacket+0x16e>
      goto SendDone;
 8005350:	bf00      	nop
 8005352:	e000      	b.n	8005356 <_SendPacket+0x16e>
      goto SendDone;
 8005354:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005356:	4b14      	ldr	r3, [pc, #80]	; (80053a8 <_SendPacket+0x1c0>)
 8005358:	7e1b      	ldrb	r3, [r3, #24]
 800535a:	4619      	mov	r1, r3
 800535c:	4a14      	ldr	r2, [pc, #80]	; (80053b0 <_SendPacket+0x1c8>)
 800535e:	460b      	mov	r3, r1
 8005360:	005b      	lsls	r3, r3, #1
 8005362:	440b      	add	r3, r1
 8005364:	00db      	lsls	r3, r3, #3
 8005366:	4413      	add	r3, r2
 8005368:	336c      	adds	r3, #108	; 0x6c
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	4b0e      	ldr	r3, [pc, #56]	; (80053a8 <_SendPacket+0x1c0>)
 800536e:	7e1b      	ldrb	r3, [r3, #24]
 8005370:	4618      	mov	r0, r3
 8005372:	490f      	ldr	r1, [pc, #60]	; (80053b0 <_SendPacket+0x1c8>)
 8005374:	4603      	mov	r3, r0
 8005376:	005b      	lsls	r3, r3, #1
 8005378:	4403      	add	r3, r0
 800537a:	00db      	lsls	r3, r3, #3
 800537c:	440b      	add	r3, r1
 800537e:	3370      	adds	r3, #112	; 0x70
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	429a      	cmp	r2, r3
 8005384:	d00b      	beq.n	800539e <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005386:	4b08      	ldr	r3, [pc, #32]	; (80053a8 <_SendPacket+0x1c0>)
 8005388:	789b      	ldrb	r3, [r3, #2]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d107      	bne.n	800539e <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800538e:	4b06      	ldr	r3, [pc, #24]	; (80053a8 <_SendPacket+0x1c0>)
 8005390:	2201      	movs	r2, #1
 8005392:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005394:	f7ff fe46 	bl	8005024 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005398:	4b03      	ldr	r3, [pc, #12]	; (80053a8 <_SendPacket+0x1c0>)
 800539a:	2200      	movs	r2, #0
 800539c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800539e:	bf00      	nop
 80053a0:	3728      	adds	r7, #40	; 0x28
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	200143dc 	.word	0x200143dc
 80053ac:	e0001004 	.word	0xe0001004
 80053b0:	20012f1c 	.word	0x20012f1c

080053b4 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b08a      	sub	sp, #40	; 0x28
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	460b      	mov	r3, r1
 80053be:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	3301      	adds	r3, #1
 80053ca:	2b80      	cmp	r3, #128	; 0x80
 80053cc:	d80a      	bhi.n	80053e4 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	1c59      	adds	r1, r3, #1
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	6051      	str	r1, [r2, #4]
 80053d8:	78fa      	ldrb	r2, [r7, #3]
 80053da:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	1c5a      	adds	r2, r3, #1
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	2b80      	cmp	r3, #128	; 0x80
 80053ea:	d15a      	bne.n	80054a2 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	691a      	ldr	r2, [r3, #16]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	b2d2      	uxtb	r2, r2
 80053f6:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	627b      	str	r3, [r7, #36]	; 0x24
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	623b      	str	r3, [r7, #32]
 800540c:	e00b      	b.n	8005426 <_StoreChar+0x72>
 800540e:	6a3b      	ldr	r3, [r7, #32]
 8005410:	b2da      	uxtb	r2, r3
 8005412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005414:	1c59      	adds	r1, r3, #1
 8005416:	6279      	str	r1, [r7, #36]	; 0x24
 8005418:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800541c:	b2d2      	uxtb	r2, r2
 800541e:	701a      	strb	r2, [r3, #0]
 8005420:	6a3b      	ldr	r3, [r7, #32]
 8005422:	09db      	lsrs	r3, r3, #7
 8005424:	623b      	str	r3, [r7, #32]
 8005426:	6a3b      	ldr	r3, [r7, #32]
 8005428:	2b7f      	cmp	r3, #127	; 0x7f
 800542a:	d8f0      	bhi.n	800540e <_StoreChar+0x5a>
 800542c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542e:	1c5a      	adds	r2, r3, #1
 8005430:	627a      	str	r2, [r7, #36]	; 0x24
 8005432:	6a3a      	ldr	r2, [r7, #32]
 8005434:	b2d2      	uxtb	r2, r2
 8005436:	701a      	strb	r2, [r3, #0]
 8005438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543a:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	61fb      	str	r3, [r7, #28]
 8005440:	2300      	movs	r3, #0
 8005442:	61bb      	str	r3, [r7, #24]
 8005444:	e00b      	b.n	800545e <_StoreChar+0xaa>
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	b2da      	uxtb	r2, r3
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	1c59      	adds	r1, r3, #1
 800544e:	61f9      	str	r1, [r7, #28]
 8005450:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005454:	b2d2      	uxtb	r2, r2
 8005456:	701a      	strb	r2, [r3, #0]
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	09db      	lsrs	r3, r3, #7
 800545c:	61bb      	str	r3, [r7, #24]
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	2b7f      	cmp	r3, #127	; 0x7f
 8005462:	d8f0      	bhi.n	8005446 <_StoreChar+0x92>
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	1c5a      	adds	r2, r3, #1
 8005468:	61fa      	str	r2, [r7, #28]
 800546a:	69ba      	ldr	r2, [r7, #24]
 800546c:	b2d2      	uxtb	r2, r2
 800546e:	701a      	strb	r2, [r3, #0]
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	221a      	movs	r2, #26
 800547a:	6939      	ldr	r1, [r7, #16]
 800547c:	4618      	mov	r0, r3
 800547e:	f7ff feb3 	bl	80051e8 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4618      	mov	r0, r3
 8005488:	f7ff fdbf 	bl	800500a <_PreparePacket>
 800548c:	4602      	mov	r2, r0
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	1c5a      	adds	r2, r3, #1
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	611a      	str	r2, [r3, #16]
  }
}
 80054a2:	bf00      	nop
 80054a4:	3728      	adds	r7, #40	; 0x28
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
	...

080054ac <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b08a      	sub	sp, #40	; 0x28
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	60b9      	str	r1, [r7, #8]
 80054b6:	607a      	str	r2, [r7, #4]
 80054b8:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80054be:	2301      	movs	r3, #1
 80054c0:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80054c2:	2301      	movs	r3, #1
 80054c4:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80054c6:	e007      	b.n	80054d8 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80054c8:	6a3a      	ldr	r2, [r7, #32]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80054d0:	623b      	str	r3, [r7, #32]
    Width++;
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	3301      	adds	r3, #1
 80054d6:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80054d8:	6a3a      	ldr	r2, [r7, #32]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	429a      	cmp	r2, r3
 80054de:	d2f3      	bcs.n	80054c8 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80054e0:	683a      	ldr	r2, [r7, #0]
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d901      	bls.n	80054ec <_PrintUnsigned+0x40>
    Width = NumDigits;
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80054ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ee:	f003 0301 	and.w	r3, r3, #1
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d11f      	bne.n	8005536 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 80054f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d01c      	beq.n	8005536 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80054fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054fe:	f003 0302 	and.w	r3, r3, #2
 8005502:	2b00      	cmp	r3, #0
 8005504:	d005      	beq.n	8005512 <_PrintUnsigned+0x66>
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d102      	bne.n	8005512 <_PrintUnsigned+0x66>
        c = '0';
 800550c:	2330      	movs	r3, #48	; 0x30
 800550e:	76fb      	strb	r3, [r7, #27]
 8005510:	e001      	b.n	8005516 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8005512:	2320      	movs	r3, #32
 8005514:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005516:	e007      	b.n	8005528 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8005518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800551a:	3b01      	subs	r3, #1
 800551c:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 800551e:	7efb      	ldrb	r3, [r7, #27]
 8005520:	4619      	mov	r1, r3
 8005522:	68f8      	ldr	r0, [r7, #12]
 8005524:	f7ff ff46 	bl	80053b4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800552a:	2b00      	cmp	r3, #0
 800552c:	d003      	beq.n	8005536 <_PrintUnsigned+0x8a>
 800552e:	69fa      	ldr	r2, [r7, #28]
 8005530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005532:	429a      	cmp	r2, r3
 8005534:	d3f0      	bcc.n	8005518 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	2b01      	cmp	r3, #1
 800553a:	d903      	bls.n	8005544 <_PrintUnsigned+0x98>
      NumDigits--;
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	3b01      	subs	r3, #1
 8005540:	603b      	str	r3, [r7, #0]
 8005542:	e009      	b.n	8005558 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8005544:	68ba      	ldr	r2, [r7, #8]
 8005546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005548:	fbb2 f3f3 	udiv	r3, r2, r3
 800554c:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 800554e:	697a      	ldr	r2, [r7, #20]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	429a      	cmp	r2, r3
 8005554:	d200      	bcs.n	8005558 <_PrintUnsigned+0xac>
        break;
 8005556:	e005      	b.n	8005564 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8005558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	fb02 f303 	mul.w	r3, r2, r3
 8005560:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005562:	e7e8      	b.n	8005536 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005564:	68ba      	ldr	r2, [r7, #8]
 8005566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005568:	fbb2 f3f3 	udiv	r3, r2, r3
 800556c:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005572:	fb02 f303 	mul.w	r3, r2, r3
 8005576:	68ba      	ldr	r2, [r7, #8]
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 800557c:	4a15      	ldr	r2, [pc, #84]	; (80055d4 <_PrintUnsigned+0x128>)
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	4413      	add	r3, r2
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	4619      	mov	r1, r3
 8005586:	68f8      	ldr	r0, [r7, #12]
 8005588:	f7ff ff14 	bl	80053b4 <_StoreChar>
    Digit /= Base;
 800558c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	fbb2 f3f3 	udiv	r3, r2, r3
 8005594:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8005596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005598:	2b00      	cmp	r3, #0
 800559a:	d1e3      	bne.n	8005564 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 800559c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800559e:	f003 0301 	and.w	r3, r3, #1
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d011      	beq.n	80055ca <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 80055a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d00e      	beq.n	80055ca <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80055ac:	e006      	b.n	80055bc <_PrintUnsigned+0x110>
        FieldWidth--;
 80055ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b0:	3b01      	subs	r3, #1
 80055b2:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 80055b4:	2120      	movs	r1, #32
 80055b6:	68f8      	ldr	r0, [r7, #12]
 80055b8:	f7ff fefc 	bl	80053b4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80055bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d003      	beq.n	80055ca <_PrintUnsigned+0x11e>
 80055c2:	69fa      	ldr	r2, [r7, #28]
 80055c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d3f1      	bcc.n	80055ae <_PrintUnsigned+0x102>
      }
    }
  }
}
 80055ca:	bf00      	nop
 80055cc:	3728      	adds	r7, #40	; 0x28
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	080075dc 	.word	0x080075dc

080055d8 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80055d8:	b580      	push	{r7, lr}
 80055da:	b088      	sub	sp, #32
 80055dc:	af02      	add	r7, sp, #8
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	607a      	str	r2, [r7, #4]
 80055e4:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	bfb8      	it	lt
 80055ec:	425b      	neglt	r3, r3
 80055ee:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80055f0:	2301      	movs	r3, #1
 80055f2:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80055f4:	e007      	b.n	8005606 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	693a      	ldr	r2, [r7, #16]
 80055fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80055fe:	613b      	str	r3, [r7, #16]
    Width++;
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	3301      	adds	r3, #1
 8005604:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	693a      	ldr	r2, [r7, #16]
 800560a:	429a      	cmp	r2, r3
 800560c:	daf3      	bge.n	80055f6 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 800560e:	683a      	ldr	r2, [r7, #0]
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	429a      	cmp	r2, r3
 8005614:	d901      	bls.n	800561a <_PrintInt+0x42>
    Width = NumDigits;
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800561a:	6a3b      	ldr	r3, [r7, #32]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d00a      	beq.n	8005636 <_PrintInt+0x5e>
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	2b00      	cmp	r3, #0
 8005624:	db04      	blt.n	8005630 <_PrintInt+0x58>
 8005626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005628:	f003 0304 	and.w	r3, r3, #4
 800562c:	2b00      	cmp	r3, #0
 800562e:	d002      	beq.n	8005636 <_PrintInt+0x5e>
    FieldWidth--;
 8005630:	6a3b      	ldr	r3, [r7, #32]
 8005632:	3b01      	subs	r3, #1
 8005634:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005638:	f003 0302 	and.w	r3, r3, #2
 800563c:	2b00      	cmp	r3, #0
 800563e:	d002      	beq.n	8005646 <_PrintInt+0x6e>
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d016      	beq.n	8005674 <_PrintInt+0x9c>
 8005646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005648:	f003 0301 	and.w	r3, r3, #1
 800564c:	2b00      	cmp	r3, #0
 800564e:	d111      	bne.n	8005674 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005650:	6a3b      	ldr	r3, [r7, #32]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00e      	beq.n	8005674 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005656:	e006      	b.n	8005666 <_PrintInt+0x8e>
        FieldWidth--;
 8005658:	6a3b      	ldr	r3, [r7, #32]
 800565a:	3b01      	subs	r3, #1
 800565c:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 800565e:	2120      	movs	r1, #32
 8005660:	68f8      	ldr	r0, [r7, #12]
 8005662:	f7ff fea7 	bl	80053b4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005666:	6a3b      	ldr	r3, [r7, #32]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d003      	beq.n	8005674 <_PrintInt+0x9c>
 800566c:	697a      	ldr	r2, [r7, #20]
 800566e:	6a3b      	ldr	r3, [r7, #32]
 8005670:	429a      	cmp	r2, r3
 8005672:	d3f1      	bcc.n	8005658 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	2b00      	cmp	r3, #0
 8005678:	da07      	bge.n	800568a <_PrintInt+0xb2>
    v = -v;
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	425b      	negs	r3, r3
 800567e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005680:	212d      	movs	r1, #45	; 0x2d
 8005682:	68f8      	ldr	r0, [r7, #12]
 8005684:	f7ff fe96 	bl	80053b4 <_StoreChar>
 8005688:	e008      	b.n	800569c <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 800568a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568c:	f003 0304 	and.w	r3, r3, #4
 8005690:	2b00      	cmp	r3, #0
 8005692:	d003      	beq.n	800569c <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005694:	212b      	movs	r1, #43	; 0x2b
 8005696:	68f8      	ldr	r0, [r7, #12]
 8005698:	f7ff fe8c 	bl	80053b4 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 800569c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569e:	f003 0302 	and.w	r3, r3, #2
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d019      	beq.n	80056da <_PrintInt+0x102>
 80056a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a8:	f003 0301 	and.w	r3, r3, #1
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d114      	bne.n	80056da <_PrintInt+0x102>
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d111      	bne.n	80056da <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80056b6:	6a3b      	ldr	r3, [r7, #32]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d00e      	beq.n	80056da <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80056bc:	e006      	b.n	80056cc <_PrintInt+0xf4>
        FieldWidth--;
 80056be:	6a3b      	ldr	r3, [r7, #32]
 80056c0:	3b01      	subs	r3, #1
 80056c2:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 80056c4:	2130      	movs	r1, #48	; 0x30
 80056c6:	68f8      	ldr	r0, [r7, #12]
 80056c8:	f7ff fe74 	bl	80053b4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80056cc:	6a3b      	ldr	r3, [r7, #32]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d003      	beq.n	80056da <_PrintInt+0x102>
 80056d2:	697a      	ldr	r2, [r7, #20]
 80056d4:	6a3b      	ldr	r3, [r7, #32]
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d3f1      	bcc.n	80056be <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 80056da:	68b9      	ldr	r1, [r7, #8]
 80056dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056de:	9301      	str	r3, [sp, #4]
 80056e0:	6a3b      	ldr	r3, [r7, #32]
 80056e2:	9300      	str	r3, [sp, #0]
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	68f8      	ldr	r0, [r7, #12]
 80056ea:	f7ff fedf 	bl	80054ac <_PrintUnsigned>
}
 80056ee:	bf00      	nop
 80056f0:	3718      	adds	r7, #24
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
	...

080056f8 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b098      	sub	sp, #96	; 0x60
 80056fc:	af02      	add	r7, sp, #8
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005704:	f3ef 8311 	mrs	r3, BASEPRI
 8005708:	f04f 0120 	mov.w	r1, #32
 800570c:	f381 8811 	msr	BASEPRI, r1
 8005710:	633b      	str	r3, [r7, #48]	; 0x30
 8005712:	48b7      	ldr	r0, [pc, #732]	; (80059f0 <_VPrintTarget+0x2f8>)
 8005714:	f7ff fc79 	bl	800500a <_PreparePacket>
 8005718:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 800571a:	4bb5      	ldr	r3, [pc, #724]	; (80059f0 <_VPrintTarget+0x2f8>)
 800571c:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 800571e:	2300      	movs	r3, #0
 8005720:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005724:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	3301      	adds	r3, #1
 800572a:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	3301      	adds	r3, #1
 800573c:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 800573e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005742:	2b00      	cmp	r3, #0
 8005744:	f000 8183 	beq.w	8005a4e <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8005748:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800574c:	2b25      	cmp	r3, #37	; 0x25
 800574e:	f040 8170 	bne.w	8005a32 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005752:	2300      	movs	r3, #0
 8005754:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8005756:	2301      	movs	r3, #1
 8005758:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8005762:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005766:	3b23      	subs	r3, #35	; 0x23
 8005768:	2b0d      	cmp	r3, #13
 800576a:	d83f      	bhi.n	80057ec <_VPrintTarget+0xf4>
 800576c:	a201      	add	r2, pc, #4	; (adr r2, 8005774 <_VPrintTarget+0x7c>)
 800576e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005772:	bf00      	nop
 8005774:	080057dd 	.word	0x080057dd
 8005778:	080057ed 	.word	0x080057ed
 800577c:	080057ed 	.word	0x080057ed
 8005780:	080057ed 	.word	0x080057ed
 8005784:	080057ed 	.word	0x080057ed
 8005788:	080057ed 	.word	0x080057ed
 800578c:	080057ed 	.word	0x080057ed
 8005790:	080057ed 	.word	0x080057ed
 8005794:	080057cd 	.word	0x080057cd
 8005798:	080057ed 	.word	0x080057ed
 800579c:	080057ad 	.word	0x080057ad
 80057a0:	080057ed 	.word	0x080057ed
 80057a4:	080057ed 	.word	0x080057ed
 80057a8:	080057bd 	.word	0x080057bd
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80057ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057ae:	f043 0301 	orr.w	r3, r3, #1
 80057b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	3301      	adds	r3, #1
 80057b8:	60fb      	str	r3, [r7, #12]
 80057ba:	e01a      	b.n	80057f2 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80057bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057be:	f043 0302 	orr.w	r3, r3, #2
 80057c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	3301      	adds	r3, #1
 80057c8:	60fb      	str	r3, [r7, #12]
 80057ca:	e012      	b.n	80057f2 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80057cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057ce:	f043 0304 	orr.w	r3, r3, #4
 80057d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	3301      	adds	r3, #1
 80057d8:	60fb      	str	r3, [r7, #12]
 80057da:	e00a      	b.n	80057f2 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80057dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057de:	f043 0308 	orr.w	r3, r3, #8
 80057e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	3301      	adds	r3, #1
 80057e8:	60fb      	str	r3, [r7, #12]
 80057ea:	e002      	b.n	80057f2 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 80057ec:	2300      	movs	r3, #0
 80057ee:	653b      	str	r3, [r7, #80]	; 0x50
 80057f0:	bf00      	nop
        }
      } while (v);
 80057f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d1b0      	bne.n	800575a <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 80057f8:	2300      	movs	r3, #0
 80057fa:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8005804:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005808:	2b2f      	cmp	r3, #47	; 0x2f
 800580a:	d912      	bls.n	8005832 <_VPrintTarget+0x13a>
 800580c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005810:	2b39      	cmp	r3, #57	; 0x39
 8005812:	d80e      	bhi.n	8005832 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	3301      	adds	r3, #1
 8005818:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 800581a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800581c:	4613      	mov	r3, r2
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	4413      	add	r3, r2
 8005822:	005b      	lsls	r3, r3, #1
 8005824:	461a      	mov	r2, r3
 8005826:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800582a:	4413      	add	r3, r2
 800582c:	3b30      	subs	r3, #48	; 0x30
 800582e:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8005830:	e7e4      	b.n	80057fc <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8005832:	2300      	movs	r3, #0
 8005834:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 800583e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005842:	2b2e      	cmp	r3, #46	; 0x2e
 8005844:	d11d      	bne.n	8005882 <_VPrintTarget+0x18a>
        sFormat++;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	3301      	adds	r3, #1
 800584a:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8005854:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005858:	2b2f      	cmp	r3, #47	; 0x2f
 800585a:	d912      	bls.n	8005882 <_VPrintTarget+0x18a>
 800585c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005860:	2b39      	cmp	r3, #57	; 0x39
 8005862:	d80e      	bhi.n	8005882 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	3301      	adds	r3, #1
 8005868:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 800586a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800586c:	4613      	mov	r3, r2
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	4413      	add	r3, r2
 8005872:	005b      	lsls	r3, r3, #1
 8005874:	461a      	mov	r2, r3
 8005876:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800587a:	4413      	add	r3, r2
 800587c:	3b30      	subs	r3, #48	; 0x30
 800587e:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8005880:	e7e4      	b.n	800584c <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 800588a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800588e:	2b6c      	cmp	r3, #108	; 0x6c
 8005890:	d003      	beq.n	800589a <_VPrintTarget+0x1a2>
 8005892:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005896:	2b68      	cmp	r3, #104	; 0x68
 8005898:	d107      	bne.n	80058aa <_VPrintTarget+0x1b2>
          c = *sFormat;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	3301      	adds	r3, #1
 80058a6:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80058a8:	e7ef      	b.n	800588a <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80058aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80058ae:	2b25      	cmp	r3, #37	; 0x25
 80058b0:	f000 80b3 	beq.w	8005a1a <_VPrintTarget+0x322>
 80058b4:	2b25      	cmp	r3, #37	; 0x25
 80058b6:	f2c0 80b7 	blt.w	8005a28 <_VPrintTarget+0x330>
 80058ba:	2b78      	cmp	r3, #120	; 0x78
 80058bc:	f300 80b4 	bgt.w	8005a28 <_VPrintTarget+0x330>
 80058c0:	2b58      	cmp	r3, #88	; 0x58
 80058c2:	f2c0 80b1 	blt.w	8005a28 <_VPrintTarget+0x330>
 80058c6:	3b58      	subs	r3, #88	; 0x58
 80058c8:	2b20      	cmp	r3, #32
 80058ca:	f200 80ad 	bhi.w	8005a28 <_VPrintTarget+0x330>
 80058ce:	a201      	add	r2, pc, #4	; (adr r2, 80058d4 <_VPrintTarget+0x1dc>)
 80058d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058d4:	080059cb 	.word	0x080059cb
 80058d8:	08005a29 	.word	0x08005a29
 80058dc:	08005a29 	.word	0x08005a29
 80058e0:	08005a29 	.word	0x08005a29
 80058e4:	08005a29 	.word	0x08005a29
 80058e8:	08005a29 	.word	0x08005a29
 80058ec:	08005a29 	.word	0x08005a29
 80058f0:	08005a29 	.word	0x08005a29
 80058f4:	08005a29 	.word	0x08005a29
 80058f8:	08005a29 	.word	0x08005a29
 80058fc:	08005a29 	.word	0x08005a29
 8005900:	08005959 	.word	0x08005959
 8005904:	0800597f 	.word	0x0800597f
 8005908:	08005a29 	.word	0x08005a29
 800590c:	08005a29 	.word	0x08005a29
 8005910:	08005a29 	.word	0x08005a29
 8005914:	08005a29 	.word	0x08005a29
 8005918:	08005a29 	.word	0x08005a29
 800591c:	08005a29 	.word	0x08005a29
 8005920:	08005a29 	.word	0x08005a29
 8005924:	08005a29 	.word	0x08005a29
 8005928:	08005a29 	.word	0x08005a29
 800592c:	08005a29 	.word	0x08005a29
 8005930:	08005a29 	.word	0x08005a29
 8005934:	080059f5 	.word	0x080059f5
 8005938:	08005a29 	.word	0x08005a29
 800593c:	08005a29 	.word	0x08005a29
 8005940:	08005a29 	.word	0x08005a29
 8005944:	08005a29 	.word	0x08005a29
 8005948:	080059a5 	.word	0x080059a5
 800594c:	08005a29 	.word	0x08005a29
 8005950:	08005a29 	.word	0x08005a29
 8005954:	080059cb 	.word	0x080059cb
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	1d19      	adds	r1, r3, #4
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	6011      	str	r1, [r2, #0]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8005966:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005968:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 800596c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8005970:	f107 0314 	add.w	r3, r7, #20
 8005974:	4611      	mov	r1, r2
 8005976:	4618      	mov	r0, r3
 8005978:	f7ff fd1c 	bl	80053b4 <_StoreChar>
        break;
 800597c:	e055      	b.n	8005a2a <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	1d19      	adds	r1, r3, #4
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	6011      	str	r1, [r2, #0]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 800598c:	f107 0014 	add.w	r0, r7, #20
 8005990:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005992:	9301      	str	r3, [sp, #4]
 8005994:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005996:	9300      	str	r3, [sp, #0]
 8005998:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800599a:	220a      	movs	r2, #10
 800599c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800599e:	f7ff fe1b 	bl	80055d8 <_PrintInt>
        break;
 80059a2:	e042      	b.n	8005a2a <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	1d19      	adds	r1, r3, #4
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	6011      	str	r1, [r2, #0]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80059b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80059b4:	f107 0014 	add.w	r0, r7, #20
 80059b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059ba:	9301      	str	r3, [sp, #4]
 80059bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059be:	9300      	str	r3, [sp, #0]
 80059c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059c2:	220a      	movs	r2, #10
 80059c4:	f7ff fd72 	bl	80054ac <_PrintUnsigned>
        break;
 80059c8:	e02f      	b.n	8005a2a <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	1d19      	adds	r1, r3, #4
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	6011      	str	r1, [r2, #0]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80059d8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80059da:	f107 0014 	add.w	r0, r7, #20
 80059de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059e0:	9301      	str	r3, [sp, #4]
 80059e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059e4:	9300      	str	r3, [sp, #0]
 80059e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059e8:	2210      	movs	r2, #16
 80059ea:	f7ff fd5f 	bl	80054ac <_PrintUnsigned>
        break;
 80059ee:	e01c      	b.n	8005a2a <_VPrintTarget+0x332>
 80059f0:	2001440c 	.word	0x2001440c
      case 'p':
        v = va_arg(*pParamList, int);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	1d19      	adds	r1, r3, #4
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	6011      	str	r1, [r2, #0]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8005a02:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005a04:	f107 0014 	add.w	r0, r7, #20
 8005a08:	2300      	movs	r3, #0
 8005a0a:	9301      	str	r3, [sp, #4]
 8005a0c:	2308      	movs	r3, #8
 8005a0e:	9300      	str	r3, [sp, #0]
 8005a10:	2308      	movs	r3, #8
 8005a12:	2210      	movs	r2, #16
 8005a14:	f7ff fd4a 	bl	80054ac <_PrintUnsigned>
        break;
 8005a18:	e007      	b.n	8005a2a <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8005a1a:	f107 0314 	add.w	r3, r7, #20
 8005a1e:	2125      	movs	r1, #37	; 0x25
 8005a20:	4618      	mov	r0, r3
 8005a22:	f7ff fcc7 	bl	80053b4 <_StoreChar>
        break;
 8005a26:	e000      	b.n	8005a2a <_VPrintTarget+0x332>
      default:
        break;
 8005a28:	bf00      	nop
      }
      sFormat++;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	3301      	adds	r3, #1
 8005a2e:	60fb      	str	r3, [r7, #12]
 8005a30:	e007      	b.n	8005a42 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8005a32:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005a36:	f107 0314 	add.w	r3, r7, #20
 8005a3a:	4611      	mov	r1, r2
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f7ff fcb9 	bl	80053b4 <_StoreChar>
    }
  } while (*sFormat);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	f47f ae72 	bne.w	8005730 <_VPrintTarget+0x38>
 8005a4c:	e000      	b.n	8005a50 <_VPrintTarget+0x358>
      break;
 8005a4e:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8005a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d041      	beq.n	8005ada <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8005a56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	b2d2      	uxtb	r2, r2
 8005a5c:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	643b      	str	r3, [r7, #64]	; 0x40
 8005a62:	6a3b      	ldr	r3, [r7, #32]
 8005a64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a66:	e00b      	b.n	8005a80 <_VPrintTarget+0x388>
 8005a68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a6a:	b2da      	uxtb	r2, r3
 8005a6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a6e:	1c59      	adds	r1, r3, #1
 8005a70:	6439      	str	r1, [r7, #64]	; 0x40
 8005a72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a76:	b2d2      	uxtb	r2, r2
 8005a78:	701a      	strb	r2, [r3, #0]
 8005a7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a7c:	09db      	lsrs	r3, r3, #7
 8005a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a82:	2b7f      	cmp	r3, #127	; 0x7f
 8005a84:	d8f0      	bhi.n	8005a68 <_VPrintTarget+0x370>
 8005a86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a88:	1c5a      	adds	r2, r3, #1
 8005a8a:	643a      	str	r2, [r7, #64]	; 0x40
 8005a8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005a8e:	b2d2      	uxtb	r2, r2
 8005a90:	701a      	strb	r2, [r3, #0]
 8005a92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a94:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	637b      	str	r3, [r7, #52]	; 0x34
 8005a9e:	e00b      	b.n	8005ab8 <_VPrintTarget+0x3c0>
 8005aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aa2:	b2da      	uxtb	r2, r3
 8005aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa6:	1c59      	adds	r1, r3, #1
 8005aa8:	63b9      	str	r1, [r7, #56]	; 0x38
 8005aaa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005aae:	b2d2      	uxtb	r2, r2
 8005ab0:	701a      	strb	r2, [r3, #0]
 8005ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ab4:	09db      	lsrs	r3, r3, #7
 8005ab6:	637b      	str	r3, [r7, #52]	; 0x34
 8005ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aba:	2b7f      	cmp	r3, #127	; 0x7f
 8005abc:	d8f0      	bhi.n	8005aa0 <_VPrintTarget+0x3a8>
 8005abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac0:	1c5a      	adds	r2, r3, #1
 8005ac2:	63ba      	str	r2, [r7, #56]	; 0x38
 8005ac4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ac6:	b2d2      	uxtb	r2, r2
 8005ac8:	701a      	strb	r2, [r3, #0]
 8005aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005acc:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005ace:	69fb      	ldr	r3, [r7, #28]
 8005ad0:	69b9      	ldr	r1, [r7, #24]
 8005ad2:	221a      	movs	r2, #26
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f7ff fb87 	bl	80051e8 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8005ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005adc:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8005ae0:	bf00      	nop
 8005ae2:	3758      	adds	r7, #88	; 0x58
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b086      	sub	sp, #24
 8005aec:	af02      	add	r7, sp, #8
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	60b9      	str	r1, [r7, #8]
 8005af2:	607a      	str	r2, [r7, #4]
 8005af4:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005af6:	2300      	movs	r3, #0
 8005af8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005afc:	4917      	ldr	r1, [pc, #92]	; (8005b5c <SEGGER_SYSVIEW_Init+0x74>)
 8005afe:	4818      	ldr	r0, [pc, #96]	; (8005b60 <SEGGER_SYSVIEW_Init+0x78>)
 8005b00:	f7ff f942 	bl	8004d88 <SEGGER_RTT_AllocUpBuffer>
 8005b04:	4603      	mov	r3, r0
 8005b06:	b2da      	uxtb	r2, r3
 8005b08:	4b16      	ldr	r3, [pc, #88]	; (8005b64 <SEGGER_SYSVIEW_Init+0x7c>)
 8005b0a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005b0c:	4b15      	ldr	r3, [pc, #84]	; (8005b64 <SEGGER_SYSVIEW_Init+0x7c>)
 8005b0e:	785a      	ldrb	r2, [r3, #1]
 8005b10:	4b14      	ldr	r3, [pc, #80]	; (8005b64 <SEGGER_SYSVIEW_Init+0x7c>)
 8005b12:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005b14:	4b13      	ldr	r3, [pc, #76]	; (8005b64 <SEGGER_SYSVIEW_Init+0x7c>)
 8005b16:	7e1b      	ldrb	r3, [r3, #24]
 8005b18:	4618      	mov	r0, r3
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	9300      	str	r3, [sp, #0]
 8005b1e:	2308      	movs	r3, #8
 8005b20:	4a11      	ldr	r2, [pc, #68]	; (8005b68 <SEGGER_SYSVIEW_Init+0x80>)
 8005b22:	490f      	ldr	r1, [pc, #60]	; (8005b60 <SEGGER_SYSVIEW_Init+0x78>)
 8005b24:	f7ff f9b4 	bl	8004e90 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005b28:	4b0e      	ldr	r3, [pc, #56]	; (8005b64 <SEGGER_SYSVIEW_Init+0x7c>)
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005b2e:	4b0f      	ldr	r3, [pc, #60]	; (8005b6c <SEGGER_SYSVIEW_Init+0x84>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a0c      	ldr	r2, [pc, #48]	; (8005b64 <SEGGER_SYSVIEW_Init+0x7c>)
 8005b34:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005b36:	4a0b      	ldr	r2, [pc, #44]	; (8005b64 <SEGGER_SYSVIEW_Init+0x7c>)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005b3c:	4a09      	ldr	r2, [pc, #36]	; (8005b64 <SEGGER_SYSVIEW_Init+0x7c>)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005b42:	4a08      	ldr	r2, [pc, #32]	; (8005b64 <SEGGER_SYSVIEW_Init+0x7c>)
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005b48:	4a06      	ldr	r2, [pc, #24]	; (8005b64 <SEGGER_SYSVIEW_Init+0x7c>)
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005b4e:	4b05      	ldr	r3, [pc, #20]	; (8005b64 <SEGGER_SYSVIEW_Init+0x7c>)
 8005b50:	2200      	movs	r2, #0
 8005b52:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005b54:	bf00      	nop
 8005b56:	3710      	adds	r7, #16
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}
 8005b5c:	200133d4 	.word	0x200133d4
 8005b60:	080075a8 	.word	0x080075a8
 8005b64:	200143dc 	.word	0x200143dc
 8005b68:	200143d4 	.word	0x200143d4
 8005b6c:	e0001004 	.word	0xe0001004

08005b70 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005b78:	4a04      	ldr	r2, [pc, #16]	; (8005b8c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6113      	str	r3, [r2, #16]
}
 8005b7e:	bf00      	nop
 8005b80:	370c      	adds	r7, #12
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr
 8005b8a:	bf00      	nop
 8005b8c:	200143dc 	.word	0x200143dc

08005b90 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005b98:	f3ef 8311 	mrs	r3, BASEPRI
 8005b9c:	f04f 0120 	mov.w	r1, #32
 8005ba0:	f381 8811 	msr	BASEPRI, r1
 8005ba4:	60fb      	str	r3, [r7, #12]
 8005ba6:	4808      	ldr	r0, [pc, #32]	; (8005bc8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005ba8:	f7ff fa2f 	bl	800500a <_PreparePacket>
 8005bac:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	68b9      	ldr	r1, [r7, #8]
 8005bb2:	68b8      	ldr	r0, [r7, #8]
 8005bb4:	f7ff fb18 	bl	80051e8 <_SendPacket>
  RECORD_END();
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f383 8811 	msr	BASEPRI, r3
}
 8005bbe:	bf00      	nop
 8005bc0:	3710      	adds	r7, #16
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	2001440c 	.word	0x2001440c

08005bcc <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b088      	sub	sp, #32
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005bd6:	f3ef 8311 	mrs	r3, BASEPRI
 8005bda:	f04f 0120 	mov.w	r1, #32
 8005bde:	f381 8811 	msr	BASEPRI, r1
 8005be2:	617b      	str	r3, [r7, #20]
 8005be4:	4816      	ldr	r0, [pc, #88]	; (8005c40 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005be6:	f7ff fa10 	bl	800500a <_PreparePacket>
 8005bea:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	61fb      	str	r3, [r7, #28]
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	61bb      	str	r3, [r7, #24]
 8005bf8:	e00b      	b.n	8005c12 <SEGGER_SYSVIEW_RecordU32+0x46>
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	b2da      	uxtb	r2, r3
 8005bfe:	69fb      	ldr	r3, [r7, #28]
 8005c00:	1c59      	adds	r1, r3, #1
 8005c02:	61f9      	str	r1, [r7, #28]
 8005c04:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c08:	b2d2      	uxtb	r2, r2
 8005c0a:	701a      	strb	r2, [r3, #0]
 8005c0c:	69bb      	ldr	r3, [r7, #24]
 8005c0e:	09db      	lsrs	r3, r3, #7
 8005c10:	61bb      	str	r3, [r7, #24]
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	2b7f      	cmp	r3, #127	; 0x7f
 8005c16:	d8f0      	bhi.n	8005bfa <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	1c5a      	adds	r2, r3, #1
 8005c1c:	61fa      	str	r2, [r7, #28]
 8005c1e:	69ba      	ldr	r2, [r7, #24]
 8005c20:	b2d2      	uxtb	r2, r2
 8005c22:	701a      	strb	r2, [r3, #0]
 8005c24:	69fb      	ldr	r3, [r7, #28]
 8005c26:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	68f9      	ldr	r1, [r7, #12]
 8005c2c:	6938      	ldr	r0, [r7, #16]
 8005c2e:	f7ff fadb 	bl	80051e8 <_SendPacket>
  RECORD_END();
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	f383 8811 	msr	BASEPRI, r3
}
 8005c38:	bf00      	nop
 8005c3a:	3720      	adds	r7, #32
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	2001440c 	.word	0x2001440c

08005c44 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b08c      	sub	sp, #48	; 0x30
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	60b9      	str	r1, [r7, #8]
 8005c4e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005c50:	f3ef 8311 	mrs	r3, BASEPRI
 8005c54:	f04f 0120 	mov.w	r1, #32
 8005c58:	f381 8811 	msr	BASEPRI, r1
 8005c5c:	61fb      	str	r3, [r7, #28]
 8005c5e:	4825      	ldr	r0, [pc, #148]	; (8005cf4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005c60:	f7ff f9d3 	bl	800500a <_PreparePacket>
 8005c64:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c72:	e00b      	b.n	8005c8c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c76:	b2da      	uxtb	r2, r3
 8005c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c7a:	1c59      	adds	r1, r3, #1
 8005c7c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005c7e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c82:	b2d2      	uxtb	r2, r2
 8005c84:	701a      	strb	r2, [r3, #0]
 8005c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c88:	09db      	lsrs	r3, r3, #7
 8005c8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c8e:	2b7f      	cmp	r3, #127	; 0x7f
 8005c90:	d8f0      	bhi.n	8005c74 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c94:	1c5a      	adds	r2, r3, #1
 8005c96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c9a:	b2d2      	uxtb	r2, r2
 8005c9c:	701a      	strb	r2, [r3, #0]
 8005c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	623b      	str	r3, [r7, #32]
 8005caa:	e00b      	b.n	8005cc4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005cac:	6a3b      	ldr	r3, [r7, #32]
 8005cae:	b2da      	uxtb	r2, r3
 8005cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb2:	1c59      	adds	r1, r3, #1
 8005cb4:	6279      	str	r1, [r7, #36]	; 0x24
 8005cb6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cba:	b2d2      	uxtb	r2, r2
 8005cbc:	701a      	strb	r2, [r3, #0]
 8005cbe:	6a3b      	ldr	r3, [r7, #32]
 8005cc0:	09db      	lsrs	r3, r3, #7
 8005cc2:	623b      	str	r3, [r7, #32]
 8005cc4:	6a3b      	ldr	r3, [r7, #32]
 8005cc6:	2b7f      	cmp	r3, #127	; 0x7f
 8005cc8:	d8f0      	bhi.n	8005cac <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ccc:	1c5a      	adds	r2, r3, #1
 8005cce:	627a      	str	r2, [r7, #36]	; 0x24
 8005cd0:	6a3a      	ldr	r2, [r7, #32]
 8005cd2:	b2d2      	uxtb	r2, r2
 8005cd4:	701a      	strb	r2, [r3, #0]
 8005cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005cda:	68fa      	ldr	r2, [r7, #12]
 8005cdc:	6979      	ldr	r1, [r7, #20]
 8005cde:	69b8      	ldr	r0, [r7, #24]
 8005ce0:	f7ff fa82 	bl	80051e8 <_SendPacket>
  RECORD_END();
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	f383 8811 	msr	BASEPRI, r3
}
 8005cea:	bf00      	nop
 8005cec:	3730      	adds	r7, #48	; 0x30
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	bf00      	nop
 8005cf4:	2001440c 	.word	0x2001440c

08005cf8 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b08e      	sub	sp, #56	; 0x38
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	60b9      	str	r1, [r7, #8]
 8005d02:	607a      	str	r2, [r7, #4]
 8005d04:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8005d06:	f3ef 8311 	mrs	r3, BASEPRI
 8005d0a:	f04f 0120 	mov.w	r1, #32
 8005d0e:	f381 8811 	msr	BASEPRI, r1
 8005d12:	61fb      	str	r3, [r7, #28]
 8005d14:	4832      	ldr	r0, [pc, #200]	; (8005de0 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8005d16:	f7ff f978 	bl	800500a <_PreparePacket>
 8005d1a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005d1c:	69bb      	ldr	r3, [r7, #24]
 8005d1e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	637b      	str	r3, [r7, #52]	; 0x34
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	633b      	str	r3, [r7, #48]	; 0x30
 8005d28:	e00b      	b.n	8005d42 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8005d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2c:	b2da      	uxtb	r2, r3
 8005d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d30:	1c59      	adds	r1, r3, #1
 8005d32:	6379      	str	r1, [r7, #52]	; 0x34
 8005d34:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d38:	b2d2      	uxtb	r2, r2
 8005d3a:	701a      	strb	r2, [r3, #0]
 8005d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d3e:	09db      	lsrs	r3, r3, #7
 8005d40:	633b      	str	r3, [r7, #48]	; 0x30
 8005d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d44:	2b7f      	cmp	r3, #127	; 0x7f
 8005d46:	d8f0      	bhi.n	8005d2a <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8005d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d4a:	1c5a      	adds	r2, r3, #1
 8005d4c:	637a      	str	r2, [r7, #52]	; 0x34
 8005d4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d50:	b2d2      	uxtb	r2, r2
 8005d52:	701a      	strb	r2, [r3, #0]
 8005d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d56:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d60:	e00b      	b.n	8005d7a <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8005d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d64:	b2da      	uxtb	r2, r3
 8005d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d68:	1c59      	adds	r1, r3, #1
 8005d6a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005d6c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d70:	b2d2      	uxtb	r2, r2
 8005d72:	701a      	strb	r2, [r3, #0]
 8005d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d76:	09db      	lsrs	r3, r3, #7
 8005d78:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d7c:	2b7f      	cmp	r3, #127	; 0x7f
 8005d7e:	d8f0      	bhi.n	8005d62 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8005d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d82:	1c5a      	adds	r2, r3, #1
 8005d84:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d88:	b2d2      	uxtb	r2, r2
 8005d8a:	701a      	strb	r2, [r3, #0]
 8005d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d8e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	627b      	str	r3, [r7, #36]	; 0x24
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	623b      	str	r3, [r7, #32]
 8005d98:	e00b      	b.n	8005db2 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8005d9a:	6a3b      	ldr	r3, [r7, #32]
 8005d9c:	b2da      	uxtb	r2, r3
 8005d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da0:	1c59      	adds	r1, r3, #1
 8005da2:	6279      	str	r1, [r7, #36]	; 0x24
 8005da4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005da8:	b2d2      	uxtb	r2, r2
 8005daa:	701a      	strb	r2, [r3, #0]
 8005dac:	6a3b      	ldr	r3, [r7, #32]
 8005dae:	09db      	lsrs	r3, r3, #7
 8005db0:	623b      	str	r3, [r7, #32]
 8005db2:	6a3b      	ldr	r3, [r7, #32]
 8005db4:	2b7f      	cmp	r3, #127	; 0x7f
 8005db6:	d8f0      	bhi.n	8005d9a <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8005db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dba:	1c5a      	adds	r2, r3, #1
 8005dbc:	627a      	str	r2, [r7, #36]	; 0x24
 8005dbe:	6a3a      	ldr	r2, [r7, #32]
 8005dc0:	b2d2      	uxtb	r2, r2
 8005dc2:	701a      	strb	r2, [r3, #0]
 8005dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	6979      	ldr	r1, [r7, #20]
 8005dcc:	69b8      	ldr	r0, [r7, #24]
 8005dce:	f7ff fa0b 	bl	80051e8 <_SendPacket>
  RECORD_END();
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	f383 8811 	msr	BASEPRI, r3
}
 8005dd8:	bf00      	nop
 8005dda:	3738      	adds	r7, #56	; 0x38
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}
 8005de0:	2001440c 	.word	0x2001440c

08005de4 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b090      	sub	sp, #64	; 0x40
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	607a      	str	r2, [r7, #4]
 8005df0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005df2:	f3ef 8311 	mrs	r3, BASEPRI
 8005df6:	f04f 0120 	mov.w	r1, #32
 8005dfa:	f381 8811 	msr	BASEPRI, r1
 8005dfe:	61fb      	str	r3, [r7, #28]
 8005e00:	4840      	ldr	r0, [pc, #256]	; (8005f04 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005e02:	f7ff f902 	bl	800500a <_PreparePacket>
 8005e06:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e14:	e00b      	b.n	8005e2e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8005e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e18:	b2da      	uxtb	r2, r3
 8005e1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e1c:	1c59      	adds	r1, r3, #1
 8005e1e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005e20:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e24:	b2d2      	uxtb	r2, r2
 8005e26:	701a      	strb	r2, [r3, #0]
 8005e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e2a:	09db      	lsrs	r3, r3, #7
 8005e2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e30:	2b7f      	cmp	r3, #127	; 0x7f
 8005e32:	d8f0      	bhi.n	8005e16 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e36:	1c5a      	adds	r2, r3, #1
 8005e38:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005e3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e3c:	b2d2      	uxtb	r2, r2
 8005e3e:	701a      	strb	r2, [r3, #0]
 8005e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e42:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	637b      	str	r3, [r7, #52]	; 0x34
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	633b      	str	r3, [r7, #48]	; 0x30
 8005e4c:	e00b      	b.n	8005e66 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8005e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e50:	b2da      	uxtb	r2, r3
 8005e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e54:	1c59      	adds	r1, r3, #1
 8005e56:	6379      	str	r1, [r7, #52]	; 0x34
 8005e58:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e5c:	b2d2      	uxtb	r2, r2
 8005e5e:	701a      	strb	r2, [r3, #0]
 8005e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e62:	09db      	lsrs	r3, r3, #7
 8005e64:	633b      	str	r3, [r7, #48]	; 0x30
 8005e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e68:	2b7f      	cmp	r3, #127	; 0x7f
 8005e6a:	d8f0      	bhi.n	8005e4e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e6e:	1c5a      	adds	r2, r3, #1
 8005e70:	637a      	str	r2, [r7, #52]	; 0x34
 8005e72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e74:	b2d2      	uxtb	r2, r2
 8005e76:	701a      	strb	r2, [r3, #0]
 8005e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e7a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e84:	e00b      	b.n	8005e9e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8005e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e88:	b2da      	uxtb	r2, r3
 8005e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e8c:	1c59      	adds	r1, r3, #1
 8005e8e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005e90:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e94:	b2d2      	uxtb	r2, r2
 8005e96:	701a      	strb	r2, [r3, #0]
 8005e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e9a:	09db      	lsrs	r3, r3, #7
 8005e9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea0:	2b7f      	cmp	r3, #127	; 0x7f
 8005ea2:	d8f0      	bhi.n	8005e86 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ea6:	1c5a      	adds	r2, r3, #1
 8005ea8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005eaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005eac:	b2d2      	uxtb	r2, r2
 8005eae:	701a      	strb	r2, [r3, #0]
 8005eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	627b      	str	r3, [r7, #36]	; 0x24
 8005eb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005eba:	623b      	str	r3, [r7, #32]
 8005ebc:	e00b      	b.n	8005ed6 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005ebe:	6a3b      	ldr	r3, [r7, #32]
 8005ec0:	b2da      	uxtb	r2, r3
 8005ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec4:	1c59      	adds	r1, r3, #1
 8005ec6:	6279      	str	r1, [r7, #36]	; 0x24
 8005ec8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ecc:	b2d2      	uxtb	r2, r2
 8005ece:	701a      	strb	r2, [r3, #0]
 8005ed0:	6a3b      	ldr	r3, [r7, #32]
 8005ed2:	09db      	lsrs	r3, r3, #7
 8005ed4:	623b      	str	r3, [r7, #32]
 8005ed6:	6a3b      	ldr	r3, [r7, #32]
 8005ed8:	2b7f      	cmp	r3, #127	; 0x7f
 8005eda:	d8f0      	bhi.n	8005ebe <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ede:	1c5a      	adds	r2, r3, #1
 8005ee0:	627a      	str	r2, [r7, #36]	; 0x24
 8005ee2:	6a3a      	ldr	r2, [r7, #32]
 8005ee4:	b2d2      	uxtb	r2, r2
 8005ee6:	701a      	strb	r2, [r3, #0]
 8005ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eea:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005eec:	68fa      	ldr	r2, [r7, #12]
 8005eee:	6979      	ldr	r1, [r7, #20]
 8005ef0:	69b8      	ldr	r0, [r7, #24]
 8005ef2:	f7ff f979 	bl	80051e8 <_SendPacket>
  RECORD_END();
 8005ef6:	69fb      	ldr	r3, [r7, #28]
 8005ef8:	f383 8811 	msr	BASEPRI, r3
}
 8005efc:	bf00      	nop
 8005efe:	3740      	adds	r7, #64	; 0x40
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	2001440c 	.word	0x2001440c

08005f08 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b08c      	sub	sp, #48	; 0x30
 8005f0c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005f0e:	4b58      	ldr	r3, [pc, #352]	; (8006070 <SEGGER_SYSVIEW_Start+0x168>)
 8005f10:	2201      	movs	r2, #1
 8005f12:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005f14:	f3ef 8311 	mrs	r3, BASEPRI
 8005f18:	f04f 0120 	mov.w	r1, #32
 8005f1c:	f381 8811 	msr	BASEPRI, r1
 8005f20:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005f22:	4b53      	ldr	r3, [pc, #332]	; (8006070 <SEGGER_SYSVIEW_Start+0x168>)
 8005f24:	785b      	ldrb	r3, [r3, #1]
 8005f26:	220a      	movs	r2, #10
 8005f28:	4952      	ldr	r1, [pc, #328]	; (8006074 <SEGGER_SYSVIEW_Start+0x16c>)
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f7fa f978 	bl	8000220 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005f36:	200a      	movs	r0, #10
 8005f38:	f7ff fe2a 	bl	8005b90 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005f3c:	f3ef 8311 	mrs	r3, BASEPRI
 8005f40:	f04f 0120 	mov.w	r1, #32
 8005f44:	f381 8811 	msr	BASEPRI, r1
 8005f48:	60bb      	str	r3, [r7, #8]
 8005f4a:	484b      	ldr	r0, [pc, #300]	; (8006078 <SEGGER_SYSVIEW_Start+0x170>)
 8005f4c:	f7ff f85d 	bl	800500a <_PreparePacket>
 8005f50:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f5a:	4b45      	ldr	r3, [pc, #276]	; (8006070 <SEGGER_SYSVIEW_Start+0x168>)
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f60:	e00b      	b.n	8005f7a <SEGGER_SYSVIEW_Start+0x72>
 8005f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f64:	b2da      	uxtb	r2, r3
 8005f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f68:	1c59      	adds	r1, r3, #1
 8005f6a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005f6c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f70:	b2d2      	uxtb	r2, r2
 8005f72:	701a      	strb	r2, [r3, #0]
 8005f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f76:	09db      	lsrs	r3, r3, #7
 8005f78:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f7c:	2b7f      	cmp	r3, #127	; 0x7f
 8005f7e:	d8f0      	bhi.n	8005f62 <SEGGER_SYSVIEW_Start+0x5a>
 8005f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f82:	1c5a      	adds	r2, r3, #1
 8005f84:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f88:	b2d2      	uxtb	r2, r2
 8005f8a:	701a      	strb	r2, [r3, #0]
 8005f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f8e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	627b      	str	r3, [r7, #36]	; 0x24
 8005f94:	4b36      	ldr	r3, [pc, #216]	; (8006070 <SEGGER_SYSVIEW_Start+0x168>)
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	623b      	str	r3, [r7, #32]
 8005f9a:	e00b      	b.n	8005fb4 <SEGGER_SYSVIEW_Start+0xac>
 8005f9c:	6a3b      	ldr	r3, [r7, #32]
 8005f9e:	b2da      	uxtb	r2, r3
 8005fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa2:	1c59      	adds	r1, r3, #1
 8005fa4:	6279      	str	r1, [r7, #36]	; 0x24
 8005fa6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005faa:	b2d2      	uxtb	r2, r2
 8005fac:	701a      	strb	r2, [r3, #0]
 8005fae:	6a3b      	ldr	r3, [r7, #32]
 8005fb0:	09db      	lsrs	r3, r3, #7
 8005fb2:	623b      	str	r3, [r7, #32]
 8005fb4:	6a3b      	ldr	r3, [r7, #32]
 8005fb6:	2b7f      	cmp	r3, #127	; 0x7f
 8005fb8:	d8f0      	bhi.n	8005f9c <SEGGER_SYSVIEW_Start+0x94>
 8005fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fbc:	1c5a      	adds	r2, r3, #1
 8005fbe:	627a      	str	r2, [r7, #36]	; 0x24
 8005fc0:	6a3a      	ldr	r2, [r7, #32]
 8005fc2:	b2d2      	uxtb	r2, r2
 8005fc4:	701a      	strb	r2, [r3, #0]
 8005fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	61fb      	str	r3, [r7, #28]
 8005fce:	4b28      	ldr	r3, [pc, #160]	; (8006070 <SEGGER_SYSVIEW_Start+0x168>)
 8005fd0:	691b      	ldr	r3, [r3, #16]
 8005fd2:	61bb      	str	r3, [r7, #24]
 8005fd4:	e00b      	b.n	8005fee <SEGGER_SYSVIEW_Start+0xe6>
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	b2da      	uxtb	r2, r3
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	1c59      	adds	r1, r3, #1
 8005fde:	61f9      	str	r1, [r7, #28]
 8005fe0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fe4:	b2d2      	uxtb	r2, r2
 8005fe6:	701a      	strb	r2, [r3, #0]
 8005fe8:	69bb      	ldr	r3, [r7, #24]
 8005fea:	09db      	lsrs	r3, r3, #7
 8005fec:	61bb      	str	r3, [r7, #24]
 8005fee:	69bb      	ldr	r3, [r7, #24]
 8005ff0:	2b7f      	cmp	r3, #127	; 0x7f
 8005ff2:	d8f0      	bhi.n	8005fd6 <SEGGER_SYSVIEW_Start+0xce>
 8005ff4:	69fb      	ldr	r3, [r7, #28]
 8005ff6:	1c5a      	adds	r2, r3, #1
 8005ff8:	61fa      	str	r2, [r7, #28]
 8005ffa:	69ba      	ldr	r2, [r7, #24]
 8005ffc:	b2d2      	uxtb	r2, r2
 8005ffe:	701a      	strb	r2, [r3, #0]
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	617b      	str	r3, [r7, #20]
 8006008:	2300      	movs	r3, #0
 800600a:	613b      	str	r3, [r7, #16]
 800600c:	e00b      	b.n	8006026 <SEGGER_SYSVIEW_Start+0x11e>
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	b2da      	uxtb	r2, r3
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	1c59      	adds	r1, r3, #1
 8006016:	6179      	str	r1, [r7, #20]
 8006018:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800601c:	b2d2      	uxtb	r2, r2
 800601e:	701a      	strb	r2, [r3, #0]
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	09db      	lsrs	r3, r3, #7
 8006024:	613b      	str	r3, [r7, #16]
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	2b7f      	cmp	r3, #127	; 0x7f
 800602a:	d8f0      	bhi.n	800600e <SEGGER_SYSVIEW_Start+0x106>
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	1c5a      	adds	r2, r3, #1
 8006030:	617a      	str	r2, [r7, #20]
 8006032:	693a      	ldr	r2, [r7, #16]
 8006034:	b2d2      	uxtb	r2, r2
 8006036:	701a      	strb	r2, [r3, #0]
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800603c:	2218      	movs	r2, #24
 800603e:	6839      	ldr	r1, [r7, #0]
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f7ff f8d1 	bl	80051e8 <_SendPacket>
      RECORD_END();
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800604c:	4b08      	ldr	r3, [pc, #32]	; (8006070 <SEGGER_SYSVIEW_Start+0x168>)
 800604e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006050:	2b00      	cmp	r3, #0
 8006052:	d002      	beq.n	800605a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006054:	4b06      	ldr	r3, [pc, #24]	; (8006070 <SEGGER_SYSVIEW_Start+0x168>)
 8006056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006058:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800605a:	f000 f9eb 	bl	8006434 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800605e:	f000 f9b1 	bl	80063c4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006062:	f000 fc83 	bl	800696c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006066:	bf00      	nop
 8006068:	3730      	adds	r7, #48	; 0x30
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	200143dc 	.word	0x200143dc
 8006074:	080075d0 	.word	0x080075d0
 8006078:	2001440c 	.word	0x2001440c

0800607c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800607c:	b580      	push	{r7, lr}
 800607e:	b082      	sub	sp, #8
 8006080:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006082:	f3ef 8311 	mrs	r3, BASEPRI
 8006086:	f04f 0120 	mov.w	r1, #32
 800608a:	f381 8811 	msr	BASEPRI, r1
 800608e:	607b      	str	r3, [r7, #4]
 8006090:	480b      	ldr	r0, [pc, #44]	; (80060c0 <SEGGER_SYSVIEW_Stop+0x44>)
 8006092:	f7fe ffba 	bl	800500a <_PreparePacket>
 8006096:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006098:	4b0a      	ldr	r3, [pc, #40]	; (80060c4 <SEGGER_SYSVIEW_Stop+0x48>)
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d007      	beq.n	80060b0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80060a0:	220b      	movs	r2, #11
 80060a2:	6839      	ldr	r1, [r7, #0]
 80060a4:	6838      	ldr	r0, [r7, #0]
 80060a6:	f7ff f89f 	bl	80051e8 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80060aa:	4b06      	ldr	r3, [pc, #24]	; (80060c4 <SEGGER_SYSVIEW_Stop+0x48>)
 80060ac:	2200      	movs	r2, #0
 80060ae:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f383 8811 	msr	BASEPRI, r3
}
 80060b6:	bf00      	nop
 80060b8:	3708      	adds	r7, #8
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop
 80060c0:	2001440c 	.word	0x2001440c
 80060c4:	200143dc 	.word	0x200143dc

080060c8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b08c      	sub	sp, #48	; 0x30
 80060cc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80060ce:	f3ef 8311 	mrs	r3, BASEPRI
 80060d2:	f04f 0120 	mov.w	r1, #32
 80060d6:	f381 8811 	msr	BASEPRI, r1
 80060da:	60fb      	str	r3, [r7, #12]
 80060dc:	4845      	ldr	r0, [pc, #276]	; (80061f4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80060de:	f7fe ff94 	bl	800500a <_PreparePacket>
 80060e2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060ec:	4b42      	ldr	r3, [pc, #264]	; (80061f8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80060f2:	e00b      	b.n	800610c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80060f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f6:	b2da      	uxtb	r2, r3
 80060f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060fa:	1c59      	adds	r1, r3, #1
 80060fc:	62f9      	str	r1, [r7, #44]	; 0x2c
 80060fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006102:	b2d2      	uxtb	r2, r2
 8006104:	701a      	strb	r2, [r3, #0]
 8006106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006108:	09db      	lsrs	r3, r3, #7
 800610a:	62bb      	str	r3, [r7, #40]	; 0x28
 800610c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800610e:	2b7f      	cmp	r3, #127	; 0x7f
 8006110:	d8f0      	bhi.n	80060f4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006114:	1c5a      	adds	r2, r3, #1
 8006116:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006118:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800611a:	b2d2      	uxtb	r2, r2
 800611c:	701a      	strb	r2, [r3, #0]
 800611e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006120:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	627b      	str	r3, [r7, #36]	; 0x24
 8006126:	4b34      	ldr	r3, [pc, #208]	; (80061f8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	623b      	str	r3, [r7, #32]
 800612c:	e00b      	b.n	8006146 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800612e:	6a3b      	ldr	r3, [r7, #32]
 8006130:	b2da      	uxtb	r2, r3
 8006132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006134:	1c59      	adds	r1, r3, #1
 8006136:	6279      	str	r1, [r7, #36]	; 0x24
 8006138:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800613c:	b2d2      	uxtb	r2, r2
 800613e:	701a      	strb	r2, [r3, #0]
 8006140:	6a3b      	ldr	r3, [r7, #32]
 8006142:	09db      	lsrs	r3, r3, #7
 8006144:	623b      	str	r3, [r7, #32]
 8006146:	6a3b      	ldr	r3, [r7, #32]
 8006148:	2b7f      	cmp	r3, #127	; 0x7f
 800614a:	d8f0      	bhi.n	800612e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800614c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614e:	1c5a      	adds	r2, r3, #1
 8006150:	627a      	str	r2, [r7, #36]	; 0x24
 8006152:	6a3a      	ldr	r2, [r7, #32]
 8006154:	b2d2      	uxtb	r2, r2
 8006156:	701a      	strb	r2, [r3, #0]
 8006158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	61fb      	str	r3, [r7, #28]
 8006160:	4b25      	ldr	r3, [pc, #148]	; (80061f8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006162:	691b      	ldr	r3, [r3, #16]
 8006164:	61bb      	str	r3, [r7, #24]
 8006166:	e00b      	b.n	8006180 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006168:	69bb      	ldr	r3, [r7, #24]
 800616a:	b2da      	uxtb	r2, r3
 800616c:	69fb      	ldr	r3, [r7, #28]
 800616e:	1c59      	adds	r1, r3, #1
 8006170:	61f9      	str	r1, [r7, #28]
 8006172:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006176:	b2d2      	uxtb	r2, r2
 8006178:	701a      	strb	r2, [r3, #0]
 800617a:	69bb      	ldr	r3, [r7, #24]
 800617c:	09db      	lsrs	r3, r3, #7
 800617e:	61bb      	str	r3, [r7, #24]
 8006180:	69bb      	ldr	r3, [r7, #24]
 8006182:	2b7f      	cmp	r3, #127	; 0x7f
 8006184:	d8f0      	bhi.n	8006168 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	1c5a      	adds	r2, r3, #1
 800618a:	61fa      	str	r2, [r7, #28]
 800618c:	69ba      	ldr	r2, [r7, #24]
 800618e:	b2d2      	uxtb	r2, r2
 8006190:	701a      	strb	r2, [r3, #0]
 8006192:	69fb      	ldr	r3, [r7, #28]
 8006194:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	617b      	str	r3, [r7, #20]
 800619a:	2300      	movs	r3, #0
 800619c:	613b      	str	r3, [r7, #16]
 800619e:	e00b      	b.n	80061b8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	b2da      	uxtb	r2, r3
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	1c59      	adds	r1, r3, #1
 80061a8:	6179      	str	r1, [r7, #20]
 80061aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061ae:	b2d2      	uxtb	r2, r2
 80061b0:	701a      	strb	r2, [r3, #0]
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	09db      	lsrs	r3, r3, #7
 80061b6:	613b      	str	r3, [r7, #16]
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	2b7f      	cmp	r3, #127	; 0x7f
 80061bc:	d8f0      	bhi.n	80061a0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	1c5a      	adds	r2, r3, #1
 80061c2:	617a      	str	r2, [r7, #20]
 80061c4:	693a      	ldr	r2, [r7, #16]
 80061c6:	b2d2      	uxtb	r2, r2
 80061c8:	701a      	strb	r2, [r3, #0]
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80061ce:	2218      	movs	r2, #24
 80061d0:	6879      	ldr	r1, [r7, #4]
 80061d2:	68b8      	ldr	r0, [r7, #8]
 80061d4:	f7ff f808 	bl	80051e8 <_SendPacket>
  RECORD_END();
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80061de:	4b06      	ldr	r3, [pc, #24]	; (80061f8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80061e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d002      	beq.n	80061ec <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80061e6:	4b04      	ldr	r3, [pc, #16]	; (80061f8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80061e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ea:	4798      	blx	r3
  }
}
 80061ec:	bf00      	nop
 80061ee:	3730      	adds	r7, #48	; 0x30
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}
 80061f4:	2001440c 	.word	0x2001440c
 80061f8:	200143dc 	.word	0x200143dc

080061fc <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b092      	sub	sp, #72	; 0x48
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006204:	f3ef 8311 	mrs	r3, BASEPRI
 8006208:	f04f 0120 	mov.w	r1, #32
 800620c:	f381 8811 	msr	BASEPRI, r1
 8006210:	617b      	str	r3, [r7, #20]
 8006212:	486a      	ldr	r0, [pc, #424]	; (80063bc <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006214:	f7fe fef9 	bl	800500a <_PreparePacket>
 8006218:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	647b      	str	r3, [r7, #68]	; 0x44
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	4b66      	ldr	r3, [pc, #408]	; (80063c0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	1ad3      	subs	r3, r2, r3
 800622c:	643b      	str	r3, [r7, #64]	; 0x40
 800622e:	e00b      	b.n	8006248 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006230:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006232:	b2da      	uxtb	r2, r3
 8006234:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006236:	1c59      	adds	r1, r3, #1
 8006238:	6479      	str	r1, [r7, #68]	; 0x44
 800623a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800623e:	b2d2      	uxtb	r2, r2
 8006240:	701a      	strb	r2, [r3, #0]
 8006242:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006244:	09db      	lsrs	r3, r3, #7
 8006246:	643b      	str	r3, [r7, #64]	; 0x40
 8006248:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800624a:	2b7f      	cmp	r3, #127	; 0x7f
 800624c:	d8f0      	bhi.n	8006230 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800624e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006250:	1c5a      	adds	r2, r3, #1
 8006252:	647a      	str	r2, [r7, #68]	; 0x44
 8006254:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006256:	b2d2      	uxtb	r2, r2
 8006258:	701a      	strb	r2, [r3, #0]
 800625a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800625c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	63bb      	str	r3, [r7, #56]	; 0x38
 8006268:	e00b      	b.n	8006282 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800626a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800626c:	b2da      	uxtb	r2, r3
 800626e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006270:	1c59      	adds	r1, r3, #1
 8006272:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006274:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006278:	b2d2      	uxtb	r2, r2
 800627a:	701a      	strb	r2, [r3, #0]
 800627c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800627e:	09db      	lsrs	r3, r3, #7
 8006280:	63bb      	str	r3, [r7, #56]	; 0x38
 8006282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006284:	2b7f      	cmp	r3, #127	; 0x7f
 8006286:	d8f0      	bhi.n	800626a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800628a:	1c5a      	adds	r2, r3, #1
 800628c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800628e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006290:	b2d2      	uxtb	r2, r2
 8006292:	701a      	strb	r2, [r3, #0]
 8006294:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006296:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	2220      	movs	r2, #32
 800629e:	4619      	mov	r1, r3
 80062a0:	68f8      	ldr	r0, [r7, #12]
 80062a2:	f7fe fe65 	bl	8004f70 <_EncodeStr>
 80062a6:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80062a8:	2209      	movs	r2, #9
 80062aa:	68f9      	ldr	r1, [r7, #12]
 80062ac:	6938      	ldr	r0, [r7, #16]
 80062ae:	f7fe ff9b 	bl	80051e8 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	637b      	str	r3, [r7, #52]	; 0x34
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	4b40      	ldr	r3, [pc, #256]	; (80063c0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80062c0:	691b      	ldr	r3, [r3, #16]
 80062c2:	1ad3      	subs	r3, r2, r3
 80062c4:	633b      	str	r3, [r7, #48]	; 0x30
 80062c6:	e00b      	b.n	80062e0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80062c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ca:	b2da      	uxtb	r2, r3
 80062cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062ce:	1c59      	adds	r1, r3, #1
 80062d0:	6379      	str	r1, [r7, #52]	; 0x34
 80062d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062d6:	b2d2      	uxtb	r2, r2
 80062d8:	701a      	strb	r2, [r3, #0]
 80062da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062dc:	09db      	lsrs	r3, r3, #7
 80062de:	633b      	str	r3, [r7, #48]	; 0x30
 80062e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e2:	2b7f      	cmp	r3, #127	; 0x7f
 80062e4:	d8f0      	bhi.n	80062c8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80062e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062e8:	1c5a      	adds	r2, r3, #1
 80062ea:	637a      	str	r2, [r7, #52]	; 0x34
 80062ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062ee:	b2d2      	uxtb	r2, r2
 80062f0:	701a      	strb	r2, [r3, #0]
 80062f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062f4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	68db      	ldr	r3, [r3, #12]
 80062fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8006300:	e00b      	b.n	800631a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006304:	b2da      	uxtb	r2, r3
 8006306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006308:	1c59      	adds	r1, r3, #1
 800630a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800630c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006310:	b2d2      	uxtb	r2, r2
 8006312:	701a      	strb	r2, [r3, #0]
 8006314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006316:	09db      	lsrs	r3, r3, #7
 8006318:	62bb      	str	r3, [r7, #40]	; 0x28
 800631a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800631c:	2b7f      	cmp	r3, #127	; 0x7f
 800631e:	d8f0      	bhi.n	8006302 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006322:	1c5a      	adds	r2, r3, #1
 8006324:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006326:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006328:	b2d2      	uxtb	r2, r2
 800632a:	701a      	strb	r2, [r3, #0]
 800632c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800632e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	627b      	str	r3, [r7, #36]	; 0x24
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	691b      	ldr	r3, [r3, #16]
 8006338:	623b      	str	r3, [r7, #32]
 800633a:	e00b      	b.n	8006354 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800633c:	6a3b      	ldr	r3, [r7, #32]
 800633e:	b2da      	uxtb	r2, r3
 8006340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006342:	1c59      	adds	r1, r3, #1
 8006344:	6279      	str	r1, [r7, #36]	; 0x24
 8006346:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800634a:	b2d2      	uxtb	r2, r2
 800634c:	701a      	strb	r2, [r3, #0]
 800634e:	6a3b      	ldr	r3, [r7, #32]
 8006350:	09db      	lsrs	r3, r3, #7
 8006352:	623b      	str	r3, [r7, #32]
 8006354:	6a3b      	ldr	r3, [r7, #32]
 8006356:	2b7f      	cmp	r3, #127	; 0x7f
 8006358:	d8f0      	bhi.n	800633c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800635a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635c:	1c5a      	adds	r2, r3, #1
 800635e:	627a      	str	r2, [r7, #36]	; 0x24
 8006360:	6a3a      	ldr	r2, [r7, #32]
 8006362:	b2d2      	uxtb	r2, r2
 8006364:	701a      	strb	r2, [r3, #0]
 8006366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006368:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	61fb      	str	r3, [r7, #28]
 800636e:	2300      	movs	r3, #0
 8006370:	61bb      	str	r3, [r7, #24]
 8006372:	e00b      	b.n	800638c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	b2da      	uxtb	r2, r3
 8006378:	69fb      	ldr	r3, [r7, #28]
 800637a:	1c59      	adds	r1, r3, #1
 800637c:	61f9      	str	r1, [r7, #28]
 800637e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006382:	b2d2      	uxtb	r2, r2
 8006384:	701a      	strb	r2, [r3, #0]
 8006386:	69bb      	ldr	r3, [r7, #24]
 8006388:	09db      	lsrs	r3, r3, #7
 800638a:	61bb      	str	r3, [r7, #24]
 800638c:	69bb      	ldr	r3, [r7, #24]
 800638e:	2b7f      	cmp	r3, #127	; 0x7f
 8006390:	d8f0      	bhi.n	8006374 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	1c5a      	adds	r2, r3, #1
 8006396:	61fa      	str	r2, [r7, #28]
 8006398:	69ba      	ldr	r2, [r7, #24]
 800639a:	b2d2      	uxtb	r2, r2
 800639c:	701a      	strb	r2, [r3, #0]
 800639e:	69fb      	ldr	r3, [r7, #28]
 80063a0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80063a2:	2215      	movs	r2, #21
 80063a4:	68f9      	ldr	r1, [r7, #12]
 80063a6:	6938      	ldr	r0, [r7, #16]
 80063a8:	f7fe ff1e 	bl	80051e8 <_SendPacket>
  RECORD_END();
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	f383 8811 	msr	BASEPRI, r3
}
 80063b2:	bf00      	nop
 80063b4:	3748      	adds	r7, #72	; 0x48
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop
 80063bc:	2001440c 	.word	0x2001440c
 80063c0:	200143dc 	.word	0x200143dc

080063c4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80063c4:	b580      	push	{r7, lr}
 80063c6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80063c8:	4b07      	ldr	r3, [pc, #28]	; (80063e8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80063ca:	6a1b      	ldr	r3, [r3, #32]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d008      	beq.n	80063e2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80063d0:	4b05      	ldr	r3, [pc, #20]	; (80063e8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80063d2:	6a1b      	ldr	r3, [r3, #32]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d003      	beq.n	80063e2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80063da:	4b03      	ldr	r3, [pc, #12]	; (80063e8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80063dc:	6a1b      	ldr	r3, [r3, #32]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	4798      	blx	r3
  }
}
 80063e2:	bf00      	nop
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	bf00      	nop
 80063e8:	200143dc 	.word	0x200143dc

080063ec <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b086      	sub	sp, #24
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80063f4:	f3ef 8311 	mrs	r3, BASEPRI
 80063f8:	f04f 0120 	mov.w	r1, #32
 80063fc:	f381 8811 	msr	BASEPRI, r1
 8006400:	617b      	str	r3, [r7, #20]
 8006402:	480b      	ldr	r0, [pc, #44]	; (8006430 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006404:	f7fe fe01 	bl	800500a <_PreparePacket>
 8006408:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800640a:	2280      	movs	r2, #128	; 0x80
 800640c:	6879      	ldr	r1, [r7, #4]
 800640e:	6938      	ldr	r0, [r7, #16]
 8006410:	f7fe fdae 	bl	8004f70 <_EncodeStr>
 8006414:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006416:	220e      	movs	r2, #14
 8006418:	68f9      	ldr	r1, [r7, #12]
 800641a:	6938      	ldr	r0, [r7, #16]
 800641c:	f7fe fee4 	bl	80051e8 <_SendPacket>
  RECORD_END();
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	f383 8811 	msr	BASEPRI, r3
}
 8006426:	bf00      	nop
 8006428:	3718      	adds	r7, #24
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}
 800642e:	bf00      	nop
 8006430:	2001440c 	.word	0x2001440c

08006434 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006434:	b590      	push	{r4, r7, lr}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800643a:	4b15      	ldr	r3, [pc, #84]	; (8006490 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800643c:	6a1b      	ldr	r3, [r3, #32]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d01a      	beq.n	8006478 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006442:	4b13      	ldr	r3, [pc, #76]	; (8006490 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006444:	6a1b      	ldr	r3, [r3, #32]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d015      	beq.n	8006478 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800644c:	4b10      	ldr	r3, [pc, #64]	; (8006490 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800644e:	6a1b      	ldr	r3, [r3, #32]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4798      	blx	r3
 8006454:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006458:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800645a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800645e:	f04f 0200 	mov.w	r2, #0
 8006462:	f04f 0300 	mov.w	r3, #0
 8006466:	000a      	movs	r2, r1
 8006468:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800646a:	4613      	mov	r3, r2
 800646c:	461a      	mov	r2, r3
 800646e:	4621      	mov	r1, r4
 8006470:	200d      	movs	r0, #13
 8006472:	f7ff fbe7 	bl	8005c44 <SEGGER_SYSVIEW_RecordU32x2>
 8006476:	e006      	b.n	8006486 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006478:	4b06      	ldr	r3, [pc, #24]	; (8006494 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4619      	mov	r1, r3
 800647e:	200c      	movs	r0, #12
 8006480:	f7ff fba4 	bl	8005bcc <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006484:	bf00      	nop
 8006486:	bf00      	nop
 8006488:	370c      	adds	r7, #12
 800648a:	46bd      	mov	sp, r7
 800648c:	bd90      	pop	{r4, r7, pc}
 800648e:	bf00      	nop
 8006490:	200143dc 	.word	0x200143dc
 8006494:	e0001004 	.word	0xe0001004

08006498 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006498:	b580      	push	{r7, lr}
 800649a:	b086      	sub	sp, #24
 800649c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800649e:	f3ef 8311 	mrs	r3, BASEPRI
 80064a2:	f04f 0120 	mov.w	r1, #32
 80064a6:	f381 8811 	msr	BASEPRI, r1
 80064aa:	60fb      	str	r3, [r7, #12]
 80064ac:	4819      	ldr	r0, [pc, #100]	; (8006514 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80064ae:	f7fe fdac 	bl	800500a <_PreparePacket>
 80064b2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80064b8:	4b17      	ldr	r3, [pc, #92]	; (8006518 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064c0:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	617b      	str	r3, [r7, #20]
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	613b      	str	r3, [r7, #16]
 80064ca:	e00b      	b.n	80064e4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	b2da      	uxtb	r2, r3
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	1c59      	adds	r1, r3, #1
 80064d4:	6179      	str	r1, [r7, #20]
 80064d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064da:	b2d2      	uxtb	r2, r2
 80064dc:	701a      	strb	r2, [r3, #0]
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	09db      	lsrs	r3, r3, #7
 80064e2:	613b      	str	r3, [r7, #16]
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	2b7f      	cmp	r3, #127	; 0x7f
 80064e8:	d8f0      	bhi.n	80064cc <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	1c5a      	adds	r2, r3, #1
 80064ee:	617a      	str	r2, [r7, #20]
 80064f0:	693a      	ldr	r2, [r7, #16]
 80064f2:	b2d2      	uxtb	r2, r2
 80064f4:	701a      	strb	r2, [r3, #0]
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80064fa:	2202      	movs	r2, #2
 80064fc:	6879      	ldr	r1, [r7, #4]
 80064fe:	68b8      	ldr	r0, [r7, #8]
 8006500:	f7fe fe72 	bl	80051e8 <_SendPacket>
  RECORD_END();
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f383 8811 	msr	BASEPRI, r3
}
 800650a:	bf00      	nop
 800650c:	3718      	adds	r7, #24
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	bf00      	nop
 8006514:	2001440c 	.word	0x2001440c
 8006518:	e000ed04 	.word	0xe000ed04

0800651c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800651c:	b580      	push	{r7, lr}
 800651e:	b082      	sub	sp, #8
 8006520:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006522:	f3ef 8311 	mrs	r3, BASEPRI
 8006526:	f04f 0120 	mov.w	r1, #32
 800652a:	f381 8811 	msr	BASEPRI, r1
 800652e:	607b      	str	r3, [r7, #4]
 8006530:	4807      	ldr	r0, [pc, #28]	; (8006550 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006532:	f7fe fd6a 	bl	800500a <_PreparePacket>
 8006536:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006538:	2203      	movs	r2, #3
 800653a:	6839      	ldr	r1, [r7, #0]
 800653c:	6838      	ldr	r0, [r7, #0]
 800653e:	f7fe fe53 	bl	80051e8 <_SendPacket>
  RECORD_END();
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f383 8811 	msr	BASEPRI, r3
}
 8006548:	bf00      	nop
 800654a:	3708      	adds	r7, #8
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}
 8006550:	2001440c 	.word	0x2001440c

08006554 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006554:	b580      	push	{r7, lr}
 8006556:	b082      	sub	sp, #8
 8006558:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800655a:	f3ef 8311 	mrs	r3, BASEPRI
 800655e:	f04f 0120 	mov.w	r1, #32
 8006562:	f381 8811 	msr	BASEPRI, r1
 8006566:	607b      	str	r3, [r7, #4]
 8006568:	4807      	ldr	r0, [pc, #28]	; (8006588 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800656a:	f7fe fd4e 	bl	800500a <_PreparePacket>
 800656e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006570:	2212      	movs	r2, #18
 8006572:	6839      	ldr	r1, [r7, #0]
 8006574:	6838      	ldr	r0, [r7, #0]
 8006576:	f7fe fe37 	bl	80051e8 <_SendPacket>
  RECORD_END();
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f383 8811 	msr	BASEPRI, r3
}
 8006580:	bf00      	nop
 8006582:	3708      	adds	r7, #8
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}
 8006588:	2001440c 	.word	0x2001440c

0800658c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800658c:	b580      	push	{r7, lr}
 800658e:	b082      	sub	sp, #8
 8006590:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006592:	f3ef 8311 	mrs	r3, BASEPRI
 8006596:	f04f 0120 	mov.w	r1, #32
 800659a:	f381 8811 	msr	BASEPRI, r1
 800659e:	607b      	str	r3, [r7, #4]
 80065a0:	4807      	ldr	r0, [pc, #28]	; (80065c0 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80065a2:	f7fe fd32 	bl	800500a <_PreparePacket>
 80065a6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80065a8:	2211      	movs	r2, #17
 80065aa:	6839      	ldr	r1, [r7, #0]
 80065ac:	6838      	ldr	r0, [r7, #0]
 80065ae:	f7fe fe1b 	bl	80051e8 <_SendPacket>
  RECORD_END();
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f383 8811 	msr	BASEPRI, r3
}
 80065b8:	bf00      	nop
 80065ba:	3708      	adds	r7, #8
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}
 80065c0:	2001440c 	.word	0x2001440c

080065c4 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b088      	sub	sp, #32
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80065cc:	f3ef 8311 	mrs	r3, BASEPRI
 80065d0:	f04f 0120 	mov.w	r1, #32
 80065d4:	f381 8811 	msr	BASEPRI, r1
 80065d8:	617b      	str	r3, [r7, #20]
 80065da:	4819      	ldr	r0, [pc, #100]	; (8006640 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80065dc:	f7fe fd15 	bl	800500a <_PreparePacket>
 80065e0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80065e6:	4b17      	ldr	r3, [pc, #92]	; (8006644 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80065e8:	691b      	ldr	r3, [r3, #16]
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	1ad3      	subs	r3, r2, r3
 80065ee:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	61fb      	str	r3, [r7, #28]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	61bb      	str	r3, [r7, #24]
 80065f8:	e00b      	b.n	8006612 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	b2da      	uxtb	r2, r3
 80065fe:	69fb      	ldr	r3, [r7, #28]
 8006600:	1c59      	adds	r1, r3, #1
 8006602:	61f9      	str	r1, [r7, #28]
 8006604:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006608:	b2d2      	uxtb	r2, r2
 800660a:	701a      	strb	r2, [r3, #0]
 800660c:	69bb      	ldr	r3, [r7, #24]
 800660e:	09db      	lsrs	r3, r3, #7
 8006610:	61bb      	str	r3, [r7, #24]
 8006612:	69bb      	ldr	r3, [r7, #24]
 8006614:	2b7f      	cmp	r3, #127	; 0x7f
 8006616:	d8f0      	bhi.n	80065fa <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006618:	69fb      	ldr	r3, [r7, #28]
 800661a:	1c5a      	adds	r2, r3, #1
 800661c:	61fa      	str	r2, [r7, #28]
 800661e:	69ba      	ldr	r2, [r7, #24]
 8006620:	b2d2      	uxtb	r2, r2
 8006622:	701a      	strb	r2, [r3, #0]
 8006624:	69fb      	ldr	r3, [r7, #28]
 8006626:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006628:	2208      	movs	r2, #8
 800662a:	68f9      	ldr	r1, [r7, #12]
 800662c:	6938      	ldr	r0, [r7, #16]
 800662e:	f7fe fddb 	bl	80051e8 <_SendPacket>
  RECORD_END();
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	f383 8811 	msr	BASEPRI, r3
}
 8006638:	bf00      	nop
 800663a:	3720      	adds	r7, #32
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}
 8006640:	2001440c 	.word	0x2001440c
 8006644:	200143dc 	.word	0x200143dc

08006648 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006648:	b580      	push	{r7, lr}
 800664a:	b088      	sub	sp, #32
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006650:	f3ef 8311 	mrs	r3, BASEPRI
 8006654:	f04f 0120 	mov.w	r1, #32
 8006658:	f381 8811 	msr	BASEPRI, r1
 800665c:	617b      	str	r3, [r7, #20]
 800665e:	4819      	ldr	r0, [pc, #100]	; (80066c4 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006660:	f7fe fcd3 	bl	800500a <_PreparePacket>
 8006664:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800666a:	4b17      	ldr	r3, [pc, #92]	; (80066c8 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	1ad3      	subs	r3, r2, r3
 8006672:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	61fb      	str	r3, [r7, #28]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	61bb      	str	r3, [r7, #24]
 800667c:	e00b      	b.n	8006696 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800667e:	69bb      	ldr	r3, [r7, #24]
 8006680:	b2da      	uxtb	r2, r3
 8006682:	69fb      	ldr	r3, [r7, #28]
 8006684:	1c59      	adds	r1, r3, #1
 8006686:	61f9      	str	r1, [r7, #28]
 8006688:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800668c:	b2d2      	uxtb	r2, r2
 800668e:	701a      	strb	r2, [r3, #0]
 8006690:	69bb      	ldr	r3, [r7, #24]
 8006692:	09db      	lsrs	r3, r3, #7
 8006694:	61bb      	str	r3, [r7, #24]
 8006696:	69bb      	ldr	r3, [r7, #24]
 8006698:	2b7f      	cmp	r3, #127	; 0x7f
 800669a:	d8f0      	bhi.n	800667e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800669c:	69fb      	ldr	r3, [r7, #28]
 800669e:	1c5a      	adds	r2, r3, #1
 80066a0:	61fa      	str	r2, [r7, #28]
 80066a2:	69ba      	ldr	r2, [r7, #24]
 80066a4:	b2d2      	uxtb	r2, r2
 80066a6:	701a      	strb	r2, [r3, #0]
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80066ac:	2204      	movs	r2, #4
 80066ae:	68f9      	ldr	r1, [r7, #12]
 80066b0:	6938      	ldr	r0, [r7, #16]
 80066b2:	f7fe fd99 	bl	80051e8 <_SendPacket>
  RECORD_END();
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	f383 8811 	msr	BASEPRI, r3
}
 80066bc:	bf00      	nop
 80066be:	3720      	adds	r7, #32
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}
 80066c4:	2001440c 	.word	0x2001440c
 80066c8:	200143dc 	.word	0x200143dc

080066cc <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b088      	sub	sp, #32
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80066d4:	f3ef 8311 	mrs	r3, BASEPRI
 80066d8:	f04f 0120 	mov.w	r1, #32
 80066dc:	f381 8811 	msr	BASEPRI, r1
 80066e0:	617b      	str	r3, [r7, #20]
 80066e2:	4819      	ldr	r0, [pc, #100]	; (8006748 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80066e4:	f7fe fc91 	bl	800500a <_PreparePacket>
 80066e8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80066ee:	4b17      	ldr	r3, [pc, #92]	; (800674c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80066f0:	691b      	ldr	r3, [r3, #16]
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	1ad3      	subs	r3, r2, r3
 80066f6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	61fb      	str	r3, [r7, #28]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	61bb      	str	r3, [r7, #24]
 8006700:	e00b      	b.n	800671a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	b2da      	uxtb	r2, r3
 8006706:	69fb      	ldr	r3, [r7, #28]
 8006708:	1c59      	adds	r1, r3, #1
 800670a:	61f9      	str	r1, [r7, #28]
 800670c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006710:	b2d2      	uxtb	r2, r2
 8006712:	701a      	strb	r2, [r3, #0]
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	09db      	lsrs	r3, r3, #7
 8006718:	61bb      	str	r3, [r7, #24]
 800671a:	69bb      	ldr	r3, [r7, #24]
 800671c:	2b7f      	cmp	r3, #127	; 0x7f
 800671e:	d8f0      	bhi.n	8006702 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006720:	69fb      	ldr	r3, [r7, #28]
 8006722:	1c5a      	adds	r2, r3, #1
 8006724:	61fa      	str	r2, [r7, #28]
 8006726:	69ba      	ldr	r2, [r7, #24]
 8006728:	b2d2      	uxtb	r2, r2
 800672a:	701a      	strb	r2, [r3, #0]
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006730:	2206      	movs	r2, #6
 8006732:	68f9      	ldr	r1, [r7, #12]
 8006734:	6938      	ldr	r0, [r7, #16]
 8006736:	f7fe fd57 	bl	80051e8 <_SendPacket>
  RECORD_END();
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	f383 8811 	msr	BASEPRI, r3
}
 8006740:	bf00      	nop
 8006742:	3720      	adds	r7, #32
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}
 8006748:	2001440c 	.word	0x2001440c
 800674c:	200143dc 	.word	0x200143dc

08006750 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006750:	b580      	push	{r7, lr}
 8006752:	b08a      	sub	sp, #40	; 0x28
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800675a:	f3ef 8311 	mrs	r3, BASEPRI
 800675e:	f04f 0120 	mov.w	r1, #32
 8006762:	f381 8811 	msr	BASEPRI, r1
 8006766:	617b      	str	r3, [r7, #20]
 8006768:	4827      	ldr	r0, [pc, #156]	; (8006808 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800676a:	f7fe fc4e 	bl	800500a <_PreparePacket>
 800676e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006774:	4b25      	ldr	r3, [pc, #148]	; (800680c <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	1ad3      	subs	r3, r2, r3
 800677c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	627b      	str	r3, [r7, #36]	; 0x24
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	623b      	str	r3, [r7, #32]
 8006786:	e00b      	b.n	80067a0 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006788:	6a3b      	ldr	r3, [r7, #32]
 800678a:	b2da      	uxtb	r2, r3
 800678c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678e:	1c59      	adds	r1, r3, #1
 8006790:	6279      	str	r1, [r7, #36]	; 0x24
 8006792:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006796:	b2d2      	uxtb	r2, r2
 8006798:	701a      	strb	r2, [r3, #0]
 800679a:	6a3b      	ldr	r3, [r7, #32]
 800679c:	09db      	lsrs	r3, r3, #7
 800679e:	623b      	str	r3, [r7, #32]
 80067a0:	6a3b      	ldr	r3, [r7, #32]
 80067a2:	2b7f      	cmp	r3, #127	; 0x7f
 80067a4:	d8f0      	bhi.n	8006788 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80067a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a8:	1c5a      	adds	r2, r3, #1
 80067aa:	627a      	str	r2, [r7, #36]	; 0x24
 80067ac:	6a3a      	ldr	r2, [r7, #32]
 80067ae:	b2d2      	uxtb	r2, r2
 80067b0:	701a      	strb	r2, [r3, #0]
 80067b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	61fb      	str	r3, [r7, #28]
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	61bb      	str	r3, [r7, #24]
 80067be:	e00b      	b.n	80067d8 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80067c0:	69bb      	ldr	r3, [r7, #24]
 80067c2:	b2da      	uxtb	r2, r3
 80067c4:	69fb      	ldr	r3, [r7, #28]
 80067c6:	1c59      	adds	r1, r3, #1
 80067c8:	61f9      	str	r1, [r7, #28]
 80067ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067ce:	b2d2      	uxtb	r2, r2
 80067d0:	701a      	strb	r2, [r3, #0]
 80067d2:	69bb      	ldr	r3, [r7, #24]
 80067d4:	09db      	lsrs	r3, r3, #7
 80067d6:	61bb      	str	r3, [r7, #24]
 80067d8:	69bb      	ldr	r3, [r7, #24]
 80067da:	2b7f      	cmp	r3, #127	; 0x7f
 80067dc:	d8f0      	bhi.n	80067c0 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80067de:	69fb      	ldr	r3, [r7, #28]
 80067e0:	1c5a      	adds	r2, r3, #1
 80067e2:	61fa      	str	r2, [r7, #28]
 80067e4:	69ba      	ldr	r2, [r7, #24]
 80067e6:	b2d2      	uxtb	r2, r2
 80067e8:	701a      	strb	r2, [r3, #0]
 80067ea:	69fb      	ldr	r3, [r7, #28]
 80067ec:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80067ee:	2207      	movs	r2, #7
 80067f0:	68f9      	ldr	r1, [r7, #12]
 80067f2:	6938      	ldr	r0, [r7, #16]
 80067f4:	f7fe fcf8 	bl	80051e8 <_SendPacket>
  RECORD_END();
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	f383 8811 	msr	BASEPRI, r3
}
 80067fe:	bf00      	nop
 8006800:	3728      	adds	r7, #40	; 0x28
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	2001440c 	.word	0x2001440c
 800680c:	200143dc 	.word	0x200143dc

08006810 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006818:	4b04      	ldr	r3, [pc, #16]	; (800682c <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800681a:	691b      	ldr	r3, [r3, #16]
 800681c:	687a      	ldr	r2, [r7, #4]
 800681e:	1ad3      	subs	r3, r2, r3
}
 8006820:	4618      	mov	r0, r3
 8006822:	370c      	adds	r7, #12
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr
 800682c:	200143dc 	.word	0x200143dc

08006830 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006830:	b580      	push	{r7, lr}
 8006832:	b08c      	sub	sp, #48	; 0x30
 8006834:	af00      	add	r7, sp, #0
 8006836:	4603      	mov	r3, r0
 8006838:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800683a:	4b3b      	ldr	r3, [pc, #236]	; (8006928 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d06d      	beq.n	800691e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006842:	4b39      	ldr	r3, [pc, #228]	; (8006928 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006848:	2300      	movs	r3, #0
 800684a:	62bb      	str	r3, [r7, #40]	; 0x28
 800684c:	e008      	b.n	8006860 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800684e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006850:	691b      	ldr	r3, [r3, #16]
 8006852:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006856:	2b00      	cmp	r3, #0
 8006858:	d007      	beq.n	800686a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800685a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800685c:	3301      	adds	r3, #1
 800685e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006860:	79fb      	ldrb	r3, [r7, #7]
 8006862:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006864:	429a      	cmp	r2, r3
 8006866:	d3f2      	bcc.n	800684e <SEGGER_SYSVIEW_SendModule+0x1e>
 8006868:	e000      	b.n	800686c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800686a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800686c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800686e:	2b00      	cmp	r3, #0
 8006870:	d055      	beq.n	800691e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006872:	f3ef 8311 	mrs	r3, BASEPRI
 8006876:	f04f 0120 	mov.w	r1, #32
 800687a:	f381 8811 	msr	BASEPRI, r1
 800687e:	617b      	str	r3, [r7, #20]
 8006880:	482a      	ldr	r0, [pc, #168]	; (800692c <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006882:	f7fe fbc2 	bl	800500a <_PreparePacket>
 8006886:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	627b      	str	r3, [r7, #36]	; 0x24
 8006890:	79fb      	ldrb	r3, [r7, #7]
 8006892:	623b      	str	r3, [r7, #32]
 8006894:	e00b      	b.n	80068ae <SEGGER_SYSVIEW_SendModule+0x7e>
 8006896:	6a3b      	ldr	r3, [r7, #32]
 8006898:	b2da      	uxtb	r2, r3
 800689a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689c:	1c59      	adds	r1, r3, #1
 800689e:	6279      	str	r1, [r7, #36]	; 0x24
 80068a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068a4:	b2d2      	uxtb	r2, r2
 80068a6:	701a      	strb	r2, [r3, #0]
 80068a8:	6a3b      	ldr	r3, [r7, #32]
 80068aa:	09db      	lsrs	r3, r3, #7
 80068ac:	623b      	str	r3, [r7, #32]
 80068ae:	6a3b      	ldr	r3, [r7, #32]
 80068b0:	2b7f      	cmp	r3, #127	; 0x7f
 80068b2:	d8f0      	bhi.n	8006896 <SEGGER_SYSVIEW_SendModule+0x66>
 80068b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b6:	1c5a      	adds	r2, r3, #1
 80068b8:	627a      	str	r2, [r7, #36]	; 0x24
 80068ba:	6a3a      	ldr	r2, [r7, #32]
 80068bc:	b2d2      	uxtb	r2, r2
 80068be:	701a      	strb	r2, [r3, #0]
 80068c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	61fb      	str	r3, [r7, #28]
 80068c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	61bb      	str	r3, [r7, #24]
 80068ce:	e00b      	b.n	80068e8 <SEGGER_SYSVIEW_SendModule+0xb8>
 80068d0:	69bb      	ldr	r3, [r7, #24]
 80068d2:	b2da      	uxtb	r2, r3
 80068d4:	69fb      	ldr	r3, [r7, #28]
 80068d6:	1c59      	adds	r1, r3, #1
 80068d8:	61f9      	str	r1, [r7, #28]
 80068da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068de:	b2d2      	uxtb	r2, r2
 80068e0:	701a      	strb	r2, [r3, #0]
 80068e2:	69bb      	ldr	r3, [r7, #24]
 80068e4:	09db      	lsrs	r3, r3, #7
 80068e6:	61bb      	str	r3, [r7, #24]
 80068e8:	69bb      	ldr	r3, [r7, #24]
 80068ea:	2b7f      	cmp	r3, #127	; 0x7f
 80068ec:	d8f0      	bhi.n	80068d0 <SEGGER_SYSVIEW_SendModule+0xa0>
 80068ee:	69fb      	ldr	r3, [r7, #28]
 80068f0:	1c5a      	adds	r2, r3, #1
 80068f2:	61fa      	str	r2, [r7, #28]
 80068f4:	69ba      	ldr	r2, [r7, #24]
 80068f6:	b2d2      	uxtb	r2, r2
 80068f8:	701a      	strb	r2, [r3, #0]
 80068fa:	69fb      	ldr	r3, [r7, #28]
 80068fc:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80068fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	2280      	movs	r2, #128	; 0x80
 8006904:	4619      	mov	r1, r3
 8006906:	68f8      	ldr	r0, [r7, #12]
 8006908:	f7fe fb32 	bl	8004f70 <_EncodeStr>
 800690c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800690e:	2216      	movs	r2, #22
 8006910:	68f9      	ldr	r1, [r7, #12]
 8006912:	6938      	ldr	r0, [r7, #16]
 8006914:	f7fe fc68 	bl	80051e8 <_SendPacket>
      RECORD_END();
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800691e:	bf00      	nop
 8006920:	3730      	adds	r7, #48	; 0x30
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}
 8006926:	bf00      	nop
 8006928:	20014404 	.word	0x20014404
 800692c:	2001440c 	.word	0x2001440c

08006930 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006936:	4b0c      	ldr	r3, [pc, #48]	; (8006968 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00f      	beq.n	800695e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800693e:	4b0a      	ldr	r3, [pc, #40]	; (8006968 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d002      	beq.n	8006952 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	68db      	ldr	r3, [r3, #12]
 8006950:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d1f2      	bne.n	8006944 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800695e:	bf00      	nop
 8006960:	3708      	adds	r7, #8
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
 8006966:	bf00      	nop
 8006968:	20014404 	.word	0x20014404

0800696c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800696c:	b580      	push	{r7, lr}
 800696e:	b086      	sub	sp, #24
 8006970:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006972:	f3ef 8311 	mrs	r3, BASEPRI
 8006976:	f04f 0120 	mov.w	r1, #32
 800697a:	f381 8811 	msr	BASEPRI, r1
 800697e:	60fb      	str	r3, [r7, #12]
 8006980:	4817      	ldr	r0, [pc, #92]	; (80069e0 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006982:	f7fe fb42 	bl	800500a <_PreparePacket>
 8006986:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	617b      	str	r3, [r7, #20]
 8006990:	4b14      	ldr	r3, [pc, #80]	; (80069e4 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	613b      	str	r3, [r7, #16]
 8006996:	e00b      	b.n	80069b0 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	b2da      	uxtb	r2, r3
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	1c59      	adds	r1, r3, #1
 80069a0:	6179      	str	r1, [r7, #20]
 80069a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069a6:	b2d2      	uxtb	r2, r2
 80069a8:	701a      	strb	r2, [r3, #0]
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	09db      	lsrs	r3, r3, #7
 80069ae:	613b      	str	r3, [r7, #16]
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	2b7f      	cmp	r3, #127	; 0x7f
 80069b4:	d8f0      	bhi.n	8006998 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	1c5a      	adds	r2, r3, #1
 80069ba:	617a      	str	r2, [r7, #20]
 80069bc:	693a      	ldr	r2, [r7, #16]
 80069be:	b2d2      	uxtb	r2, r2
 80069c0:	701a      	strb	r2, [r3, #0]
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80069c6:	221b      	movs	r2, #27
 80069c8:	6879      	ldr	r1, [r7, #4]
 80069ca:	68b8      	ldr	r0, [r7, #8]
 80069cc:	f7fe fc0c 	bl	80051e8 <_SendPacket>
  RECORD_END();
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f383 8811 	msr	BASEPRI, r3
}
 80069d6:	bf00      	nop
 80069d8:	3718      	adds	r7, #24
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
 80069de:	bf00      	nop
 80069e0:	2001440c 	.word	0x2001440c
 80069e4:	20014408 	.word	0x20014408

080069e8 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 80069e8:	b40f      	push	{r0, r1, r2, r3}
 80069ea:	b580      	push	{r7, lr}
 80069ec:	b082      	sub	sp, #8
 80069ee:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 80069f0:	f107 0314 	add.w	r3, r7, #20
 80069f4:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80069f6:	1d3b      	adds	r3, r7, #4
 80069f8:	461a      	mov	r2, r3
 80069fa:	2100      	movs	r1, #0
 80069fc:	6938      	ldr	r0, [r7, #16]
 80069fe:	f7fe fe7b 	bl	80056f8 <_VPrintTarget>
  va_end(ParamList);
}
 8006a02:	bf00      	nop
 8006a04:	3708      	adds	r7, #8
 8006a06:	46bd      	mov	sp, r7
 8006a08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a0c:	b004      	add	sp, #16
 8006a0e:	4770      	bx	lr

08006a10 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b08a      	sub	sp, #40	; 0x28
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006a18:	f3ef 8311 	mrs	r3, BASEPRI
 8006a1c:	f04f 0120 	mov.w	r1, #32
 8006a20:	f381 8811 	msr	BASEPRI, r1
 8006a24:	617b      	str	r3, [r7, #20]
 8006a26:	4827      	ldr	r0, [pc, #156]	; (8006ac4 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006a28:	f7fe faef 	bl	800500a <_PreparePacket>
 8006a2c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006a2e:	2280      	movs	r2, #128	; 0x80
 8006a30:	6879      	ldr	r1, [r7, #4]
 8006a32:	6938      	ldr	r0, [r7, #16]
 8006a34:	f7fe fa9c 	bl	8004f70 <_EncodeStr>
 8006a38:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a3e:	2301      	movs	r3, #1
 8006a40:	623b      	str	r3, [r7, #32]
 8006a42:	e00b      	b.n	8006a5c <SEGGER_SYSVIEW_Warn+0x4c>
 8006a44:	6a3b      	ldr	r3, [r7, #32]
 8006a46:	b2da      	uxtb	r2, r3
 8006a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4a:	1c59      	adds	r1, r3, #1
 8006a4c:	6279      	str	r1, [r7, #36]	; 0x24
 8006a4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a52:	b2d2      	uxtb	r2, r2
 8006a54:	701a      	strb	r2, [r3, #0]
 8006a56:	6a3b      	ldr	r3, [r7, #32]
 8006a58:	09db      	lsrs	r3, r3, #7
 8006a5a:	623b      	str	r3, [r7, #32]
 8006a5c:	6a3b      	ldr	r3, [r7, #32]
 8006a5e:	2b7f      	cmp	r3, #127	; 0x7f
 8006a60:	d8f0      	bhi.n	8006a44 <SEGGER_SYSVIEW_Warn+0x34>
 8006a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a64:	1c5a      	adds	r2, r3, #1
 8006a66:	627a      	str	r2, [r7, #36]	; 0x24
 8006a68:	6a3a      	ldr	r2, [r7, #32]
 8006a6a:	b2d2      	uxtb	r2, r2
 8006a6c:	701a      	strb	r2, [r3, #0]
 8006a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a70:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	61fb      	str	r3, [r7, #28]
 8006a76:	2300      	movs	r3, #0
 8006a78:	61bb      	str	r3, [r7, #24]
 8006a7a:	e00b      	b.n	8006a94 <SEGGER_SYSVIEW_Warn+0x84>
 8006a7c:	69bb      	ldr	r3, [r7, #24]
 8006a7e:	b2da      	uxtb	r2, r3
 8006a80:	69fb      	ldr	r3, [r7, #28]
 8006a82:	1c59      	adds	r1, r3, #1
 8006a84:	61f9      	str	r1, [r7, #28]
 8006a86:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a8a:	b2d2      	uxtb	r2, r2
 8006a8c:	701a      	strb	r2, [r3, #0]
 8006a8e:	69bb      	ldr	r3, [r7, #24]
 8006a90:	09db      	lsrs	r3, r3, #7
 8006a92:	61bb      	str	r3, [r7, #24]
 8006a94:	69bb      	ldr	r3, [r7, #24]
 8006a96:	2b7f      	cmp	r3, #127	; 0x7f
 8006a98:	d8f0      	bhi.n	8006a7c <SEGGER_SYSVIEW_Warn+0x6c>
 8006a9a:	69fb      	ldr	r3, [r7, #28]
 8006a9c:	1c5a      	adds	r2, r3, #1
 8006a9e:	61fa      	str	r2, [r7, #28]
 8006aa0:	69ba      	ldr	r2, [r7, #24]
 8006aa2:	b2d2      	uxtb	r2, r2
 8006aa4:	701a      	strb	r2, [r3, #0]
 8006aa6:	69fb      	ldr	r3, [r7, #28]
 8006aa8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006aaa:	221a      	movs	r2, #26
 8006aac:	68f9      	ldr	r1, [r7, #12]
 8006aae:	6938      	ldr	r0, [r7, #16]
 8006ab0:	f7fe fb9a 	bl	80051e8 <_SendPacket>
  RECORD_END();
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	f383 8811 	msr	BASEPRI, r3
}
 8006aba:	bf00      	nop
 8006abc:	3728      	adds	r7, #40	; 0x28
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}
 8006ac2:	bf00      	nop
 8006ac4:	2001440c 	.word	0x2001440c

08006ac8 <sniprintf>:
 8006ac8:	b40c      	push	{r2, r3}
 8006aca:	b530      	push	{r4, r5, lr}
 8006acc:	4b17      	ldr	r3, [pc, #92]	; (8006b2c <sniprintf+0x64>)
 8006ace:	1e0c      	subs	r4, r1, #0
 8006ad0:	681d      	ldr	r5, [r3, #0]
 8006ad2:	b09d      	sub	sp, #116	; 0x74
 8006ad4:	da08      	bge.n	8006ae8 <sniprintf+0x20>
 8006ad6:	238b      	movs	r3, #139	; 0x8b
 8006ad8:	602b      	str	r3, [r5, #0]
 8006ada:	f04f 30ff 	mov.w	r0, #4294967295
 8006ade:	b01d      	add	sp, #116	; 0x74
 8006ae0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ae4:	b002      	add	sp, #8
 8006ae6:	4770      	bx	lr
 8006ae8:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006aec:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006af0:	bf14      	ite	ne
 8006af2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006af6:	4623      	moveq	r3, r4
 8006af8:	9304      	str	r3, [sp, #16]
 8006afa:	9307      	str	r3, [sp, #28]
 8006afc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006b00:	9002      	str	r0, [sp, #8]
 8006b02:	9006      	str	r0, [sp, #24]
 8006b04:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006b08:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006b0a:	ab21      	add	r3, sp, #132	; 0x84
 8006b0c:	a902      	add	r1, sp, #8
 8006b0e:	4628      	mov	r0, r5
 8006b10:	9301      	str	r3, [sp, #4]
 8006b12:	f000 f9ab 	bl	8006e6c <_svfiprintf_r>
 8006b16:	1c43      	adds	r3, r0, #1
 8006b18:	bfbc      	itt	lt
 8006b1a:	238b      	movlt	r3, #139	; 0x8b
 8006b1c:	602b      	strlt	r3, [r5, #0]
 8006b1e:	2c00      	cmp	r4, #0
 8006b20:	d0dd      	beq.n	8006ade <sniprintf+0x16>
 8006b22:	9b02      	ldr	r3, [sp, #8]
 8006b24:	2200      	movs	r2, #0
 8006b26:	701a      	strb	r2, [r3, #0]
 8006b28:	e7d9      	b.n	8006ade <sniprintf+0x16>
 8006b2a:	bf00      	nop
 8006b2c:	20000060 	.word	0x20000060

08006b30 <memcmp>:
 8006b30:	b510      	push	{r4, lr}
 8006b32:	3901      	subs	r1, #1
 8006b34:	4402      	add	r2, r0
 8006b36:	4290      	cmp	r0, r2
 8006b38:	d101      	bne.n	8006b3e <memcmp+0xe>
 8006b3a:	2000      	movs	r0, #0
 8006b3c:	e005      	b.n	8006b4a <memcmp+0x1a>
 8006b3e:	7803      	ldrb	r3, [r0, #0]
 8006b40:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006b44:	42a3      	cmp	r3, r4
 8006b46:	d001      	beq.n	8006b4c <memcmp+0x1c>
 8006b48:	1b18      	subs	r0, r3, r4
 8006b4a:	bd10      	pop	{r4, pc}
 8006b4c:	3001      	adds	r0, #1
 8006b4e:	e7f2      	b.n	8006b36 <memcmp+0x6>

08006b50 <memset>:
 8006b50:	4402      	add	r2, r0
 8006b52:	4603      	mov	r3, r0
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d100      	bne.n	8006b5a <memset+0xa>
 8006b58:	4770      	bx	lr
 8006b5a:	f803 1b01 	strb.w	r1, [r3], #1
 8006b5e:	e7f9      	b.n	8006b54 <memset+0x4>

08006b60 <__libc_init_array>:
 8006b60:	b570      	push	{r4, r5, r6, lr}
 8006b62:	4d0d      	ldr	r5, [pc, #52]	; (8006b98 <__libc_init_array+0x38>)
 8006b64:	4c0d      	ldr	r4, [pc, #52]	; (8006b9c <__libc_init_array+0x3c>)
 8006b66:	1b64      	subs	r4, r4, r5
 8006b68:	10a4      	asrs	r4, r4, #2
 8006b6a:	2600      	movs	r6, #0
 8006b6c:	42a6      	cmp	r6, r4
 8006b6e:	d109      	bne.n	8006b84 <__libc_init_array+0x24>
 8006b70:	4d0b      	ldr	r5, [pc, #44]	; (8006ba0 <__libc_init_array+0x40>)
 8006b72:	4c0c      	ldr	r4, [pc, #48]	; (8006ba4 <__libc_init_array+0x44>)
 8006b74:	f000 fc78 	bl	8007468 <_init>
 8006b78:	1b64      	subs	r4, r4, r5
 8006b7a:	10a4      	asrs	r4, r4, #2
 8006b7c:	2600      	movs	r6, #0
 8006b7e:	42a6      	cmp	r6, r4
 8006b80:	d105      	bne.n	8006b8e <__libc_init_array+0x2e>
 8006b82:	bd70      	pop	{r4, r5, r6, pc}
 8006b84:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b88:	4798      	blx	r3
 8006b8a:	3601      	adds	r6, #1
 8006b8c:	e7ee      	b.n	8006b6c <__libc_init_array+0xc>
 8006b8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b92:	4798      	blx	r3
 8006b94:	3601      	adds	r6, #1
 8006b96:	e7f2      	b.n	8006b7e <__libc_init_array+0x1e>
 8006b98:	08007620 	.word	0x08007620
 8006b9c:	08007620 	.word	0x08007620
 8006ba0:	08007620 	.word	0x08007620
 8006ba4:	08007624 	.word	0x08007624

08006ba8 <__retarget_lock_acquire_recursive>:
 8006ba8:	4770      	bx	lr

08006baa <__retarget_lock_release_recursive>:
 8006baa:	4770      	bx	lr

08006bac <memcpy>:
 8006bac:	440a      	add	r2, r1
 8006bae:	4291      	cmp	r1, r2
 8006bb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8006bb4:	d100      	bne.n	8006bb8 <memcpy+0xc>
 8006bb6:	4770      	bx	lr
 8006bb8:	b510      	push	{r4, lr}
 8006bba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006bc2:	4291      	cmp	r1, r2
 8006bc4:	d1f9      	bne.n	8006bba <memcpy+0xe>
 8006bc6:	bd10      	pop	{r4, pc}

08006bc8 <_free_r>:
 8006bc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006bca:	2900      	cmp	r1, #0
 8006bcc:	d044      	beq.n	8006c58 <_free_r+0x90>
 8006bce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bd2:	9001      	str	r0, [sp, #4]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	f1a1 0404 	sub.w	r4, r1, #4
 8006bda:	bfb8      	it	lt
 8006bdc:	18e4      	addlt	r4, r4, r3
 8006bde:	f000 f8df 	bl	8006da0 <__malloc_lock>
 8006be2:	4a1e      	ldr	r2, [pc, #120]	; (8006c5c <_free_r+0x94>)
 8006be4:	9801      	ldr	r0, [sp, #4]
 8006be6:	6813      	ldr	r3, [r2, #0]
 8006be8:	b933      	cbnz	r3, 8006bf8 <_free_r+0x30>
 8006bea:	6063      	str	r3, [r4, #4]
 8006bec:	6014      	str	r4, [r2, #0]
 8006bee:	b003      	add	sp, #12
 8006bf0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006bf4:	f000 b8da 	b.w	8006dac <__malloc_unlock>
 8006bf8:	42a3      	cmp	r3, r4
 8006bfa:	d908      	bls.n	8006c0e <_free_r+0x46>
 8006bfc:	6825      	ldr	r5, [r4, #0]
 8006bfe:	1961      	adds	r1, r4, r5
 8006c00:	428b      	cmp	r3, r1
 8006c02:	bf01      	itttt	eq
 8006c04:	6819      	ldreq	r1, [r3, #0]
 8006c06:	685b      	ldreq	r3, [r3, #4]
 8006c08:	1949      	addeq	r1, r1, r5
 8006c0a:	6021      	streq	r1, [r4, #0]
 8006c0c:	e7ed      	b.n	8006bea <_free_r+0x22>
 8006c0e:	461a      	mov	r2, r3
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	b10b      	cbz	r3, 8006c18 <_free_r+0x50>
 8006c14:	42a3      	cmp	r3, r4
 8006c16:	d9fa      	bls.n	8006c0e <_free_r+0x46>
 8006c18:	6811      	ldr	r1, [r2, #0]
 8006c1a:	1855      	adds	r5, r2, r1
 8006c1c:	42a5      	cmp	r5, r4
 8006c1e:	d10b      	bne.n	8006c38 <_free_r+0x70>
 8006c20:	6824      	ldr	r4, [r4, #0]
 8006c22:	4421      	add	r1, r4
 8006c24:	1854      	adds	r4, r2, r1
 8006c26:	42a3      	cmp	r3, r4
 8006c28:	6011      	str	r1, [r2, #0]
 8006c2a:	d1e0      	bne.n	8006bee <_free_r+0x26>
 8006c2c:	681c      	ldr	r4, [r3, #0]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	6053      	str	r3, [r2, #4]
 8006c32:	440c      	add	r4, r1
 8006c34:	6014      	str	r4, [r2, #0]
 8006c36:	e7da      	b.n	8006bee <_free_r+0x26>
 8006c38:	d902      	bls.n	8006c40 <_free_r+0x78>
 8006c3a:	230c      	movs	r3, #12
 8006c3c:	6003      	str	r3, [r0, #0]
 8006c3e:	e7d6      	b.n	8006bee <_free_r+0x26>
 8006c40:	6825      	ldr	r5, [r4, #0]
 8006c42:	1961      	adds	r1, r4, r5
 8006c44:	428b      	cmp	r3, r1
 8006c46:	bf04      	itt	eq
 8006c48:	6819      	ldreq	r1, [r3, #0]
 8006c4a:	685b      	ldreq	r3, [r3, #4]
 8006c4c:	6063      	str	r3, [r4, #4]
 8006c4e:	bf04      	itt	eq
 8006c50:	1949      	addeq	r1, r1, r5
 8006c52:	6021      	streq	r1, [r4, #0]
 8006c54:	6054      	str	r4, [r2, #4]
 8006c56:	e7ca      	b.n	8006bee <_free_r+0x26>
 8006c58:	b003      	add	sp, #12
 8006c5a:	bd30      	pop	{r4, r5, pc}
 8006c5c:	20014630 	.word	0x20014630

08006c60 <sbrk_aligned>:
 8006c60:	b570      	push	{r4, r5, r6, lr}
 8006c62:	4e0e      	ldr	r6, [pc, #56]	; (8006c9c <sbrk_aligned+0x3c>)
 8006c64:	460c      	mov	r4, r1
 8006c66:	6831      	ldr	r1, [r6, #0]
 8006c68:	4605      	mov	r5, r0
 8006c6a:	b911      	cbnz	r1, 8006c72 <sbrk_aligned+0x12>
 8006c6c:	f000 fba6 	bl	80073bc <_sbrk_r>
 8006c70:	6030      	str	r0, [r6, #0]
 8006c72:	4621      	mov	r1, r4
 8006c74:	4628      	mov	r0, r5
 8006c76:	f000 fba1 	bl	80073bc <_sbrk_r>
 8006c7a:	1c43      	adds	r3, r0, #1
 8006c7c:	d00a      	beq.n	8006c94 <sbrk_aligned+0x34>
 8006c7e:	1cc4      	adds	r4, r0, #3
 8006c80:	f024 0403 	bic.w	r4, r4, #3
 8006c84:	42a0      	cmp	r0, r4
 8006c86:	d007      	beq.n	8006c98 <sbrk_aligned+0x38>
 8006c88:	1a21      	subs	r1, r4, r0
 8006c8a:	4628      	mov	r0, r5
 8006c8c:	f000 fb96 	bl	80073bc <_sbrk_r>
 8006c90:	3001      	adds	r0, #1
 8006c92:	d101      	bne.n	8006c98 <sbrk_aligned+0x38>
 8006c94:	f04f 34ff 	mov.w	r4, #4294967295
 8006c98:	4620      	mov	r0, r4
 8006c9a:	bd70      	pop	{r4, r5, r6, pc}
 8006c9c:	20014634 	.word	0x20014634

08006ca0 <_malloc_r>:
 8006ca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ca4:	1ccd      	adds	r5, r1, #3
 8006ca6:	f025 0503 	bic.w	r5, r5, #3
 8006caa:	3508      	adds	r5, #8
 8006cac:	2d0c      	cmp	r5, #12
 8006cae:	bf38      	it	cc
 8006cb0:	250c      	movcc	r5, #12
 8006cb2:	2d00      	cmp	r5, #0
 8006cb4:	4607      	mov	r7, r0
 8006cb6:	db01      	blt.n	8006cbc <_malloc_r+0x1c>
 8006cb8:	42a9      	cmp	r1, r5
 8006cba:	d905      	bls.n	8006cc8 <_malloc_r+0x28>
 8006cbc:	230c      	movs	r3, #12
 8006cbe:	603b      	str	r3, [r7, #0]
 8006cc0:	2600      	movs	r6, #0
 8006cc2:	4630      	mov	r0, r6
 8006cc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cc8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006d9c <_malloc_r+0xfc>
 8006ccc:	f000 f868 	bl	8006da0 <__malloc_lock>
 8006cd0:	f8d8 3000 	ldr.w	r3, [r8]
 8006cd4:	461c      	mov	r4, r3
 8006cd6:	bb5c      	cbnz	r4, 8006d30 <_malloc_r+0x90>
 8006cd8:	4629      	mov	r1, r5
 8006cda:	4638      	mov	r0, r7
 8006cdc:	f7ff ffc0 	bl	8006c60 <sbrk_aligned>
 8006ce0:	1c43      	adds	r3, r0, #1
 8006ce2:	4604      	mov	r4, r0
 8006ce4:	d155      	bne.n	8006d92 <_malloc_r+0xf2>
 8006ce6:	f8d8 4000 	ldr.w	r4, [r8]
 8006cea:	4626      	mov	r6, r4
 8006cec:	2e00      	cmp	r6, #0
 8006cee:	d145      	bne.n	8006d7c <_malloc_r+0xdc>
 8006cf0:	2c00      	cmp	r4, #0
 8006cf2:	d048      	beq.n	8006d86 <_malloc_r+0xe6>
 8006cf4:	6823      	ldr	r3, [r4, #0]
 8006cf6:	4631      	mov	r1, r6
 8006cf8:	4638      	mov	r0, r7
 8006cfa:	eb04 0903 	add.w	r9, r4, r3
 8006cfe:	f000 fb5d 	bl	80073bc <_sbrk_r>
 8006d02:	4581      	cmp	r9, r0
 8006d04:	d13f      	bne.n	8006d86 <_malloc_r+0xe6>
 8006d06:	6821      	ldr	r1, [r4, #0]
 8006d08:	1a6d      	subs	r5, r5, r1
 8006d0a:	4629      	mov	r1, r5
 8006d0c:	4638      	mov	r0, r7
 8006d0e:	f7ff ffa7 	bl	8006c60 <sbrk_aligned>
 8006d12:	3001      	adds	r0, #1
 8006d14:	d037      	beq.n	8006d86 <_malloc_r+0xe6>
 8006d16:	6823      	ldr	r3, [r4, #0]
 8006d18:	442b      	add	r3, r5
 8006d1a:	6023      	str	r3, [r4, #0]
 8006d1c:	f8d8 3000 	ldr.w	r3, [r8]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d038      	beq.n	8006d96 <_malloc_r+0xf6>
 8006d24:	685a      	ldr	r2, [r3, #4]
 8006d26:	42a2      	cmp	r2, r4
 8006d28:	d12b      	bne.n	8006d82 <_malloc_r+0xe2>
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	605a      	str	r2, [r3, #4]
 8006d2e:	e00f      	b.n	8006d50 <_malloc_r+0xb0>
 8006d30:	6822      	ldr	r2, [r4, #0]
 8006d32:	1b52      	subs	r2, r2, r5
 8006d34:	d41f      	bmi.n	8006d76 <_malloc_r+0xd6>
 8006d36:	2a0b      	cmp	r2, #11
 8006d38:	d917      	bls.n	8006d6a <_malloc_r+0xca>
 8006d3a:	1961      	adds	r1, r4, r5
 8006d3c:	42a3      	cmp	r3, r4
 8006d3e:	6025      	str	r5, [r4, #0]
 8006d40:	bf18      	it	ne
 8006d42:	6059      	strne	r1, [r3, #4]
 8006d44:	6863      	ldr	r3, [r4, #4]
 8006d46:	bf08      	it	eq
 8006d48:	f8c8 1000 	streq.w	r1, [r8]
 8006d4c:	5162      	str	r2, [r4, r5]
 8006d4e:	604b      	str	r3, [r1, #4]
 8006d50:	4638      	mov	r0, r7
 8006d52:	f104 060b 	add.w	r6, r4, #11
 8006d56:	f000 f829 	bl	8006dac <__malloc_unlock>
 8006d5a:	f026 0607 	bic.w	r6, r6, #7
 8006d5e:	1d23      	adds	r3, r4, #4
 8006d60:	1af2      	subs	r2, r6, r3
 8006d62:	d0ae      	beq.n	8006cc2 <_malloc_r+0x22>
 8006d64:	1b9b      	subs	r3, r3, r6
 8006d66:	50a3      	str	r3, [r4, r2]
 8006d68:	e7ab      	b.n	8006cc2 <_malloc_r+0x22>
 8006d6a:	42a3      	cmp	r3, r4
 8006d6c:	6862      	ldr	r2, [r4, #4]
 8006d6e:	d1dd      	bne.n	8006d2c <_malloc_r+0x8c>
 8006d70:	f8c8 2000 	str.w	r2, [r8]
 8006d74:	e7ec      	b.n	8006d50 <_malloc_r+0xb0>
 8006d76:	4623      	mov	r3, r4
 8006d78:	6864      	ldr	r4, [r4, #4]
 8006d7a:	e7ac      	b.n	8006cd6 <_malloc_r+0x36>
 8006d7c:	4634      	mov	r4, r6
 8006d7e:	6876      	ldr	r6, [r6, #4]
 8006d80:	e7b4      	b.n	8006cec <_malloc_r+0x4c>
 8006d82:	4613      	mov	r3, r2
 8006d84:	e7cc      	b.n	8006d20 <_malloc_r+0x80>
 8006d86:	230c      	movs	r3, #12
 8006d88:	603b      	str	r3, [r7, #0]
 8006d8a:	4638      	mov	r0, r7
 8006d8c:	f000 f80e 	bl	8006dac <__malloc_unlock>
 8006d90:	e797      	b.n	8006cc2 <_malloc_r+0x22>
 8006d92:	6025      	str	r5, [r4, #0]
 8006d94:	e7dc      	b.n	8006d50 <_malloc_r+0xb0>
 8006d96:	605b      	str	r3, [r3, #4]
 8006d98:	deff      	udf	#255	; 0xff
 8006d9a:	bf00      	nop
 8006d9c:	20014630 	.word	0x20014630

08006da0 <__malloc_lock>:
 8006da0:	4801      	ldr	r0, [pc, #4]	; (8006da8 <__malloc_lock+0x8>)
 8006da2:	f7ff bf01 	b.w	8006ba8 <__retarget_lock_acquire_recursive>
 8006da6:	bf00      	nop
 8006da8:	2001462c 	.word	0x2001462c

08006dac <__malloc_unlock>:
 8006dac:	4801      	ldr	r0, [pc, #4]	; (8006db4 <__malloc_unlock+0x8>)
 8006dae:	f7ff befc 	b.w	8006baa <__retarget_lock_release_recursive>
 8006db2:	bf00      	nop
 8006db4:	2001462c 	.word	0x2001462c

08006db8 <__ssputs_r>:
 8006db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006dbc:	688e      	ldr	r6, [r1, #8]
 8006dbe:	461f      	mov	r7, r3
 8006dc0:	42be      	cmp	r6, r7
 8006dc2:	680b      	ldr	r3, [r1, #0]
 8006dc4:	4682      	mov	sl, r0
 8006dc6:	460c      	mov	r4, r1
 8006dc8:	4690      	mov	r8, r2
 8006dca:	d82c      	bhi.n	8006e26 <__ssputs_r+0x6e>
 8006dcc:	898a      	ldrh	r2, [r1, #12]
 8006dce:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006dd2:	d026      	beq.n	8006e22 <__ssputs_r+0x6a>
 8006dd4:	6965      	ldr	r5, [r4, #20]
 8006dd6:	6909      	ldr	r1, [r1, #16]
 8006dd8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006ddc:	eba3 0901 	sub.w	r9, r3, r1
 8006de0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006de4:	1c7b      	adds	r3, r7, #1
 8006de6:	444b      	add	r3, r9
 8006de8:	106d      	asrs	r5, r5, #1
 8006dea:	429d      	cmp	r5, r3
 8006dec:	bf38      	it	cc
 8006dee:	461d      	movcc	r5, r3
 8006df0:	0553      	lsls	r3, r2, #21
 8006df2:	d527      	bpl.n	8006e44 <__ssputs_r+0x8c>
 8006df4:	4629      	mov	r1, r5
 8006df6:	f7ff ff53 	bl	8006ca0 <_malloc_r>
 8006dfa:	4606      	mov	r6, r0
 8006dfc:	b360      	cbz	r0, 8006e58 <__ssputs_r+0xa0>
 8006dfe:	6921      	ldr	r1, [r4, #16]
 8006e00:	464a      	mov	r2, r9
 8006e02:	f7ff fed3 	bl	8006bac <memcpy>
 8006e06:	89a3      	ldrh	r3, [r4, #12]
 8006e08:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006e0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e10:	81a3      	strh	r3, [r4, #12]
 8006e12:	6126      	str	r6, [r4, #16]
 8006e14:	6165      	str	r5, [r4, #20]
 8006e16:	444e      	add	r6, r9
 8006e18:	eba5 0509 	sub.w	r5, r5, r9
 8006e1c:	6026      	str	r6, [r4, #0]
 8006e1e:	60a5      	str	r5, [r4, #8]
 8006e20:	463e      	mov	r6, r7
 8006e22:	42be      	cmp	r6, r7
 8006e24:	d900      	bls.n	8006e28 <__ssputs_r+0x70>
 8006e26:	463e      	mov	r6, r7
 8006e28:	6820      	ldr	r0, [r4, #0]
 8006e2a:	4632      	mov	r2, r6
 8006e2c:	4641      	mov	r1, r8
 8006e2e:	f000 faab 	bl	8007388 <memmove>
 8006e32:	68a3      	ldr	r3, [r4, #8]
 8006e34:	1b9b      	subs	r3, r3, r6
 8006e36:	60a3      	str	r3, [r4, #8]
 8006e38:	6823      	ldr	r3, [r4, #0]
 8006e3a:	4433      	add	r3, r6
 8006e3c:	6023      	str	r3, [r4, #0]
 8006e3e:	2000      	movs	r0, #0
 8006e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e44:	462a      	mov	r2, r5
 8006e46:	f000 fac9 	bl	80073dc <_realloc_r>
 8006e4a:	4606      	mov	r6, r0
 8006e4c:	2800      	cmp	r0, #0
 8006e4e:	d1e0      	bne.n	8006e12 <__ssputs_r+0x5a>
 8006e50:	6921      	ldr	r1, [r4, #16]
 8006e52:	4650      	mov	r0, sl
 8006e54:	f7ff feb8 	bl	8006bc8 <_free_r>
 8006e58:	230c      	movs	r3, #12
 8006e5a:	f8ca 3000 	str.w	r3, [sl]
 8006e5e:	89a3      	ldrh	r3, [r4, #12]
 8006e60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e64:	81a3      	strh	r3, [r4, #12]
 8006e66:	f04f 30ff 	mov.w	r0, #4294967295
 8006e6a:	e7e9      	b.n	8006e40 <__ssputs_r+0x88>

08006e6c <_svfiprintf_r>:
 8006e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e70:	4698      	mov	r8, r3
 8006e72:	898b      	ldrh	r3, [r1, #12]
 8006e74:	061b      	lsls	r3, r3, #24
 8006e76:	b09d      	sub	sp, #116	; 0x74
 8006e78:	4607      	mov	r7, r0
 8006e7a:	460d      	mov	r5, r1
 8006e7c:	4614      	mov	r4, r2
 8006e7e:	d50e      	bpl.n	8006e9e <_svfiprintf_r+0x32>
 8006e80:	690b      	ldr	r3, [r1, #16]
 8006e82:	b963      	cbnz	r3, 8006e9e <_svfiprintf_r+0x32>
 8006e84:	2140      	movs	r1, #64	; 0x40
 8006e86:	f7ff ff0b 	bl	8006ca0 <_malloc_r>
 8006e8a:	6028      	str	r0, [r5, #0]
 8006e8c:	6128      	str	r0, [r5, #16]
 8006e8e:	b920      	cbnz	r0, 8006e9a <_svfiprintf_r+0x2e>
 8006e90:	230c      	movs	r3, #12
 8006e92:	603b      	str	r3, [r7, #0]
 8006e94:	f04f 30ff 	mov.w	r0, #4294967295
 8006e98:	e0d0      	b.n	800703c <_svfiprintf_r+0x1d0>
 8006e9a:	2340      	movs	r3, #64	; 0x40
 8006e9c:	616b      	str	r3, [r5, #20]
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	9309      	str	r3, [sp, #36]	; 0x24
 8006ea2:	2320      	movs	r3, #32
 8006ea4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ea8:	f8cd 800c 	str.w	r8, [sp, #12]
 8006eac:	2330      	movs	r3, #48	; 0x30
 8006eae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007054 <_svfiprintf_r+0x1e8>
 8006eb2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006eb6:	f04f 0901 	mov.w	r9, #1
 8006eba:	4623      	mov	r3, r4
 8006ebc:	469a      	mov	sl, r3
 8006ebe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ec2:	b10a      	cbz	r2, 8006ec8 <_svfiprintf_r+0x5c>
 8006ec4:	2a25      	cmp	r2, #37	; 0x25
 8006ec6:	d1f9      	bne.n	8006ebc <_svfiprintf_r+0x50>
 8006ec8:	ebba 0b04 	subs.w	fp, sl, r4
 8006ecc:	d00b      	beq.n	8006ee6 <_svfiprintf_r+0x7a>
 8006ece:	465b      	mov	r3, fp
 8006ed0:	4622      	mov	r2, r4
 8006ed2:	4629      	mov	r1, r5
 8006ed4:	4638      	mov	r0, r7
 8006ed6:	f7ff ff6f 	bl	8006db8 <__ssputs_r>
 8006eda:	3001      	adds	r0, #1
 8006edc:	f000 80a9 	beq.w	8007032 <_svfiprintf_r+0x1c6>
 8006ee0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ee2:	445a      	add	r2, fp
 8006ee4:	9209      	str	r2, [sp, #36]	; 0x24
 8006ee6:	f89a 3000 	ldrb.w	r3, [sl]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	f000 80a1 	beq.w	8007032 <_svfiprintf_r+0x1c6>
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ef6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006efa:	f10a 0a01 	add.w	sl, sl, #1
 8006efe:	9304      	str	r3, [sp, #16]
 8006f00:	9307      	str	r3, [sp, #28]
 8006f02:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f06:	931a      	str	r3, [sp, #104]	; 0x68
 8006f08:	4654      	mov	r4, sl
 8006f0a:	2205      	movs	r2, #5
 8006f0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f10:	4850      	ldr	r0, [pc, #320]	; (8007054 <_svfiprintf_r+0x1e8>)
 8006f12:	f7f9 f9d5 	bl	80002c0 <memchr>
 8006f16:	9a04      	ldr	r2, [sp, #16]
 8006f18:	b9d8      	cbnz	r0, 8006f52 <_svfiprintf_r+0xe6>
 8006f1a:	06d0      	lsls	r0, r2, #27
 8006f1c:	bf44      	itt	mi
 8006f1e:	2320      	movmi	r3, #32
 8006f20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f24:	0711      	lsls	r1, r2, #28
 8006f26:	bf44      	itt	mi
 8006f28:	232b      	movmi	r3, #43	; 0x2b
 8006f2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f2e:	f89a 3000 	ldrb.w	r3, [sl]
 8006f32:	2b2a      	cmp	r3, #42	; 0x2a
 8006f34:	d015      	beq.n	8006f62 <_svfiprintf_r+0xf6>
 8006f36:	9a07      	ldr	r2, [sp, #28]
 8006f38:	4654      	mov	r4, sl
 8006f3a:	2000      	movs	r0, #0
 8006f3c:	f04f 0c0a 	mov.w	ip, #10
 8006f40:	4621      	mov	r1, r4
 8006f42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f46:	3b30      	subs	r3, #48	; 0x30
 8006f48:	2b09      	cmp	r3, #9
 8006f4a:	d94d      	bls.n	8006fe8 <_svfiprintf_r+0x17c>
 8006f4c:	b1b0      	cbz	r0, 8006f7c <_svfiprintf_r+0x110>
 8006f4e:	9207      	str	r2, [sp, #28]
 8006f50:	e014      	b.n	8006f7c <_svfiprintf_r+0x110>
 8006f52:	eba0 0308 	sub.w	r3, r0, r8
 8006f56:	fa09 f303 	lsl.w	r3, r9, r3
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	9304      	str	r3, [sp, #16]
 8006f5e:	46a2      	mov	sl, r4
 8006f60:	e7d2      	b.n	8006f08 <_svfiprintf_r+0x9c>
 8006f62:	9b03      	ldr	r3, [sp, #12]
 8006f64:	1d19      	adds	r1, r3, #4
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	9103      	str	r1, [sp, #12]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	bfbb      	ittet	lt
 8006f6e:	425b      	neglt	r3, r3
 8006f70:	f042 0202 	orrlt.w	r2, r2, #2
 8006f74:	9307      	strge	r3, [sp, #28]
 8006f76:	9307      	strlt	r3, [sp, #28]
 8006f78:	bfb8      	it	lt
 8006f7a:	9204      	strlt	r2, [sp, #16]
 8006f7c:	7823      	ldrb	r3, [r4, #0]
 8006f7e:	2b2e      	cmp	r3, #46	; 0x2e
 8006f80:	d10c      	bne.n	8006f9c <_svfiprintf_r+0x130>
 8006f82:	7863      	ldrb	r3, [r4, #1]
 8006f84:	2b2a      	cmp	r3, #42	; 0x2a
 8006f86:	d134      	bne.n	8006ff2 <_svfiprintf_r+0x186>
 8006f88:	9b03      	ldr	r3, [sp, #12]
 8006f8a:	1d1a      	adds	r2, r3, #4
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	9203      	str	r2, [sp, #12]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	bfb8      	it	lt
 8006f94:	f04f 33ff 	movlt.w	r3, #4294967295
 8006f98:	3402      	adds	r4, #2
 8006f9a:	9305      	str	r3, [sp, #20]
 8006f9c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007064 <_svfiprintf_r+0x1f8>
 8006fa0:	7821      	ldrb	r1, [r4, #0]
 8006fa2:	2203      	movs	r2, #3
 8006fa4:	4650      	mov	r0, sl
 8006fa6:	f7f9 f98b 	bl	80002c0 <memchr>
 8006faa:	b138      	cbz	r0, 8006fbc <_svfiprintf_r+0x150>
 8006fac:	9b04      	ldr	r3, [sp, #16]
 8006fae:	eba0 000a 	sub.w	r0, r0, sl
 8006fb2:	2240      	movs	r2, #64	; 0x40
 8006fb4:	4082      	lsls	r2, r0
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	3401      	adds	r4, #1
 8006fba:	9304      	str	r3, [sp, #16]
 8006fbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fc0:	4825      	ldr	r0, [pc, #148]	; (8007058 <_svfiprintf_r+0x1ec>)
 8006fc2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006fc6:	2206      	movs	r2, #6
 8006fc8:	f7f9 f97a 	bl	80002c0 <memchr>
 8006fcc:	2800      	cmp	r0, #0
 8006fce:	d038      	beq.n	8007042 <_svfiprintf_r+0x1d6>
 8006fd0:	4b22      	ldr	r3, [pc, #136]	; (800705c <_svfiprintf_r+0x1f0>)
 8006fd2:	bb1b      	cbnz	r3, 800701c <_svfiprintf_r+0x1b0>
 8006fd4:	9b03      	ldr	r3, [sp, #12]
 8006fd6:	3307      	adds	r3, #7
 8006fd8:	f023 0307 	bic.w	r3, r3, #7
 8006fdc:	3308      	adds	r3, #8
 8006fde:	9303      	str	r3, [sp, #12]
 8006fe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fe2:	4433      	add	r3, r6
 8006fe4:	9309      	str	r3, [sp, #36]	; 0x24
 8006fe6:	e768      	b.n	8006eba <_svfiprintf_r+0x4e>
 8006fe8:	fb0c 3202 	mla	r2, ip, r2, r3
 8006fec:	460c      	mov	r4, r1
 8006fee:	2001      	movs	r0, #1
 8006ff0:	e7a6      	b.n	8006f40 <_svfiprintf_r+0xd4>
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	3401      	adds	r4, #1
 8006ff6:	9305      	str	r3, [sp, #20]
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	f04f 0c0a 	mov.w	ip, #10
 8006ffe:	4620      	mov	r0, r4
 8007000:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007004:	3a30      	subs	r2, #48	; 0x30
 8007006:	2a09      	cmp	r2, #9
 8007008:	d903      	bls.n	8007012 <_svfiprintf_r+0x1a6>
 800700a:	2b00      	cmp	r3, #0
 800700c:	d0c6      	beq.n	8006f9c <_svfiprintf_r+0x130>
 800700e:	9105      	str	r1, [sp, #20]
 8007010:	e7c4      	b.n	8006f9c <_svfiprintf_r+0x130>
 8007012:	fb0c 2101 	mla	r1, ip, r1, r2
 8007016:	4604      	mov	r4, r0
 8007018:	2301      	movs	r3, #1
 800701a:	e7f0      	b.n	8006ffe <_svfiprintf_r+0x192>
 800701c:	ab03      	add	r3, sp, #12
 800701e:	9300      	str	r3, [sp, #0]
 8007020:	462a      	mov	r2, r5
 8007022:	4b0f      	ldr	r3, [pc, #60]	; (8007060 <_svfiprintf_r+0x1f4>)
 8007024:	a904      	add	r1, sp, #16
 8007026:	4638      	mov	r0, r7
 8007028:	f3af 8000 	nop.w
 800702c:	1c42      	adds	r2, r0, #1
 800702e:	4606      	mov	r6, r0
 8007030:	d1d6      	bne.n	8006fe0 <_svfiprintf_r+0x174>
 8007032:	89ab      	ldrh	r3, [r5, #12]
 8007034:	065b      	lsls	r3, r3, #25
 8007036:	f53f af2d 	bmi.w	8006e94 <_svfiprintf_r+0x28>
 800703a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800703c:	b01d      	add	sp, #116	; 0x74
 800703e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007042:	ab03      	add	r3, sp, #12
 8007044:	9300      	str	r3, [sp, #0]
 8007046:	462a      	mov	r2, r5
 8007048:	4b05      	ldr	r3, [pc, #20]	; (8007060 <_svfiprintf_r+0x1f4>)
 800704a:	a904      	add	r1, sp, #16
 800704c:	4638      	mov	r0, r7
 800704e:	f000 f879 	bl	8007144 <_printf_i>
 8007052:	e7eb      	b.n	800702c <_svfiprintf_r+0x1c0>
 8007054:	080075ec 	.word	0x080075ec
 8007058:	080075f6 	.word	0x080075f6
 800705c:	00000000 	.word	0x00000000
 8007060:	08006db9 	.word	0x08006db9
 8007064:	080075f2 	.word	0x080075f2

08007068 <_printf_common>:
 8007068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800706c:	4616      	mov	r6, r2
 800706e:	4699      	mov	r9, r3
 8007070:	688a      	ldr	r2, [r1, #8]
 8007072:	690b      	ldr	r3, [r1, #16]
 8007074:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007078:	4293      	cmp	r3, r2
 800707a:	bfb8      	it	lt
 800707c:	4613      	movlt	r3, r2
 800707e:	6033      	str	r3, [r6, #0]
 8007080:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007084:	4607      	mov	r7, r0
 8007086:	460c      	mov	r4, r1
 8007088:	b10a      	cbz	r2, 800708e <_printf_common+0x26>
 800708a:	3301      	adds	r3, #1
 800708c:	6033      	str	r3, [r6, #0]
 800708e:	6823      	ldr	r3, [r4, #0]
 8007090:	0699      	lsls	r1, r3, #26
 8007092:	bf42      	ittt	mi
 8007094:	6833      	ldrmi	r3, [r6, #0]
 8007096:	3302      	addmi	r3, #2
 8007098:	6033      	strmi	r3, [r6, #0]
 800709a:	6825      	ldr	r5, [r4, #0]
 800709c:	f015 0506 	ands.w	r5, r5, #6
 80070a0:	d106      	bne.n	80070b0 <_printf_common+0x48>
 80070a2:	f104 0a19 	add.w	sl, r4, #25
 80070a6:	68e3      	ldr	r3, [r4, #12]
 80070a8:	6832      	ldr	r2, [r6, #0]
 80070aa:	1a9b      	subs	r3, r3, r2
 80070ac:	42ab      	cmp	r3, r5
 80070ae:	dc26      	bgt.n	80070fe <_printf_common+0x96>
 80070b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80070b4:	1e13      	subs	r3, r2, #0
 80070b6:	6822      	ldr	r2, [r4, #0]
 80070b8:	bf18      	it	ne
 80070ba:	2301      	movne	r3, #1
 80070bc:	0692      	lsls	r2, r2, #26
 80070be:	d42b      	bmi.n	8007118 <_printf_common+0xb0>
 80070c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80070c4:	4649      	mov	r1, r9
 80070c6:	4638      	mov	r0, r7
 80070c8:	47c0      	blx	r8
 80070ca:	3001      	adds	r0, #1
 80070cc:	d01e      	beq.n	800710c <_printf_common+0xa4>
 80070ce:	6823      	ldr	r3, [r4, #0]
 80070d0:	6922      	ldr	r2, [r4, #16]
 80070d2:	f003 0306 	and.w	r3, r3, #6
 80070d6:	2b04      	cmp	r3, #4
 80070d8:	bf02      	ittt	eq
 80070da:	68e5      	ldreq	r5, [r4, #12]
 80070dc:	6833      	ldreq	r3, [r6, #0]
 80070de:	1aed      	subeq	r5, r5, r3
 80070e0:	68a3      	ldr	r3, [r4, #8]
 80070e2:	bf0c      	ite	eq
 80070e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070e8:	2500      	movne	r5, #0
 80070ea:	4293      	cmp	r3, r2
 80070ec:	bfc4      	itt	gt
 80070ee:	1a9b      	subgt	r3, r3, r2
 80070f0:	18ed      	addgt	r5, r5, r3
 80070f2:	2600      	movs	r6, #0
 80070f4:	341a      	adds	r4, #26
 80070f6:	42b5      	cmp	r5, r6
 80070f8:	d11a      	bne.n	8007130 <_printf_common+0xc8>
 80070fa:	2000      	movs	r0, #0
 80070fc:	e008      	b.n	8007110 <_printf_common+0xa8>
 80070fe:	2301      	movs	r3, #1
 8007100:	4652      	mov	r2, sl
 8007102:	4649      	mov	r1, r9
 8007104:	4638      	mov	r0, r7
 8007106:	47c0      	blx	r8
 8007108:	3001      	adds	r0, #1
 800710a:	d103      	bne.n	8007114 <_printf_common+0xac>
 800710c:	f04f 30ff 	mov.w	r0, #4294967295
 8007110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007114:	3501      	adds	r5, #1
 8007116:	e7c6      	b.n	80070a6 <_printf_common+0x3e>
 8007118:	18e1      	adds	r1, r4, r3
 800711a:	1c5a      	adds	r2, r3, #1
 800711c:	2030      	movs	r0, #48	; 0x30
 800711e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007122:	4422      	add	r2, r4
 8007124:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007128:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800712c:	3302      	adds	r3, #2
 800712e:	e7c7      	b.n	80070c0 <_printf_common+0x58>
 8007130:	2301      	movs	r3, #1
 8007132:	4622      	mov	r2, r4
 8007134:	4649      	mov	r1, r9
 8007136:	4638      	mov	r0, r7
 8007138:	47c0      	blx	r8
 800713a:	3001      	adds	r0, #1
 800713c:	d0e6      	beq.n	800710c <_printf_common+0xa4>
 800713e:	3601      	adds	r6, #1
 8007140:	e7d9      	b.n	80070f6 <_printf_common+0x8e>
	...

08007144 <_printf_i>:
 8007144:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007148:	7e0f      	ldrb	r7, [r1, #24]
 800714a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800714c:	2f78      	cmp	r7, #120	; 0x78
 800714e:	4691      	mov	r9, r2
 8007150:	4680      	mov	r8, r0
 8007152:	460c      	mov	r4, r1
 8007154:	469a      	mov	sl, r3
 8007156:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800715a:	d807      	bhi.n	800716c <_printf_i+0x28>
 800715c:	2f62      	cmp	r7, #98	; 0x62
 800715e:	d80a      	bhi.n	8007176 <_printf_i+0x32>
 8007160:	2f00      	cmp	r7, #0
 8007162:	f000 80d4 	beq.w	800730e <_printf_i+0x1ca>
 8007166:	2f58      	cmp	r7, #88	; 0x58
 8007168:	f000 80c0 	beq.w	80072ec <_printf_i+0x1a8>
 800716c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007170:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007174:	e03a      	b.n	80071ec <_printf_i+0xa8>
 8007176:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800717a:	2b15      	cmp	r3, #21
 800717c:	d8f6      	bhi.n	800716c <_printf_i+0x28>
 800717e:	a101      	add	r1, pc, #4	; (adr r1, 8007184 <_printf_i+0x40>)
 8007180:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007184:	080071dd 	.word	0x080071dd
 8007188:	080071f1 	.word	0x080071f1
 800718c:	0800716d 	.word	0x0800716d
 8007190:	0800716d 	.word	0x0800716d
 8007194:	0800716d 	.word	0x0800716d
 8007198:	0800716d 	.word	0x0800716d
 800719c:	080071f1 	.word	0x080071f1
 80071a0:	0800716d 	.word	0x0800716d
 80071a4:	0800716d 	.word	0x0800716d
 80071a8:	0800716d 	.word	0x0800716d
 80071ac:	0800716d 	.word	0x0800716d
 80071b0:	080072f5 	.word	0x080072f5
 80071b4:	0800721d 	.word	0x0800721d
 80071b8:	080072af 	.word	0x080072af
 80071bc:	0800716d 	.word	0x0800716d
 80071c0:	0800716d 	.word	0x0800716d
 80071c4:	08007317 	.word	0x08007317
 80071c8:	0800716d 	.word	0x0800716d
 80071cc:	0800721d 	.word	0x0800721d
 80071d0:	0800716d 	.word	0x0800716d
 80071d4:	0800716d 	.word	0x0800716d
 80071d8:	080072b7 	.word	0x080072b7
 80071dc:	682b      	ldr	r3, [r5, #0]
 80071de:	1d1a      	adds	r2, r3, #4
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	602a      	str	r2, [r5, #0]
 80071e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80071ec:	2301      	movs	r3, #1
 80071ee:	e09f      	b.n	8007330 <_printf_i+0x1ec>
 80071f0:	6820      	ldr	r0, [r4, #0]
 80071f2:	682b      	ldr	r3, [r5, #0]
 80071f4:	0607      	lsls	r7, r0, #24
 80071f6:	f103 0104 	add.w	r1, r3, #4
 80071fa:	6029      	str	r1, [r5, #0]
 80071fc:	d501      	bpl.n	8007202 <_printf_i+0xbe>
 80071fe:	681e      	ldr	r6, [r3, #0]
 8007200:	e003      	b.n	800720a <_printf_i+0xc6>
 8007202:	0646      	lsls	r6, r0, #25
 8007204:	d5fb      	bpl.n	80071fe <_printf_i+0xba>
 8007206:	f9b3 6000 	ldrsh.w	r6, [r3]
 800720a:	2e00      	cmp	r6, #0
 800720c:	da03      	bge.n	8007216 <_printf_i+0xd2>
 800720e:	232d      	movs	r3, #45	; 0x2d
 8007210:	4276      	negs	r6, r6
 8007212:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007216:	485a      	ldr	r0, [pc, #360]	; (8007380 <_printf_i+0x23c>)
 8007218:	230a      	movs	r3, #10
 800721a:	e012      	b.n	8007242 <_printf_i+0xfe>
 800721c:	682b      	ldr	r3, [r5, #0]
 800721e:	6820      	ldr	r0, [r4, #0]
 8007220:	1d19      	adds	r1, r3, #4
 8007222:	6029      	str	r1, [r5, #0]
 8007224:	0605      	lsls	r5, r0, #24
 8007226:	d501      	bpl.n	800722c <_printf_i+0xe8>
 8007228:	681e      	ldr	r6, [r3, #0]
 800722a:	e002      	b.n	8007232 <_printf_i+0xee>
 800722c:	0641      	lsls	r1, r0, #25
 800722e:	d5fb      	bpl.n	8007228 <_printf_i+0xe4>
 8007230:	881e      	ldrh	r6, [r3, #0]
 8007232:	4853      	ldr	r0, [pc, #332]	; (8007380 <_printf_i+0x23c>)
 8007234:	2f6f      	cmp	r7, #111	; 0x6f
 8007236:	bf0c      	ite	eq
 8007238:	2308      	moveq	r3, #8
 800723a:	230a      	movne	r3, #10
 800723c:	2100      	movs	r1, #0
 800723e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007242:	6865      	ldr	r5, [r4, #4]
 8007244:	60a5      	str	r5, [r4, #8]
 8007246:	2d00      	cmp	r5, #0
 8007248:	bfa2      	ittt	ge
 800724a:	6821      	ldrge	r1, [r4, #0]
 800724c:	f021 0104 	bicge.w	r1, r1, #4
 8007250:	6021      	strge	r1, [r4, #0]
 8007252:	b90e      	cbnz	r6, 8007258 <_printf_i+0x114>
 8007254:	2d00      	cmp	r5, #0
 8007256:	d04b      	beq.n	80072f0 <_printf_i+0x1ac>
 8007258:	4615      	mov	r5, r2
 800725a:	fbb6 f1f3 	udiv	r1, r6, r3
 800725e:	fb03 6711 	mls	r7, r3, r1, r6
 8007262:	5dc7      	ldrb	r7, [r0, r7]
 8007264:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007268:	4637      	mov	r7, r6
 800726a:	42bb      	cmp	r3, r7
 800726c:	460e      	mov	r6, r1
 800726e:	d9f4      	bls.n	800725a <_printf_i+0x116>
 8007270:	2b08      	cmp	r3, #8
 8007272:	d10b      	bne.n	800728c <_printf_i+0x148>
 8007274:	6823      	ldr	r3, [r4, #0]
 8007276:	07de      	lsls	r6, r3, #31
 8007278:	d508      	bpl.n	800728c <_printf_i+0x148>
 800727a:	6923      	ldr	r3, [r4, #16]
 800727c:	6861      	ldr	r1, [r4, #4]
 800727e:	4299      	cmp	r1, r3
 8007280:	bfde      	ittt	le
 8007282:	2330      	movle	r3, #48	; 0x30
 8007284:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007288:	f105 35ff 	addle.w	r5, r5, #4294967295
 800728c:	1b52      	subs	r2, r2, r5
 800728e:	6122      	str	r2, [r4, #16]
 8007290:	f8cd a000 	str.w	sl, [sp]
 8007294:	464b      	mov	r3, r9
 8007296:	aa03      	add	r2, sp, #12
 8007298:	4621      	mov	r1, r4
 800729a:	4640      	mov	r0, r8
 800729c:	f7ff fee4 	bl	8007068 <_printf_common>
 80072a0:	3001      	adds	r0, #1
 80072a2:	d14a      	bne.n	800733a <_printf_i+0x1f6>
 80072a4:	f04f 30ff 	mov.w	r0, #4294967295
 80072a8:	b004      	add	sp, #16
 80072aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072ae:	6823      	ldr	r3, [r4, #0]
 80072b0:	f043 0320 	orr.w	r3, r3, #32
 80072b4:	6023      	str	r3, [r4, #0]
 80072b6:	4833      	ldr	r0, [pc, #204]	; (8007384 <_printf_i+0x240>)
 80072b8:	2778      	movs	r7, #120	; 0x78
 80072ba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80072be:	6823      	ldr	r3, [r4, #0]
 80072c0:	6829      	ldr	r1, [r5, #0]
 80072c2:	061f      	lsls	r7, r3, #24
 80072c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80072c8:	d402      	bmi.n	80072d0 <_printf_i+0x18c>
 80072ca:	065f      	lsls	r7, r3, #25
 80072cc:	bf48      	it	mi
 80072ce:	b2b6      	uxthmi	r6, r6
 80072d0:	07df      	lsls	r7, r3, #31
 80072d2:	bf48      	it	mi
 80072d4:	f043 0320 	orrmi.w	r3, r3, #32
 80072d8:	6029      	str	r1, [r5, #0]
 80072da:	bf48      	it	mi
 80072dc:	6023      	strmi	r3, [r4, #0]
 80072de:	b91e      	cbnz	r6, 80072e8 <_printf_i+0x1a4>
 80072e0:	6823      	ldr	r3, [r4, #0]
 80072e2:	f023 0320 	bic.w	r3, r3, #32
 80072e6:	6023      	str	r3, [r4, #0]
 80072e8:	2310      	movs	r3, #16
 80072ea:	e7a7      	b.n	800723c <_printf_i+0xf8>
 80072ec:	4824      	ldr	r0, [pc, #144]	; (8007380 <_printf_i+0x23c>)
 80072ee:	e7e4      	b.n	80072ba <_printf_i+0x176>
 80072f0:	4615      	mov	r5, r2
 80072f2:	e7bd      	b.n	8007270 <_printf_i+0x12c>
 80072f4:	682b      	ldr	r3, [r5, #0]
 80072f6:	6826      	ldr	r6, [r4, #0]
 80072f8:	6961      	ldr	r1, [r4, #20]
 80072fa:	1d18      	adds	r0, r3, #4
 80072fc:	6028      	str	r0, [r5, #0]
 80072fe:	0635      	lsls	r5, r6, #24
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	d501      	bpl.n	8007308 <_printf_i+0x1c4>
 8007304:	6019      	str	r1, [r3, #0]
 8007306:	e002      	b.n	800730e <_printf_i+0x1ca>
 8007308:	0670      	lsls	r0, r6, #25
 800730a:	d5fb      	bpl.n	8007304 <_printf_i+0x1c0>
 800730c:	8019      	strh	r1, [r3, #0]
 800730e:	2300      	movs	r3, #0
 8007310:	6123      	str	r3, [r4, #16]
 8007312:	4615      	mov	r5, r2
 8007314:	e7bc      	b.n	8007290 <_printf_i+0x14c>
 8007316:	682b      	ldr	r3, [r5, #0]
 8007318:	1d1a      	adds	r2, r3, #4
 800731a:	602a      	str	r2, [r5, #0]
 800731c:	681d      	ldr	r5, [r3, #0]
 800731e:	6862      	ldr	r2, [r4, #4]
 8007320:	2100      	movs	r1, #0
 8007322:	4628      	mov	r0, r5
 8007324:	f7f8 ffcc 	bl	80002c0 <memchr>
 8007328:	b108      	cbz	r0, 800732e <_printf_i+0x1ea>
 800732a:	1b40      	subs	r0, r0, r5
 800732c:	6060      	str	r0, [r4, #4]
 800732e:	6863      	ldr	r3, [r4, #4]
 8007330:	6123      	str	r3, [r4, #16]
 8007332:	2300      	movs	r3, #0
 8007334:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007338:	e7aa      	b.n	8007290 <_printf_i+0x14c>
 800733a:	6923      	ldr	r3, [r4, #16]
 800733c:	462a      	mov	r2, r5
 800733e:	4649      	mov	r1, r9
 8007340:	4640      	mov	r0, r8
 8007342:	47d0      	blx	sl
 8007344:	3001      	adds	r0, #1
 8007346:	d0ad      	beq.n	80072a4 <_printf_i+0x160>
 8007348:	6823      	ldr	r3, [r4, #0]
 800734a:	079b      	lsls	r3, r3, #30
 800734c:	d413      	bmi.n	8007376 <_printf_i+0x232>
 800734e:	68e0      	ldr	r0, [r4, #12]
 8007350:	9b03      	ldr	r3, [sp, #12]
 8007352:	4298      	cmp	r0, r3
 8007354:	bfb8      	it	lt
 8007356:	4618      	movlt	r0, r3
 8007358:	e7a6      	b.n	80072a8 <_printf_i+0x164>
 800735a:	2301      	movs	r3, #1
 800735c:	4632      	mov	r2, r6
 800735e:	4649      	mov	r1, r9
 8007360:	4640      	mov	r0, r8
 8007362:	47d0      	blx	sl
 8007364:	3001      	adds	r0, #1
 8007366:	d09d      	beq.n	80072a4 <_printf_i+0x160>
 8007368:	3501      	adds	r5, #1
 800736a:	68e3      	ldr	r3, [r4, #12]
 800736c:	9903      	ldr	r1, [sp, #12]
 800736e:	1a5b      	subs	r3, r3, r1
 8007370:	42ab      	cmp	r3, r5
 8007372:	dcf2      	bgt.n	800735a <_printf_i+0x216>
 8007374:	e7eb      	b.n	800734e <_printf_i+0x20a>
 8007376:	2500      	movs	r5, #0
 8007378:	f104 0619 	add.w	r6, r4, #25
 800737c:	e7f5      	b.n	800736a <_printf_i+0x226>
 800737e:	bf00      	nop
 8007380:	080075fd 	.word	0x080075fd
 8007384:	0800760e 	.word	0x0800760e

08007388 <memmove>:
 8007388:	4288      	cmp	r0, r1
 800738a:	b510      	push	{r4, lr}
 800738c:	eb01 0402 	add.w	r4, r1, r2
 8007390:	d902      	bls.n	8007398 <memmove+0x10>
 8007392:	4284      	cmp	r4, r0
 8007394:	4623      	mov	r3, r4
 8007396:	d807      	bhi.n	80073a8 <memmove+0x20>
 8007398:	1e43      	subs	r3, r0, #1
 800739a:	42a1      	cmp	r1, r4
 800739c:	d008      	beq.n	80073b0 <memmove+0x28>
 800739e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80073a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80073a6:	e7f8      	b.n	800739a <memmove+0x12>
 80073a8:	4402      	add	r2, r0
 80073aa:	4601      	mov	r1, r0
 80073ac:	428a      	cmp	r2, r1
 80073ae:	d100      	bne.n	80073b2 <memmove+0x2a>
 80073b0:	bd10      	pop	{r4, pc}
 80073b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80073b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80073ba:	e7f7      	b.n	80073ac <memmove+0x24>

080073bc <_sbrk_r>:
 80073bc:	b538      	push	{r3, r4, r5, lr}
 80073be:	4d06      	ldr	r5, [pc, #24]	; (80073d8 <_sbrk_r+0x1c>)
 80073c0:	2300      	movs	r3, #0
 80073c2:	4604      	mov	r4, r0
 80073c4:	4608      	mov	r0, r1
 80073c6:	602b      	str	r3, [r5, #0]
 80073c8:	f000 f840 	bl	800744c <_sbrk>
 80073cc:	1c43      	adds	r3, r0, #1
 80073ce:	d102      	bne.n	80073d6 <_sbrk_r+0x1a>
 80073d0:	682b      	ldr	r3, [r5, #0]
 80073d2:	b103      	cbz	r3, 80073d6 <_sbrk_r+0x1a>
 80073d4:	6023      	str	r3, [r4, #0]
 80073d6:	bd38      	pop	{r3, r4, r5, pc}
 80073d8:	20014628 	.word	0x20014628

080073dc <_realloc_r>:
 80073dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073e0:	4680      	mov	r8, r0
 80073e2:	4614      	mov	r4, r2
 80073e4:	460e      	mov	r6, r1
 80073e6:	b921      	cbnz	r1, 80073f2 <_realloc_r+0x16>
 80073e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073ec:	4611      	mov	r1, r2
 80073ee:	f7ff bc57 	b.w	8006ca0 <_malloc_r>
 80073f2:	b92a      	cbnz	r2, 8007400 <_realloc_r+0x24>
 80073f4:	f7ff fbe8 	bl	8006bc8 <_free_r>
 80073f8:	4625      	mov	r5, r4
 80073fa:	4628      	mov	r0, r5
 80073fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007400:	f000 f81b 	bl	800743a <_malloc_usable_size_r>
 8007404:	4284      	cmp	r4, r0
 8007406:	4607      	mov	r7, r0
 8007408:	d802      	bhi.n	8007410 <_realloc_r+0x34>
 800740a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800740e:	d812      	bhi.n	8007436 <_realloc_r+0x5a>
 8007410:	4621      	mov	r1, r4
 8007412:	4640      	mov	r0, r8
 8007414:	f7ff fc44 	bl	8006ca0 <_malloc_r>
 8007418:	4605      	mov	r5, r0
 800741a:	2800      	cmp	r0, #0
 800741c:	d0ed      	beq.n	80073fa <_realloc_r+0x1e>
 800741e:	42bc      	cmp	r4, r7
 8007420:	4622      	mov	r2, r4
 8007422:	4631      	mov	r1, r6
 8007424:	bf28      	it	cs
 8007426:	463a      	movcs	r2, r7
 8007428:	f7ff fbc0 	bl	8006bac <memcpy>
 800742c:	4631      	mov	r1, r6
 800742e:	4640      	mov	r0, r8
 8007430:	f7ff fbca 	bl	8006bc8 <_free_r>
 8007434:	e7e1      	b.n	80073fa <_realloc_r+0x1e>
 8007436:	4635      	mov	r5, r6
 8007438:	e7df      	b.n	80073fa <_realloc_r+0x1e>

0800743a <_malloc_usable_size_r>:
 800743a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800743e:	1f18      	subs	r0, r3, #4
 8007440:	2b00      	cmp	r3, #0
 8007442:	bfbc      	itt	lt
 8007444:	580b      	ldrlt	r3, [r1, r0]
 8007446:	18c0      	addlt	r0, r0, r3
 8007448:	4770      	bx	lr
	...

0800744c <_sbrk>:
 800744c:	4a04      	ldr	r2, [pc, #16]	; (8007460 <_sbrk+0x14>)
 800744e:	6811      	ldr	r1, [r2, #0]
 8007450:	4603      	mov	r3, r0
 8007452:	b909      	cbnz	r1, 8007458 <_sbrk+0xc>
 8007454:	4903      	ldr	r1, [pc, #12]	; (8007464 <_sbrk+0x18>)
 8007456:	6011      	str	r1, [r2, #0]
 8007458:	6810      	ldr	r0, [r2, #0]
 800745a:	4403      	add	r3, r0
 800745c:	6013      	str	r3, [r2, #0]
 800745e:	4770      	bx	lr
 8007460:	20014638 	.word	0x20014638
 8007464:	20014640 	.word	0x20014640

08007468 <_init>:
 8007468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800746a:	bf00      	nop
 800746c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800746e:	bc08      	pop	{r3}
 8007470:	469e      	mov	lr, r3
 8007472:	4770      	bx	lr

08007474 <_fini>:
 8007474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007476:	bf00      	nop
 8007478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800747a:	bc08      	pop	{r3}
 800747c:	469e      	mov	lr, r3
 800747e:	4770      	bx	lr
